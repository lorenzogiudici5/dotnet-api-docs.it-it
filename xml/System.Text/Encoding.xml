<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Encoding.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fc6c88231eb62b9546d10e0ac34250b51c4b7e10.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc6c88231eb62b9546d10e0ac34250b51c4b7e10</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>Represents a character encoding.</source>
          
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</source>
          <target state="translated">La codifica è il processo di trasformazione di un insieme di caratteri Unicode in una sequenza di byte.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>In contrast, decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</source>
          <target state="translated">Al contrario, la decodifica è il processo di trasformazione di una sequenza di byte codificati in un set di caratteri Unicode.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>For information about the Unicode Transformation Formats (UTFs) and other encodings supported by <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
          <target state="translated">Per informazioni sui formati di trasformazione Unicode (UTF) e altre codifiche supportate da <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>, vedere <bpt id="p1">[</bpt>codifica dei caratteri in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Note that <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> is intended to operate on Unicode characters instead of arbitrary binary data, such as byte arrays.</source>
          <target state="translated">Si noti che <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> deve operare su caratteri Unicode anziché i dati binari arbitrari, ad esempio matrici di byte.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>If you must encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se è necessario codificare dati binari arbitrari in testo, è necessario utilizzare un protocollo, ad esempio uuencode, verrà implementate da metodi quali <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The .NET Framework provides the following implementations of the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class to support current Unicode encodings and other encodings:</source>
          <target state="translated">.NET Framework fornisce le implementazioni seguenti del <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> classe per supportare le codifiche Unicode corrente e altre codifiche:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source><ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> encodes Unicode characters as single 7-bit ASCII characters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> codifica i caratteri Unicode come singoli caratteri ASCII a 7 bit.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>This encoding only supports character values between U+0000 and U+007F.</source>
          <target state="translated">Questa codifica supporta solo valori dei caratteri compresi tra U + 0000 e U + 007F.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Code page 20127.</source>
          <target state="translated">Tabella codici 20127.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Also available through the <ph id="ph1">&lt;xref:System.Text.Encoding.ASCII%2A&gt;</ph> property.</source>
          <target state="translated">Disponibile anche tramite il <ph id="ph1">&lt;xref:System.Text.Encoding.ASCII%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source><ph id="ph1">&lt;xref:System.Text.UTF7Encoding&gt;</ph> encodes Unicode characters using the UTF-7 encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UTF7Encoding&gt;</ph> codifica i caratteri Unicode utilizzando la codifica UTF-7.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>This encoding supports all Unicode character values.</source>
          <target state="translated">Questa codifica supporta tutti i valori dei caratteri Unicode.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Code page 65000.</source>
          <target state="translated">Tabella codici 65000.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Also available through the <ph id="ph1">&lt;xref:System.Text.Encoding.UTF7%2A&gt;</ph> property.</source>
          <target state="translated">Disponibile anche tramite il <ph id="ph1">&lt;xref:System.Text.Encoding.UTF7%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source><ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> encodes Unicode characters using the UTF-8 encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> codifica i caratteri Unicode utilizzando la codifica UTF-8.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>This encoding supports all Unicode character values.</source>
          <target state="translated">Questa codifica supporta tutti i valori dei caratteri Unicode.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Code page 65001.</source>
          <target state="translated">Tabella codici 65001.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Also available through the <ph id="ph1">&lt;xref:System.Text.Encoding.UTF8%2A&gt;</ph> property.</source>
          <target state="translated">Disponibile anche tramite il <ph id="ph1">&lt;xref:System.Text.Encoding.UTF8%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> encodes Unicode characters using the UTF-16 encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> codifica i caratteri Unicode utilizzando la codifica UTF-16.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Both little endian and big endian byte orders are supported.</source>
          <target state="translated">Sono supportati sia ordini little-endian che big-endian byte.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Also available through the <ph id="ph1">&lt;xref:System.Text.Encoding.Unicode%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Text.Encoding.BigEndianUnicode%2A&gt;</ph> property.</source>
          <target state="translated">Disponibile anche tramite il <ph id="ph1">&lt;xref:System.Text.Encoding.Unicode%2A&gt;</ph> proprietà e <ph id="ph2">&lt;xref:System.Text.Encoding.BigEndianUnicode%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source><ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> encodes Unicode characters using the UTF-32 encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> codifica i caratteri Unicode utilizzando la codifica UTF-32.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Both little endian (code page 12000) and big endian (code page 12001) byte orders are supported.</source>
          <target state="translated">Little endian (tabella codici 12000) sia dei byte big endian (tabella codici 12001) sono supportati gli ordini.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Also available through the <ph id="ph1">&lt;xref:System.Text.Encoding.UTF32%2A&gt;</ph> property.</source>
          <target state="translated">Disponibile anche tramite il <ph id="ph1">&lt;xref:System.Text.Encoding.UTF32%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class is primarily intended to convert between different encodings and Unicode.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> classe viene usata principalmente per la conversione tra codifiche diverse e Unicode.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Often one of the derived Unicode classes is the correct choice for your app.</source>
          <target state="translated">Spesso una delle classi derivate Unicode è la scelta corretta per l'app.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method to obtain other encodings, and call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> method to get a list of all encodings.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> metodo per ottenere altre codifiche e chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> metodo per ottenere un elenco di tutte le codifiche.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The following table lists the encodings supported by the .NET Framework.</source>
          <target state="translated">La tabella seguente elenca le codifiche supportate da .NET Framework.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>It lists each encoding's code page number and the values of the encoding's <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">Elenca numero di tabella codici del ogni codifica e i valori della codifica <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=nameWithType&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>An asterisk in the last column indicates that the code page is natively supported by the .NET Framework, regardless of the underlying platform.</source>
          <target state="translated">Un asterisco nell'ultima colonna indica che la tabella codici in modo nativo è supportata da .NET Framework, indipendentemente dalla piattaforma sottostante.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Note that code pages whose <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph> property corresponds to an international standard do not necessarily comply in full with that standard.</source>
          <target state="translated">Si noti che le pagine il cui codice <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph> proprietà corrisponde a uno standard internazionale non sono necessariamente conformi completamente con tale standard.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Code page</source>
          <target state="translated">Tabella codici</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Name</source>
          <target state="translated">nome</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Display name</source>
          <target state="translated">Nome visualizzato</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>.NET Framework support</source>
          <target state="translated">Supporto di .NET framework</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>37</source>
          <target state="translated">37</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM037</source>
          <target state="translated">IBM037</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (US-Canada)</source>
          <target state="translated">IBM EBCDIC (US-Canada)</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>437</source>
          <target state="translated">437</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM437</source>
          <target state="translated">IBM437</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>OEM United States</source>
          <target state="translated">Stati Uniti OEM</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>500</source>
          <target state="translated">500</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM500</source>
          <target state="translated">IBM500</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (International)</source>
          <target state="translated">IBM EBCDIC (internazionale)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>708</source>
          <target state="translated">708</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ASMO-708</source>
          <target state="translated">ASMO-708</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Arabic (ASMO 708)</source>
          <target state="translated">Arabo (ASMO 708)</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>720</source>
          <target state="translated">720</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>DOS-720</source>
          <target state="translated">DOS-720</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Arabic (DOS)</source>
          <target state="translated">Arabo (DOS)</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>737</source>
          <target state="translated">737</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ibm737</source>
          <target state="translated">ibm737</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Greek (DOS)</source>
          <target state="translated">Greco (DOS)</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>775</source>
          <target state="translated">775</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ibm775</source>
          <target state="translated">ibm775</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Baltic (DOS)</source>
          <target state="translated">Baltic (DOS)</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>850</source>
          <target state="translated">850</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ibm850</source>
          <target state="translated">ibm850</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Western European (DOS)</source>
          <target state="translated">Europa occidentale (DOS)</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>852</source>
          <target state="translated">852</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ibm852</source>
          <target state="translated">ibm852</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Central European (DOS)</source>
          <target state="translated">Europa centrale (DOS)</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>855</source>
          <target state="translated">855</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM855</source>
          <target state="translated">IBM855</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>OEM Cyrillic</source>
          <target state="translated">OEM Cirillico</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>857</source>
          <target state="translated">857</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ibm857</source>
          <target state="translated">ibm857</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Turkish (DOS)</source>
          <target state="translated">Turco (DOS)</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>858</source>
          <target state="translated">858</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM00858</source>
          <target state="translated">IBM00858</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>OEM Multilingual Latin I</source>
          <target state="translated">OEM latino multilingue I</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>860</source>
          <target state="translated">860</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM860</source>
          <target state="translated">IBM860</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Portuguese (DOS)</source>
          <target state="translated">Portoghese (DOS)</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>861</source>
          <target state="translated">861</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ibm861</source>
          <target state="translated">ibm861</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Icelandic (DOS)</source>
          <target state="translated">Islandese (DOS)</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>862</source>
          <target state="translated">862</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>DOS-862</source>
          <target state="translated">DOS-862</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Hebrew (DOS)</source>
          <target state="translated">Ebraico (DOS)</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>863</source>
          <target state="translated">863</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM863</source>
          <target state="translated">IBM863</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>French Canadian (DOS)</source>
          <target state="translated">Francese canadese (DOS)</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>864</source>
          <target state="translated">864</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM864</source>
          <target state="translated">IBM864</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Arabic (864)</source>
          <target state="translated">Arabic (864)</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>865</source>
          <target state="translated">865</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM865</source>
          <target state="translated">IBM865</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Nordic (DOS)</source>
          <target state="translated">Nordici (DOS)</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>866</source>
          <target state="translated">866</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>cp866</source>
          <target state="translated">cp866</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Cyrillic (DOS)</source>
          <target state="translated">Cirillico (DOS)</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>869</source>
          <target state="translated">869</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ibm869</source>
          <target state="translated">ibm869</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Greek, Modern (DOS)</source>
          <target state="translated">Greco, moderno (DOS)</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>870</source>
          <target state="translated">870</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM870</source>
          <target state="translated">IBM870</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Multilingual Latin-2)</source>
          <target state="translated">IBM EBCDIC (alfabeto latino multilingue-2)</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>874</source>
          <target state="translated">874</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-874</source>
          <target state="translated">windows-874</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Thai (Windows)</source>
          <target state="translated">Thai (Windows)</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>875</source>
          <target state="translated">875</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>cp875</source>
          <target state="translated">cp875</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Greek Modern)</source>
          <target state="translated">IBM EBCDIC (Greco moderno)</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>932</source>
          <target state="translated">932</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>shift_jis</source>
          <target state="translated">shift_jis</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Japanese (Shift-JIS)</source>
          <target state="translated">Giapponese Shift-JIS)</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>936</source>
          <target state="translated">936</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>gb2312</source>
          <target state="translated">gb2312</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Simplified (GB2312)</source>
          <target state="translated">Cinese semplificato (GB2312)</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>949</source>
          <target state="translated">949</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ks_c_5601-1987</source>
          <target state="translated">ks_c_5601-1987</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Korean</source>
          <target state="translated">Coreano</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>950</source>
          <target state="translated">950</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>big5</source>
          <target state="translated">big5</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Traditional (Big5)</source>
          <target state="translated">Cinese tradizionale (Big5)</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1026</source>
          <target state="translated">1026</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM1026</source>
          <target state="translated">IBM1026</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Turkish Latin-5)</source>
          <target state="translated">IBM EBCDIC (turco Latin-5)</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1047</source>
          <target state="translated">1047</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01047</source>
          <target state="translated">IBM01047</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM Latin-1</source>
          <target state="translated">IBM latino 1</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1140</source>
          <target state="translated">1140</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01140</source>
          <target state="translated">IBM01140</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (US-Canada-Euro)</source>
          <target state="translated">IBM EBCDIC (US-Canada-Euro)</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1141</source>
          <target state="translated">1141</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01141</source>
          <target state="translated">IBM01141</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Germany-Euro)</source>
          <target state="translated">IBM EBCDIC (Germania-Euro)</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1142</source>
          <target state="translated">1142</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01142</source>
          <target state="translated">IBM01142</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Denmark-Norway-Euro)</source>
          <target state="translated">IBM EBCDIC (Danimarca-Norvegia-Euro)</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1143</source>
          <target state="translated">1143</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01143</source>
          <target state="translated">IBM01143</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Finland-Sweden-Euro)</source>
          <target state="translated">IBM EBCDIC (Finlandia-Svezia-Euro)</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1144</source>
          <target state="translated">1144</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01144</source>
          <target state="translated">IBM01144</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Italy-Euro)</source>
          <target state="translated">IBM EBCDIC (Euro Italia)</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1145</source>
          <target state="translated">1145</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01145</source>
          <target state="translated">IBM01145</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Spain-Euro)</source>
          <target state="translated">IBM EBCDIC (Spagna-Euro)</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1146</source>
          <target state="translated">1146</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01146</source>
          <target state="translated">IBM01146</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (UK-Euro)</source>
          <target state="translated">IBM EBCDIC (Regno Unito-Euro)</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1147</source>
          <target state="translated">1147</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01147</source>
          <target state="translated">IBM01147</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (France-Euro)</source>
          <target state="translated">IBM EBCDIC (Francia Euro)</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1148</source>
          <target state="translated">1148</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01148</source>
          <target state="translated">IBM01148</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (International-Euro)</source>
          <target state="translated">IBM EBCDIC (International Euro)</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1149</source>
          <target state="translated">1149</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM01149</source>
          <target state="translated">IBM01149</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Icelandic-Euro)</source>
          <target state="translated">IBM EBCDIC (Islandese-Euro)</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1200</source>
          <target state="translated">1200</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>utf-16</source>
          <target state="translated">UTF-16</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Unicode</source>
          <target state="translated">Unicode</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1201</source>
          <target state="translated">1201</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>unicodeFFFE</source>
          <target state="translated">unicodeFFFE</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Unicode (Big endian)</source>
          <target state="translated">Unicode (Big endian)</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1250</source>
          <target state="translated">1250</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-1250</source>
          <target state="translated">windows-1250</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Central European (Windows)</source>
          <target state="translated">Europa centrale (Windows)</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1251</source>
          <target state="translated">1251</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-1251</source>
          <target state="translated">windows-1251</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Cyrillic (Windows)</source>
          <target state="translated">Cirillico (Windows)</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1252</source>
          <target state="translated">1252</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Windows-1252</source>
          <target state="translated">Windows-1252</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Western European (Windows)</source>
          <target state="translated">Europa occidentale (Windows)</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1253</source>
          <target state="translated">1253</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-1253</source>
          <target state="translated">windows-1253</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Greek (Windows)</source>
          <target state="translated">Greco (Windows)</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1254</source>
          <target state="translated">1254</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-1254</source>
          <target state="translated">windows-1254</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Turkish (Windows)</source>
          <target state="translated">Turco (Windows)</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1255</source>
          <target state="translated">1255</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-1255</source>
          <target state="translated">windows-1255</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Hebrew (Windows)</source>
          <target state="translated">Ebraico (Windows)</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1256</source>
          <target state="translated">1256</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-1256</source>
          <target state="translated">windows-1256</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Arabic (Windows)</source>
          <target state="translated">Arabo (Windows)</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1257</source>
          <target state="translated">1257</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-1257</source>
          <target state="translated">windows-1257</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Baltic (Windows)</source>
          <target state="translated">Baltico (Windows)</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1258</source>
          <target state="translated">1258</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>windows-1258</source>
          <target state="translated">windows-1258</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Vietnamese (Windows)</source>
          <target state="translated">Vietnamita (Windows)</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>1361</source>
          <target state="translated">1361</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Johab</source>
          <target state="translated">Johab</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Korean (Johab)</source>
          <target state="translated">Coreano (Johab)</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10000</source>
          <target state="translated">10000</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>macintosh</source>
          <target state="translated">Macintosh</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Western European (Mac)</source>
          <target state="translated">Europa occidentale (Mac)</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10001</source>
          <target state="translated">10001</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-japanese</source>
          <target state="translated">x-mac-giapponese</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Japanese (Mac)</source>
          <target state="translated">Giapponese (Mac)</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10002</source>
          <target state="translated">10002</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-chinesetrad</source>
          <target state="translated">x-mac-chinesetrad</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Traditional (Mac)</source>
          <target state="translated">Cinese tradizionale (Mac)</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10003</source>
          <target state="translated">10003</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-korean</source>
          <target state="translated">mac-x-coreano</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Korean (Mac)</source>
          <target state="translated">Coreano (Mac)</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10004</source>
          <target state="translated">10004</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-arabic</source>
          <target state="translated">x-mac-arabo</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Arabic (Mac)</source>
          <target state="translated">Arabo (Mac)</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10005</source>
          <target state="translated">10005</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-hebrew</source>
          <target state="translated">x-mac-ebraico</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Hebrew (Mac)</source>
          <target state="translated">Ebraico (Mac)</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10006</source>
          <target state="translated">10006</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-greek</source>
          <target state="translated">Greco-x-mac</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Greek (Mac)</source>
          <target state="translated">Greco (Mac)</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10007</source>
          <target state="translated">10007</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-cyrillic</source>
          <target state="translated">x-mac-alfabeto cirillico</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Cyrillic (Mac)</source>
          <target state="translated">Cirillico (Mac)</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10008</source>
          <target state="translated">10008</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-chinesesimp</source>
          <target state="translated">mac-x-chinesesimp</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Simplified (Mac)</source>
          <target state="translated">Cinese semplificato (Mac)</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10010</source>
          <target state="translated">10010</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-romanian</source>
          <target state="translated">x-mac-rumeno</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Romanian (Mac)</source>
          <target state="translated">Romanian (Mac)</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10017</source>
          <target state="translated">10017</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-ukrainian</source>
          <target state="translated">x-mac-ucraino</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Ukrainian (Mac)</source>
          <target state="translated">Ucraino (Mac)</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10021</source>
          <target state="translated">10021</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-thai</source>
          <target state="translated">x-mac-thai</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Thai (Mac)</source>
          <target state="translated">Thai (Mac)</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10029</source>
          <target state="translated">10029</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-ce</source>
          <target state="translated">mac-x-ce</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Central European (Mac)</source>
          <target state="translated">Europa centrale (Mac)</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10079</source>
          <target state="translated">10079</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-icelandic</source>
          <target state="translated">x-mac-islandese</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Icelandic (Mac)</source>
          <target state="translated">Islandese (Mac)</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10081</source>
          <target state="translated">10081</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-turkish</source>
          <target state="translated">x-mac-turco</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Turkish (Mac)</source>
          <target state="translated">Turco (Mac)</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>10082</source>
          <target state="translated">10082</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-mac-croatian</source>
          <target state="translated">mac-x-croato</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Croatian (Mac)</source>
          <target state="translated">Croato (Mac)</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>12000</source>
          <target state="translated">12000</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>utf-32</source>
          <target state="translated">utf-32</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Unicode (UTF-32)</source>
          <target state="translated">Unicode (UTF-32)</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>12001</source>
          <target state="translated">12001</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>utf-32BE</source>
          <target state="translated">utf-32BE</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Unicode (UTF-32 Big endian)</source>
          <target state="translated">Unicode (UTF-32 Big endian)</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20000</source>
          <target state="translated">20000</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-Chinese-CNS</source>
          <target state="translated">x-Chinese-CNS</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Traditional (CNS)</source>
          <target state="translated">Cinese tradizionale (CN)</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20001</source>
          <target state="translated">20001</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp20001</source>
          <target state="translated">x-cp20001</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>TCA Taiwan</source>
          <target state="translated">TCA Taiwan</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20002</source>
          <target state="translated">20002</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-Chinese-Eten</source>
          <target state="translated">x-cinese-Eten</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Traditional (Eten)</source>
          <target state="translated">Cinese tradizionale (Eten)</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20003</source>
          <target state="translated">20003</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp20003</source>
          <target state="translated">x-cp20003</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM5550 Taiwan</source>
          <target state="translated">IBM5550 Taiwan</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20004</source>
          <target state="translated">20004</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp20004</source>
          <target state="translated">x-cp20004</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>TeleText Taiwan</source>
          <target state="translated">TeleText Taiwan</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20005</source>
          <target state="translated">20005</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp20005</source>
          <target state="translated">x-cp20005</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Wang Taiwan</source>
          <target state="translated">Wang Taiwan</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20105</source>
          <target state="translated">20105</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-IA5</source>
          <target state="translated">x-IA5</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Western European (IA5)</source>
          <target state="translated">Europa occidentale (IA5)</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20106</source>
          <target state="translated">20106</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-IA5-German</source>
          <target state="translated">x-IA5-Tedesco</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>German (IA5)</source>
          <target state="translated">German (IA5)</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20107</source>
          <target state="translated">20107</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-IA5-Swedish</source>
          <target state="translated">x-IA5-svedese</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Swedish (IA5)</source>
          <target state="translated">Svedese (IA5)</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20108</source>
          <target state="translated">20108</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-IA5-Norwegian</source>
          <target state="translated">x-IA5-Norwegian</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Norwegian (IA5)</source>
          <target state="translated">Norvegese (IA5)</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20127</source>
          <target state="translated">20127</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>us-ascii</source>
          <target state="translated">us-ascii</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>US-ASCII</source>
          <target state="translated">US-ASCII</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20261</source>
          <target state="translated">20261</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp20261</source>
          <target state="translated">x-cp20261</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>T.61</source>
          <target state="translated">T.61</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20269</source>
          <target state="translated">20269</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp20269</source>
          <target state="translated">x-cp20269</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISO-6937</source>
          <target state="translated">ISO-6937</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20273</source>
          <target state="translated">20273</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM273</source>
          <target state="translated">IBM273</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Germany)</source>
          <target state="translated">IBM EBCDIC (Germania)</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20277</source>
          <target state="translated">20277</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM277</source>
          <target state="translated">IBM277</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Denmark-Norway)</source>
          <target state="translated">IBM EBCDIC (Danimarca-Norvegia)</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20278</source>
          <target state="translated">20278</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM278</source>
          <target state="translated">IBM278</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Finland-Sweden)</source>
          <target state="translated">IBM EBCDIC (Finlandia Svezia)</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20280</source>
          <target state="translated">20280</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM280</source>
          <target state="translated">IBM280</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Italy)</source>
          <target state="translated">IBM EBCDIC (Italia)</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20284</source>
          <target state="translated">20284</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM284</source>
          <target state="translated">IBM284</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Spain)</source>
          <target state="translated">IBM EBCDIC (Spagna)</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20285</source>
          <target state="translated">20285</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM285</source>
          <target state="translated">IBM285</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (UK)</source>
          <target state="translated">IBM EBCDIC (UK)</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20290</source>
          <target state="translated">20290</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM290</source>
          <target state="translated">IBM290</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Japanese katakana)</source>
          <target state="translated">IBM EBCDIC (giapponese katakana)</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20297</source>
          <target state="translated">20297</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM297</source>
          <target state="translated">IBM297</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (France)</source>
          <target state="translated">IBM EBCDIC (Francia)</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20420</source>
          <target state="translated">20420</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM420</source>
          <target state="translated">IBM420</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Arabic)</source>
          <target state="translated">IBM EBCDIC (arabo)</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20423</source>
          <target state="translated">20423</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM423</source>
          <target state="translated">IBM423</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Greek)</source>
          <target state="translated">IBM EBCDIC (greco)</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20424</source>
          <target state="translated">20424</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM424</source>
          <target state="translated">IBM424</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Hebrew)</source>
          <target state="translated">IBM EBCDIC (ebraico)</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20833</source>
          <target state="translated">20833</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-EBCDIC-KoreanExtended</source>
          <target state="translated">x-EBCDIC-KoreanExtended</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Korean Extended)</source>
          <target state="translated">IBM EBCDIC (coreano esteso)</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20838</source>
          <target state="translated">20838</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM-Thai</source>
          <target state="translated">IBM-Thai</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Thai)</source>
          <target state="translated">IBM EBCDIC (Thai)</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20866</source>
          <target state="translated">20866</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>koi8-r</source>
          <target state="translated">koi8-r</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Cyrillic (KOI8-R)</source>
          <target state="translated">Cirillico (KOI8-R)</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20871</source>
          <target state="translated">20871</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM871</source>
          <target state="translated">IBM871</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Icelandic)</source>
          <target state="translated">IBM EBCDIC (Islandese)</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20880</source>
          <target state="translated">20880</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM880</source>
          <target state="translated">IBM880</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Cyrillic Russian)</source>
          <target state="translated">IBM EBCDIC (russo cirillico)</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20905</source>
          <target state="translated">20905</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM905</source>
          <target state="translated">IBM905</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Turkish)</source>
          <target state="translated">IBM EBCDIC (Turco)</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20924</source>
          <target state="translated">20924</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM00924</source>
          <target state="translated">IBM00924</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM Latin-1</source>
          <target state="translated">IBM latino 1</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20932</source>
          <target state="translated">20932</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>EUC-JP</source>
          <target state="translated">EUC-JP</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Japanese (JIS 0208-1990 and 0212-1990)</source>
          <target state="translated">Giapponese (JIS 0208-1990 e 0212-1990)</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20936</source>
          <target state="translated">20936</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp20936</source>
          <target state="translated">x-cp20936</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Simplified (GB2312-80)</source>
          <target state="translated">Cinese semplificato (GB2312-80)</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>20949</source>
          <target state="translated">20949</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp20949</source>
          <target state="translated">x-cp20949</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Korean Wansung</source>
          <target state="translated">Coreano Wansung</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>21025</source>
          <target state="translated">21025</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>cp1025</source>
          <target state="translated">cp1025</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>IBM EBCDIC (Cyrillic Serbian-Bulgarian)</source>
          <target state="translated">IBM EBCDIC (Serbo-bulgaro cirillico)</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>21866</source>
          <target state="translated">21866</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>koi8-u</source>
          <target state="translated">koi8-u</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Cyrillic (KOI8-U)</source>
          <target state="translated">Cirillico (KOI8-U)</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28591</source>
          <target state="translated">28591</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-1</source>
          <target state="translated">iso-8859-1</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Western European (ISO)</source>
          <target state="translated">Europa occidentale (ISO)</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28592</source>
          <target state="translated">28592</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-2</source>
          <target state="translated">iso-8859-2</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Central European (ISO)</source>
          <target state="translated">Europa centrale (ISO)</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28593</source>
          <target state="translated">28593</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-3</source>
          <target state="translated">iso-8859-3</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Latin 3 (ISO)</source>
          <target state="translated">Latin 3 (ISO)</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28594</source>
          <target state="translated">28594</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-4</source>
          <target state="translated">iso-8859-4</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Baltic (ISO)</source>
          <target state="translated">Baltic (ISO)</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28595</source>
          <target state="translated">28595</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-5</source>
          <target state="translated">iso-8859-5</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Cyrillic (ISO)</source>
          <target state="translated">Cirillico (ISO)</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28596</source>
          <target state="translated">28596</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-6</source>
          <target state="translated">iso-8859-6</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Arabic (ISO)</source>
          <target state="translated">Arabo (ISO)</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28597</source>
          <target state="translated">28597</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-7</source>
          <target state="translated">iso-8859-7</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Greek (ISO)</source>
          <target state="translated">Greco (ISO)</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28598</source>
          <target state="translated">28598</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-8</source>
          <target state="translated">iso-8859-8</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Hebrew (ISO-Visual)</source>
          <target state="translated">Ebraico (ISO-Visual)</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28599</source>
          <target state="translated">28599</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-9</source>
          <target state="translated">iso-8859-9</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Turkish (ISO)</source>
          <target state="translated">Turco (ISO)</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28603</source>
          <target state="translated">28603</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-13</source>
          <target state="translated">iso-8859-13</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Estonian (ISO)</source>
          <target state="translated">Estone (ISO)</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>28605</source>
          <target state="translated">28605</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-15</source>
          <target state="translated">iso-8859-15</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Latin 9 (ISO)</source>
          <target state="translated">Latino 9 (ISO)</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>29001</source>
          <target state="translated">29001</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-Europa</source>
          <target state="translated">x-Europa</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Europa</source>
          <target state="translated">Europa</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>38598</source>
          <target state="translated">38598</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-8859-8-i</source>
          <target state="translated">iso-8859-8-i</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Hebrew (ISO-Logical)</source>
          <target state="translated">Ebraico (ISO-logico)</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>50220</source>
          <target state="translated">50220</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-2022-jp</source>
          <target state="translated">iso-2022-jp</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Japanese (JIS)</source>
          <target state="translated">Giapponese (JIS)</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>50221</source>
          <target state="translated">50221</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>csISO2022JP</source>
          <target state="translated">csISO2022JP</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Japanese (JIS-Allow 1 byte Kana)</source>
          <target state="translated">Giapponese (JIS-consente Kana a 1 byte)</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>50222</source>
          <target state="translated">50222</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-2022-jp</source>
          <target state="translated">iso-2022-jp</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Japanese (JIS-Allow 1 byte Kana - SO/SI)</source>
          <target state="translated">Giapponese (JIS-consente di 1 byte Kana - così / SI)</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>50225</source>
          <target state="translated">50225</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>iso-2022-kr</source>
          <target state="translated">iso-2022-kr</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Korean (ISO)</source>
          <target state="translated">Coreano (ISO)</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>50227</source>
          <target state="translated">50227</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-cp50227</source>
          <target state="translated">x-cp50227</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Simplified (ISO-2022)</source>
          <target state="translated">Cinese semplificato (ISO-2022)</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>51932</source>
          <target state="translated">51932</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>euc-jp</source>
          <target state="translated">euc-jp</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Japanese (EUC)</source>
          <target state="translated">Giapponese (EUC)</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>51936</source>
          <target state="translated">51936</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>EUC-CN</source>
          <target state="translated">EUC-CN</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Simplified (EUC)</source>
          <target state="translated">Cinese semplificato (EUC)</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>51949</source>
          <target state="translated">51949</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>euc-kr</source>
          <target state="translated">euc-kr</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Korean (EUC)</source>
          <target state="translated">Korean (EUC)</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>52936</source>
          <target state="translated">52936</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>hz-gb-2312</source>
          <target state="translated">hz-gb-2312</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Simplified (HZ)</source>
          <target state="translated">Cinese semplificato (HZ)</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>54936</source>
          <target state="translated">54936</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>GB18030</source>
          <target state="translated">GB18030</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Chinese Simplified (GB18030)</source>
          <target state="translated">Cinese semplificato (GB18030)</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57002</source>
          <target state="translated">57002</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-de</source>
          <target state="translated">x-iscii-de</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Devanagari</source>
          <target state="translated">ISCII Devanagari</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57003</source>
          <target state="translated">57003</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-be</source>
          <target state="translated">x-iscii-be</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Bengali</source>
          <target state="translated">ISCII bengalese</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57004</source>
          <target state="translated">57004</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-ta</source>
          <target state="translated">x-iscii-ta</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Tamil</source>
          <target state="translated">ISCII Tamil</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57005</source>
          <target state="translated">57005</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-te</source>
          <target state="translated">x-iscii-te</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Telugu</source>
          <target state="translated">ISCII Telugu</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57006</source>
          <target state="translated">57006</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-as</source>
          <target state="translated">x-iscii-as</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Assamese</source>
          <target state="translated">ISCII Assamese</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57007</source>
          <target state="translated">57007</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-or</source>
          <target state="translated">x-iscii-or</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Oriya</source>
          <target state="translated">Carattere ISCII</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57008</source>
          <target state="translated">57008</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-ka</source>
          <target state="translated">x-iscii-ka</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Kannada</source>
          <target state="translated">ISCII Kannada</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57009</source>
          <target state="translated">57009</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-ma</source>
          <target state="translated">x-iscii-ma</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Malayalam</source>
          <target state="translated">Carattere ISCII</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57010</source>
          <target state="translated">57010</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-gu</source>
          <target state="translated">x-iscii-gu</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Gujarati</source>
          <target state="translated">Carattere ISCII</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>57011</source>
          <target state="translated">57011</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>x-iscii-pa</source>
          <target state="translated">x-iscii-pa</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>ISCII Punjabi</source>
          <target state="translated">ISCII Punjabi</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>65000</source>
          <target state="translated">65000</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>utf-7</source>
          <target state="translated">UTF-7</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Unicode (UTF-7)</source>
          <target state="translated">Unicode (UTF-7)</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>65001</source>
          <target state="translated">65001</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>utf-8</source>
          <target state="translated">utf-8</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Unicode (UTF-8)</source>
          <target state="translated">Unicode (UTF-8)</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>✓</source>
          <target state="translated">✓</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%28System.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%29&gt;</ph> methods to get the Greek (Windows) code page encoding.</source>
          <target state="translated">L'esempio seguente chiama il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%28System.Int32%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%29&gt;</ph> metodi per ottenere il greco (Windows) codifica del codice.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>It compares the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> objects returned by the method calls to show that they are equal, and then maps displays the Unicode code point and the corresponding code page value for each character in the Greek alphabet.</source>
          <target state="translated">Confronta il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> gli oggetti restituiti dalle chiamate di metodo per mostrare che sono uguali, e quindi esegue il mapping viene visualizzato il punto di codice Unicode e il valore di tabella codici corrispondente per ogni carattere dell'alfabeto greco.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The UTF-16 and the UTF-32 encoders can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first).</source>
          <target state="translated">UTF-16 e UTF-32 codificatori possono utilizzare l'ordine dei byte big-endian (byte più significativo primo) o il little endian (byte meno significativo prima).</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>For example, the Latin Capital Letter A (U+0041) is serialized as follows (in hexadecimal):</source>
          <target state="translated">Ad esempio, l'alfabeto latino (U + 0041) viene serializzato come segue (in esadecimale):</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>UTF-16 big endian byte order: 00 41</source>
          <target state="translated">Ordine dei byte big endian UTF-16: 00 41</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>UTF-16 little endian byte order: 41 00</source>
          <target state="translated">Ordine dei byte little-endian UTF-16 little: 41 00</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>UTF-32 big endian byte order: 00 00 00 41</source>
          <target state="translated">Ordine dei byte big endian UTF-32: 00 00 00 41</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>UTF-32 little endian byte order: 41 00 00 00</source>
          <target state="translated">Ordine dei byte little-endian little UTF-32: 41 00 00 00</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>It is generally more efficient to store Unicode characters using the native byte order.</source>
          <target state="translated">È in genere più efficiente per archiviare i caratteri Unicode utilizzando l'ordine dei byte nativo.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</source>
          <target state="translated">Ad esempio, è preferibile utilizzare l'ordine dei byte little-endian little su piattaforme little-endian, ad esempio computer Intel.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetPreamble%2A&gt;</ph> method retrieves an array of bytes that includes the byte order mark (BOM).</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetPreamble%2A&gt;</ph> metodo recupera una matrice di byte contenente il byte order mark (BOM).</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>If this byte array is prefixed to an encoded stream, it helps the decoder to identify the encoding format used.</source>
          <target state="translated">Se questa matrice di byte è preceduta da un flusso codificato, consente al decodificatore per identificare il formato di codifica utilizzato.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>For more information on byte order and the byte order mark, see The Unicode Standard at the <bpt id="p1">[</bpt>Unicode home page<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=37123)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'ordine dei byte e il byte order mark, vedere lo Unicode Standard nella <bpt id="p1">[</bpt>home page di Unicode<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=37123)</ept>.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Note that the encoding classes allow errors to:</source>
          <target state="translated">Si noti che le classi di codifica consentono agli errori di:</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Silently change to a "?" character.</source>
          <target state="translated">Cambiare automaticamente a un "?" caratteri.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Use a "best fit" character.</source>
          <target state="translated">Utilizzare un carattere "adatta".</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Change to an application-specific behavior through use of the <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph> classes with the U+FFFD Unicode replacement character.</source>
          <target state="translated">Passare a un comportamento specifico dell'applicazione tramite l'utilizzo del <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph> classi con il carattere di sostituzione Unicode U + FFFD.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>You should throw an exception on any data stream error.</source>
          <target state="translated">Per qualsiasi errore di flusso di dati, è necessario generare un'eccezione.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>An app either uses a "throwonerror" flag when applicable or uses the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> classes.</source>
          <target state="translated">Un'applicazione utilizza un flag "throwonerror" quando applicabile o utilizza il <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> classi.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>Best fit fallback is often not recommended because it can cause data loss or confusion and is slower than simple character replacements.</source>
          <target state="translated">Il fallback più appropriato spesso non è consigliabile perché può causare la perdita di dati o confusione ed è più lenta rispetto al sostituzioni di caratteri semplice.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>For ANSI encodings, the best fit behavior is the default.</source>
          <target state="translated">Per le codifiche ANSI, il comportamento più appropriato è il valore predefinito.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The following example converts a string from one encoding to another.</source>
          <target state="translated">Nell'esempio seguente converte una stringa da una codifica a altra.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The byte[] array is the only type in this example that contains the encoded data.</source>
          <target state="translated">La matrice di byte [] è l'unico tipo in questo esempio che contiene i dati codificati.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.Encoding">
          <source>The .NET Char and String types are themselves Unicode, so the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> call decodes the data back to Unicode.</source>
          <target state="translated">I tipi .NET Char e String sono Unicode, pertanto la <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> chiamata decodifica i dati Unicode.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> class.</source>
          
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> class.</source>
          
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor">
          <source>Derived classes override this constructor.</source>
          <target state="translated">Le classi derivate eseguire l'override di questo costruttore.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source>The code page identifier of the preferred encoding.</source>
          
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source>0, to use the default encoding.</source>
          
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> class that corresponds to the specified code page.</source>
          
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source>Derived classes override this constructor.</source>
          <target state="translated">Le classi derivate eseguire l'override di questo costruttore.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source>Calls to this constructor from a derived class create an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object that uses best-fit fallback for both encoding and decoding operations.</source>
          <target state="translated">Le chiamate a questo costruttore da una classe derivata di creare un <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> oggetto che usa il fallback con mapping più appropriato per la codifica e le operazioni di decodifica.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source>Both the <ph id="ph1">&lt;xref:System.Text.Encoding.DecoderFallback%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.EncoderFallback%2A&gt;</ph> properties are read-only and cannot be modified.</source>
          <target state="translated">Sia il <ph id="ph1">&lt;xref:System.Text.Encoding.DecoderFallback%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.EncoderFallback%2A&gt;</ph> proprietà sono di sola lettura e non può essere modificata.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source>To control the fallback strategy for a class derived from <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29&gt;</ph> constructor.</source>
          <target state="translated">Per controllare la strategia di fallback per una classe derivata da <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>, chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29&gt;</ph> costruttore.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="codePage" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The encoding code page identifier.</source>
          
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.</source>
          
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>This constructor is <ph id="ph1">`protected`</ph>; derived classes override it.</source>
          <target state="translated">Questo costruttore è <ph id="ph1">`protected`</ph>; derivata classi eseguirne l'override.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>You call this constructor from a derived class to control the fallback encoding and decoding strategies.</source>
          <target state="translated">Chiamare questo costruttore da una classe derivata per controllare il fallback di codifica e decodifica strategie.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class constructors create read-only encoding objects that don't allow encoder or decoder fallback to be set after the object is created.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> costruttori della classe creano oggetti codifica di sola lettura che non consentono al codificatore o fallback del decodificatore da impostare dopo la creazione dell'oggetto.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>If either <ph id="ph1">`encoderFallback`</ph> or <ph id="ph2">`decoderFallback`</ph> is null, best-fit fallback is used as the corresponding fallback strategy.</source>
          <target state="translated">Se il valore <ph id="ph1">`encoderFallback`</ph> o <ph id="ph2">`decoderFallback`</ph> è null, il fallback con mapping più appropriato viene utilizzato come la relativa strategia di fallback.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source><ph id="ph1">&lt;paramref name="codePage" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.ASCII">
          <source>Gets an encoding for the ASCII (7-bit) character set.</source>
          
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>An  encoding for the ASCII (7-bit) character set.</source>
          <target state="translated">Codifica per il set di caratteri ASCII (7 bit).</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F.</source>
          <target state="translated">Caratteri ASCII sono limitati ai primi 128 caratteri Unicode, da U + 0000 a U + 007F.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>When selecting the ASCII encoding for your app, consider the following:</source>
          <target state="translated">Quando si seleziona la codifica ASCII per l'app, considerare quanto segue:</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>The ASCII encoding is usually appropriate for protocols that require ASCII.</source>
          <target state="translated">La codifica ASCII è in genere appropriata per i protocolli che richiedono ASCII.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>If you requires 8-bit encoding (which is sometimes incorrectly referred to as "ASCII"), the UTF-8 encoding is recommended over the ASCII encoding.</source>
          <target state="translated">Se si richiede la codifica a 8 bit (definito a volte in modo non corretto per "ASCII"), la codifica UTF-8 è preferibile ASCII codifica.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>For the characters 0-7F, the results are identical, but use of UTF-8 avoids data loss by allowing representation of all Unicode characters that are representable.</source>
          <target state="translated">Per i caratteri 0-7F, i risultati sono identici, ma utilizzo UTF-8 consente di evitare la perdita di dati, consentendo la rappresentazione di tutti i caratteri Unicode rappresentabile.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>Note that the ASCII encoding has an 8th bit ambiguity that can allow malicious use, but the UTF-8 encoding removes ambiguity about the 8th bit.</source>
          <target state="translated">Si noti che la codifica ASCII è un 8 bit ambiguità che può consentire l'uso dannoso, ma la codifica UTF-8 rimuove ambiguità di 8 bit.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>Prior to the .NET Framework version 2.0, the .NET Framework allowed spoofing by ignoring the 8th bit.</source>
          <target state="translated">Prima di .NET Framework versione 2.0, .NET Framework consentono lo spoofing ignorando l'8 bit.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>Beginning with the .NET Framework 2.0, non-ASCII code points fall back during decoding.</source>
          <target state="translated">A partire da .NET Framework 2.0, i punti di codice non ASCII fallback durante la decodifica.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>The <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object that is returned by this property might not have the appropriate behavior for your app.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> oggetto restituito da questa proprietà potrebbe non essere il comportamento appropriato per l'app.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</source>
          <target state="translated">Usa il fallback di sostituzione per sostituire ogni stringa che non può codificare e ogni byte che non può decodificare con un punto interrogativo ("?") caratteri.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>Instead, you can call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29&gt;</ph> method to instantiate an <ph id="ph2">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object whose fallback is either an <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> or a <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">In alternativa, è possibile chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29&gt;</ph> metodo per creare un'istanza di un <ph id="ph2">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> oggetto il cui fallback è un <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> o un <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.ASCII">
          <source>The following example demonstrates the effect of the ASCII encoding on characters that are outside the ASCII range.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'effetto della codifica ASCII sui caratteri che non rientrano nell'intervallo ASCII.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>Gets an encoding for the UTF-16 format that uses the big endian byte order.</source>
          
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>An encoding object for the UTF-16 format that uses the big endian byte order.</source>
          <target state="translated">Oggetto di codifica per il formato UTF-16 che usa l'ordine dei byte big endian.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object that is returned by this property may not have the appropriate behavior for your app.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> oggetto restituito da questa proprietà potrebbe non essere il comportamento appropriato per l'app.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</source>
          <target state="translated">Usa il fallback di sostituzione per sostituire ogni stringa che non può codificare e ogni byte che non può decodificare con un punto interrogativo ("?") caratteri.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>Instead, you can call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> constructor to instantiate a big endian <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object whose fallback is either an <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> or a <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">In alternativa, è possibile chiamare il <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> costruttore per creare un'istanza di un big endian <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> oggetto il cui fallback è un <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> o <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>The returned <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object has <ph id="ph2">&lt;xref:System.Text.Encoding.BodyName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Text.Encoding.HeaderName%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> properties, which yield the name "unicodeFFFE".</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> oggetto ha <ph id="ph2">&lt;xref:System.Text.Encoding.BodyName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Text.Encoding.HeaderName%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> proprietà, vale a dire il nome "unicodeFFFE".</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>Although the UTF-16 big endian byte order mark is hexadecimal FEFF, the name "unicodeFFFE" was chosen because the byte order mark appears as hexadecimal FFFE on little endian Windows computers.</source>
          <target state="translated">Anche se il contrassegno di ordine dei byte big endian UTF-16 è il valore esadecimale FEFF, il nome "unicodeFFFE" è stato scelto perché l'ordine dei byte viene visualizzato come indicatore nel computer Windows little endian.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>The following example reads a text file with a UTF-16 encoding using the big endian byte order.</source>
          <target state="translated">Nell'esempio seguente viene letto un file di testo con una codifica UTF-16 Usa l'ordine dei byte big-endian.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BigEndianUnicode">
          <source>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.BodyName">
          <source>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.</source>
          
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>A name for the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that can be used with mail agent body tags.</source>
          <target state="translated">Nome dell'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente che può essere usato con i tag body degli agenti di posta.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>-or-</source>
          <target state="translated">-oppure-</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>An empty string (""), if the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> cannot be used.</source>
          <target state="translated">Stringa vuota (""), se non è possibile usare l'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>If you need an encoding for a body name, you should call <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> with the <ph id="ph2">&lt;xref:System.Text.Encoding.BodyName%2A&gt;</ph> property.</source>
          <target state="translated">Se è necessaria una codifica per un nome del corpo, è necessario chiamare <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> con il <ph id="ph2">&lt;xref:System.Text.Encoding.BodyName%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>Often the method retrieves a different encoding from the test encoding furnished in the call.</source>
          <target state="translated">Spesso il metodo recupera una codifica diversa dalla codifica di test specificati nella chiamata.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>Generally only email applications need to retrieve such an encoding; most other applications that need to describe an encoding should use its <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph>.</source>
          <target state="translated">In genere necessario recuperare tale codifica; solo le applicazioni di posta elettronica la maggior parte delle altre applicazioni che è necessario descrivere una codifica devono utilizzare il relativo <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>In some cases, the value of the <ph id="ph1">&lt;xref:System.Text.Encoding.BodyName%2A&gt;</ph> property corresponds to the international standard that defines that encoding.</source>
          <target state="translated">In alcuni casi, il valore di <ph id="ph1">&lt;xref:System.Text.Encoding.BodyName%2A&gt;</ph> proprietà corrisponde allo standard internazionale che definisce tale codifica.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>This doesn't mean that the implementation complies in full with that standard.</source>
          <target state="translated">Questo non significa che l'implementazione sia conforme in modo completo con tale standard.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente recupera i nomi diversi per ogni tipo di codifica e visualizza le codifiche con uno o più nomi diversi da <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.BodyName">
          <source>It displays <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> but does not compare against it.</source>
          <target state="translated">Visualizza <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> ma non compare su di essa.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Clone">
          <source>When overridden in a derived class, creates a shallow copy of the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object.</source>
          
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Clone">
          <source>A copy of the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object.</source>
          
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Clone">
          <source>The clone is writable even if the original <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is read-only.</source>
          <target state="translated">La copia è modificabile anche se originale <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> oggetto è di sola lettura.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Clone">
          <source>Therefore, the properties of the clone can be modified.</source>
          <target state="translated">Di conseguenza, le proprietà del clone possono essere modificate.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Clone">
          <source>A shallow copy of an object is a copy of the object only.</source>
          <target state="translated">Una copia superficiale di un oggetto è una copia del solo oggetto.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Clone">
          <source>If the object contains references to other objects, the shallow copy does not create copies of the referred objects.</source>
          <target state="translated">Se l'oggetto contiene riferimenti ad altri oggetti, il duplicato superficiale non crea copie degli oggetti cui viene fatto riferimento.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Clone">
          <source>It refers to the original objects instead.</source>
          <target state="translated">Fa riferimento all'oggetto originale invece.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Clone">
          <source>In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object.</source>
          <target state="translated">Al contrario, una copia completa di un oggetto crea una copia dell'oggetto e una copia di tutti gli elementi direttamente o indirettamente a cui fa riferimento l'oggetto.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.CodePage">
          <source>When overridden in a derived class, gets the code page identifier of the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.CodePage">
          <source>The code page identifier of the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated">Identificatore della tabella codici dell'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.CodePage">
          <source>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente recupera i nomi diversi per ogni tipo di codifica e visualizza le codifiche con uno o più nomi diversi da <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.CodePage">
          <source>It displays <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> but does not compare against it.</source>
          <target state="translated">Visualizza <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> ma non compare su di essa.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>Converts a byte array from one encoding to another.</source>
          
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>The encoding format of <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept>.</source>
          
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>The target encoding format.</source>
          
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>The bytes to convert.</source>
          
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>Converts an entire byte array from one encoding to another.</source>
          
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> containing the results of converting <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> from <ph id="ph3">&lt;paramref name="srcEncoding" /&gt;</ph> to <ph id="ph4">&lt;paramref name="dstEncoding" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>The following example converts a Unicode-encoded string to an ASCII-encoded string.</source>
          <target state="translated">Nell'esempio seguente converte una stringa codificata in formato Unicode in una stringa con codifica ASCII.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>Because the ASCII encoding object returned by the <ph id="ph1">&lt;xref:System.Text.Encoding.ASCII%2A&gt;</ph> property uses replacement fallback and the Pi character is not part of the ASCII character set, the Pi character is replaced with a question mark, as the output from the example shows.</source>
          <target state="translated">Poiché l'oggetto di codifica ASCII restituito dal <ph id="ph1">&lt;xref:System.Text.Encoding.ASCII%2A&gt;</ph> proprietà Usa il fallback di sostituzione e il carattere di Pi non fa parte del set di caratteri ASCII, il carattere di pi greco viene sostituito con un punto interrogativo, come illustrato nell'esempio di output.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="srcEncoding" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="dstEncoding" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source><bpt id="p1">**</bpt>srcEncoding.<ept id="p1">**</ept></source>
          
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source><bpt id="p1">**</bpt>dstEncoding.<ept id="p1">**</ept></source>
          
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>The encoding of the source array, <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept>.</source>
          
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>The encoding of the output array.</source>
          
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>The array of bytes to convert.</source>
          
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first element of <bpt id="p1">&lt;c&gt;</bpt>bytes<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to convert.</source>
          
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>Converts a range of bytes in a byte array from one encoding to another.</source>
          
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> containing the result of converting a range of bytes in <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph> from <ph id="ph3">&lt;paramref name="srcEncoding" /&gt;</ph> to <ph id="ph4">&lt;paramref name="dstEncoding" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="srcEncoding" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="dstEncoding" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not specify a valid range in the byte array.</source>
          
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source><bpt id="p1">**</bpt>srcEncoding.<ept id="p1">**</ept></source>
          
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source><bpt id="p1">**</bpt>dstEncoding.<ept id="p1">**</ept></source>
          
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.DecoderFallback">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Text.DecoderFallback" /&gt;</ph> object for the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object.</source>
          
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.DecoderFallback">
          <source>The decoder fallback object for the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object.</source>
          <target state="translated">Oggetto di fallback del decodificatore per l'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.DecoderFallback">
          <source>The <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph> object represents an error handler that is invoked when an encoded byte sequence cannot be decoded into a character.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph> oggetto rappresenta un gestore degli errori che viene richiamato quando una sequenza di byte codificata non può essere decodificata da un carattere.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.DecoderFallback">
          <source>Any one of the following handler types is supported:</source>
          <target state="translated">Uno dei seguenti tipi di gestore è supportato:</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.DecoderFallback">
          <source>A best-fit fallback handler, which replaces bytes that cannot be decoded with some suitable replacement character.</source>
          <target state="translated">Gestore di fallback con mapping più appropriato, che sostituisce i byte che non possono essere decodificati con un carattere di sostituzione appropriato.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.DecoderFallback">
          <source>A replacement fallback handler, which replaces bytes that cannot be decoded with some arbitrary replacement character.</source>
          <target state="translated">Gestore di fallback di sostituzione, che sostituisce i byte che non possono essere decodificati con un carattere di sostituzione arbitrari.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.DecoderFallback">
          <source>The .NET Framework includes one replacement fallback handler, <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph>, which by default replaces bytes that cannot be decoded with a question mark ("?") character.</source>
          <target state="translated">.NET Framework include un gestore di fallback di sostituzione, <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph>, che per impostazione predefinita sostituisce i byte che non possono essere decodificati con un punto interrogativo ("?") caratteri.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.DecoderFallback">
          <source>An exception fallback handler, which throws an exception when bytes cannot be decoded.</source>
          <target state="translated">Un gestore di fallback di eccezione che genera un'eccezione quando non possono essere decodificati byte.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.DecoderFallback">
          <source>The .NET Framework includes one exception fallback handler, <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph>, which throws a <ph id="ph2">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> when bytes cannot be decoded.</source>
          <target state="translated">.NET Framework include un gestore di fallback di eccezione, <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph>, che genera un <ph id="ph2">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> quando byte non possono essere decodificati.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.DecoderFallback">
          <source>The value in a set operation is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.DecoderFallback">
          <source>A value cannot be assigned in a set operation because the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object is read-only.</source>
          
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.Default">
          <source>Gets the default encoding for this .NET implementation.</source>
          
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>The default encoding for this .NET implementation.</source>
          <target state="translated">La codifica predefinita per questa implementazione di .NET.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>Different computers can use different encodings as the default, and the default encoding can change on a single computer.</source>
          <target state="translated">Computer diversi è possibile utilizzare codifiche differenti come impostazione predefinita e la codifica predefinita è possibile modificare in un singolo computer.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>If you use the <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> encoding to encode and decode data streamed between computers or retrieved at different times on the same computer, it may translate that data incorrectly.</source>
          <target state="translated">Se si utilizza il <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> codifica per codificare e decodificare i dati trasmessi tra computer o recuperati in momenti diversi nello stesso computer, può convertire i dati in modo non corretto.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>In addition, the encoding returned by the <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> property uses best-fit fallback to map unsupported characters to characters supported by the code page.</source>
          <target state="translated">Inoltre, la codifica restituito dal <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> proprietà Usa il fallback con mapping più appropriato per caratteri non supportati vengono mappati a caratteri supportati dalla tabella codici.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>For these reasons, using the default encoding is not recommended.</source>
          <target state="translated">Per questi motivi, si consiglia di non utilizzando la codifica predefinita.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>To ensure that encoded bytes are decoded properly, you should use a Unicode encoding, such as <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>.</source>
          <target state="translated">Per garantire che i byte codificati vengano decodificati correttamente, è consigliabile utilizzare una codifica Unicode, ad esempio <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>You could also use a higher-level protocol to ensure that the same format is used for encoding and decoding.</source>
          <target state="translated">È inoltre possibile utilizzare un protocollo di livello superiore per venga utilizzato lo stesso formato di codifica e decodifica.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>The Default property in the .NET Framework</source>
          <target state="translated">La proprietà predefinita in .NET Framework</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>In the .NET Framework on the Windows desktop, the <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> property always gets the system's active code page and creates a <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> object that corresponds to it.</source>
          <target state="translated">In .NET Framework sul desktop di Windows, il <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> proprietà sempre Ottiene code attive del sistema e crea un <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> oggetto che corrisponde a esso.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>The active code page may be an ANSI code page, which includes the ASCII character set along with additional characters that vary by code page.</source>
          <target state="translated">La pagina di codice attivo può essere una tabella codici ANSI, che include caratteri del set con caratteri aggiuntivi che variano in base alla tabella codici ASCII.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>Because all <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> encodings based on ANSI code pages lose data, consider using the <ph id="ph2">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType&gt;</ph> encoding instead.</source>
          <target state="translated">Poiché tutti <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> codifiche basate su tabelle codici ANSI perdita di dati, è possibile utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType&gt;</ph> invece di codifica.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>UTF-8 is often identical in the U+00 to U+7F range, but can encode characters outside the ASCII range without loss.</source>
          <target state="translated">UTF-8 è spesso identica U + 00 a U + 7F intervallo, ma è possibile codificare i caratteri di fuori dell'intervallo ASCII senza perdita.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>The Default property on .NET Core</source>
          <target state="translated">La proprietà predefinita su .NET Core</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>On .NET Core, the <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> property always returns the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph>.</source>
          <target state="translated">In .NET Core, il <ph id="ph1">&lt;xref:System.Text.Encoding.Default%2A&gt;</ph> proprietà restituisce sempre il <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Default">
          <source>UTF-8 is supported on all the operating systems (Windows, Linux, and Max OS X) on which .NET Core applications run.</source>
          <target state="translated">UTF-8 è supportata in tutti i sistemi operativi (Max OS X, Windows e Linux) in esecuzione delle applicazioni .NET Core.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.EncoderFallback">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Text.EncoderFallback" /&gt;</ph> object for the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object.</source>
          
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncoderFallback">
          <source>The encoder fallback object for the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object.</source>
          <target state="translated">Oggetto di fallback del codificatore per l'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncoderFallback">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> oggetto rappresenta un gestore degli errori che viene richiamato quando un carattere non può essere convertito in una sequenza di byte codificata.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncoderFallback">
          <source>Any one of the following handler types is supported:</source>
          <target state="translated">Uno dei seguenti tipi di gestore è supportato:</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncoderFallback">
          <source>A best-fit fallback handler, which replaces characters that cannot be encoded with some suitable replacement character.</source>
          <target state="translated">Gestore di fallback con mapping più appropriato, che sostituisce i caratteri che non possono essere codificati con un carattere di sostituzione appropriato.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncoderFallback">
          <source>A replacement fallback handler, which replaces characters that cannot be encoded with some arbitrary replacement character.</source>
          <target state="translated">Gestore di fallback di sostituzione, che sostituisce i caratteri che non possono essere codificati con un carattere di sostituzione arbitrari.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncoderFallback">
          <source>The .NET Framework includes one replacement fallback handler, <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph>, which by default replaces characters that cannot be encoded with a question mark ("?") character.</source>
          <target state="translated">.NET Framework include un gestore di fallback di sostituzione, <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph>, che per impostazione predefinita sostituisce i caratteri che non possono essere codificati con un punto interrogativo ("?") caratteri.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncoderFallback">
          <source>An exception fallback handler, which throws an exception when characters cannot be encoded.</source>
          <target state="translated">Un gestore di fallback di eccezione che genera un'eccezione quando non è possibile codificare i caratteri.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncoderFallback">
          <source>The .NET Framework includes one exception fallback handler, <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph>, which throws an <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> when characters cannot be decoded.</source>
          <target state="translated">.NET Framework include un gestore di fallback di eccezione, <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph>, che genera un <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> quando non possono essere decodificati caratteri.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.EncoderFallback">
          <source>The value in a set operation is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.EncoderFallback">
          <source>A value cannot be assigned in a set operation because the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object is read-only.</source>
          
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.EncodingName">
          <source>When overridden in a derived class, gets the human-readable description of the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncodingName">
          <source>The human-readable description of the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated">Descrizione leggibile dell'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncodingName">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> property is intended for display.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> proprietà è destinata alla visualizzazione.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncodingName">
          <source>To find a name that can be passed to the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> property.</source>
          <target state="translated">Per trovare un nome che può essere passato al <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> metodo, utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncodingName">
          <source>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente recupera i nomi diversi per ogni tipo di codifica e visualizza le codifiche con uno o più nomi diversi da <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.EncodingName">
          <source>It displays <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> but does not compare against it.</source>
          <target state="translated">Visualizza <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> ma non compare su di essa.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to compare with the current instance.</source>
          
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> is equal to the current instance.</source>
          
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is an instance of <ph id="ph3">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> and is equal to the current instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Equals(System.Object)">
          <source>Two instances of <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> are considered equal if they correspond to the same code page and their <ph id="ph2">`EncoderFallback`</ph> and <ph id="ph3">`DecoderFallback`</ph> objects are equal.</source>
          <target state="translated">Due istanze di <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> sono considerate uguali se corrispondono alla stessa tabella codici e i relativi <ph id="ph2">`EncoderFallback`</ph> e <ph id="ph3">`DecoderFallback`</ph> oggetti sono uguali.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Equals(System.Object)">
          <source>In particular, derived code pages all have a code page of 0 and their fallbacks are normally <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic .NET).</source>
          <target state="translated">In particolare, tutte le tabelle codici derivate hanno una tabella codici pari a 0 e il fallback di norma sono <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic .NET).</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Equals(System.Object)">
          <source>Thus they are all considered equal to one another.</source>
          <target state="translated">In questo modo sono tutti considerati uguali uno a altro.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Equals(System.Object)">
          <source>One consequence is that when <ph id="ph1">&lt;xref:System.Text.Encoding.Equals%2A&gt;</ph> is used to populate a hash table, all derived encodings compare equal and fall into the same hash table slot.</source>
          <target state="translated">Di conseguenza è che quando <ph id="ph1">&lt;xref:System.Text.Encoding.Equals%2A&gt;</ph> viene utilizzato per popolare una tabella hash, tutte le codifiche derivate risulteranno uguali e rientrano nello stesso slot della tabella hash.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.Equals(System.Object)">
          <source>The following example gets two instances of the same encoding (one by codepage and another by name), and checks their equality.</source>
          <target state="translated">Nell'esempio seguente ottiene due istanze della stessa codifica (uno dalla tabella codici) e un altro in base al nome e viene verificata l'eguaglianza.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters.</source>
          
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The character array containing the characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</source>
          
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The number of bytes produced by encoding all the characters in the specified character array.</source>
          
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> per archiviare i byte risultanti, chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>If your app handles string inputs, you should use the string versions of the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione gestisce gli input di stringa, è necessario utilizzare le versioni della stringa del <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>If your app must convert a large amount of data, you should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, è necessario riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[])">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The string containing the set of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</source>
          
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> per archiviare i byte risultanti, chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>If your app handles string inputs, the string version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> is recommended.</source>
          <target state="translated">Se l'applicazione gestisce l'input di stringa, la versione della stringa <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> è consigliato.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una stringa o un intervallo nella stringa di codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.String)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>A pointer to the first character to encode.</source>
          
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>The number of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</source>
          
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, you should call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione esatta della matrice che <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> richiede per archiviare i byte risultanti, è necessario chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>The following are some considerations for using these methods:</source>
          <target state="translated">Di seguito sono riportate alcune considerazioni per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>Your app may need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>If your app handles string inputs, you should use the string version of the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione gestisce gli input di stringa, utilizzare la versione della stringa di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The character array containing the set of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The index of the first character to encode.</source>
          
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</source>
          
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> per archiviare i byte risultanti, chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>If your app handles string inputs, the string version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> is recommended.</source>
          <target state="translated">Se l'applicazione gestisce l'input di stringa, la versione della stringa <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> è consigliato.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri di tre caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>When overridden in a derived class, encodes a set of characters into a sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>The character array containing the characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>A byte array containing the results of encoding the specified set of characters.</source>
          
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</source>
          <target state="translated">(Ad esempio, una sequenza di caratteri che include coppie di surrogati potrebbe terminare con un carattere surrogato alto.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> ricorderà tale surrogato alto in modo che può essere combinato con un surrogato basso all'inizio di una chiamata successiva.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> won't be able to maintain the state, so the character will be sent to the <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> non sarà in grado di gestire lo stato, il carattere verrà quindi inviata per la <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>If your app handles string inputs, you should call the string version of the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione gestisce gli input di stringa, è necessario chiamare la versione della stringa di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[])">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>The string containing the characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>A byte array containing the results of encoding the specified set of characters.</source>
          
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</source>
          <target state="translated">(Ad esempio, una sequenza di caratteri che include coppie di surrogati potrebbe terminare con un carattere surrogato alto.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> ricorderà tale surrogato alto in modo che può essere combinato con un surrogato basso all'inizio di una chiamata successiva.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> won't be able to maintain the state, so the character will be sent to the <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> non sarà in grado di gestire lo stato, il carattere verrà quindi inviata per la <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>If your app handles string inputs, you should use the string version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</source>
          <target state="translated">Se l'applicazione gestisce gli input di stringa, utilizzare la versione della stringa <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una stringa o un intervallo nella stringa di codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The character array containing the set of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The index of the first character to encode.</source>
          
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>A byte array containing the results of encoding the specified set of characters.</source>
          
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</source>
          <target state="translated">(Ad esempio, una sequenza di caratteri che include coppie di surrogati potrebbe terminare con un carattere surrogato alto.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> ricorderà tale surrogato alto in modo che può essere combinato con un surrogato basso all'inizio di una chiamata successiva.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> won't be able to maintain the state, so the character will be sent to the <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> non sarà in grado di gestire lo stato, il carattere verrà quindi inviata per la <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>If your app handles string inputs, you should use the string version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</source>
          <target state="translated">Se l'applicazione gestisce gli input di stringa, utilizzare la versione della stringa <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri di tre caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A pointer to the first character to encode.</source>
          
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The number of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A pointer to the location at which to start writing the resulting sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</source>
          
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The actual number of bytes written at the location indicated by the <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> parameter.</source>
          
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione esatta della matrice che <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> è necessario per archiviare i byte risultanti, chiamare il metodo di <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto fornito dal &lt;c5/&gt; o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</source>
          <target state="translated">(Ad esempio, una sequenza di caratteri che include coppie di surrogati potrebbe terminare con un carattere surrogato alto.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> ricorderà tale surrogato alto in modo che può essere combinato con un surrogato basso all'inizio di una chiamata successiva.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> won't be able to maintain the state, so the character will be sent to the <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> non sarà in grado di gestire lo stato, il carattere verrà quindi inviata per la <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>If your app handles string inputs, you should use the string version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</source>
          <target state="translated">Se l'applicazione gestisce gli input di stringa, utilizzare la versione della stringa <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> is less than the resulting number of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The character array containing the set of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index of the first character to encode.</source>
          
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The number of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The byte array to contain the resulting sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</source>
          
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The actual number of bytes written into <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you should call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> per archiviare i byte risultanti, è necessario chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</source>
          <target state="translated">(Ad esempio, una sequenza di caratteri che include coppie di surrogati potrebbe terminare con un carattere surrogato alto.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> ricorderà tale surrogato alto in modo che può essere combinato con un surrogato basso all'inizio di una chiamata successiva.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> won't be able to maintain the state, so the character will be sent to the <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> non sarà in grado di gestire lo stato, il carattere verrà quindi inviata per la <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>If your app handles string inputs, you should use the string version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</source>
          <target state="translated">Se l'applicazione gestisce gli input di stringa, utilizzare la versione della stringa <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri di tre caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
          
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The string containing the set of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index of the first character to encode.</source>
          
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The number of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The byte array to contain the resulting sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</source>
          
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The actual number of bytes written into <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you should call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> per archiviare i byte risultanti, è necessario chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the maximum array size, call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo determina il numero di byte risultanti dalla codifica di un set di caratteri Unicode e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo esegue l'effettiva codifica.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple conversions on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più conversioni su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Your app might need to encode many input characters to a code page and process the characters using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario codificare molti caratteri di input a una tabella codici ed elaborare i caratteri utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object being used.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, prendendo in considerazione lo stato in modo permanente dal <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> dell'oggetto in uso.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>(For example, a character sequence that includes surrogate pairs might end with a high surrogate.</source>
          <target state="translated">(Ad esempio, una sequenza di caratteri che include coppie di surrogati potrebbe terminare con un carattere surrogato alto.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> ricorderà tale surrogato alto in modo che può essere combinato con un surrogato basso all'inizio di una chiamata successiva.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> won't be able to maintain the state, so the character will be sent to the <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> non sarà in grado di gestire lo stato, il carattere verrà quindi inviata per la <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>If your app handles string inputs, you should use the string version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</source>
          <target state="translated">Se l'applicazione gestisce gli input di stringa, utilizzare la versione della stringa <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The Unicode character buffer version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls using the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object or inserting into existing buffers.</source>
          <target state="translated">La versione di buffer di caratteri Unicode di <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate utilizzando il <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto o l'inserimento nel buffer esistenti.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> version that supports byte arrays is the best choice.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> versione che supporta le matrici di byte è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e viene generata un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>For continuous encoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la codifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una stringa o un intervallo nella stringa di codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
          
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The byte array containing the sequence of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</source>
          
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29&gt;</ph> to store the resulting characters, you should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29&gt;</ph> per archiviare i caratteri risultanti, è consigliabile utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>To calculate the maximum array size, you should use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, è consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the  <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29&gt;</ph> method performs the actual decoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29&gt;</ph> metodo determina il numero di caratteri risultanti dalla decodifica di una sequenza di byte e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29&gt;</ph> metodo esegue la decodifica effettiva.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple passes on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario decodificare più byte di input da una tabella codici ed elaborare i byte utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>In this case, you probably need to maintain state between calls.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra le chiamate.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>If your app handles string outputs, you should use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione gestisce gli output di stringa, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <ph id="ph1">&lt;xref:System.String&gt;</ph> type is to be preferred.</source>
          <target state="translated">Poiché questo metodo deve controllare la lunghezza della stringa e allocare un buffer, è leggermente più lento, ma il valore risultante <ph id="ph1">&lt;xref:System.String&gt;</ph> tipo è preferibile.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The byte version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls to large buffers.</source>
          <target state="translated">La versione byte di <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate al buffer di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>In this case, the [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.</source>
          <target state="translated">In questo caso, il [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 &gt; versione che supporta i caratteri di output buffer è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e genera un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>For continuous decoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la decodifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</source>
          <target state="translated">Nell'esempio seguente consente di codificare una stringa in una matrice di byte e quindi decodifica i byte in una matrice di caratteri.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[])">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>A pointer to the first byte to decode.</source>
          
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The number of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</source>
          
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> requires to store the resulting characters, you should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione esatta della matrice che <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> richiede per archiviare i caratteri risultanti, è consigliabile utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>To calculate the maximum array size, use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method performs the actual decoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo determina il numero di caratteri risultanti dalla decodifica di una sequenza di byte e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo esegue la decodifica effettiva.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple passes on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario decodificare più byte di input da una tabella codici ed elaborare i byte utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>In this case, you probably need to maintain state between calls.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra le chiamate.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>If your app handles string outputs, it is recommended to use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione gestisce gli output di stringa, è consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <ph id="ph1">&lt;xref:System.String&gt;</ph> type is to be preferred.</source>
          <target state="translated">Poiché questo metodo deve controllare la lunghezza della stringa e allocare un buffer, è leggermente più lento, ma il valore risultante <ph id="ph1">&lt;xref:System.String&gt;</ph> tipo è preferibile.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The byte version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls to large buffers.</source>
          <target state="translated">La versione byte di <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate al buffer di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>In this case, the [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.</source>
          <target state="translated">In questo caso, il [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 &gt; versione che supporta i caratteri di output buffer è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e genera un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>For continuous decoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la decodifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first byte to decode.</source>
          
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</source>
          
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> to store the resulting characters, you should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> per archiviare i caratteri risultanti, è consigliabile utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>To calculate the maximum array size, use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method performs the actual decoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo determina il numero di caratteri risultanti dalla decodifica di una sequenza di byte e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo esegue la decodifica effettiva.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple passes on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario decodificare più byte di input da una tabella codici ed elaborare i byte utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>In this case, you probably need to maintain state between calls.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra le chiamate.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>If your app handles string outputs, it is recommended to use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione gestisce gli output di stringa, è consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <ph id="ph1">&lt;xref:System.String&gt;</ph> type is to be preferred.</source>
          <target state="translated">Poiché questo metodo deve controllare la lunghezza della stringa e allocare un buffer, è leggermente più lento, ma il valore risultante <ph id="ph1">&lt;xref:System.String&gt;</ph> tipo è preferibile.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The byte version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls to large buffers.</source>
          <target state="translated">La versione byte di <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate al buffer di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>In this case, the [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.</source>
          <target state="translated">In questo caso, il [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 &gt; versione che supporta i caratteri di output buffer è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e genera un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>For continuous decoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la decodifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The following example converts a string from one encoding to another.</source>
          <target state="translated">Nell'esempio seguente converte una stringa da una codifica a altra.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</source>
          <target state="translated">Nell'esempio seguente consente di codificare una stringa in una matrice di byte e quindi decodifica un intervallo di byte in una matrice di caratteri.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>When overridden in a derived class, decodes a sequence of bytes into a set of characters.</source>
          
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>The byte array containing the sequence of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</source>
          
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>A character array containing the results of decoding the specified sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> gets characters from an input byte sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> Ottiene i caratteri da una sequenza di byte di input.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> is different than <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> because <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> expects discrete conversions, while <ph id="ph4">&lt;xref:System.Text.Decoder&gt;</ph> is designed for multiple passes on a single input stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> è diverso da quello <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> perché <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> prevede conversioni discrete, mentre <ph id="ph4">&lt;xref:System.Text.Decoder&gt;</ph> è destinato a più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</source>
          <target state="translated"><bpt id="p1">**</bpt>Nota<ept id="p1">**</ept> questo metodo è destinato a operare su caratteri Unicode e non su dati binari arbitrari, ad esempio matrici di byte.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se è necessario codificare dati binari arbitrari in testo, è necessario utilizzare un protocollo, ad esempio uuencode, verrà implementate da metodi quali <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method performs the actual decoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo determina il numero di caratteri risultanti dalla decodifica di una sequenza di byte e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo esegue la decodifica effettiva.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple passes on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario decodificare più byte di input da una tabella codici ed elaborare i byte utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, perché le sequenze di byte possono essere interrotta durante l'elaborazione in batch.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>(For example, part of an ISO-2022 shift sequence may end one <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> call and continue at the beginning of the next <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> call.</source>
          <target state="translated">(Ad esempio, può terminare una parte di una sequenza shift ISO-2022 <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> chiamare e continuare all'inizio del successivo <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> chiamare.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> will call the fallback for those incomplete sequences, but <ph id="ph2">&lt;xref:System.Text.Decoder&gt;</ph> will remember those sequences for the next call.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> chiamerà il fallback per le sequenze incomplete, ma <ph id="ph2">&lt;xref:System.Text.Decoder&gt;</ph> verranno memorizzate le sequenze per la chiamata successiva.)</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>If your app handles string outputs, it is recommended to use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione gestisce gli output di stringa, è consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <ph id="ph1">&lt;xref:System.String&gt;</ph> type is to be preferred.</source>
          <target state="translated">Poiché questo metodo deve controllare la lunghezza della stringa e allocare un buffer, è leggermente più lento, ma il valore risultante <ph id="ph1">&lt;xref:System.String&gt;</ph> tipo è preferibile.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>The byte version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls to large buffers.</source>
          <target state="translated">La versione byte di <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate al buffer di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>In this case, the [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.</source>
          <target state="translated">In questo caso, il [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 &gt; versione che supporta i caratteri di output buffer è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e genera un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>For continuous decoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la decodifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</source>
          <target state="translated">Nell'esempio seguente consente di codificare una stringa in una matrice di byte e quindi decodifica i byte in una matrice di caratteri.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[])">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first byte to decode.</source>
          
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</source>
          
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>A character array containing the results of decoding the specified sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> gets characters from an input byte sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> Ottiene i caratteri da una sequenza di byte di input.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> is different than <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> because <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> expects discrete conversions, while <ph id="ph4">&lt;xref:System.Text.Decoder&gt;</ph> is designed for multiple passes on a single input stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> è diverso da quello <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> perché <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> prevede conversioni discrete, mentre <ph id="ph4">&lt;xref:System.Text.Decoder&gt;</ph> è destinato a più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</source>
          <target state="translated"><bpt id="p1">**</bpt>Nota<ept id="p1">**</ept> questo metodo è destinato a operare su caratteri Unicode e non su dati binari arbitrari, ad esempio matrici di byte.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se è necessario codificare dati binari arbitrari in testo, è necessario utilizzare un protocollo, ad esempio uuencode, verrà implementate da metodi quali <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method performs the actual decoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo determina il numero di caratteri risultanti dalla decodifica di una sequenza di byte e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo esegue la decodifica effettiva.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple passes on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario decodificare più byte di input da una tabella codici ed elaborare i byte utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, perché le sequenze di byte possono essere interrotta durante l'elaborazione in batch.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>(For example, part of an ISO-2022 shift sequence may end one <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> call and continue at the beginning of the next <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> call.</source>
          <target state="translated">(Ad esempio, può terminare una parte di una sequenza shift ISO-2022 <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> chiamare e continuare all'inizio del successivo <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> chiamare.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> will call the fallback for those incomplete sequences, but <ph id="ph2">&lt;xref:System.Text.Decoder&gt;</ph> will remember those sequences for the next call.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> chiamerà il fallback per le sequenze incomplete, ma <ph id="ph2">&lt;xref:System.Text.Decoder&gt;</ph> verranno memorizzate le sequenze per la chiamata successiva.)</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>If your app handles string outputs, it is recommended to use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione gestisce gli output di stringa, è consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <ph id="ph1">&lt;xref:System.String&gt;</ph> type is to be preferred.</source>
          <target state="translated">Poiché questo metodo deve controllare la lunghezza della stringa e allocare un buffer, è leggermente più lento, ma il valore risultante <ph id="ph1">&lt;xref:System.String&gt;</ph> tipo è preferibile.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The byte version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls to large buffers.</source>
          <target state="translated">La versione byte di <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate al buffer di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>In this case, the [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.</source>
          <target state="translated">In questo caso, il [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 &gt; versione che supporta i caratteri di output buffer è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e genera un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>For continuous decoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la decodifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</source>
          <target state="translated">Nell'esempio seguente consente di codificare una stringa in una matrice di byte e quindi decodifica un intervallo di byte in una matrice di caratteri.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A pointer to the first byte to decode.</source>
          
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The number of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A pointer to the location at which to start writing the resulting set of characters.</source>
          
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The maximum number of characters to write.</source>
          
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</source>
          
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The actual number of characters written at the location indicated by the <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> parameter.</source>
          
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> requires to store the resulting characters, you should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione esatta della matrice che <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> richiede per archiviare i caratteri risultanti, è consigliabile utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>To calculate the maximum array size, use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> gets characters from an input byte sequence.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> Ottiene i caratteri da una sequenza di byte di input.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> is different than <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> because <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> expects discrete conversions, while <ph id="ph4">&lt;xref:System.Text.Decoder&gt;</ph> is designed for multiple passes on a single input stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> è diverso da quello <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> perché <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> prevede conversioni discrete, mentre <ph id="ph4">&lt;xref:System.Text.Decoder&gt;</ph> è destinato a più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> oggetto fornito dal &lt;c5/&gt; o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</source>
          <target state="translated"><bpt id="p1">**</bpt>Nota<ept id="p1">**</ept> questo metodo è destinato a operare su caratteri Unicode e non su dati binari arbitrari, ad esempio matrici di byte.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se è necessario codificare dati binari arbitrari in testo, è necessario utilizzare un protocollo, ad esempio uuencode, verrà implementate da metodi quali <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method performs the actual decoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo determina il numero di caratteri risultanti dalla decodifica di una sequenza di byte e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo esegue la decodifica effettiva.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple passes on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario decodificare più byte di input da una tabella codici ed elaborare i byte utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, perché le sequenze di byte possono essere interrotta durante l'elaborazione in batch.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>(For example, part of an ISO-2022 shift sequence may end one <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> call and continue at the beginning of the next <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> call.</source>
          <target state="translated">(Ad esempio, può terminare una parte di una sequenza shift ISO-2022 <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> chiamare e continuare all'inizio del successivo <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> chiamare.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> will call the fallback for those incomplete sequences, but <ph id="ph2">&lt;xref:System.Text.Decoder&gt;</ph> will remember those sequences for the next call.)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> chiamerà il fallback per le sequenze incomplete, ma <ph id="ph2">&lt;xref:System.Text.Decoder&gt;</ph> verranno memorizzate le sequenze per la chiamata successiva.)</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>If your app handles string outputs, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method is recommended.</source>
          <target state="translated">Se l'applicazione gestisce l'output delle stringhe, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo consigliato.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <ph id="ph1">&lt;xref:System.String&gt;</ph> type is to be preferred.</source>
          <target state="translated">Poiché questo metodo deve controllare la lunghezza della stringa e allocare un buffer, è leggermente più lento, ma il valore risultante <ph id="ph1">&lt;xref:System.String&gt;</ph> tipo è preferibile.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The byte version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls to large buffers.</source>
          <target state="translated">La versione byte di <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate al buffer di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>In this case, the [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.</source>
          <target state="translated">In questo caso, il [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 &gt; versione che supporta i caratteri di output buffer è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e genera un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>For continuous decoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la decodifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> is less than the resulting number of characters.</source>
          
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The index of the first byte to decode.</source>
          
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The number of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The character array to contain the resulting set of characters.</source>
          
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The index at which to start writing the resulting set of characters.</source>
          
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</source>
          
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The actual number of characters written into <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> to store the resulting characters, you should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> per archiviare i caratteri risultanti, è consigliabile utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To calculate the maximum array size, use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>[<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt; gets characters from an input byte sequence.</source>
          <target state="translated">[<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType &gt; Ottiene caratteri da una sequenza di byte di input.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>[<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt; is different than <ph id="ph3">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> because <ph id="ph4">&lt;xref:System.Text.Encoding&gt;</ph> expects discrete conversions, while <ph id="ph5">&lt;xref:System.Text.Decoder&gt;</ph> is designed for multiple passes on a single input stream.</source>
          <target state="translated">[<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType &gt; è diverso da quello <ph id="ph3">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> perché <ph id="ph4">&lt;xref:System.Text.Encoding&gt;</ph> prevede conversioni discrete, mentre <ph id="ph5">&lt;xref:System.Text.Decoder&gt;</ph> è progettato per più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays.</source>
          <target state="translated"><bpt id="p1">**</bpt>Nota<ept id="p1">**</ept> questo metodo è destinato a operare su caratteri Unicode e non su dati binari arbitrari, ad esempio matrici di byte.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se è necessario codificare dati binari arbitrari in testo, è necessario utilizzare un protocollo, ad esempio uuencode, verrà implementate da metodi quali <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method performs the actual decoding.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo determina il numero di caratteri risultanti dalla decodifica di una sequenza di byte e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo esegue la decodifica effettiva.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> method expects discrete conversions, in contrast to the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method, which handles multiple passes on a single input stream.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo prevede conversioni discrete, a differenza di <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo che gestisce più passaggi su un singolo flusso di input.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Several versions of <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> are supported.</source>
          <target state="translated">Versioni diverse di <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> sono supportati.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The following are some programming considerations for use of these methods:</source>
          <target state="translated">Di seguito sono alcune considerazioni di programmazione per l'utilizzo di questi metodi:</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls.</source>
          <target state="translated">L'app potrebbe essere necessario decodificare più byte di input da una tabella codici ed elaborare i byte utilizzando più chiamate.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches.</source>
          <target state="translated">In questo caso, è probabilmente necessario mantenere lo stato tra chiamate, perché le sequenze di byte possono essere interrotta durante l'elaborazione in batch.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>(For example, part of an ISO-2022 shift sequence may end one [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A&gt; call and continue at the beginning of the next [<ph id="ph3">\]</ph>, Int32, Int32, Char<ph id="ph4">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A&gt; call.</source>
          <target state="translated">(Ad esempio, può terminare una parte di una sequenza shift ISO-2022 [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A &gt; chiamare e continuare all'inizio del successivo [<ph id="ph3">\]</ph>, Int32, Int32, Char<ph id="ph4">\&lt;</ph>xref : System.Text.Encoding.GetChars%2A &gt; chiamare.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>[<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt; will call the fallback for those incomplete sequences, but <ph id="ph3">&lt;xref:System.Text.Decoder&gt;</ph> will remember those sequences for the next call.)</source>
          <target state="translated">[<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType &gt; chiamerà il fallback per le sequenze incomplete, ma <ph id="ph3">&lt;xref:System.Text.Decoder&gt;</ph> verranno memorizzate le sequenze per la chiamata successiva.)</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>If your app handles string outputs, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method is recommended.</source>
          <target state="translated">Se l'applicazione gestisce l'output delle stringhe, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo consigliato.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <ph id="ph1">&lt;xref:System.String&gt;</ph> type is to be preferred.</source>
          <target state="translated">Poiché questo metodo deve controllare la lunghezza della stringa e allocare un buffer, è leggermente più lento, ma il valore risultante <ph id="ph1">&lt;xref:System.String&gt;</ph> tipo è preferibile.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The byte version of <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> allows some fast techniques, particularly with multiple calls to large buffers.</source>
          <target state="translated">La versione byte di <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29&gt;</ph> consente alcune tecniche veloci, in particolare con più chiamate al buffer di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.</source>
          <target state="translated">Tenere presente, tuttavia, questa versione del metodo è talvolta sicuro, poiché sono richiesti i puntatori.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>If your app must convert a large amount of data, it should reuse the output buffer.</source>
          <target state="translated">Se l'app è necessario convertire una grande quantità di dati, riutilizzare il buffer di output.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>In this case, the [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29&gt; version that supports output character buffers is the best choice.</source>
          <target state="translated">In questo caso, il [<ph id="ph1">\]</ph>, Int32, Int32, Char<ph id="ph2">\&lt;</ph>xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29 &gt; versione che supporta i caratteri di output buffer è la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Consider using the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The conversion method converts as much data as possible and throws an exception if the output buffer is too small.</source>
          <target state="translated">Il metodo di conversione converte tutti i dati possibili e genera un'eccezione se il buffer di output è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>For continuous decoding of a stream, this method is often the best choice.</source>
          <target state="translated">Per la decodifica continua di un flusso, questo metodo è spesso la scelta migliore.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The following example converts a string from one encoding to another.</source>
          <target state="translated">Nell'esempio seguente converte una stringa da una codifica a altra.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.</source>
          <target state="translated">Nell'esempio seguente consente di codificare una stringa in una matrice di byte e quindi decodifica un intervallo di byte in una matrice di caratteri.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="chars" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> to the end of the array to accommodate the resulting characters.</source>
          
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetDecoder">
          <source>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</source>
          
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetDecoder">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> that converts an encoded sequence of bytes into a sequence of characters.</source>
          
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetDecoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> method of this class.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> metodo converte blocchi sequenziali di byte in blocchi sequenziali di caratteri, in modo simile al <ph id="ph2">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> metodo di questa classe.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetDecoder">
          <source>However, a <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> maintains state information between calls so it correctly decodes byte sequences that span blocks.</source>
          <target state="translated">Tuttavia, un <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> le informazioni sullo stato tra le chiamate in modo da poter decodificare correttamente le sequenze di byte che includono i blocchi.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetDecoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> anche mantiene i byte finali alla fine di blocchi di dati e i byte finali nella successiva operazione di decodifica.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetDecoder">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
          <target state="translated">Pertanto, <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> sono utili per la trasmissione di rete e le operazioni di file, perché queste operazioni utilizzano spesso blocchi di dati anziché un flusso di dati completo.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetDecoder">
          <source>The default implementation returns a <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> that calls the <ph id="ph2">&lt;see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Text.Encoding.GetChars(System.Byte[])" /&gt;</ph> methods of the current <ph id="ph4">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated">L'implementazione predefinita restituisce un <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> che chiama il <ph id="ph2">&lt;see cref="M:System.Text.Encoding.GetCharCount(System.Byte[])" /&gt;</ph> e <ph id="ph3">&lt;see cref="M:System.Text.Encoding.GetChars(System.Byte[])" /&gt;</ph> metodi dell'oggetto corrente <ph id="ph4">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetDecoder">
          <source>You must override this method to return a <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> that maintains its state between calls.</source>
          <target state="translated">È necessario eseguire l'override di questo metodo per restituire un <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> che gestisce lo stato tra le chiamate.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoder">
          <source>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoder">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> that converts a sequence of Unicode characters into an encoded sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method of this class.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> metodo converte blocchi sequenziali di caratteri in blocchi sequenziali di byte, una procedura simile a quella di <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> metodo della classe.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoder">
          <source>However, a <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> maintains state information between calls so it correctly encodes character sequences that span blocks.</source>
          <target state="translated">Tuttavia, un <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> mantiene informazioni sullo stato tra le chiamate in modo la codifica corretta delle sequenze di caratteri che includono i blocchi.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> anche mantiene finali caratteri alla fine di blocchi di dati e i caratteri finali nella successiva operazione di codifica.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoder">
          <source>For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</source>
          <target state="translated">Ad esempio, un blocco di dati potrebbe terminare con un surrogato alto senza corrispondenza e il surrogato basso corrispondente potrebbe essere in blocco di dati successivo.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoder">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
          <target state="translated">Pertanto, <ph id="ph1">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> sono utili per la trasmissione di rete e le operazioni di file, perché queste operazioni utilizzano spesso blocchi di dati anziché un flusso di dati completo.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoder">
          <source>The default implementation returns a <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> that calls the <ph id="ph2">&lt;see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Text.Encoding.GetBytes(System.Char[])" /&gt;</ph> methods of the current <ph id="ph4">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated">L'implementazione predefinita restituisce un <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> che chiama il <ph id="ph2">&lt;see cref="M:System.Text.Encoding.GetByteCount(System.Char[])" /&gt;</ph> e <ph id="ph3">&lt;see cref="M:System.Text.Encoding.GetBytes(System.Char[])" /&gt;</ph> metodi dell'oggetto corrente <ph id="ph4">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoder">
          <source>You must override this method to return a <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> that maintains its state between calls.</source>
          <target state="translated">È necessario eseguire l'override di questo metodo per restituire un <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> che gestisce lo stato tra le chiamate.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>Returns an encoding for the specified code page.</source>
          
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>The code page identifier of the preferred encoding.</source>
          
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>Possible values are listed in the Code Page column of the table that appears in the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> class topic.</source>
          
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>0 (zero), to use the default encoding.</source>
          
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>Returns the encoding associated with the specified code page identifier.</source>
          
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>The encoding that is associated with the specified code page.</source>
          
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>The fallback handler depends on the encoding type of <ph id="ph1">`codepage`</ph>.</source>
          <target state="translated">Il gestore di fallback dipende dal tipo di codifica <ph id="ph1">`codepage`</ph>.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>If <ph id="ph1">`codepage`</ph> is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used.</source>
          <target state="translated">Se <ph id="ph1">`codepage`</ph> è un carattere di pagina o a byte doppio (DBCS) codifica del set, viene utilizzato un gestore di fallback con mapping più appropriato.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>Otherwise, a replacement fallback handler is used.</source>
          <target state="translated">In caso contrario, viene utilizzato un gestore di fallback di sostituzione.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>These fallback handlers may not be appropriate for your app.</source>
          <target state="translated">Questi gestori fallback potrebbero non essere appropriati per l'app.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>To specify the fallback handler used by the encoding specified by <ph id="ph1">`codepage`</ph>, you can call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29&gt;</ph> overload.</source>
          <target state="translated">Per specificare il gestore di fallback usato per la codifica specificata da <ph id="ph1">`codepage`</ph>, è possibile chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29&gt;</ph> rapporto di overload.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method relies on the underlying platform to support most code pages.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> metodo si basa sulla piattaforma sottostante per supportare la maggior parte delle tabelle codici.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>However, the .NET Framework natively supports some encodings.</source>
          <target state="translated">Tuttavia, .NET Framework supporta in modo nativo alcune codifiche.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>For a list of code pages, see the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class topic.</source>
          <target state="translated">Per un elenco di tabelle codici, vedere il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>Alternatively, you can call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> method to get an array of <ph id="ph2">&lt;xref:System.Text.EncodingInfo&gt;</ph> objects that contains information about all encodings.</source>
          <target state="translated">In alternativa, è possibile chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> metodo per ottenere una matrice di <ph id="ph2">&lt;xref:System.Text.EncodingInfo&gt;</ph> gli oggetti che contiene informazioni su tutte le codifiche.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method returns any additional encodings that are made available by registering an <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> object.</source>
          <target state="translated">Oltre alle codifiche supportate in una versione della piattaforma specifica di .NET Framework, in modo intrinseco il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> il metodo restituisce le codifiche delle tabelle aggiuntive che vengono resi disponibili tramite la registrazione di un <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>If the same encoding has been registered by multiple <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> objects, this method returns the last one registered.</source>
          <target state="translated">Se la stessa codifica è stata registrata da più <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetti, questo metodo restituisce l'ultimo registrato.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>You can also supply a value of 0 for the <ph id="ph1">`codepage`</ph> argument.</source>
          <target state="translated">È inoltre possibile fornire un valore pari a 0 per il <ph id="ph1">`codepage`</ph> argomento.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>Its precise behavior depends on whether any encodings have been made available by registering an <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> object:</source>
          <target state="translated">Il comportamento preciso dipende se le codifiche delle tabelle sono state rese disponibili tramite la registrazione di un <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetto:</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>If one or more encoding providers have been registered, it returns the encoding of the last registered provider that has chosen to return a encoding when the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method is passed a <ph id="ph2">`codepage`</ph> argument of 0.</source>
          <target state="translated">Se sono stati registrati uno o più provider di codifica, restituisce la codifica dell'ultimo provider registrato che ha scelto di restituire una codifica quando il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> viene passato un <ph id="ph2">`codepage`</ph> argomento 0.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>On the .NET Framework, if no encoding provider has been registered, if the <ph id="ph1">&lt;xref:System.Text.CodePagesEncodingProvider&gt;</ph> is the registered encoding provider, or if no registered encoding provider handles a <ph id="ph2">`codepage`</ph> value of 0, it returns the operating system's active code page.</source>
          <target state="translated">In .NET Framework, se nessuna codifica provider è stato registrato, se il <ph id="ph1">&lt;xref:System.Text.CodePagesEncodingProvider&gt;</ph> è il provider di codifica registrato, o se nessun provider di codifica registrato gestisce un <ph id="ph2">`codepage`</ph> valore pari a 0, restituisce codici attiva del sistema operativo.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>To determine the active code page on Windows systems, call the Windows <bpt id="p1">[</bpt>GetACP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)</ept> function from the .NET Framework on the Windows desktop.</source>
          <target state="translated">Per determinare la tabella codici active nei sistemi Windows, chiamare il Windows <bpt id="p1">[</bpt>GetACP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)</ept> funzione da .NET Framework sul desktop di Windows.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>On .NET Core, if no encoding provider has been registered or if no registered encoding provider handles a <ph id="ph1">`codepage`</ph> value of 0, it returns the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph>.</source>
          <target state="translated">In .NET Core, se non è stato registrato il provider di codifica o se nessun provider di codifica registrato gestisce un <ph id="ph1">`codepage`</ph> valore pari a 0, restituisce il <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>Some unsupported code pages cause an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> to be thrown, whereas others cause a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Alcuni codici non supportate pagine causa un <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> generata, mentre altre causano un <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>Therefore, your code must catch all exceptions indicated in the Exceptions section.</source>
          <target state="translated">Pertanto, il codice deve rilevare tutte le eccezioni indicate nella sezione eccezioni.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</source>
          <target state="translated">Le tabelle codici ANSI possono essere diverse su computer diversi e possono modificare in un singolo computer, causando il danneggiamento dei dati.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>For this reason, if the active code page is an ANSI code page, encoding and decoding data using the default code page returned by <ph id="ph1">`Encoding.GetEncoding(0)`</ph> is not recommended.</source>
          <target state="translated">Per questo motivo, se la tabella codici attiva è una tabella codici ANSI, codifica e decodifica dei dati utilizzando la tabella codici predefinita restituita da <ph id="ph1">`Encoding.GetEncoding(0)`</ph> non è consigliata.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>For the most consistent results, you should use a Unicode encoding, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</source>
          <target state="translated">Per ottenere risultati più coerenti, è necessario utilizzare una codifica Unicode, ad esempio UTF-8 (tabella codici 65001) o UTF-16, anziché una tabella codici specifica.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> returns a cached instance with default settings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> Restituisce un'istanza memorizzata nella cache con le impostazioni predefinite.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>You should use the constructors of derived classes to get an instance with different settings.</source>
          <target state="translated">Utilizzare i costruttori delle classi derivate per ottenere un'istanza con impostazioni diverse.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> class provides a constructor that lets you enable error detection.</source>
          <target state="translated">Ad esempio, la <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> classe fornisce un costruttore che consente di abilitare il rilevamento errori.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source>The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.</source>
          <target state="translated">Nell'esempio seguente ottiene due istanze della stessa codifica (uno dalla tabella codici) e un altro in base al nome e viene verificata l'eguaglianza.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="codepage" /&gt;</ph> is less than zero or greater than 65535.</source>
          
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="codepage" /&gt;</ph> is not supported by the underlying platform.</source>
          
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="codepage" /&gt;</ph> is not supported by the underlying platform.</source>
          
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>The code page name of the preferred encoding.</source>
          
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>Any value returned by the <ph id="ph1">&lt;see cref="P:System.Text.Encoding.WebName" /&gt;</ph> property is valid.</source>
          
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>Possible values are listed in the Name column of the table that appears in the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> class topic.</source>
          
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>Returns the encoding associated with the specified code page name.</source>
          
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>The encoding  associated with the specified code page.</source>
          
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>The fallback handler depends on the encoding type of <ph id="ph1">`name`</ph>.</source>
          <target state="translated">Il gestore di fallback dipende dal tipo di codifica <ph id="ph1">`name`</ph>.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>If <ph id="ph1">`name`</ph> is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used.</source>
          <target state="translated">Se <ph id="ph1">`name`</ph> è un carattere di pagina o a byte doppio (DBCS) codifica del set, viene utilizzato un gestore di fallback con mapping più appropriato.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>Otherwise, a replacement fallback handler is used.</source>
          <target state="translated">In caso contrario, viene utilizzato un gestore di fallback di sostituzione.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>These fallback handlers may not be appropriate for your app.</source>
          <target state="translated">Questi gestori fallback potrebbero non essere appropriati per l'app.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>To specify the fallback handler used by the encoding specified by <ph id="ph1">`name`</ph>, you can call the <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29&gt;</ph> overload.</source>
          <target state="translated">Per specificare il gestore di fallback usato per la codifica specificata da <ph id="ph1">`name`</ph>, è possibile chiamare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29&gt;</ph> rapporto di overload.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method relies on the underlying platform to support most code pages.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> metodo si basa sulla piattaforma sottostante per supportare la maggior parte delle tabelle codici.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>However, the .NET Framework natively supports some encodings.</source>
          <target state="translated">Tuttavia, .NET Framework supporta in modo nativo alcune codifiche.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>For a list of code pages, see the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class topic.</source>
          <target state="translated">Per un elenco di tabelle codici, vedere il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>Alternatively, you can call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> method to get an array of <ph id="ph2">&lt;xref:System.Text.EncodingInfo&gt;</ph> objects that contains information about all encodings.</source>
          <target state="translated">In alternativa, è possibile chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> metodo per ottenere una matrice di <ph id="ph2">&lt;xref:System.Text.EncodingInfo&gt;</ph> gli oggetti che contiene informazioni su tutte le codifiche.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method returns any additional encodings that are made available by registering an <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> object.</source>
          <target state="translated">Oltre alle codifiche supportate in una versione della piattaforma specifica di .NET Framework, in modo intrinseco il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> il metodo restituisce le codifiche delle tabelle aggiuntive che vengono resi disponibili tramite la registrazione di un <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>If the same encoding has been registered by multiple <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> objects, this method returns the last one registered.</source>
          <target state="translated">Se la stessa codifica è stata registrata da più <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetti, questo metodo restituisce l'ultimo registrato.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption.</source>
          <target state="translated">Le tabelle codici ANSI possono essere diverse su computer diversi o possono essere modificate per un singolo computer, causando il danneggiamento dei dati.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</source>
          <target state="translated">Per ottenere risultati più coerenti, è necessario utilizzare Unicode, ad esempio UTF-8 (tabella codici 65001) o UTF-16, anziché una tabella codici specifica.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> returns a cached instance with default settings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> Restituisce un'istanza memorizzata nella cache con le impostazioni predefinite.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>You should use the constructors of derived classes to get an instance with different settings.</source>
          <target state="translated">Utilizzare i costruttori delle classi derivate per ottenere un'istanza con impostazioni diverse.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> class provides a constructor that lets you enable error detection.</source>
          <target state="translated">Ad esempio, la <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> classe fornisce un costruttore che consente di abilitare il rilevamento errori.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.</source>
          <target state="translated">Nell'esempio seguente ottiene due istanze della stessa codifica (uno dalla tabella codici) e un altro in base al nome e viene verificata l'eguaglianza.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid code page name.</source>
          
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String)">
          <source>The code page indicated by <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not supported by the underlying platform.</source>
          
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The code page identifier of the preferred encoding.</source>
          
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Possible values are listed in the Code Page column of the table that appears in the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> class topic.</source>
          
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>0 (zero), to use the default encoding.</source>
          
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Returns the encoding associated with the specified code page identifier.</source>
          
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</source>
          
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The encoding that is associated with the specified code page.</source>
          
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Some unsupported code pages cause the exception <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> to be thrown, whereas others cause <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Alcune tabelle codici non supportata di generare l'eccezione <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> generata, mentre altre causano <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Therefore, your code must catch all exceptions indicated in the Exceptions section.</source>
          <target state="translated">Pertanto, il codice deve rilevare tutte le eccezioni indicate nella sezione eccezioni.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method relies on the underlying platform to support most code pages.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> metodo si basa sulla piattaforma sottostante per supportare la maggior parte delle tabelle codici.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>However, the .NET Framework natively supports some encodings.</source>
          <target state="translated">Tuttavia, .NET Framework supporta in modo nativo alcune codifiche.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>For a list of code pages, see the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class topic.</source>
          <target state="translated">Per un elenco di tabelle codici, vedere il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> method in the full .NET Framework on the Windows desktop to get a list of all encodings.</source>
          <target state="translated">È possibile chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> metodo in .NET Framework completo sul desktop di Windows per ottenere un elenco di tutte le codifiche.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method returns any additional encodings that are made available by registering an <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> object.</source>
          <target state="translated">Oltre alle codifiche supportate in una versione della piattaforma specifica di .NET Framework, in modo intrinseco il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> il metodo restituisce le codifiche delle tabelle aggiuntive che vengono resi disponibili tramite la registrazione di un <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>If the same encoding has been registered by multiple <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> objects, this method returns the last one registered.</source>
          <target state="translated">Se la stessa codifica è stata registrata da più <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetti, questo metodo restituisce l'ultimo registrato.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>You can also supply a value of 0 for the <ph id="ph1">`codepage`</ph> argument.</source>
          <target state="translated">È inoltre possibile fornire un valore pari a 0 per il <ph id="ph1">`codepage`</ph> argomento.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Its precise behavior depends on whether any encodings have been made available by registering an <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> object:</source>
          <target state="translated">Il comportamento preciso dipende se le codifiche delle tabelle sono state rese disponibili tramite la registrazione di un <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetto:</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>If one or more encoding providers have been registered, it returns the encoding of the last registered provider that has chosen to return a encoding when the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method is passed a <ph id="ph2">`codepage`</ph> argument of 0.</source>
          <target state="translated">Se sono stati registrati uno o più provider di codifica, restituisce la codifica dell'ultimo provider registrato che ha scelto di restituire una codifica quando il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> viene passato un <ph id="ph2">`codepage`</ph> argomento 0.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>On the .NET Framework, if no encoding provider has been registered, if the <ph id="ph1">&lt;xref:System.Text.CodePagesEncodingProvider&gt;</ph> is the registered encoding provider, or if no registered encoding provider handles a <ph id="ph2">`codepage`</ph> value of 0, it returns the active code page.</source>
          <target state="translated">In .NET Framework, se nessuna codifica provider è stato registrato, se il <ph id="ph1">&lt;xref:System.Text.CodePagesEncodingProvider&gt;</ph> è il provider di codifica registrato, o se nessun provider di codifica registrato gestisce un <ph id="ph2">`codepage`</ph> valore pari a 0, restituisce la tabella codici attiva.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>On .NET Core, if no encoding provider has been registered or if no registered encoding provider handles a <ph id="ph1">`codepage`</ph> value of 0, it returns the <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> encoding.</source>
          <target state="translated">In .NET Core, se non è stato registrato il provider di codifica o se nessun provider di codifica registrato gestisce un <ph id="ph1">`codepage`</ph> valore pari a 0, restituisce il <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> codifica.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</source>
          <target state="translated">Le tabelle codici ANSI possono essere diverse su computer diversi e possono modificare in un singolo computer, causando il danneggiamento dei dati.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>For this reason, if the active code page is an ANSI code page, encoding and decoding data using the default code page returned by <ph id="ph1">`Encoding.GetEncoding(0)`</ph> is not recommended.</source>
          <target state="translated">Per questo motivo, se la tabella codici attiva è una tabella codici ANSI, codifica e decodifica dei dati utilizzando la tabella codici predefinita restituita da <ph id="ph1">`Encoding.GetEncoding(0)`</ph> non è consigliata.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</source>
          <target state="translated">Per ottenere risultati più coerenti, è necessario utilizzare Unicode, ad esempio UTF-8 (tabella codici 65001) o UTF-16, anziché una tabella codici specifica.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>To get the encoding associated with the active code page, you can either supply a value of 0 for the <ph id="ph1">`codepage`</ph> argument or, if your code is running on the full .NET Framework on the Windows desktop, retrieve the value of the <ph id="ph2">&lt;xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Per ottenere la codifica associata alla tabella codici attiva, ovvero è possibile fornire un valore pari a 0 per il <ph id="ph1">`codepage`</ph> argomento o, se il codice è in esecuzione in .NET Framework sul desktop di Windows, recuperare il valore della <ph id="ph2">&lt;xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>To determine the current active code page, call the Windows <bpt id="p1">[</bpt>GetACP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)</ept> function from the .NET Framework on the Windows desktop.</source>
          <target state="translated">Per determinare la tabella codici attiva corrente, chiamare il Windows <bpt id="p1">[</bpt>GetACP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx)</ept> funzione da .NET Framework sul desktop di Windows.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> returns a cached instance with default settings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> Restituisce un'istanza memorizzata nella cache con le impostazioni predefinite.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>You should use the constructors of derived classes to get an instance with different settings.</source>
          <target state="translated">Utilizzare i costruttori delle classi derivate per ottenere un'istanza con impostazioni diverse.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> class provides a constructor that lets you enable error detection.</source>
          <target state="translated">Ad esempio, la <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> classe fornisce un costruttore che consente di abilitare il rilevamento errori.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source><ph id="ph1">&lt;paramref name="codepage" /&gt;</ph> is less than zero or greater than 65535.</source>
          
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source><ph id="ph1">&lt;paramref name="codepage" /&gt;</ph> is not supported by the underlying platform.</source>
          
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source><ph id="ph1">&lt;paramref name="codepage" /&gt;</ph> is not supported by the underlying platform.</source>
          
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The code page name of the preferred encoding.</source>
          
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Any value returned by the <ph id="ph1">&lt;see cref="P:System.Text.Encoding.WebName" /&gt;</ph> property is valid.</source>
          
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Possible values are listed in the Name column of the table that appears in the <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> class topic.</source>
          
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Returns the encoding associated with the specified code page name.</source>
          
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</source>
          
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The encoding that is associated with the specified code page.</source>
          
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method relies on the underlying platform to support most code pages.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> metodo si basa sulla piattaforma sottostante per supportare la maggior parte delle tabelle codici.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>However, the .NET Framework natively supports some encodings.</source>
          <target state="translated">Tuttavia, .NET Framework supporta in modo nativo alcune codifiche.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method returns any additional encodings that are made available by registering an <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> object.</source>
          <target state="translated">Oltre alle codifiche supportate in una versione della piattaforma specifica di .NET Framework, in modo intrinseco il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> il metodo restituisce le codifiche delle tabelle aggiuntive che vengono resi disponibili tramite la registrazione di un <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>If the same encoding has been registered by multiple <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> objects, this method returns the last one registered.</source>
          <target state="translated">Se la stessa codifica è stata registrata da più <ph id="ph1">&lt;xref:System.Text.EncodingProvider&gt;</ph> oggetti, questo metodo restituisce l'ultimo registrato.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The ANSI code pages can be different on different computers and can change on a single computer, leading to data corruption.</source>
          <target state="translated">Le tabelle codici ANSI possono essere diverse su computer diversi e possono modificare in un singolo computer, causando il danneggiamento dei dati.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>For the most consistent results, you should use a Unicode encoding, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.</source>
          <target state="translated">Per ottenere risultati più coerenti, è necessario utilizzare una codifica Unicode, ad esempio UTF-8 (tabella codici 65001) o UTF-16, anziché una tabella codici specifica.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>For a list of code pages, see the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class topic.</source>
          <target state="translated">Per un elenco di tabelle codici, vedere il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> method on the full .NET Framework on the Windows desktop to get a list of all encodings.</source>
          <target state="translated">È possibile chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> metodo in .NET Framework sul desktop di Windows per ottenere un elenco di tutte le codifiche.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> returns a cached instance with default settings.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> Restituisce un'istanza memorizzata nella cache con le impostazioni predefinite.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>You should use the constructors of derived classes to get an instance with different settings.</source>
          <target state="translated">Utilizzare i costruttori delle classi derivate per ottenere un'istanza con impostazioni diverse.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> class provides a constructor that lets you enable error detection.</source>
          <target state="translated">Ad esempio, la <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> classe fornisce un costruttore che consente di abilitare il rilevamento errori.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid code page name.</source>
          
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
          <source>The code page indicated by <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not supported by the underlying platform.</source>
          
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncodings">
          <source>Returns an array that contains all encodings.</source>
          
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetEncodings">
          <source>An array that contains all encodings.</source>
          
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>This method returns a list of supported encodings, uniquely distinguished by code page.</source>
          <target state="translated">Questo metodo restituisce un elenco di codifiche supportate, in modo univoco distinte dalla tabella codici.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>For a table that lists the supported encodings, see the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class topic.</source>
          <target state="translated">Per una tabella che elenca le codifiche supportate, vedere il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>The list of supported encodings returned by the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> method does not include any additional encodings made available by any <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> implementations that were registered by calls to the <ph id="ph3">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> method.</source>
          <target state="translated">L'elenco di codifiche supportate restituite dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> metodo non include le codifiche delle tabelle aggiuntive rese disponibili da qualsiasi <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> implementazioni che sono state registrate mediante chiamate al <ph id="ph3">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>Encodings 50220 and 50222 are both associated with the name "iso-2022-jp", but they are not identical.</source>
          <target state="translated">Le codifiche 50220 e 50222 sono entrambe associate al nome "iso-2022-jp", ma non sono identici.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>Encoding 50220 converts half-width Katakana characters to full-width Katakana characters, whereas encoding 50222 uses a shift-in/shift-out sequence to encode half-width Katakana characters.</source>
          <target state="translated">La codifica 50220 converte i caratteri Katakana a metà larghezza in caratteri Katakana a larghezza intera, mentre la codifica 50222 utilizza una sequenza di MAIUSC-in/MAIUSC-out per codificare i caratteri Katakana a metà larghezza.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>The display name for encoding 50222 is "Japanese (JIS-Allow 1 byte Kana - SO/SI)" to distinguish it from encoding 50220, which has the display name "Japanese (JIS)".</source>
          <target state="translated">Il nome visualizzato per la codifica 50222 è "giapponese (JIS-consente Kana - a 1 byte così / SI)" per distinguerla dalla codifica 50220, la visualizzazione con nome "giapponese (JIS)".</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>If you request the encoding name "iso-2022-jp", the .NET Framework returns encoding 50220.</source>
          <target state="translated">Se si richiede il nome di codifica "iso-2022-jp", .NET Framework restituisce la codifica 50220.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>However, the encoding that is appropriate for your app depends on the preferred treatment of the half-width Katakana characters.</source>
          <target state="translated">La codifica appropriata per l'applicazione dipende tuttavia la modalità di gestione Preferiti, i caratteri Katakana a metà larghezza.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>To get a specific encoding, you should use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method.</source>
          <target state="translated">Per ottenere una codifica specifica, è consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> is sometimes used to present the user with a list of encodings in a File <bpt id="p1">**</bpt>Save as<ept id="p1">**</ept> dialog box.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A&gt;</ph> a volte viene utilizzato per presentare all'utente un elenco di codifiche in un File <bpt id="p1">**</bpt>salvare come<ept id="p1">**</ept> la finestra di dialogo.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>However, many non-Unicode encodings are either incomplete and translate many characters to "?", or have subtly different behavior on different platforms.</source>
          <target state="translated">Tuttavia, molte codifiche non Unicode sono incompleti e numero di caratteri da convertire "?", o hanno un comportamento leggermente diverso su piattaforme diverse.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>Consider using UTF-8 or UTF-16 as the default.</source>
          <target state="translated">Considerare l'uso di UTF-8 o UTF-16 come il valore predefinito.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetEncodings">
          <source>The following example checks the values of the Boolean properties of each encoding.</source>
          <target state="translated">L'esempio seguente verifica i valori delle proprietà booleana di ogni tipo di codifica.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetHashCode">
          <source>Returns the hash code for the current instance.</source>
          
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetHashCode">
          <source>The hash code for the current instance.</source>
          
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>The number of characters to encode.</source>
          
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</source>
          
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>The maximum number of bytes produced by encoding the specified number of characters.</source>
          
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>The <ph id="ph1">`charCount`</ph> parameter actually specifies the number of <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects that represent the Unicode characters to encode, because the .NET Framework internally uses UTF-16 to represent Unicode characters.</source>
          <target state="translated">Il <ph id="ph1">`charCount`</ph> parametro effettivamente specifica il numero di <ph id="ph2">&lt;xref:System.Char&gt;</ph> gli oggetti che rappresentano i caratteri Unicode da codificare, poiché .NET Framework, UTF-16 viene utilizzata internamente per rappresentare caratteri Unicode.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>Consequently, most Unicode characters can be represented by one <ph id="ph1">&lt;xref:System.Char&gt;</ph> object, but a Unicode character represented by a surrogate pair, for example, requires two <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects.</source>
          <target state="translated">Di conseguenza, la maggior parte dei caratteri Unicode possono essere rappresentati da uno <ph id="ph1">&lt;xref:System.Char&gt;</ph> oggetto, ma un carattere Unicode rappresentato da una coppia di surrogati, ad esempio, richiede due <ph id="ph2">&lt;xref:System.Char&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> per archiviare i byte risultanti, è consigliabile utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>To calculate the maximum array size, use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> Recupera un numero caso peggiore, incluso il caso peggiore per l'oggetto attualmente selezionato <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>If a fallback is chosen with a potentially large string, <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> retrieves large values, particularly in cases where the worst case for the encoding involves switching modes for every character.</source>
          <target state="translated">Se si sceglie un fallback con una stringa potenzialmente grande, <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> recupera i valori di grandi dimensioni, in particolare nei casi in cui il caso peggiore per la codifica implica cambiare modalità per ogni carattere.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>For example, this can happen for ISO-2022-JP.</source>
          <target state="translated">Ad esempio, può verificarsi per ISO-2022-JP.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>For more information, see the blog entry "<bpt id="p1">[</bpt>What's with Encoding.GetMaxByteCount() and Encoding.GetMaxCharCount()?<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=153702)</ept>"</source>
          <target state="translated">Per ulteriori informazioni, vedere il post di blog "<bpt id="p1">[</bpt>novità con Encoding.GetMaxByteCount() ed Encoding.GetMaxCharCount()?<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=153702)</ept>"</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>(<ph id="ph1">http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx)</ph>.</source>
          <target state="translated">(<ph id="ph1">http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx)</ph>.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>In most cases, this method retrieves reasonable values for small strings.</source>
          <target state="translated">Nella maggior parte dei casi, questo metodo recupera i valori accettabili per stringhe di piccole dimensioni.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>For large strings, you might have to choose between using very large buffers and catching errors in the rare case when a more reasonable buffer is too small.</source>
          <target state="translated">Per le stringhe di grandi dimensioni, potrebbe essere necessario scegliere tra l'utilizzo di buffer molto grandi e rilevamento di errori nel raro caso quando un buffer più ragionevole è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>You might also want to consider a different approach using <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">È inoltre possibile utilizzare un approccio diverso <ph id="ph1">&lt;xref:System.Text.Encoding.GetByteCount%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>When using <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph>, you should allocate the output buffer based on the maximum size of the input buffer.</source>
          <target state="translated">Quando si utilizza <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph>, è consigliabile allocare il buffer di output in base alla dimensione massima del buffer di input.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>If the output buffer is constrained in size, you might use the <ph id="ph1">&lt;xref:System.Text.Encoding.Convert%2A&gt;</ph> method.</source>
          <target state="translated">Se il buffer di output è vincolato nelle dimensioni, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.Convert%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>Note that <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> considers potential leftover surrogates from a previous decoder operation.</source>
          <target state="translated">Si noti che <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph> prende in considerazione potenziali surrogati residui di un'operazione precedente del decodificatore.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>Because of the decoder, passing a value of 1 to the method retrieves 2 for a single-byte encoding, such as ASCII.</source>
          <target state="translated">A causa del decodificatore, passando il valore 1 per il metodo recupera 2 per una codifica a byte singolo, ad esempio ASCII.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>You should use the <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding.IsSingleByte%2A&gt;</ph> property if this information is necessary.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding.IsSingleByte%2A&gt;</ph> proprietà se queste informazioni sono necessarie.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">`GetMaxByteCount(N)`</ph> is not necessarily the same value as <ph id="ph2">`N* GetMaxByteCount(1)`</ph>.</source>
          <target state="translated"><ph id="ph1">`GetMaxByteCount(N)`</ph> non è necessariamente lo stesso valore di <ph id="ph2">`N* GetMaxByteCount(1)`</ph>.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
          <source>All <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> implementations must guarantee that no buffer overflow exceptions occur if buffers are sized according to the results of this method's calculations.</source>
          <target state="translated">Tutti <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> implementazioni devono garantire che nessun eccezioni di overflow del buffer viene eseguito se i buffer vengono ridimensionati in base ai risultati dei calcoli di questo metodo.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>The number of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>The maximum number of characters produced by decoding the specified number of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> to store the resulting characters, you should use the <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare le dimensioni della matrice esatta richiesta dal <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A&gt;</ph> per archiviare i caratteri risultanti, è consigliabile utilizzare il <ph id="ph2">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>To calculate the maximum array size, use the <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method.</source>
          <target state="translated">Per calcolare la dimensione massima della matrice, utilizzare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> method generally allows allocation of less memory, while the <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> metodo consente in genere l'allocazione di memoria inferiore, mentre il <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> metodo in genere viene eseguito più velocemente.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> Recupera un numero caso peggiore, incluso il caso peggiore per l'oggetto attualmente selezionato <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>If a fallback is chosen with a potentially large string, <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> retrieves large values.</source>
          <target state="translated">Se si sceglie un fallback con una stringa potenzialmente grande, <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> recupera i valori di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>In most cases, this method retrieves reasonable numbers for small strings.</source>
          <target state="translated">Nella maggior parte dei casi, questo metodo recupera ragionevole per stringhe di piccole dimensioni.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is too small.</source>
          <target state="translated">Per le stringhe di grandi dimensioni, potrebbe essere necessario scegliere tra l'utilizzo di buffer molto grandi e rilevamento di errori nel raro caso che un buffer più ragionevole è troppo piccolo.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>You might also want to consider a different approach using <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">È inoltre possibile utilizzare un approccio diverso <ph id="ph1">&lt;xref:System.Text.Encoding.GetCharCount%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> has no relation to <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> non ha alcuna relazione di <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>If you needs a similar function to use with <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>, you should use <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph>.</source>
          <target state="translated">Se si necessita di una funzione simile da utilizzare con <ph id="ph1">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph>, si consiglia di utilizzare <ph id="ph2">&lt;xref:System.Text.Encoding.GetMaxByteCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>When using <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph>, you should allocate the output buffer based on the maximum size of the input buffer.</source>
          <target state="translated">Quando si utilizza <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph>, è consigliabile allocare il buffer di output in base alla dimensione massima del buffer di input.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>If the output buffer is constrained in size, you might use the <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Se il buffer di output è vincolato nelle dimensioni, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>Note that <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> considers the worst case for leftover bytes from a previous encoder operation.</source>
          <target state="translated">Si noti che <ph id="ph1">&lt;xref:System.Text.Encoding.GetMaxCharCount%2A&gt;</ph> considera il caso peggiore per byte residui restituiti da una precedente operazione del codificatore.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>For most code pages, passing a value of 0 to this method retrieves values greater than or equal to 1.</source>
          <target state="translated">Per la maggior parte delle tabelle codici, passando un valore pari a 0 a questo metodo recupera i valori maggiori o uguali a 1.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">`GetMaxCharCount(N)`</ph> is not necessarily the same value as <ph id="ph2">`N* GetMaxCharCount(1)`</ph>.</source>
          <target state="translated"><ph id="ph1">`GetMaxCharCount(N)`</ph> non è necessariamente lo stesso valore di <ph id="ph2">`N* GetMaxCharCount(1)`</ph>.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.</source>
          <target state="translated">Nell'esempio seguente consente di codificare una stringa in una matrice di byte e quindi decodifica i byte in una matrice di caratteri.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
          <source>All <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> implementations must guarantee that no buffer overflow exceptions occur if buffers are sized according to the results of this method's calculations.</source>
          <target state="translated">Tutti <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> implementazioni devono garantire che nessun eccezioni di overflow del buffer viene eseguito se i buffer vengono ridimensionati in base ai risultati dei calcoli di questo metodo.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetPreamble">
          <source>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</source>
          
        </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetPreamble">
          <source>A byte array containing a sequence of bytes that specifies the encoding used.</source>
          
        </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetPreamble">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetPreamble">
          <source>A byte array of length zero, if a preamble is not required.</source>
          
        </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>Optionally, the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object provides a preamble that is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</source>
          <target state="translated">Facoltativamente, il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> oggetto fornisce un preambolo che è una matrice di byte che possono essere preceduti della sequenza di byte risultante dal processo di codifica.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>If the preamble contains a byte order mark (in Unicode, code point U+FEFF), it helps the decoder determine the byte order and the transformation format or UTF.</source>
          <target state="translated">Se il preambolo contiene un byte order mark (in Unicode, il punto di codice U + FEFF), consente il decodificatore di determinare l'ordine dei byte e il formato di trasformazione o UTF.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</source>
          <target state="translated">Il byte order mark (BOM) Unicode viene serializzato nel modo seguente (in esadecimale):</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>UTF-8: EF BB BF</source>
          <target state="translated">UTF-8: EF BB BF</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>UTF-16 big endian byte order: FE FF</source>
          <target state="translated">Ordine dei byte UTF-16 big endian: FF FE</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>UTF-16 little endian byte order: FF FE</source>
          <target state="translated">Ordine dei byte little-endian UTF-16 little: FF FE</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>UTF-32 big endian byte order: 00 00 FE FF</source>
          <target state="translated">Ordine dei byte big endian UTF-32: 00 00 FF FE</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>UTF-32 little endian byte order: FF FE 00 00</source>
          <target state="translated">Ordine dei byte little-endian little UTF-32: FF FE 00 00</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>You should use the BOM, because it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object, for example, untagged or improperly tagged web data or random text files stored when a business did not have international concerns or other data.</source>
          <target state="translated">È consigliabile utilizzare il BOM, poiché fornisce alcuni identificazione di una codifica per i file che non hanno più riferimento a quasi il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> oggetto, ad esempio, o senza dati web o file di testo casuali archiviati quando una società non hanno internazionali problemi o altri dati.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>Often user problems might be avoided if data is consistently and properly tagged, preferably in UTF-8 or UTF-16.</source>
          <target state="translated">Spesso i problemi dell'utente potrebbero essere evitati se i dati in modo coerente e corretta tag, preferibilmente in UTF-8 o UTF-16.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>For standards that provide an encoding type, a BOM is somewhat redundant.</source>
          <target state="translated">Per gli standard che forniscono un tipo di codifica, un BOM risulta piuttosto ridondante.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>However, it can be used to help a server send the correct encoding header.</source>
          <target state="translated">Tuttavia, può essere utilizzato per consentire a un server di inviare l'intestazione di codifica corretta.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</source>
          <target state="translated">In alternativa, può essere utilizzato come fallback nel caso in cui la codifica in caso contrario viene persa.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>There are some disadvantages to using a BOM.</source>
          <target state="translated">Esistono alcuni svantaggi dell'utilizzo di una distinta base.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>For example, knowing how to limit the database fields that use a BOM can be difficult.</source>
          <target state="translated">Ad esempio, può essere difficile sapere come limitare i campi del database che utilizzano una distinta base.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</source>
          <target state="translated">La concatenazione di file può rappresentare un problema, inoltre, ad esempio, quando i file vengono uniti in tale modo un carattere non necessario può finire al centro dati.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>In spite of the few disadvantages, however, the use of a BOM is highly recommended.</source>
          <target state="translated">Nonostante alcuni svantaggi, tuttavia, l'utilizzo di un indicatore ordine byte è consigliabile.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>For more information on byte order and the byte order mark, see The Unicode Standard at the <bpt id="p1">[</bpt>Unicode home page<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=37123)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'ordine dei byte e il byte order mark, vedere lo Unicode Standard nella <bpt id="p1">[</bpt>home page di Unicode<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=37123)</ept>.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble.</source>
          <target state="translated">Per garantire che i byte codificati vengano decodificati correttamente, si deve aggiungere byte codificati con un preambolo.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>However, most encodings do not provide a preamble.</source>
          <target state="translated">Tuttavia, la maggior parte delle codifiche non forniscono un preambolo.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>To ensure that the encoded bytes are decoded properly, you should use a Unicode encoding, that is, <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, or <ph id="ph3">&lt;xref:System.Text.UTF32Encoding&gt;</ph>, with a preamble.</source>
          <target state="translated">Per garantire che i byte codificati vengano decodificati correttamente, è consigliabile utilizzare una codifica Unicode, vale a dire <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph>, <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, o <ph id="ph3">&lt;xref:System.Text.UTF32Encoding&gt;</ph>, con un preambolo.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetPreamble">
          <source>The following example determines the byte order of the encoding based on the preamble.</source>
          <target state="translated">Nell'esempio seguente determina l'ordine dei byte della codifica in base al preambolo.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>When overridden in a derived class, decodes a sequence of bytes into a string.</source>
          
        </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>The byte array containing the sequence of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</source>
          
        </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>A string that contains the results of decoding the specified sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> oggetto restituito dal <ph id="ph2">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> di un deri (metodo) classe Consenti.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>See the Remarks section of the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> reference topic for a discussion of decoding techniques and considerations.</source>
          <target state="translated">Vedere la sezione Note del <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> argomento di riferimento per una descrizione delle considerazioni e le tecniche di decodifica.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>Note that the precise behavior of the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method for a particular <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> implementation depends on the fallback strategy defined for that <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> object.</source>
          <target state="translated">Si noti che il comportamento del preciso di <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo per un particolare <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> implementazione dipende la strategia di fallback definita per tale <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>For more information, see the "Choosing a Fallback Strategy" section of the <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> topic.</source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione "Scelta di una strategia di Fallback" del <bpt id="p1">[</bpt>codifica dei caratteri in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> argomento.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>The following example reads a UTF-8 encoded string from a binary file represented by a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
          <target state="translated">Nell'esempio seguente legge una stringa con codificata UTF-8 da un file binario rappresentato da un <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29&gt;</ph> method to perform the decoding.</source>
          <target state="translated">Per i file più piccoli di 2.048 byte, legge il contenuto dell'intero file in una matrice di byte e chiama il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29&gt;</ph> metodo per eseguire la decodifica.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>For larger files, it reads 2,048 bytes at a time into a byte array, calls the <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to determine how many characters are contained in the array, and then calls the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to perform the decoding.</source>
          <target state="translated">Per i file più grandi, legge 2.048 byte alla volta in una matrice di byte, le chiamate di <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> metodo per determinare il numero di caratteri contenuti nella matrice e chiama quindi il <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> metodo per eseguire la decodifica.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.</source>
          <target state="translated">Nell'esempio viene utilizzato il testo seguente, che deve essere salvato in un file con codificata UTF-8 denominato Utf8Example.txt.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>The byte array contains invalid Unicode code points.</source>
          
        </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[])">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>A pointer to a byte array.</source>
          
        </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>The number of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.</source>
          
        </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>A string that contains the results of decoding the specified sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method is designed to optimize performance when you have a native pointer to a byte array.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo consente di ottimizzare le prestazioni quando si dispone di un puntatore nativo in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>Instead of creating a managed byte array and then decoding it, you can instead call this method without having to create any intermediate objects.</source>
          <target state="translated">Invece di creare una matrice di byte gestita e averlo decodificato, è invece possibile chiamare questo metodo senza dover creare eventuali oggetti intermedi.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> oggetto restituito dal <ph id="ph2">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> di un deri (metodo) classe Consenti.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>See the Remarks section of the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> reference topic for a discussion of decoding techniques and considerations.</source>
          <target state="translated">Vedere la sezione Note del <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> argomento di riferimento per una descrizione delle considerazioni e le tecniche di decodifica.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>Note that the precise behavior of the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> method for a particular <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> implementation depends on the fallback strategy defined for that <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> object.</source>
          <target state="translated">Si noti che il comportamento del preciso di <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%2A&gt;</ph> metodo per un particolare <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> implementazione dipende la strategia di fallback definita per tale <ph id="ph3">&lt;xref:System.Text.Encoding&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>For more information, see the "Choosing a Fallback Strategy" section of the <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> topic.</source>
          <target state="translated">Per ulteriori informazioni, vedere la sezione "Scelta di una strategia di Fallback" del <bpt id="p1">[</bpt>codifica dei caratteri in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> argomento.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is a null pointer.</source>
          
        </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>A   fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for a complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first byte to decode.</source>
          
        </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to decode.</source>
          
        </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</source>
          
        </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>A string that contains the results of decoding the specified sequence of bytes.</source>
          
        </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method, respectively, of a derived class.</source>
          <target state="translated">Se il conversione dei dati sono disponibili solo in blocchi sequenziali (ad esempio i dati letti da un flusso) o se la quantità di dati è talmente grande che deve essere suddiviso in blocchi più piccoli, è necessario utilizzare il <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> fornito dal <ph id="ph3">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> metodo o <ph id="ph4">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> (metodo), rispettivamente, di una classe derivata.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>See the Remarks section of the <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> reference topic for a discussion of decoding techniques and considerations.</source>
          <target state="translated">Vedere la sezione Note del <ph id="ph1">&lt;xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType&gt;</ph> argomento di riferimento per una descrizione delle considerazioni e le tecniche di decodifica.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The following example reads a UTF-8 encoded string from a binary file that is represented by a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
          <target state="translated">Nell'esempio seguente legge una stringa con codificata UTF-8 da un file binario è rappresentato da un <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to perform the decoding.</source>
          <target state="translated">Per i file più piccoli di 2.048 byte, legge il contenuto dell'intero file in una matrice di byte e chiama il <ph id="ph1">&lt;xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> metodo per eseguire la decodifica.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>For larger files, it reads 2,048 bytes at a time into a byte array, calls the <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to determine how many characters are contained in the array, and then calls the <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to perform the decoding.</source>
          <target state="translated">Per i file più grandi, legge 2.048 byte alla volta in una matrice di byte, le chiamate di <ph id="ph1">&lt;xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> metodo per determinare il numero di caratteri contenuti nella matrice e chiama quindi il <ph id="ph2">&lt;xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> metodo per eseguire la decodifica.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.</source>
          <target state="translated">Nell'esempio viene utilizzato il testo seguente, che deve essere salvato in un file con codificata UTF-8 denominato Utf8Example.txt.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array contains invalid Unicode code points.</source>
          
        </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          
        </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          
        </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for complete explanation)</source>
          
        </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          
        </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.HeaderName">
          <source>When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.</source>
          
        </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>A name for the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> to use with mail agent header tags.</source>
          <target state="translated">Nome dell'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente da usare con i tag di intestazione degli agenti di posta.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>-or-</source>
          <target state="translated">-oppure-</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>An empty string (""), if the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> cannot be used.</source>
          <target state="translated">Stringa vuota (""), se non è possibile usare l'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>If you need an encoding for a header name, you should call the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Text.Encoding.HeaderName%2A&gt;</ph> property.</source>
          <target state="translated">Se è necessaria una codifica per un nome di intestazione, è necessario chiamare il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> metodo con il <ph id="ph2">&lt;xref:System.Text.Encoding.HeaderName%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>Often the method retrieves a different encoding from the test encoding furnished in the call.</source>
          <target state="translated">Spesso il metodo recupera una codifica diversa dalla codifica di test specificati nella chiamata.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>Generally only email applications need to retrieve such an encoding.</source>
          <target state="translated">Solo le applicazioni di posta elettronica in genere necessario recuperare tale codifica.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>In some cases, the value of the <ph id="ph1">&lt;xref:System.Text.Encoding.BodyName%2A&gt;</ph> property corresponds to the international standard that defines that encoding.</source>
          <target state="translated">In alcuni casi, il valore di <ph id="ph1">&lt;xref:System.Text.Encoding.BodyName%2A&gt;</ph> proprietà corrisponde allo standard internazionale che definisce tale codifica.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>This doesn't mean that the implementation complies in full with that standard.</source>
          <target state="translated">Questo non significa che l'implementazione sia conforme in modo completo con tale standard.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>Note that <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> returns the name to use to describe an encoding.</source>
          <target state="translated">Si noti che <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> restituisce il nome da utilizzare per descrivere una codifica.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.HeaderName%2A&gt;</ph> property defines a different encoding that might work better for an email application, for example.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.HeaderName%2A&gt;</ph> proprietà definisce che potrebbe essere adatti per un'applicazione di posta elettronica, ad esempio una codifica diversa.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>However, use of the property to define the encoding is not recommended.</source>
          <target state="translated">Tuttavia, non è consigliabile usare la proprietà per definire la codifica.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente recupera i nomi diversi per ogni tipo di codifica e visualizza le codifiche con uno o più nomi diversi da <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.HeaderName">
          <source>It displays <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> but does not compare against it.</source>
          <target state="translated">Visualizza <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> ma non compare su di essa.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" uid="T:System.Text.Encoding">
          <source>Gets a value indicating whether the current encoding is always normalized.</source>
          
        </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.IsAlwaysNormalized">
          <source>Gets a value indicating whether the current encoding is always normalized, using the default normalization form.</source>
          
        </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.IsAlwaysNormalized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> is always normalized; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.IsAlwaysNormalized">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.IsAlwaysNormalized">
          <source>The default normalization form is <ph id="ph1">&lt;xref:System.Text.NormalizationForm.FormC&gt;</ph>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</source>
          <target state="translated">Il formato di normalizzazione predefinito è <ph id="ph1">&lt;xref:System.Text.NormalizationForm.FormC&gt;</ph>, che utilizza la scomposizione canonica completa, seguita dalla sostituzione delle sequenze con i relativi componenti primari, se possibile.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Text.NormalizationForm" /&gt;</ph> values.</source>
          
        </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
          <source>When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.</source>
          
        </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> object is always normalized using the specified <ph id="ph3">&lt;see cref="T:System.Text.NormalizationForm" /&gt;</ph> value; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
          <source>The default normalization form is <ph id="ph1">&lt;xref:System.Text.NormalizationForm.FormC&gt;</ph>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.</source>
          <target state="translated">Il formato di normalizzazione predefinito è <ph id="ph1">&lt;xref:System.Text.NormalizationForm.FormC&gt;</ph>, che utilizza la scomposizione canonica completa, seguita dalla sostituzione delle sequenze con i relativi componenti primari, se possibile.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.IsBrowserDisplay">
          <source>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.</source>
          
        </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsBrowserDisplay">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> can be used by browser clients for displaying content; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente può essere usato dai browser client per visualizzare il contenuto; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsBrowserDisplay">
          <source>The following example checks the values of the Boolean properties of each encoding.</source>
          <target state="translated">L'esempio seguente verifica i valori delle proprietà booleana di ogni tipo di codifica.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.IsBrowserSave">
          <source>When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.</source>
          
        </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsBrowserSave">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> can be used by browser clients for saving content; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente può essere usato dai browser client per salvare il contenuto; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsBrowserSave">
          <source>The following example checks the values of the Boolean properties of each encoding.</source>
          <target state="translated">L'esempio seguente verifica i valori delle proprietà booleana di ogni tipo di codifica.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.IsMailNewsDisplay">
          <source>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.</source>
          
        </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsMailNewsDisplay">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> can be used by mail and news clients for displaying content; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente può essere usato dai client di posta e dai client delle news per visualizzare il contenuto; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsMailNewsDisplay">
          <source>The following example checks the values of the Boolean properties of each encoding.</source>
          <target state="translated">L'esempio seguente verifica i valori delle proprietà booleana di ogni tipo di codifica.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.IsMailNewsSave">
          <source>When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.</source>
          
        </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsMailNewsSave">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> can be used by mail and news clients for saving content; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente può essere usato dai client di posta e dai client delle news per salvare il contenuto; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsMailNewsSave">
          <source>The following example checks the values of the Boolean properties of each encoding.</source>
          <target state="translated">L'esempio seguente verifica i valori delle proprietà booleana di ogni tipo di codifica.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.IsReadOnly">
          <source>When overridden in a derived class, gets a value indicating whether the current encoding is read-only.</source>
          
        </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente è di sola lettura; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsReadOnly">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Il valore predefinito è <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.IsSingleByte">
          <source>When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</source>
          
        </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsSingleByte">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> uses single-byte code points; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente usa punti di codice a un byte; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsSingleByte">
          <source>For a single-byte encoding, for example, <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph>, this property retrieves <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Per un singolo byte di codifica, ad esempio, <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph>, questa proprietà recupera <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsSingleByte">
          <source>You should be careful in what your application does with the value for <ph id="ph1">&lt;xref:System.Text.Encoding.IsSingleByte%2A&gt;</ph>.</source>
          <target state="translated">È necessario prestare attenzione nella funzione con il valore per l'applicazione <ph id="ph1">&lt;xref:System.Text.Encoding.IsSingleByte%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsSingleByte">
          <source>An assumption of how an Encoding will proceed may still be wrong.</source>
          <target state="translated">Un presupposto di come sarà possibile proseguire una codifica potrebbe essere errato.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsSingleByte">
          <source>For example, Windows-1252 has a value of <ph id="ph1">`true`</ph> for <ph id="ph2">&lt;xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType&gt;</ph>, but Encoding.GetMaxByteCount(1) returns 2.</source>
          <target state="translated">Ad esempio, Windows-1252 ha un valore di <ph id="ph1">`true`</ph> per <ph id="ph2">&lt;xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=nameWithType&gt;</ph>, ma Encoding.GetMaxByteCount(1) restituisce 2.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsSingleByte">
          <source>This is because the method considers potential leftover surrogates from a previous decoder operation.</source>
          <target state="translated">Questo avviene perché il metodo prende in considerazione potenziali surrogati residui di un'operazione precedente del decodificatore.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.IsSingleByte">
          <source>The following example checks the values of the Boolean properties of each encoding.</source>
          <target state="translated">L'esempio seguente verifica i valori delle proprietà booleana di ogni tipo di codifica.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>A subclass of <ph id="ph1">&lt;see cref="T:System.Text.EncodingProvider" /&gt;</ph> that provides access to additional character encodings.</source>
          
        </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>Registers an encoding provider.</source>
          
        </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> method allows you to register a class derived from <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> that makes character encodings available on a platform that does not otherwise support them.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> metodo consente di registrare una classe derivata da <ph id="ph2">&lt;xref:System.Text.EncodingProvider&gt;</ph> che rende disponibili su una piattaforma non supportati in caso contrario le codifiche di caratteri.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>Once the encoding provider is registered, the encodings that it supports can be retrieved by calling any <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType&gt;</ph> overload.</source>
          <target state="translated">Una volta registrato il provider di codifica, supporta le codifiche possono essere recuperate chiamando uno <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType&gt;</ph> rapporto di overload.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>If there are multiple encoding providers, the <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType&gt;</ph> method attempts to retrieve a specified encoding from each provider starting with the one most recently registered.</source>
          <target state="translated">Se sono presenti più provider di codifica, il <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType&gt;</ph> metodo tenta di recuperare una codifica specificata da ogni provider a partire da quello registrato più di recente.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>Registering an encoding provider by using the <ph id="ph1">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> method also modifies the behavior of the <bpt id="p1">[</bpt>Encoding.GetEncoding(Int32)<ept id="p1">](&lt;xref:System.Text.Encoding.GetEncoding(System.Int32)&gt;)</ept> and <bpt id="p2">[</bpt>EncodingProvider.GetEncoding(Int32, EncoderFallback, DecoderFallback)<ept id="p2">](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback))</ept> methods when passed an argument of <ph id="ph2">`0`</ph>:</source>
          <target state="translated">La registrazione di un provider di codifica usando il <ph id="ph1">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> metodo modifica anche il comportamento del <bpt id="p1">[</bpt>Encoding.GetEncoding(Int32)<ept id="p1">](&lt;xref:System.Text.Encoding.GetEncoding(System.Int32)&gt;)</ept> e <bpt id="p2">[</bpt>EncodingProvider.GetEncoding (Int32, EncoderFallback, DecoderFallback )<ept id="p2">](xref:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback))</ept> metodi quando viene passato un argomento di <ph id="ph2">`0`</ph>:</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>If the registered provider is the <ph id="ph1">&lt;xref:System.Text.CodePagesEncodingProvider&gt;</ph>, the method returns the encoding that matches the system active code page when running on the Windows operating system.</source>
          <target state="translated">Se il provider registrato il <ph id="ph1">&lt;xref:System.Text.CodePagesEncodingProvider&gt;</ph>, il metodo restituisce la codifica che corrisponde a codici attivo del sistema durante l'esecuzione nel sistema operativo Windows.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>A custom encoding provider can choose which encoding to return when either of these <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> method overloads is passed an argument of <ph id="ph2">`0`</ph>.</source>
          <target state="translated">Un provider di codifica personalizzato è possibile scegliere la codifica da restituire quando uno di questi <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncoding%2A&gt;</ph> overload del metodo è stato passato un argomento di <ph id="ph2">`0`</ph>.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>The provider can also choose to not return an encoding by having the <ph id="ph1">&lt;xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType&gt;</ph> method return <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Il provider può anche scegliere di non restituire una codifica con il <ph id="ph1">&lt;xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType&gt;</ph> metodo <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source><ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph> includes one encoding provider, <ph id="ph2">&lt;xref:System.Text.CodePagesEncodingProvider&gt;</ph>, that makes the encodings available that are present in the full .NET Framework but are not available in <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph> include un provider di codifica <ph id="ph2">&lt;xref:System.Text.CodePagesEncodingProvider&gt;</ph>, che rende disponibili le codifiche sono presenti in .NET Framework completo, ma non disponibili in <ph id="ph3">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>By default, <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph> only supports the Unicode encodings, ASCII, and code page 28591.</source>
          <target state="translated">Per impostazione predefinita, <ph id="ph1">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph> supporta solo le codifiche Unicode, ASCII e tabella codice 28591.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>If the same encoding provider is used in multiple calls to the <ph id="ph1">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> method, only the first method call registers the provider.</source>
          <target state="translated">Se lo stesso provider di codifica viene utilizzato in più chiamate al <ph id="ph1">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> (metodo), solo la prima chiamata al metodo registra il provider.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>Subsequent calls are ignored.</source>
          <target state="translated">Le chiamate successive vengono ignorate.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>If the <ph id="ph1">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> method is called to register multiple providers that handle the same encoding, the last registered provider is the used for all encoding and decoding operations.</source>
          <target state="translated">Se il <ph id="ph1">&lt;xref:System.Text.Encoding.RegisterProvider%2A&gt;</ph> metodo viene chiamato per registrare più provider che gestiscono la stessa codifica, l'ultimo provider registrato è l'oggetto utilizzato per tutte la codifica e le operazioni di decodifica.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source>Any previously registered providers are ignored.</source>
          <target state="translated">Tutti i provider registrati in precedenza vengono ignorati.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" uid="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
          <source><ph id="ph1">&lt;paramref name="provider" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          
        </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.Unicode">
          <source>Gets an encoding for the UTF-16 format using the little endian byte order.</source>
          
        </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Unicode">
          <source>An encoding for the UTF-16 format using the little endian byte order.</source>
          <target state="translated">Codifica per il formato UTF-16 che usa l'ordine dei byte little-endian.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Unicode">
          <source>For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
          <target state="translated">Per informazioni sulle codifiche supportate da .NET Framework e una descrizione della codifica per l'utilizzo di Unicode, vedere <bpt id="p1">[</bpt>codifica dei caratteri in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Unicode">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object that is returned by this property may not have the appropriate behavior for your app.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> oggetto restituito da questa proprietà potrebbe non essere il comportamento appropriato per l'app.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Unicode">
          <source>It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark ("?") character.</source>
          <target state="translated">Usa il fallback di sostituzione per sostituire ogni stringa che non può codificare e ogni byte che non può decodificare con un punto interrogativo ("?") caratteri.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Unicode">
          <source>Instead, you can call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> constructor to instantiate a little endian <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object whose fallback is either an <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> or a <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">In alternativa, è possibile chiamare il <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> costruttore per creare un'istanza di un little endian <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> oggetto il cui fallback è un <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> o <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.Unicode">
          <source>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.UTF32">
          <source>Gets an encoding for the UTF-32 format using the little endian byte order.</source>
          
        </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF32">
          <source>An  encoding object for the UTF-32 format using the little endian byte order.</source>
          <target state="translated">Oggetto codifica per il formato UTF-32 che usa l'ordine dei byte little-endian.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF32">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> object that is returned by this property may not have the appropriate behavior for your app.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.UTF32Encoding&gt;</ph> oggetto restituito da questa proprietà potrebbe non essere il comportamento appropriato per l'app.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF32">
          <source>It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with the Unicode REPLACEMENT CHARACTER (U+FFFE).</source>
          <target state="translated">Usa il fallback di sostituzione per sostituire ogni stringa che non può codificare e ogni byte che non può decodificare con il carattere Unicode REPLACEMENT CHARACTER (U + FFFE).</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF32">
          <source>Instead, you can call the <ph id="ph1">&lt;xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> constructor to instantiate a <ph id="ph2">&lt;xref:System.Text.UTF32Encoding&gt;</ph> object whose fallback is either an <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> or a <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">In alternativa, è possibile chiamare il <ph id="ph1">&lt;xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> costruttore per creare un'istanza di un <ph id="ph2">&lt;xref:System.Text.UTF32Encoding&gt;</ph> oggetto il cui fallback è un <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> o un <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF32">
          <source>For a discussion of little endian byte order, see the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class topic.</source>
          <target state="translated">Per una discussione sull'ordine dei byte little-endian little, vedere il <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF32">
          <source>For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
          <target state="translated">Per informazioni sulle codifiche supportate da .NET Framework e una descrizione della codifica per l'utilizzo di Unicode, vedere <bpt id="p1">[</bpt>codifica dei caratteri in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF32">
          <source>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.UTF7">
          <source>Gets an encoding for the UTF-7 format.</source>
          
        </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF7">
          <source>An encoding for the UTF-7 format.</source>
          <target state="translated">Codifica per il formato UTF-7.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF7">
          <source>UTF-7 encoding is used primarily in environments that historically have been restricted to 7 bits, such as NNTP and some email applications.</source>
          <target state="translated">La codifica UTF-7 viene utilizzata principalmente in ambienti che sono stati storicamente a 7 bit, ad esempio NNTP e alcune applicazioni di posta elettronica.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF7">
          <source>Because of issues with robustness and security, you should not use UTF7 encoding in 8-bit environments where UTF-8 encoding can be used instead.</source>
          <target state="translated">A causa di problemi con affidabilità e sicurezza, è consigliabile non utilizzare UTF7 codifica negli ambienti a 8 bit in cui la codifica UTF-8 è invece possibile usare.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF7">
          <source>The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.</source>
          <target state="translated">Nell'esempio seguente determina il numero di byte necessari per codificare una matrice di caratteri, codifica i caratteri e visualizza il numero di byte risultante.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.UTF8">
          <source>Gets an encoding for the UTF-8 format.</source>
          
        </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>An encoding for the UTF-8 format.</source>
          <target state="translated">Codifica per il formato UTF-8.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>This property returns a <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object that encodes Unicode (UTF-16-encoded) characters into a sequence of one to four bytes per character, and that decodes a UTF-8-encoded byte array to Unicode (UTF-16-encoded) characters.</source>
          <target state="translated">Questa proprietà restituisce un <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> oggetto che consente di codificare i caratteri Unicode (codifica UTF-16) in una sequenza di uno a quattro byte per carattere, e che consente di decodificare una matrice di byte con codifica UTF-8 per i caratteri Unicode (codifica UTF-16).</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>For information about the character encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
          <target state="translated">Per informazioni sulle codifiche di caratteri supportate da .NET Framework e una descrizione della codifica per l'utilizzo di Unicode, vedere <bpt id="p1">[</bpt>codifica dei caratteri in .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>The <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object that is returned by this property might not have the appropriate behavior for your app.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> oggetto restituito da questa proprietà potrebbe non essere il comportamento appropriato per l'app.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>It returns a <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object that provides a Unicode byte order mark (BOM).</source>
          <target state="translated">Restituisce un <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> oggetto che fornisce un byte order mark (BOM) di Unicode.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>To instantiate a UTF8 encoding that doesn't provide a BOM, call any overload of the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Per creare un'istanza di una codifica UTF8, che non forniscono un indicatore ordine byte, chiamare un overload del <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.%23ctor%2A&gt;</ph> costruttore.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>It returns a <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object that uses replacement fallback to replace each string that it can't encode and each byte that it can't decode with a question mark ("?") character.</source>
          <target state="translated">Restituisce un <ph id="ph1">&lt;xref:System.Text.UTF8Encoding&gt;</ph> oggetto che usa il fallback di sostituzione per sostituire ogni stringa che non può codificare e ogni byte che non può decodificare con un punto interrogativo ("?") caratteri.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>Instead, you can call the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> constructor to instantiate a <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> object whose fallback is either an <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> or a <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">In alternativa, è possibile chiamare il <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> costruttore per creare un'istanza di un <ph id="ph2">&lt;xref:System.Text.UTF8Encoding&gt;</ph> oggetto il cui fallback è un <ph id="ph3">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> o un <ph id="ph4">&lt;xref:System.Text.DecoderFallbackException&gt;</ph>, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>The following example defines an array that consists of the following characters:</source>
          <target state="translated">L'esempio seguente definisce una matrice che include i seguenti caratteri:</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>LATIN SMALL LETTER Z (U+007A)</source>
          <target state="translated">LATINO Z (U + 007A)</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>LATIN SMALL LETTER A (U+0061)</source>
          <target state="translated">CARATTERE ALFABETO LATINO (U + 0061)</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>COMBINING BREVE (U+0306)</source>
          <target state="translated">COMBINAZIONE LATINO (U + 0306)</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>LATIN SMALL LETTER AE WITH ACUTE (U+01FD)</source>
          <target state="translated">CARATTERE ALFABETO LATINO CON ACUTI (U + 01FD)</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>GREEK SMALL LETTER BETA (U+03B2)</source>
          <target state="translated">LETTERA GRECA BETA (U + 03B2)</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>A surrogate pair (U+D800 U+DD54) that forms GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS (U+10154).</source>
          <target state="translated">Una coppia di surrogati (U + D800 U + DD54) che costituisce greco ACROPHONIC ATTIC uno MIGLIAIA STATERS (U + 10154).</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>It displays the UTF-16 code units of each character and determines the number of bytes required by a UTF-8 encoder to encode the character array.</source>
          <target state="translated">Visualizza le unità di codice UTF-16 di ciascun carattere e determina il numero di byte necessari da un codificatore UTF-8 per codificare la matrice di caratteri.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.UTF8">
          <source>It then encodes the characters and displays the resulting UTF-8-encoded bytes.</source>
          <target state="translated">Quindi, vengono codificati i caratteri e visualizza i byte con codifica UTF-8 risultanti.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.WebName">
          <source>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>The IANA name for the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated">Nome IANA per l'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> property is the same as the <ph id="ph2">&lt;xref:System.Text.EncodingInfo.Name%2A&gt;</ph> property.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> proprietà è lo stesso come il <ph id="ph2">&lt;xref:System.Text.EncodingInfo.Name%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>Note that <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> returns an IANA-registered name for the encoding.</source>
          <target state="translated">Si noti che <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> restituisce un nome registrato con IANA per la codifica.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>When its value is the name of a standard, the implementation of the encoding might not conform in full to that standard.</source>
          <target state="translated">Quando il relativo valore è il nome di uno standard, l'implementazione della codifica potrebbe non essere conforme in modo completo a tale standard.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.HeaderName%2A&gt;</ph> property defines a different encoding that might work better for email headers.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.HeaderName%2A&gt;</ph> proprietà definisce una codifica diversa che potrebbe funzionare in modo migliore per le intestazioni di messaggio di posta elettronica.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>However, most apps should use <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> instead.</source>
          <target state="translated">Tuttavia, è consigliabile utilizzare la maggior parte delle app <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> invece.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>For more information on the IANA, go to <bpt id="p1">[</bpt>www.iana.org<ept id="p1">](http://www.iana.org/)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'autorità IANA, visitare <bpt id="p1">[</bpt>www.iana.org<ept id="p1">](http://www.iana.org/)</ept>.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType&gt;</ph> is the same as the <ph id="ph2">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph> returned by <ph id="ph3">&lt;xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A?displayProperty=nameWithType&gt;</ph> è lo stesso come il <ph id="ph2">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph> restituito da <ph id="ph3">&lt;xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>Some of the web names are duplicates; see the remarks for <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType&gt;</ph> for more information.</source>
          <target state="translated">Alcuni nomi web sono duplicati. vedere la sezione Osservazioni per <ph id="ph1">&lt;xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType&gt;</ph> per ulteriori informazioni.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>The following example includes the <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> in an HTML header.</source>
          <target state="translated">L'esempio seguente include il <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> in un'intestazione HTML.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente recupera i nomi diversi per ogni tipo di codifica e visualizza le codifiche con uno o più nomi diversi da <ph id="ph1">&lt;xref:System.Text.EncodingInfo.Name%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WebName">
          <source>It displays <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> but does not compare against it.</source>
          <target state="translated">Visualizza <ph id="ph1">&lt;xref:System.Text.Encoding.EncodingName%2A&gt;</ph> ma non compare su di essa.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" uid="P:System.Text.Encoding.WindowsCodePage">
          <source>When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.</source>
          
        </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WindowsCodePage">
          <source>The Windows operating system code page that most closely corresponds to the current <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated">Tabella codici del sistema operativo Windows che meglio corrisponde all'oggetto <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WindowsCodePage">
          <source>This property is provided for compatibility with the Windows MultiLanguage (MLang) APIs, for example, in determining font families.</source>
          <target state="translated">Questa proprietà viene fornita per compatibilità con le multilingue di Windows (MLang) API, ad esempio, per determinare le famiglie di caratteri.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WindowsCodePage">
          <source>For globalization, using one of the Unicode encodings is recommended instead.</source>
          <target state="translated">Per la globalizzazione, utilizzando una delle codifiche Unicode è consigliato.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WindowsCodePage">
          <source>It is also recommended to use <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> instead of <ph id="ph2">&lt;xref:System.Text.Encoding.WindowsCodePage%2A&gt;</ph> to identify the code page.</source>
          <target state="translated">È inoltre consigliabile utilizzare <ph id="ph1">&lt;xref:System.Text.Encoding.WebName%2A&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Text.Encoding.WindowsCodePage%2A&gt;</ph> per identificare la tabella codici.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.Encoding.WindowsCodePage">
          <source>The following example determines the Windows code page that most closely corresponds to each encoding.</source>
          <target state="translated">Nell'esempio seguente determina i codici di Windows che meglio corrisponde a ogni tipo di codifica.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>