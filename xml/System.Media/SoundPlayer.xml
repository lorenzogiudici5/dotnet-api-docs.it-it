<Type Name="SoundPlayer" FullName="System.Media.SoundPlayer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f4dfb11078bcf8447c0e3493e7e80d8a93a665b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36553834" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SoundPlayer : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable SoundPlayer extends System.ComponentModel.Component implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Media.SoundPlayer" />
  <TypeSignature Language="VB.NET" Value="Public Class SoundPlayer&#xA;Inherits Component&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoundPlayer : System::ComponentModel::Component, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type SoundPlayer = class&#xA;    inherit Component&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Controlla la riproduzione di un suono da un file wav.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Media.SoundPlayer> classe fornisce un'interfaccia semplice per il caricamento e la riproduzione di un file. wav. Il <xref:System.Media.SoundPlayer> classe supporta il caricamento di un file wav da un percorso di file, un URL, un <xref:System.IO.Stream> che contiene un file wav o una risorsa incorporata contenente un file. wav.  
  
 Per riprodurre un suono mediante il <xref:System.Media.SoundPlayer> classe, configurare un <xref:System.Media.SoundPlayer> con un percorso del file. wav e chiamare uno dei metodi di riproduzione. È possibile identificare il file. wav da riprodurre utilizzando uno dei costruttori o impostando la <xref:System.Media.SoundPlayer.SoundLocation%2A> o <xref:System.Media.SoundPlayer.Stream%2A> proprietà. Il file può essere caricato prima di riproduzione utilizzando uno dei metodi load, o il caricamento può essere posticipato fino a quando non viene chiamato uno dei metodi di riproduzione. Un <xref:System.Media.SoundPlayer> configurata per caricare un file. wav da un <xref:System.IO.Stream> o URL deve caricare il file wav in memoria prima che venga applicata la riproduzione.  
  
 È possibile caricare o riprodurre un file wav in modo sincrono o asincrono. Se si chiama un caricamento sincrono o metodo play, il thread chiamante dovrà attendere finché i metodo restituisce un valore che potrebbero essere disegno e gli altri eventi essere interrotta. La chiamata a un metodo di riproduzione o di caricamento asincrona consentirà al thread chiamante di continuare senza interruzioni. Per ulteriori informazioni sulle chiamate ai metodi asincroni, vedere [procedura: eseguire un'operazione in Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).  
  
 Quando un <xref:System.Media.SoundPlayer> ha terminato di caricare un file wav, genera il <xref:System.Media.SoundPlayer.LoadCompleted> evento. È possibile esaminare il <xref:System.ComponentModel.AsyncCompletedEventArgs> nel gestore eventi per determinare se il carico ha avuto esito positivo o negativo. Il <xref:System.Media.SoundPlayer.SoundLocationChanged> evento viene generato quando l'origine audio è impostata su un nuovo percorso del file o un URL. Il <xref:System.Media.SoundPlayer.StreamChanged> evento viene generato quando l'origine audio è impostata su un nuovo <xref:System.IO.Stream>. Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 Per ulteriori informazioni <xref:System.Media.SoundPlayer>, vedere [Cenni preliminari sulla classe SoundPlayer](~/docs/framework/winforms/controls/soundplayer-class-overview.md).  
  
> [!NOTE]
>  Il <xref:System.Media.SoundPlayer> classe non può riprodurre altri tipi di file, ad esempio WMA o MP3. Se si desidera riprodurre altri tipi di file, è possibile utilizzare il controllo di Windows Media Player. Per altre informazioni, vedere [utilizzando il controllo di Windows Media Player in una soluzione di .NET Framework](http://go.microsoft.com/fwlink/?LinkId=131267) e [Windows Media Player riferimento modello a oggetti per Visual Basic .NET e c#](http://go.microsoft.com/fwlink/?LinkId=131269) nel SDK di Windows Media Player .  
  
   
  
## Examples  
 Esempio di codice seguente illustra l'uso della <xref:System.Media.SoundPlayer> classe per la riproduzione di file wav da un percorso locale o un URI (Uniform Resource Identifier).  
  
 [!code-cpp[System.Windows.Forms.Sound#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#1)]
 [!code-csharp[System.Windows.Forms.Sound#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#1)]
 [!code-vb[System.Windows.Forms.Sound#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Media.SystemSounds" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Media.SoundPlayer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoundPlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoundPlayer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Media.SoundPlayer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza un <xref:System.Media.SoundPlayer> senza origine audio. Fino a quando non viene configurato con un percorso di origine audio, di <xref:System.Media.SoundPlayer> riprodurrà un segnale acustico quando viene chiamato uno dei metodi di riproduzione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoundPlayer (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoundPlayer(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Media.SoundPlayer : System.IO.Stream -&gt; System.Media.SoundPlayer" Usage="new System.Media.SoundPlayer stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Classe <see cref="T:System.IO.Stream" /> per un file wav.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Media.SoundPlayer" /> e associa il file wav alla classe <see cref="T:System.IO.Stream" /> specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IO.Stream> passato per il `stream` parametro deve essere un <xref:System.IO.Stream> contenente un file wav. I dati restituiti dal <xref:System.IO.Stream.Read%2A> metodo il <xref:System.IO.Stream> devono essere i dati all'interno di un file. wav.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoundPlayer (string soundLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string soundLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (soundLocation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoundPlayer(System::String ^ soundLocation);" />
      <MemberSignature Language="F#" Value="new System.Media.SoundPlayer : string -&gt; System.Media.SoundPlayer" Usage="new System.Media.SoundPlayer soundLocation" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="soundLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="soundLocation">Posizione di un file wav da caricare.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Media.SoundPlayer" /> e associa il file wav specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa passata al `soundLocation` parametro può essere un percorso di file o un URL in un file. wav. Se il percorso o URL non è valido, il <xref:System.Media.SoundPlayer> saranno ancora costruite, ma le successive chiamate a una condizione di carico o metodo play avrà esito negativo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">Non è possibile risolvere il valore dell'URL specificato da <paramref name="soundLocation" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoundPlayer (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SoundPlayer(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Media.SoundPlayer : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Media.SoundPlayer" Usage="new System.Media.SoundPlayer (serializationInfo, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">Classe <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da utilizzare per la deserializzazione.</param>
        <param name="context">Destinazione da utilizzare per la deserializzazione.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Media.SoundPlayer" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UriFormatException">Non è possibile risolvere la proprietà <see cref="P:System.Media.SoundPlayer.SoundLocation" /> specificata in <paramref name="serializationInfo" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLoadCompleted">
      <MemberSignature Language="C#" Value="public bool IsLoadCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoadCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Media.SoundPlayer.IsLoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoadCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoadCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoadCompleted : bool" Usage="System.Media.SoundPlayer.IsLoadCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore indicante se il caricamento di un file wav è stato completato correttamente.</summary>
        <value>
          <see langword="true" />, se è stato caricato un file wav. <see langword="false" />, se non è ancora stato caricato un file wav.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberSignature Language="F#" Value="member this.Load : unit -&gt; unit" Usage="soundPlayer.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Carica un suono in modo sincrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Media.SoundPlayer.Load%2A> metodo utilizza il thread corrente per caricare un file. wav, impedendo al thread di gestione di altri messaggi fino al completamento del caricamento.  
  
> [!CAUTION]
>  Il <xref:System.Media.SoundPlayer.Load%2A> metodo può produrre un ritardo durante il caricamento di un file. wav di grandi dimensioni. Inoltre, gli eventi di disegno e gli altri verranno bloccati fino al termine del caricamento. Utilizzare il <xref:System.Media.SoundPlayer.LoadAsync%2A> metodo per caricare un suono in modo asincrono, che consente al thread chiamante continuare senza interruzioni.  
  
 Questo metodo genera il <xref:System.Media.SoundPlayer.LoadCompleted> evento durante il caricamento viene completato, anche se il carico non riuscito.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Media.SoundPlayer.LoadAsync%2A> metodo da associare a un'istanza di un file wav il <xref:System.Media.SoundPlayer> (classe). Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Media.SoundPlayer> classe.  
  
 [!code-cpp[System.Windows.Forms.Sound#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#2)]
 [!code-csharp[System.Windows.Forms.Sound#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#2)]
 [!code-vb[System.Windows.Forms.Sound#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ServiceProcess.TimeoutException">Il tempo trascorso durante il caricamento supera il tempo, in millisecondi, specificato da <see cref="P:System.Media.SoundPlayer.LoadTimeout" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Non è possibile trovare il file specificato da <see cref="P:System.Media.SoundPlayer.SoundLocation" />.</exception>
        <permission cref="T:System.Net.WebPermission">per l'accesso alle risorse HTTP Internet. Enumerazione associata: <see cref="F:System.Net.NetworkAccess.Connect" /></permission>
        <altmember cref="M:System.Media.SoundPlayer.LoadAsync" />
        <altmember cref="E:System.Media.SoundPlayer.LoadCompleted" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public void LoadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.LoadAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadAsync();" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : unit -&gt; unit" Usage="soundPlayer.LoadAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Carica un file wav da un flusso o da una risorsa Web mediante un nuovo thread.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un <xref:System.Media.SoundPlayer> è configurata per caricare un file. wav da un <xref:System.IO.Stream> o risorsa Web, questo metodo avvia il caricamento di un file. wav dal percorso utilizzando un nuovo thread.  
  
 Questo metodo genera il <xref:System.Media.SoundPlayer.LoadCompleted> evento durante il caricamento viene completato, anche se il carico non riuscito.  
  
 Se un <xref:System.Media.SoundPlayer> è configurata per caricare un file wav da un percorso file locale, questo metodo non esegue alcuna operazione, perché il caricamento viene posticipato fino all'inizio della riproduzione.  
  
 Per ulteriori informazioni sul caricamento asincrono, vedere [procedura: caricare un suono in modo asincrono in un Windows Form](~/docs/framework/winforms/controls/how-to-load-a-sound-asynchronously-within-a-windows-form.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Media.SoundPlayer.LoadAsync%2A> metodo per caricare in modo asincrono un file. wav per l'uso da un'istanza del <xref:System.Media.SoundPlayer> classe. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Media.SoundPlayer> classe.  
  
 [!code-cpp[System.Windows.Forms.Sound#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#3)]
 [!code-csharp[System.Windows.Forms.Sound#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#3)]
 [!code-vb[System.Windows.Forms.Sound#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ServiceProcess.TimeoutException">Il tempo trascorso durante il caricamento supera il tempo, in millisecondi, specificato da <see cref="P:System.Media.SoundPlayer.LoadTimeout" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Non è possibile trovare il file specificato da <see cref="P:System.Media.SoundPlayer.SoundLocation" />.</exception>
        <altmember cref="M:System.Media.SoundPlayer.Load" />
        <altmember cref="E:System.Media.SoundPlayer.LoadCompleted" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Media.SoundPlayer.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica dopo che un file wav è stato caricato con esito positivo o negativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato al termine del caricamento di un file. wav. Gli argomenti dell'evento indicano se il carico dell'audio è stato completato correttamente o non è riuscito.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Media.SoundPlayer.OnLoadCompleted%2A> gestore eventi per ricevere una notifica indicante che il contenuto di un file. wav è stato caricato. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Media.SoundPlayer> classe.  
  
 [!code-cpp[System.Windows.Forms.Sound#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#8)]
 [!code-csharp[System.Windows.Forms.Sound#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#8)]
 [!code-vb[System.Windows.Forms.Sound#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadTimeout">
      <MemberSignature Language="C#" Value="public int LoadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LoadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Media.SoundPlayer.LoadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LoadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LoadTimeout : int with get, set" Usage="System.Media.SoundPlayer.LoadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il tempo, in millisecondi, in cui il file wav deve essere caricato.</summary>
        <value>Numero di millisecondi di attesa. Il valore predefinito è 10000 (10 secondi).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al termine di questo periodo, viene annullato il caricamento e un <xref:System.ServiceProcess.TimeoutException> generata un'eccezione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLoadCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnLoadCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoadCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLoadCompleted (e As AsyncCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLoadCompleted(System::ComponentModel::AsyncCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLoadCompleted : System.ComponentModel.AsyncCompletedEventArgs -&gt; unit&#xA;override this.OnLoadCompleted : System.ComponentModel.AsyncCompletedEventArgs -&gt; unit" Usage="soundPlayer.OnLoadCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Media.SoundPlayer.LoadCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato quando il caricamento di un file wav è stato completato.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Media.SoundPlayer.OnLoadCompleted%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Media.SoundPlayer.LoadCompleted" />
      </Docs>
    </Member>
    <Member MemberName="OnSoundLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSoundLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSoundLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSoundLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSoundLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSoundLocationChanged : EventArgs -&gt; unit&#xA;override this.OnSoundLocationChanged : EventArgs -&gt; unit" Usage="soundPlayer.OnSoundLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Media.SoundPlayer.SoundLocationChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato quando un nuovo percorso di origine audio per questo <xref:System.Media.SoundPlayer> è stata impostata.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere Procedura: funzionalità di fornire eventi e [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Media.SoundPlayer.OnSoundLocationChanged%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="P:System.Media.SoundPlayer.SoundLocation" />
      </Docs>
    </Member>
    <Member MemberName="OnStreamChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStreamChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStreamChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStreamChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStreamChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStreamChanged : EventArgs -&gt; unit&#xA;override this.OnStreamChanged : EventArgs -&gt; unit" Usage="soundPlayer.OnStreamChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Media.SoundPlayer.StreamChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato quando un nuovo <xref:System.IO.Stream> origine audio per questa <xref:System.Media.SoundPlayer> è stata impostata.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Media.SoundPlayer.OnStreamChanged%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="P:System.Media.SoundPlayer.Stream" />
      </Docs>
    </Member>
    <Member MemberName="Play">
      <MemberSignature Language="C#" Value="public void Play ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Play() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.Play" />
      <MemberSignature Language="VB.NET" Value="Public Sub Play ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Play();" />
      <MemberSignature Language="F#" Value="member this.Play : unit -&gt; unit" Usage="soundPlayer.Play " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Riproduce il file wav mediante un nuovo thread e, se il file wav non è stato caricato, prima lo carica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Media.SoundPlayer.Play%2A> metodo riproduce il suono mediante un nuovo thread. Se si chiama <xref:System.Media.SoundPlayer.Play%2A> prima che il file wav è stato caricato in memoria, sarà possibile caricare il file. wav prima dell'avvio della riproduzione. È possibile usare il <xref:System.Media.SoundPlayer.LoadAsync%2A> o <xref:System.Media.SoundPlayer.Load%2A> metodo per caricare il file wav in memoria in anticipo. Dopo un wav file viene caricato correttamente da un <xref:System.IO.Stream> o l'URL, le future chiamate ai metodi di riproduzione per i <xref:System.Media.SoundPlayer> non è necessario ricaricare il file wav finché il percorso per le modifiche audio.  
  
 Se il file wav non è stato specificato o non è possibile caricare, il <xref:System.Media.SoundPlayer.Play%2A> metodo riprodurrà segnale acustico predefinito di audio.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Media.SoundPlayer.Play%2A> metodo riprodurre in modo asincrono un file. wav. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Media.SoundPlayer> classe.  
  
 [!code-cpp[System.Windows.Forms.Sound#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#5)]
 [!code-csharp[System.Windows.Forms.Sound#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#5)]
 [!code-vb[System.Windows.Forms.Sound#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ServiceProcess.TimeoutException">Il tempo trascorso durante il caricamento supera il tempo, in millisecondi, specificato da <see cref="P:System.Media.SoundPlayer.LoadTimeout" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Non è possibile trovare il file specificato da <see cref="P:System.Media.SoundPlayer.SoundLocation" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'intestazione wav è danneggiata. Il file specificato da <see cref="P:System.Media.SoundPlayer.SoundLocation" /> non è un file wav PCM.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">per la lettura dei file. Enumerazione associata: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">per l'accesso al codice nativo. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:System.Media.SoundPlayer.PlayLooping" />
        <altmember cref="M:System.Media.SoundPlayer.PlaySync" />
      </Docs>
    </Member>
    <Member MemberName="PlayLooping">
      <MemberSignature Language="C#" Value="public void PlayLooping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PlayLooping() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.PlayLooping" />
      <MemberSignature Language="VB.NET" Value="Public Sub PlayLooping ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PlayLooping();" />
      <MemberSignature Language="F#" Value="member this.PlayLooping : unit -&gt; unit" Usage="soundPlayer.PlayLooping " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Riproduce e riproduce a ciclo continuo il file wav mediante un nuovo thread e, se il file wav non è stato caricato, prima lo carica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Media.SoundPlayer.PlayLooping%2A> metodo svolge ed esegue un ciclo il suono mediante un nuovo thread. Se si chiama <xref:System.Media.SoundPlayer.PlayLooping%2A> prima che il file wav è stato caricato in memoria, sarà possibile caricare il file. wav prima dell'avvio della riproduzione. È possibile usare il <xref:System.Media.SoundPlayer.LoadAsync%2A> o <xref:System.Media.SoundPlayer.Load%2A> metodo per caricare il file wav in memoria in anticipo. Dopo un wav file viene caricato correttamente da un <xref:System.IO.Stream> o l'URL, le future chiamate ai metodi di riproduzione per i <xref:System.Media.SoundPlayer> non è necessario ricaricare il file wav finché il percorso per le modifiche audio.  
  
 Se il file wav non è stato specificato o non è possibile caricare, il <xref:System.Media.SoundPlayer.PlayLooping%2A> metodo riprodurrà segnale acustico predefinito di audio.  
  
 Per ulteriori informazioni <xref:System.Media.SoundPlayer.PlayLooping%2A>, vedere [procedura: riprodurre un suono in un Windows Form in ciclo](~/docs/framework/winforms/controls/how-to-loop-a-sound-playing-on-a-windows-form.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Media.SoundPlayer.PlayLooping%2A> metodo ripetutamente riprodurre un file. wav. Il file wav verrà riprodotto finché il <xref:System.Media.SoundPlayer.Stop%2A> metodo viene chiamato. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Media.SoundPlayer> classe.  
  
 [!code-cpp[System.Windows.Forms.Sound#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#6)]
 [!code-csharp[System.Windows.Forms.Sound#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#6)]
 [!code-vb[System.Windows.Forms.Sound#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ServiceProcess.TimeoutException">Il tempo trascorso durante il caricamento supera il tempo, in millisecondi, specificato da <see cref="P:System.Media.SoundPlayer.LoadTimeout" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Non è possibile trovare il file specificato da <see cref="P:System.Media.SoundPlayer.SoundLocation" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'intestazione wav è danneggiata. Il file specificato da <see cref="P:System.Media.SoundPlayer.SoundLocation" /> non è un file wav PCM.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">per la lettura dei file. Enumerazione associata: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">per l'accesso al codice nativo. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:System.Media.SoundPlayer.Play" />
        <altmember cref="M:System.Media.SoundPlayer.PlaySync" />
      </Docs>
    </Member>
    <Member MemberName="PlaySync">
      <MemberSignature Language="C#" Value="public void PlaySync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PlaySync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.PlaySync" />
      <MemberSignature Language="VB.NET" Value="Public Sub PlaySync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PlaySync();" />
      <MemberSignature Language="F#" Value="member this.PlaySync : unit -&gt; unit" Usage="soundPlayer.PlaySync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Riproduce il file wav e, se il file wav non è stato caricato, prima lo carica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Media.SoundPlayer.PlaySync%2A> metodo utilizza il thread corrente per riprodurre un file. wav, impedendo al thread di gestione di altri messaggi fino al completamento del caricamento. È possibile usare il <xref:System.Media.SoundPlayer.LoadAsync%2A> o <xref:System.Media.SoundPlayer.Load%2A> metodo per caricare il file wav in memoria in anticipo. Dopo un wav file viene caricato correttamente da un <xref:System.IO.Stream> o l'URL, le future chiamate ai metodi di riproduzione per i <xref:System.Media.SoundPlayer> non è necessario ricaricare il file wav finché il percorso per le modifiche audio.  
  
 Se il file wav non è stato specificato o non è possibile caricare, il <xref:System.Media.SoundPlayer.PlaySync%2A> metodo riprodurrà segnale acustico predefinito di audio.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Media.SoundPlayer.PlaySync%2A> metodo riprodurre in modo sincrono un file. wav.  
  
 [!code-cpp[System.Windows.Forms.PlaySync#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.PlaySync/CPP/system.windows.forms.sound.playasync.cpp#1)]
 [!code-csharp[System.Windows.Forms.PlaySync#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.PlaySync/CS/system.windows.forms.sound.playasync.cs#1)]
 [!code-vb[System.Windows.Forms.PlaySync#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.PlaySync/VB/system.windows.forms.sound.playasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ServiceProcess.TimeoutException">Il tempo trascorso durante il caricamento supera il tempo, in millisecondi, specificato da <see cref="P:System.Media.SoundPlayer.LoadTimeout" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Non è possibile trovare il file specificato da <see cref="P:System.Media.SoundPlayer.SoundLocation" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'intestazione wav è danneggiata. Il file specificato da <see cref="P:System.Media.SoundPlayer.SoundLocation" /> non è un file wav PCM.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">per la lettura dei file. Enumerazione associata: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">per l'accesso al codice nativo. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:System.Media.SoundPlayer.Play" />
        <altmember cref="M:System.Media.SoundPlayer.PlayLooping" />
      </Docs>
    </Member>
    <Member MemberName="SoundLocation">
      <MemberSignature Language="C#" Value="public string SoundLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SoundLocation" />
      <MemberSignature Language="DocId" Value="P:System.Media.SoundPlayer.SoundLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property SoundLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SoundLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SoundLocation : string with get, set" Usage="System.Media.SoundPlayer.SoundLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso di file o l'URL del file wav da caricare.</summary>
        <value>Percorso di file o URL da cui caricare un file wav oppure <see cref="F:System.String.Empty" /> se non è presente alcun percorso di file. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è impostata su <xref:System.String.Empty?displayProperty=nameWithType> quando il <xref:System.Media.SoundPlayer.Stream%2A> è impostata su un <xref:System.IO.Stream>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Media.SoundPlayer.SoundLocation%2A> proprietà a cui assegnare l'origine del file wav a un'istanza del <xref:System.Media.SoundPlayer> classe. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Media.SoundPlayer> classe.  
  
 [!code-cpp[System.Windows.Forms.Sound#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#2)]
 [!code-csharp[System.Windows.Forms.Sound#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#2)]
 [!code-vb[System.Windows.Forms.Sound#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Per trovare i file. Enumerazione associata: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SoundLocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SoundLocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SoundLocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Media.SoundPlayer.SoundLocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SoundLocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SoundLocationChanged;" />
      <MemberSignature Language="F#" Value="member this.SoundLocationChanged : EventHandler " Usage="member this.SoundLocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica dopo che è stato impostato un nuovo percorso di origine audio per questa classe <see cref="T:System.Media.SoundPlayer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato quando un nuovo percorso di origine audio per questo <xref:System.Media.SoundPlayer> è stata impostata.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Esempio di codice seguente illustra l'uso della <xref:System.Media.SoundPlayer.OnSoundLocationChanged%2A> gestore eventi per ricevere una notifica quando il <xref:System.Media.SoundPlayer> è stato collegato a un altro file wav. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Media.SoundPlayer> classe.  
  
 [!code-cpp[System.Windows.Forms.Sound#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#9)]
 [!code-csharp[System.Windows.Forms.Sound#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#9)]
 [!code-vb[System.Windows.Forms.Sound#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="soundPlayer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arresta la riproduzione del suono, se in corso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Media.SoundPlayer.Stop%2A> metodo per interrompere la riproduzione di un file. wav. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Media.SoundPlayer> classe.  
  
 [!code-cpp[System.Windows.Forms.Sound#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CPP/soundtestform.cpp#7)]
 [!code-csharp[System.Windows.Forms.Sound#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Sound/CS/soundtestform.cs#7)]
 [!code-vb[System.Windows.Forms.Sound#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Sound/VB/soundtestform.vb#7)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">per l'accesso al codice nativo. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Stream">
      <MemberSignature Language="C#" Value="public System.IO.Stream Stream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream Stream" />
      <MemberSignature Language="DocId" Value="P:System.Media.SoundPlayer.Stream" />
      <MemberSignature Language="VB.NET" Value="Public Property Stream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ Stream { System::IO::Stream ^ get(); void set(System::IO::Stream ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Stream : System.IO.Stream with get, set" Usage="System.Media.SoundPlayer.Stream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la classe <see cref="T:System.IO.Stream" /> da cui caricare il file wav.</summary>
        <value>Classe <see cref="T:System.IO.Stream" /> da cui caricare il file wav oppure <see langword="null" /> se non è disponibile alcun flusso. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è impostata su `null` quando il <xref:System.Media.SoundPlayer.SoundLocation%2A> è impostata su una nuova posizione audio valida.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="StreamChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StreamChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StreamChanged" />
      <MemberSignature Language="DocId" Value="E:System.Media.SoundPlayer.StreamChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StreamChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StreamChanged;" />
      <MemberSignature Language="F#" Value="member this.StreamChanged : EventHandler " Usage="member this.StreamChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica dopo che è stata impostata una nuova origine audio <see cref="T:System.IO.Stream" /> per questa classe <see cref="T:System.Media.SoundPlayer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato quando un nuovo <xref:System.IO.Stream> origine audio per questa <xref:System.Media.SoundPlayer> è stata impostata.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da popolare con i dati.</param>
        <param name="context">Destinazione della serializzazione (vedere <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Per una descrizione di questo membro, vedere il metodo <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Media.SoundPlayer> a un'interfaccia <xref:System.Runtime.Serialization.ISerializable>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Media.SoundPlayer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Media.SoundPlayer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la classe <see cref="T:System.Object" /> che contiene i dati relativi alla classe <see cref="T:System.Media.SoundPlayer" />.</summary>
        <value>Oggetto <see cref="T:System.Object" /> che contiene i dati relativi all'oggetto <see cref="T:System.Media.SoundPlayer" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>