<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterInfo.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac586ca3b754399c792282cbf762bf32b6bca401225.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86ca3b754399c792282cbf762bf32b6bca401225</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Discovers the attributes of a parameter and provides access to parameter metadata.</source>
          <target state="translated">Individua gli attributi di un parametro e fornisce l'accesso ai metadati del parametro.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>Use an instance of <ph id="ph1">`ParameterInfo`</ph> to obtain information about the parameter's data type, default value, and so on.</source>
          <target state="translated">Utilizzare un'istanza di <ph id="ph1">`ParameterInfo`</ph> per ottenere informazioni sul tipo di dati del parametro, il valore predefinito e così via.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> returns an array of <ph id="ph2">`ParameterInfo`</ph> objects representing the parameters of a method, in order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.MethodBase.GetParameters%2A&gt;</ph> Restituisce una matrice di <ph id="ph2">`ParameterInfo`</ph> gli oggetti che rappresentano i parametri di un metodo, in ordine.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">In questo esempio viene illustrato come utilizzare diverse classi di reflection per analizzare i metadati contenuti in un assembly.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.ParameterInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Questo tipo è thread-safe.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>Gets the attributes for this parameter.</source>
          <target state="translated">Ottiene gli attributi per questo parametro.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>A <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> object representing the attributes for this parameter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="ParameterAttributes" /&gt;</ph> che rappresenta gli attributi di questo parametro.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph> method.</source>
          <target state="translated">Questo metodo utilizza il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.AttrsImpl&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>The following example defines a method with three parameters.</source>
          <target state="translated">Nell'esempio seguente definisce un metodo con tre parametri.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Attributes">
          <source>It uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph> property to get the attributes of the second parameter and display them at the console.</source>
          <target state="translated">Usa il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph> proprietà per ottenere gli attributi del secondo parametro e visualizzarli nella console.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>The attributes of the parameter.</source>
          <target state="translated">Attributi del parametro.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Questo campo è destinato solo per gli utenti che derivano le classi da <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.AttrsImpl">
          <source>Typical access to parameter attributes is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>.</source>
          <target state="translated">L'accesso normale agli attributi di parametro avviene tramite <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Attributes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of the parameter.</source>
          <target state="translated">
          <ph id="ph1">&lt;see langword="Type" /&gt;</ph> del parametro.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Questo campo è destinato solo per gli utenti che derivano le classi da <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.ClassImpl">
          <source>Typical access to parameter types is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>.</source>
          <target state="translated">L'accesso normale a tipi di parametro avviene tramite <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>Gets a collection that contains this parameter's custom attributes.</source>
          <target state="translated">Ottiene una raccolta che contiene gli attributi personalizzati del parametro.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.CustomAttributes">
          <source>A collection that contains this parameter's custom attributes.</source>
          <target state="translated">Raccolta che contiene gli attributi personalizzati del parametro.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">Ottiene un valore che indica il valore predefinito se il parametro ha un valore predefinito.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">Valore predefinito del parametro oppure <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> se il parametro non ha un valore predefinito.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This property is used only in the execution context.</source>
          <target state="translated">Questa proprietà viene utilizzata solo nel contesto di esecuzione.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>In the reflection-only context, use the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph> property instead.</source>
          <target state="translated">Nel contesto reflection-only, utilizzare il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.RawDefaultValue%2A&gt;</ph> proprietà invece.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">Il valore predefinito viene utilizzato quando un valore effettivo non è specificato nella chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Un parametro può avere un valore predefinito è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">Ciò è diverso dal caso in cui non è definito un valore predefinito.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph> method.</source>
          <target state="translated">Questo metodo utilizza il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValueImpl&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.DefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>The default value of the parameter.</source>
          <target state="translated">Valore predefinito del parametro.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Questo campo è destinato solo per gli utenti che derivano le classi da <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.DefaultValueImpl">
          <source>Typical access to the default value of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>.</source>
          <target state="translated">Accesso normale, il valore predefinito del parametro avviene tramite <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.DefaultValue%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Reflection.ParameterInfo">
          <source>Gets the custom attributes applied to this parameter.</source>
          <target state="translated">Ottiene gli attributi personalizzati applicati a questo parametro.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Questo argomento viene ignorato per gli oggetti di questo tipo.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>Gets all the custom attributes defined on this parameter.</source>
          <target state="translated">Ottiene tutti gli attributi personalizzati definiti su questo parametro.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes applied to this parameter.</source>
          <target state="translated">Matrice contenente tutti gli attributi personalizzati applicati a questo parametro.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Questo metodo ignora la <ph id="ph1">`inherit`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per cercare la catena di ereditarietà per gli attributi dei parametri, usare l'overload appropriato del <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time.</source>
          <target state="translated">L'esempio seguente mostra come attributi applicati per i parametri dei metodi possono essere recuperati in fase di esecuzione.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example defines a custom attribute named <ph id="ph1">`MyAttribute`</ph> that can be applied to parameters.</source>
          <target state="translated">Nell'esempio viene definito un attributo personalizzato denominato <ph id="ph1">`MyAttribute`</ph> che può essere applicato a parametri.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>The example then defines a class named <ph id="ph1">`MyClass`</ph> with a method named <ph id="ph2">`MyMethod`</ph>, and applies <ph id="ph3">`MyAttribute`</ph> to a parameter of the method.</source>
          <target state="translated">Nell'esempio viene quindi definita una classe denominata <ph id="ph1">`MyClass`</ph> con un metodo denominato <ph id="ph2">`MyMethod`</ph>e applica <ph id="ph3">`MyAttribute`</ph> a un parametro del metodo.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph> method to retrieve the custom attributes that have been applied to all parameters of all methods in <ph id="ph2">`MyClass`</ph>, and displays them at the console.</source>
          <target state="translated">Quando si esegue l'esempio, utilizza il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%28System.Boolean%29&gt;</ph> metodo per recuperare gli attributi personalizzati applicati a tutti i parametri di tutti i metodi in <ph id="ph2">`MyClass`</ph>e li visualizza nella console.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">Impossibile caricare il tipo di attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The custom attributes identified by type.</source>
          <target state="translated">Attributi personalizzati identificati per tipo.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Questo argomento viene ignorato per gli oggetti di questo tipo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Gets the custom attributes of the specified type or its derived types that are applied to this parameter.</source>
          <target state="translated">Ottiene gli attributi personalizzati del tipo specificato o dei tipi derivati applicati a questo parametro.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array that contains the custom attributes of the specified type or its derived types.</source>
          <target state="translated">Matrice contenente gli attributi personalizzati del tipo specificato e dei tipi derivati.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Questo metodo ignora la <ph id="ph1">`inherit`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per cercare la catena di ereditarietà per gli attributi dei parametri, usare l'overload appropriato del <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The type must be a type provided by the underlying runtime system.</source>
          <target state="translated">Il tipo deve essere uno di quelli forniti dal sistema di runtime sottostante.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type could not be loaded.</source>
          <target state="translated">Impossibile caricare il tipo di attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects for the current parameter, which can be used in the reflection-only context.</source>
          <target state="translated">Restituisce un elenco di oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> per il parametro corrente, che possono essere utilizzati nel contesto ReflectionOnly.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>A generic list of <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> objects representing data about the attributes that have been applied to the current parameter.</source>
          <target state="translated">Elenco generico di oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.CustomAttributeData" /&gt;</ph> che rappresentano i dati relativi agli attributi applicati al parametro corrente.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</source>
          <target state="translated">Utilizzare questo metodo per esaminare gli attributi personalizzati del codice nel contesto ReflectionOnly, in casi in cui gli attributi personalizzati sono definiti nel codice caricato nel contesto reflection-only.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> cannot be used in such cases, because they create instances of the attributes.</source>
          <target state="translated">I metodi come <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> non può essere utilizzato in questi casi, perché creano istanze degli attributi.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>Code in the reflection-only context cannot be executed.</source>
          <target state="translated">Impossibile eseguire il codice nel contesto reflection-only.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
          <source>For more information and example code, see the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
          <target state="translated">Per ulteriori informazioni e codice di esempio, vedere la <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>Gets the optional custom modifiers of the parameter.</source>
          <target state="translated">Ottiene i modificatori personalizzati facoltativi del parametro.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Matrice di oggetti <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che identificano i modificatori personalizzati facoltativi del parametro corrente, ad esempio <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> metodi vengono forniti per i progettisti di compilatori gestiti.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui modificatori personalizzati, vedere <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> e le classi correlate nel <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> dello spazio dei nomi e le specifiche dei metadati nella documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The serialized stream from which the current object is deserialized.</source>
          <target state="translated">Flusso serializzato da cui viene deserializzato l'oggetto corrente.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Returns the real object that should be deserialized instead of the object that the serialized stream specifies.</source>
          <target state="translated">Restituisce l'oggetto reale che deve essere deserializzato, invece dell'oggetto specificato dal flusso serializzato.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The actual object that is put into the graph.</source>
          <target state="translated">Oggetto effettivo che viene inserito nel grafico.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This method implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Questo metodo implementa il metodo <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The parameter's position in the parameter list of its associated member is not valid for that member's type.</source>
          <target state="translated">La posizione di un parametro nell'elenco dei parametri del membro associato non è valida per tale tipo di membro.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">richiede l'attendibilità totale per il chiamante immediato.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>Gets the required custom modifiers of the parameter.</source>
          <target state="translated">Ottiene i modificatori personalizzati obbligatori del parametro.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current parameter, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Matrice di oggetti <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che identificano i modificatori personalizzati obbligatori del parametro corrente, ad esempio <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A&gt;</ph> metodi vengono forniti per i progettisti di compilatori gestiti.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace, and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui modificatori personalizzati, vedere <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> e le classi correlate nel <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> dello spazio dei nomi e le specifiche dei metadati nella documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source>Gets a value that indicates whether this parameter has a default value.</source>
          <target state="translated">Ottiene un valore che indica se il parametro possiede un valore predefinito.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.HasDefaultValue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this parameter has a default value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se questo parametro possiede un valore predefinito; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object to search for.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> da cercare.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This argument is ignored for objects of this type.</source>
          <target state="translated">Questo argomento viene ignorato per gli oggetti di questo tipo.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.</source>
          <target state="translated">Determina se l'attributo personalizzato del tipo specificato o dei tipi derivati è applicato a questo parametro.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more instances of <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> or its derived types are applied to this parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se una o più istanze di <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> o i tipi derivati sono applicati a questo parametro; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>This method ignores the <ph id="ph1">`inherit`</ph> parameter.</source>
          <target state="translated">Questo metodo ignora la <ph id="ph1">`inherit`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per cercare la catena di ereditarietà per gli attributi dei parametri, usare l'overload appropriato del <ph id="ph1">&lt;xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The following example defines two custom attributes, <ph id="ph1">`MyAttribute`</ph> and <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">L'esempio seguente definisce due attributi personalizzati, <ph id="ph1">`MyAttribute`</ph> e <ph id="ph2">`MyDerivedAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">`MyDerivedAttribute`</ph> is derived from <ph id="ph2">`MyAttribute`</ph>.</source>
          <target state="translated">L'oggetto <ph id="ph1">`MyDerivedAttribute`</ph> è derivato da <ph id="ph2">`MyAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>The example then applies these attributes to the parameters of a method of an example class.</source>
          <target state="translated">Viene quindi applicato questi attributi per i parametri di un metodo di una classe di esempio.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>When the example is run, it uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph> method to test all parameters of all methods in the example class.</source>
          <target state="translated">Quando si esegue l'esempio, utilizza il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsDefined%2A&gt;</ph> metodo da testare tutti i parametri di tutti i metodi nelle classi di esempio.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source>It then displays the parameters that have <ph id="ph1">`MyAttribute`</ph> or <ph id="ph2">`MyDerivedAttribute`</ph>.</source>
          <target state="translated">Visualizza quindi i parametri di <ph id="ph1">`MyAttribute`</ph> o <ph id="ph2">`MyDerivedAttribute`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> object supplied by the common language runtime.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> non è un oggetto <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> fornito da Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Gets a value indicating whether this is an input parameter.</source>
          <target state="translated">Ottiene un valore che indica se si tratta di un parametro di input.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an input parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se si tratta di un parametro di input; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Questo metodo dipende da un flag di metadati facoltativi.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Questo flag può essere inserito dai compilatori, ma i compilatori non sono obbligati a tale scopo.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>This method utilizes the <ph id="ph1">`In`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Questo metodo utilizza il <ph id="ph1">`In`</ph> flag del <ph id="ph2">`ParameterAttributes`</ph> enumeratore.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come verificare i parametri del metodo per il <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> gli attributi.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">L'esempio contiene un <ph id="ph1">`DefineMethod`</ph> metodo che esegue le operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Crea un assembly dinamico che contiene un <ph id="ph1">`MyType`</ph> tipo.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Aggiunge un <ph id="ph1">`MyMethod`</ph> metodo <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> presenta tre parametri.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Il primo parametro è definito con <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, il secondo con <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>e il terzo con <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Chiamate <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> per completare il tipo.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">Dopo l'esecuzione di <ph id="ph1">`DefineMethod`</ph>, nell'esempio viene cercato l'assembly attualmente caricati fino a individuare l'assembly dinamico.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Carica <ph id="ph1">`MyType`</ph> dall'assembly, ottiene un <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> dell'oggetto per il <ph id="ph3">`MyMethod`</ph> metodo ed esamina i parametri.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsIn">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">Nell'esempio viene utilizzato il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> proprietà per visualizzare informazioni sui parametri.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>Gets a value indicating whether this parameter is a locale identifier (lcid).</source>
          <target state="translated">Ottiene un valore che indica se questo parametro è un identificatore di impostazioni locali (lcid).</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a locale identifier; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il parametro è un identificatore di impostazioni locali; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Questo metodo dipende da un flag di metadati facoltativi.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Questo flag può essere inserito dai compilatori, ma i compilatori non sono obbligati a tale scopo.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>This method utilizes the <ph id="ph1">`Lcid`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Questo metodo utilizza il <ph id="ph1">`Lcid`</ph> flag del <ph id="ph2">`ParameterAttributes`</ph> enumeratore.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsLcid">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Gets a value indicating whether this parameter is optional.</source>
          <target state="translated">Ottiene un valore che indica se questo parametro è opzionale.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is optional; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il parametro è opzionale; in caso contrario,<ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Questo metodo dipende da un flag di metadati facoltativi.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Questo flag può essere inserito dai compilatori, ma i compilatori non sono obbligati a tale scopo.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>This method utilizes the <ph id="ph1">`Optional`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Questo metodo utilizza il <ph id="ph1">`Optional`</ph> flag del <ph id="ph2">`ParameterAttributes`</ph> enumeratore.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come verificare i parametri del metodo per il <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> gli attributi.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">L'esempio contiene un <ph id="ph1">`DefineMethod`</ph> metodo che esegue le operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Crea un assembly dinamico che contiene un <ph id="ph1">`MyType`</ph> tipo.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Aggiunge un <ph id="ph1">`MyMethod`</ph> metodo <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> presenta tre parametri.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Il primo parametro è definito con <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, il secondo con <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>e il terzo con <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Chiamate <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> per completare il tipo.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">Dopo l'esecuzione di <ph id="ph1">`DefineMethod`</ph>, nell'esempio viene cercato l'assembly attualmente caricati fino a individuare l'assembly dinamico.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Carica <ph id="ph1">`MyType`</ph> dall'assembly, ottiene un <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> dell'oggetto per il <ph id="ph3">`MyMethod`</ph> metodo ed esamina i parametri.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOptional">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">Nell'esempio viene utilizzato il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> proprietà per visualizzare informazioni sui parametri.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Gets a value indicating whether this is an output parameter.</source>
          <target state="translated">Ottiene un valore che indica se si tratta di un parametro di output.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is an output parameter; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se si tratta di un parametro di output; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Questo metodo dipende da un flag di metadati facoltativi.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Questo flag può essere inserito dai compilatori, ma i compilatori non sono obbligati a tale scopo.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>This method utilizes the <ph id="ph1">`Out`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Questo metodo utilizza il <ph id="ph1">`Out`</ph> flag del <ph id="ph2">`ParameterAttributes`</ph> enumeratore.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The following example shows how to test method parameters for the <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> attributes.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come verificare i parametri del metodo per il <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph> gli attributi.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example contains a <ph id="ph1">`DefineMethod`</ph> method that does the following:</source>
          <target state="translated">L'esempio contiene un <ph id="ph1">`DefineMethod`</ph> metodo che esegue le operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Creates a dynamic assembly containing a <ph id="ph1">`MyType`</ph> type.</source>
          <target state="translated">Crea un assembly dinamico che contiene un <ph id="ph1">`MyType`</ph> tipo.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Adds a <ph id="ph1">`MyMethod`</ph> method to <ph id="ph2">`MyType`</ph>.</source>
          <target state="translated">Aggiunge un <ph id="ph1">`MyMethod`</ph> metodo <ph id="ph2">`MyType`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source><ph id="ph1">`MyMethod`</ph> has three parameters.</source>
          <target state="translated"><ph id="ph1">`MyMethod`</ph> presenta tre parametri.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The first parameter is defined with <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, the second with <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>, and the third with <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Il primo parametro è definito con <ph id="ph1">&lt;xref:System.Reflection.ParameterAttributes.In?displayProperty=nameWithType&gt;</ph>, il secondo con <ph id="ph2">&lt;xref:System.Reflection.ParameterAttributes.Out?displayProperty=nameWithType&gt;</ph>e il terzo con <ph id="ph3">&lt;xref:System.Reflection.ParameterAttributes.Optional?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>Calls <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> to complete the type.</source>
          <target state="translated">Chiamate <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=nameWithType&gt;</ph> per completare il tipo.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>After executing <ph id="ph1">`DefineMethod`</ph>, the example searches the assemblies that are currently loaded until it finds the dynamic assembly.</source>
          <target state="translated">Dopo l'esecuzione di <ph id="ph1">`DefineMethod`</ph>, nell'esempio viene cercato l'assembly attualmente caricati fino a individuare l'assembly dinamico.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>It loads <ph id="ph1">`MyType`</ph> from the assembly, gets a <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the <ph id="ph3">`MyMethod`</ph> method, and examines the parameters.</source>
          <target state="translated">Carica <ph id="ph1">`MyType`</ph> dall'assembly, ottiene un <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> dell'oggetto per il <ph id="ph3">`MyMethod`</ph> metodo ed esamina i parametri.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsOut">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> properties to display information about the parameters.</source>
          <target state="translated">Nell'esempio viene utilizzato il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.IsIn%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.IsOut%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo.IsOptional%2A&gt;</ph> proprietà per visualizzare informazioni sui parametri.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>Gets a value indicating whether this is a <ph id="ph1">&lt;see langword="Retval" /&gt;</ph> parameter.</source>
          <target state="translated">Ottiene un valore che indica se si tratta di un parametro <ph id="ph1">&lt;see langword="Retval" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the parameter is a <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il parametro è <ph id="ph2">&lt;see langword="Retval" /&gt;</ph>; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method depends on an optional metadata flag.</source>
          <target state="translated">Questo metodo dipende da un flag di metadati facoltativi.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This flag can be inserted by compilers, but the compilers are not obligated to do so.</source>
          <target state="translated">Questo flag può essere inserito dai compilatori, ma i compilatori non sono obbligati a tale scopo.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>This method utilizes the <ph id="ph1">`Retval`</ph> flag of the <ph id="ph2">`ParameterAttributes`</ph> enumerator.</source>
          <target state="translated">Questo metodo utilizza il <ph id="ph1">`Retval`</ph> flag del <ph id="ph2">`ParameterAttributes`</ph> enumeratore.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.IsRetval">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Member">
          <source>Gets a value indicating the member in which the parameter is implemented.</source>
          <target state="translated">Ottiene un valore che indica il membro in cui il parametro viene implementato.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Member">
          <source>The member which implanted the parameter represented by this <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph>.</source>
          <target state="translated">Il membro che utilizzato il parametro rappresentato da questo <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>The member in which the field is implemented.</source>
          <target state="translated">Membro in cui il campo è implementato.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Questo campo è destinato solo per gli utenti che derivano le classi da <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.MemberImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>.</source>
          <target state="translated">L'accesso normale per il nome del parametro avviene tramite il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Member%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>Gets a value that identifies this parameter in metadata.</source>
          <target state="translated">Ottiene un valore che identifica questo parametro nei metadati.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>A value which, in combination with the module, uniquely identifies this parameter in metadata.</source>
          <target state="translated">Valore che, insieme al modulo, identifica in modo univoco questo parametro nei metadati.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>To get the module, use the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph> property of the member that defines this parameter.</source>
          <target state="translated">Per ottenere il modulo, usare il <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.Module%2A&gt;</ph> proprietà del membro che definisce il parametro.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged Reflection API.</source>
          <target state="translated">I token ottenuti tramite questa proprietà possono essere passati all'API Reflection non gestita.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.MetadataToken">
          <source>For more information, please see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>API Reflection non gestita<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Name">
          <source>Gets the name of the parameter.</source>
          <target state="translated">Ottiene il nome del parametro.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The simple name of this parameter.</source>
          <target state="translated">Nome semplice di questo parametro.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>This property utilizes the protected <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph> field, and depends on an optional metadata flag that might not be available in all compilers.</source>
          <target state="translated">Questa proprietà viene utilizzato il metodo protetto <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.NameImpl&gt;</ph> campo e dipende da un flag di metadati facoltativi che potrebbero non essere disponibili in tutti i compilatori.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare il <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> represents a return value (that is, if it was obtained by using the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph> property), this property will be <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Se questo <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> rappresenta un valore restituito (ovvero, se sono state ottenute tramite il <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=nameWithType&gt;</ph> proprietà), questa proprietà è <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Name">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph> property to obtain the parameter names.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come ottenere <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> oggetti per i parametri del metodo e quindi utilizzare il <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph> proprietà per ottenere i nomi di parametro.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>The name of the parameter.</source>
          <target state="translated">Nome del parametro.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Questo campo è destinato solo per gli utenti che derivano le classi da <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.NameImpl">
          <source>Typical access to the parameter name is through the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>.</source>
          <target state="translated">L'accesso normale per il nome del parametro avviene tramite il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Name%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">Ottiene l'oggetto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> di questo parametro.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object that represents the <ph id="ph2">&lt;see langword="Type" /&gt;</ph> of this parameter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> che rappresenta il <ph id="ph2">&lt;see langword="Type" /&gt;</ph> di questo parametro.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>This method depends on an optional metadata and might not be available in all compilers.</source>
          <target state="translated">Questo metodo dipende da un metadati facoltativi e potrebbe non essere disponibile in tutti i compilatori.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.ParameterType">
          <source>The following example shows how to get <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects for the parameters of a method, and then use the <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph> property to display the type of each parameter.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come ottenere <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> oggetti per i parametri del metodo e quindi utilizzare il <ph id="ph2">&lt;xref:System.Reflection.ParameterInfo.ParameterType%2A&gt;</ph> proprietà per visualizzare il tipo di ogni parametro.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Gets the zero-based position of the parameter in the formal parameter list.</source>
          <target state="translated">Ottiene la posizione in base zero del parametro nell'elenco di parametri formali.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>An integer representing the position this parameter occupies in the parameter list.</source>
          <target state="translated">Intero che rappresenta la posizione di questo parametro nell'elenco dei parametri.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position.</source>
          <target state="translated">Solo i parametri nella firma del metodo (ovvero, nell'elenco di parametri formali) sono considerati durante il calcolo della posizione.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>For instance methods, the hidden parameter that represents <ph id="ph1">`this`</ph> (<ph id="ph2">`Me`</ph> in Visual Basic) is not counted.</source>
          <target state="translated">Ad esempio metodi, il parametro nascosto che rappresenta <ph id="ph1">`this`</ph> (<ph id="ph2">`Me`</ph> in Visual Basic) non viene conteggiato.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>This method utilizes the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph> method.</source>
          <target state="translated">Questo metodo utilizza il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.PositionImpl&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.Position">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>The zero-based position of the parameter in the parameter list.</source>
          <target state="translated">Posizione con base zero del parametro nell'elenco dei parametri.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>This field is intended only for users who are deriving classes from <ph id="ph1">`ParameterInfo`</ph>.</source>
          <target state="translated">Questo campo è destinato solo per gli utenti che derivano le classi da <ph id="ph1">`ParameterInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.ParameterInfo.PositionImpl">
          <source>Typical access to the name of the parameter is through <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>.</source>
          <target state="translated">Accesso normale per il nome del parametro avviene tramite <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.Position%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>Gets a value indicating the default value if the parameter has a default value.</source>
          <target state="translated">Ottiene un valore che indica il valore predefinito se il parametro ha un valore predefinito.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value of the parameter, or <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> if the parameter has no default value.</source>
          <target state="translated">Valore predefinito del parametro oppure <ph id="ph1">&lt;see cref="F:System.DBNull.Value" /&gt;</ph> se il parametro non ha un valore predefinito.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This property can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Questa proprietà può essere utilizzata sia il contesto di esecuzione e il contesto reflection-only.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>The default value is used when an actual value is not specified in the method call.</source>
          <target state="translated">Il valore predefinito viene utilizzato quando un valore effettivo non è specificato nella chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>A parameter can have a default value that is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Un parametro può avere un valore predefinito è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>This is distinct from the case where a default value is not defined.</source>
          <target state="translated">Ciò è diverso dal caso in cui non è definito un valore predefinito.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.ParameterInfo.RawDefaultValue">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array, first get the method or the constructor and then call the <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice, ottenere innanzitutto il metodo o costruttore e quindi chiamare il <ph id="ph2">&lt;xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matrice di nomi passata di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Conteggio dei nomi di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contesto delle impostazioni locali in cui interpretare i nomi.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Matrice allocata dal chiamante che riceve gli ID corrispondenti ai nomi.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Esegue il mapping di un set di nomi a un set corrispondente di ID dispatch.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informazioni sul tipo da restituire.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificatore delle impostazioni locali per le informazioni sul tipo.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Riceve un puntatore all'oggetto relativo alle informazioni sul tipo richiesto.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera le informazioni sul tipo relative a un oggetto che può quindi essere usato per ottenere informazioni sul tipo relative a un'interfaccia.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Punta a una posizione che riceve il numero di interfacce di informazioni sul tipo fornite dall'oggetto.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Recupera il numero delle interfacce di informazioni sul tipo fornite da un oggetto (0 o 1).</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica il membro.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contesto di impostazioni locali all'interno del quale devono essere interpretati gli argomenti.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flag che descrivono il contesto della chiamata.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Puntatore a una struttura contenente una matrice di argomenti, una matrice di DISPID per argomenti denominati e i conteggi del numero di elementi nelle matrici.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Puntatore alla posizione in cui deve essere archiviato il risultato.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Puntatore a una struttura contenente informazioni sull'eccezione.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indice del primo argomento che contiene un errore.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fornisce l'accesso a proprietà e metodi esposti da un oggetto.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::Invoke`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>Gets the parameter type and name represented as a string.</source>
          <target state="translated">Ottiene il tipo e il nome di parametro in forma di stringa.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.ParameterInfo.ToString">
          <source>A string containing the type and the name of the parameter.</source>
          <target state="translated">Stringa contenente il tipo e il nome del parametro.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>