<Type Name="ExceptionHandlingClauseOptions" FullName="System.Reflection.ExceptionHandlingClauseOptions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7ac912fd96fceb376785300686c54e09cb0d328c" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51909658" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ExceptionHandlingClauseOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExceptionHandlingClauseOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ExceptionHandlingClauseOptions" />
  <TypeSignature Language="VB.NET" Value="Public Enum ExceptionHandlingClauseOptions" />
  <TypeSignature Language="C++ CLI" Value="public enum class ExceptionHandlingClauseOptions" />
  <TypeSignature Language="F#" Value="type ExceptionHandlingClauseOptions = " />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1c40f-101">Identifica i tipi di clausola di gestione delle eccezioni.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1c40f-101">Identifies kinds of exception-handling clauses.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1c40f-102">Per esaminare le clausole di gestione delle eccezioni in un metodo, ottenere un <xref:System.Reflection.MethodInfo> oggetto e chiamare il <xref:System.Reflection.MethodBase.GetMethodBody%2A> metodo per ottenere il corpo del metodo.</span><span class="sxs-lookup"><span data-stu-id="1c40f-102">To examine the exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> object and call the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain the method body.</span></span> <span data-ttu-id="1c40f-103">Usare la <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> per ottenere un elenco di proprietà <xref:System.Reflection.ExceptionHandlingClause> oggetti.</span><span class="sxs-lookup"><span data-stu-id="1c40f-103">Use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1c40f-104">Per utilizzare le clausole di gestione delle eccezioni richiede una conoscenza approfondita dei metadati e formati di istruzioni Microsoft intermediate language (MSIL).</span><span class="sxs-lookup"><span data-stu-id="1c40f-104">Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.</span></span> <span data-ttu-id="1c40f-105">Informazioni sono disponibili nella documentazione di Common Language Infrastructure (CLI), in particolare "Partition II: Metadata Definition and Semantics" e "Partition III: CIL Instruction Set".</span><span class="sxs-lookup"><span data-stu-id="1c40f-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="1c40f-106">La documentazione è disponibile online; vedere [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) (ECMA C# e standard di Common Language Infrastructure) in MSDN e [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) nel sito Web internazionale Ecma.</span><span class="sxs-lookup"><span data-stu-id="1c40f-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1c40f-107">Esempio di codice seguente definisce un metodo di test denominato `MethodBodyExample`e visualizza le informazioni sulle variabili locali e le clausole di gestione delle eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1c40f-107">The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="1c40f-108">Il <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> metodo viene utilizzato per ottenere un <xref:System.Reflection.MethodBody> oggetto per il metodo di test.</span><span class="sxs-lookup"><span data-stu-id="1c40f-108">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="1c40f-109">Il <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> proprietà viene utilizzata per ottenere un elenco di <xref:System.Reflection.ExceptionHandlingClause> degli oggetti e visualizzare le relative proprietà.</span><span class="sxs-lookup"><span data-stu-id="1c40f-109">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1c40f-110">Non tutti i linguaggi di programmazione è possono generare clausole filtro.</span><span class="sxs-lookup"><span data-stu-id="1c40f-110">Not all computer languages can generate Filter clauses.</span></span> <span data-ttu-id="1c40f-111">Nell'esempio Visual Basic viene illustrata una clausola di filtro, usando Visual Basic `When` espressione, che viene omesso dagli esempi per le altre lingue.</span><span class="sxs-lookup"><span data-stu-id="1c40f-111">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="1c40f-112">Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Reflection.MethodBody> classe.</span><span class="sxs-lookup"><span data-stu-id="1c40f-112">This code is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.MethodBody" />
    <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
  </Docs>
  <Members>
    <Member MemberName="Clause">
      <MemberSignature Language="C#" Value="Clause" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Clause = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Clause" />
      <MemberSignature Language="VB.NET" Value="Clause" />
      <MemberSignature Language="C++ CLI" Value="Clause" />
      <MemberSignature Language="F#" Value="Clause = 0" Usage="System.Reflection.ExceptionHandlingClauseOptions.Clause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="1c40f-113">La clausola accetta tutte le eccezioni che derivano da un tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c40f-113">The clause accepts all exceptions that derive from a specified type.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Fault">
      <MemberSignature Language="C#" Value="Fault" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Fault = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Fault" />
      <MemberSignature Language="VB.NET" Value="Fault" />
      <MemberSignature Language="C++ CLI" Value="Fault" />
      <MemberSignature Language="F#" Value="Fault = 4" Usage="System.Reflection.ExceptionHandlingClauseOptions.Fault" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="1c40f-114">La clausola viene eseguita se si verifica un'eccezione ma non al termine di un normale flusso di controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c40f-114">The clause is executed if an exception occurs, but not on completion of normal control flow.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="Filter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Filter = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" />
      <MemberSignature Language="VB.NET" Value="Filter" />
      <MemberSignature Language="C++ CLI" Value="Filter" />
      <MemberSignature Language="F#" Value="Filter = 1" Usage="System.Reflection.ExceptionHandlingClauseOptions.Filter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="1c40f-115">La clausola contiene istruzioni specificate dall'utente che determinano se l'eccezione deve essere ignorata (ovvero se deve essere ripresa la normale esecuzione), se deve essere gestita dal gestore associato o se deve essere passata alla clausola successiva.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c40f-115">The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Finally">
      <MemberSignature Language="C#" Value="Finally" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Reflection.ExceptionHandlingClauseOptions Finally = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />
      <MemberSignature Language="VB.NET" Value="Finally" />
      <MemberSignature Language="C++ CLI" Value="Finally" />
      <MemberSignature Language="F#" Value="Finally = 2" Usage="System.Reflection.ExceptionHandlingClauseOptions.Finally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ExceptionHandlingClauseOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="1c40f-116">La clausola viene eseguita ogni volta che il blocco try viene chiuso, sia in seguito al normale flusso di controllo che a causa di un'eccezione non gestita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1c40f-116">The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>