<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="GenericParameterAttributes.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac512b3be1e659bbaefef778cf4ecd6f914ce37dbcd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12b3be1e659bbaefef778cf4ecd6f914ce37dbcd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.GenericParameterAttributes">
          <source>Describes the constraints on a generic type parameter of a generic type or method.</source>
          <target state="translated">Descrive i vincoli su un parametro di tipo generico di un metodo o di un tipo generico.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.GenericParameterAttributes">
          <source>The members of the <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> enumeration are divided into two groups, the variance group and the special constraints group.</source>
          <target state="translated">I membri del <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> enumerazione sono suddivisi in due gruppi, il gruppo di varianza e il gruppo di vincoli speciali.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.GenericParameterAttributes">
          <source>To test a <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> value for variance flags, first perform a bitwise AND operation with VarianceMask.</source>
          <target state="translated">Per testare un <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> valore per i flag di varianza, prima di eseguire un'operazione con AND bit per bit con VarianceMask.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.GenericParameterAttributes">
          <source>If the result is None, there are no variance flags.</source>
          <target state="translated">Se il risultato è Nessuno, non sono presenti flag di varianza.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.GenericParameterAttributes">
          <source>Similarly, use SpecialConstraintMask to test for constraint flags.</source>
          <target state="translated">Analogamente, utilizzare SpecialConstraintMask per verificare i flag dei vincoli.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.GenericParameterAttributes">
          <source>The following code example defines a generic type <ph id="ph1">`Test`</ph> with two type parameters.</source>
          <target state="translated">Esempio di codice seguente definisce un tipo generico <ph id="ph1">`Test`</ph> con due parametri di tipo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.GenericParameterAttributes">
          <source>The second type parameter has a base class constraint and a reference type constraint.</source>
          <target state="translated">Il secondo parametro di tipo ha un vincolo di classe di base e un vincolo di tipo riferimento.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.GenericParameterAttributes">
          <source>When the program executes, the constraints are examined using the <ph id="ph1">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Quando viene eseguito il programma, i vincoli vengono esaminati utilizzando il <ph id="ph1">&lt;xref:System.Type.GenericParameterAttributes%2A?displayProperty=nameWithType&gt;</ph> proprietà e <ph id="ph2">&lt;xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.Contravariant">
          <source>The generic type parameter is contravariant.</source>
          <target state="translated">Il parametro di tipo generico è controvariante.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.Contravariant">
          <source>A contravariant type parameter can appear as a parameter type in method signatures.</source>
          <target state="translated">Un parametro di tipo controvariante può apparire come un tipo di parametro nelle firme del metodo.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.Covariant">
          <source>The generic type parameter is covariant.</source>
          <target state="translated">Il parametro di tipo generico è covariante.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.Covariant">
          <source>A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</source>
          <target state="translated">Un parametro di tipo covariante può apparire come il tipo di risultato di un metodo, il tipo di un campo di sola lettura, un tipo di base dichiarato o un'interfaccia implementata.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
          <source>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</source>
          <target state="translated">Un tipo può sostituire il parametro di tipo generico solo se possiede un costruttore senza parametri.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.None">
          <source>There are no special flags.</source>
          <target state="translated">Non sono presenti flag speciali.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
          <source>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</source>
          <target state="translated">Un tipo può sostituire il parametro di tipo generico solo se è un tipo di valore e non ammette valori Null.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
          <source>A type can be substituted for the generic type parameter only if it is a reference type.</source>
          <target state="translated">Un tipo può sostituire il parametro di tipo generico solo se è un tipo di riferimento.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
          <source>Selects the combination of all special constraint flags.</source>
          <target state="translated">Seleziona la combinazione di tutti i flag di vincoli speciali.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
          <source>This value is the result of using logical OR to combine the following flags: <ph id="ph1">&lt;see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" /&gt;</ph>, and <ph id="ph3">&lt;see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" /&gt;</ph>.</source>
          <target state="translated">Questo valore è il risultato dell'uso dell'operatore logico OR per combinare i flag <ph id="ph1">&lt;see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" /&gt;</ph> e <ph id="ph3">&lt;see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.VarianceMask">
          <source>Selects the combination of all variance flags.</source>
          <target state="translated">Seleziona la combinazione di tutti i flag di varianza.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Reflection.GenericParameterAttributes.VarianceMask">
          <source>This value is the result of using logical OR to combine the following flags: <ph id="ph1">&lt;see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Reflection.GenericParameterAttributes.Covariant" /&gt;</ph>.</source>
          <target state="translated">Questo valore è il risultato dell'uso dell'operatore logico OR per combinare i flag <ph id="ph1">&lt;see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /&gt;</ph> e <ph id="ph2">&lt;see cref="F:System.Reflection.GenericParameterAttributes.Covariant" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>