<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyInfo.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5938c9dbaa20ead9dda7c3ac22b41168c0fe93a5c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">938c9dbaa20ead9dda7c3ac22b41168c0fe93a5c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Discovers the attributes of a property and provides access to property metadata.</source>
          <target state="translated">Individua gli attributi di una proprietà e consente di accedere ai relativi metadati.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties are logically the same as fields.</source>
          <target state="translated">Proprietà sono logicamente gli stessi campi.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>A property is a named aspect of an object's state whose value is typically accessible through <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors.</source>
          <target state="translated">Una proprietà è un aspetto dello stato di un oggetto il cui valore è in genere possibile accedere tramite denominato <ph id="ph1">`get`</ph> e <ph id="ph2">`set`</ph> le funzioni di accesso.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties may be read-only, in which case a set routine is not supported.</source>
          <target state="translated">Proprietà possono essere di sola lettura, nel qual caso non è supportata una set di routine.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>To determine whether a property is <ph id="ph1">`static`</ph>, you must obtain the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph3">`get`</ph> or <ph id="ph4">`set`</ph> accessor, by calling the <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> or the <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> method, and examine its <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> property.</source>
          <target state="translated">Per determinare se una proprietà è <ph id="ph1">`static`</ph>, è necessario ottenere il <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> per il <ph id="ph3">`get`</ph> o <ph id="ph4">`set`</ph> funzione di accesso, chiamando il <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> o <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> (metodo) ed esaminare il relativo <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Several methods in this class assume that the <ph id="ph1">`get`</ph> accessor and <ph id="ph2">`set`</ph> accessor methods of a property have certain formats.</source>
          <target state="translated">Diversi metodi in questa classe presuppongono che il <ph id="ph1">`get`</ph> della funzione di accesso e <ph id="ph2">`set`</ph> metodi delle funzioni di accesso di una proprietà abbiano determinati formati.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The signatures of the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must match the following convention:</source>
          <target state="translated">Le firme del <ph id="ph1">`get`</ph> e <ph id="ph2">`set`</ph> metodi devono corrispondere la convenzione seguente:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The return type of the <ph id="ph1">`get`</ph> method and the last argument of the <ph id="ph2">`set`</ph> method must be identical.</source>
          <target state="translated">Il tipo restituito del <ph id="ph1">`get`</ph> (metodo) e l'ultimo argomento del <ph id="ph2">`set`</ph> metodo deve essere identico.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This is the type of the property.</source>
          <target state="translated">Questo è il tipo della proprietà.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must have the same number, type, and order of indices.</source>
          <target state="translated">Il <ph id="ph1">`get`</ph> e <ph id="ph2">`set`</ph> metodi devono avere lo stesso numero, tipo e ordine di indici.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>If this format is not followed, the behavior of the <ph id="ph1">`GetValue`</ph> and <ph id="ph2">`SetValue`</ph> methods is undefined.</source>
          <target state="translated">Se non è seguito questo formato, il comportamento del <ph id="ph1">`GetValue`</ph> e <ph id="ph2">`SetValue`</ph> metodi non è definito.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`PropertyInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> su <ph id="ph2">`PropertyInfo`</ph> quando il <ph id="ph3">`inherit`</ph> parametro di <ph id="ph4">`GetCustomAttributes`</ph> è <ph id="ph5">`true`</ph> non segue la gerarchia dei tipi.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">Utilizzare <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> per ereditare gli attributi personalizzati.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">In questo esempio viene illustrato come utilizzare diverse classi di reflection per analizzare i metadati contenuti in un assembly.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: <bpt id="p1">**</bpt>example.exe &gt; propertyinfo.txt<ept id="p1">**</ept></source>
          <target state="translated">In questo esempio genera l'errore circa 55.000 righe di dati, è possibile reindirizzare a un file di testo al prompt dei comandi, come indicato di seguito: <bpt id="p1">**</bpt>example.exe &gt; PropertyInfo. txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">per l'attendibilità totale per gli eredi.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Questa classe non può essere ereditata da codice parzialmente attendibile.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Questo tipo è thread-safe.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</source>
          <target state="translated">Quando si eredita da <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, è necessario eseguire l'override dei seguenti membri: <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, e <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Gets the attributes for this property.</source>
          <target state="translated">Ottiene gli attributi per questa proprietà.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes of this property.</source>
          <target state="translated">Attributi di questa proprietà.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property returns the attributes associated with the property represented by this <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> proprietà restituisce gli attributi associati alla proprietà rappresentata da questo <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a <ph id="ph1">`SpecialName`</ph> property, and so on.</source>
          <target state="translated">Gli attributi sono principalmente i modificatori applicati da un compilatore durante la creazione di una proprietà. indicano se una proprietà è la proprietà predefinita, un <ph id="ph1">`SpecialName`</ph> proprietà e così via.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Note that, for almost all properties found in types in the .NET Framework class library, the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property is <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si noti che, per quasi tutte le proprietà presenti nei tipi nella libreria di classi .NET Framework, il valore di <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> proprietà <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>In most cases, you probably want to retrieve the custom attributes associated with a property.</source>
          <target state="translated">Nella maggior parte dei casi, si vorrà recuperare gli attributi personalizzati associati a una proprietà.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To do this, retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> property, or call one of the overloads of the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method.</source>
          <target state="translated">A tale scopo, recuperare il valore della <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> proprietà o chiamare uno degli overload del <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property:</source>
          <target state="translated">Per ottenere il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> proprietà:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type to which the property belongs.</source>
          <target state="translated">Ottenere un <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il tipo a cui appartiene la proprietà.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object by calling an overload of the <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Ottenere il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto chiamando un overload di <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Retrieve the property's attributes from the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">Gli attributi della proprietà da recuperare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> method and supplying a value for the <ph id="ph2">`attributes`</ph> argument.</source>
          <target state="translated">È possibile definire gli attributi di una proprietà per un tipo creato in modo dinamico tramite reflection emit chiamando un overload di <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> (metodo) e fornendo un valore per il <ph id="ph2">`attributes`</ph> argomento.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>Gets a value indicating whether the property can be read.</source>
          <target state="translated">Ottiene un valore che indica se è possibile leggere la proprietà.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se è possibile leggere la proprietà; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>If the property does not have a <ph id="ph1">`get`</ph> accessor, it cannot be read.</source>
          <target state="translated">Se la proprietà non ha un <ph id="ph1">`get`</ph> funzione di accesso, non può essere letto.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>To get the <ph id="ph1">`CanRead`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`CanRead`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`CanRead`</ph> value.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, ottenere il <ph id="ph2">`CanRead`</ph> valore.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The following example defines two properties.</source>
          <target state="translated">L'esempio seguente definisce due proprietà.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The first property is readable and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">La prima proprietà è leggibile e <ph id="ph1">`CanRead`</ph> proprietà <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The second property is not readable (there is no get accessor), and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">La seconda proprietà non è leggibile (non è disponibile alcuna funzione di accesso get) e <ph id="ph1">`CanRead`</ph> proprietà <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Gets a value indicating whether the property can be written to.</source>
          <target state="translated">Ottiene un valore che indica se è possibile scrivere nella proprietà.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be written to; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se è possibile scrivere nella proprietà; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> returns <ph id="ph2">`true`</ph> if the property has a <ph id="ph3">`set`</ph> accessor, even if the accessor is <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (or <ph id="ph6">`Friend`</ph> in Visual Basic), or <ph id="ph7">`protected`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> Restituisce <ph id="ph2">`true`</ph> se la proprietà ha un <ph id="ph3">`set`</ph> funzione di accesso, anche se la funzione di accesso <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (o <ph id="ph6">`Friend`</ph> in Visual Basic), o <ph id="ph7">`protected`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>If the property does not have a <ph id="ph1">`set`</ph> accessor, the method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Se la proprietà non ha un <ph id="ph1">`set`</ph> funzione di accesso, il metodo restituisce <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>To get the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property:</source>
          <target state="translated">Per ottenere il valore di <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> proprietà:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Get the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object of the type that includes the property.</source>
          <target state="translated">Ottenere il <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto del tipo che include la proprietà.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Call the <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> to get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property.</source>
          <target state="translated">Chiamare il <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> per ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto che rappresenta la proprietà.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">Recuperare il valore della <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The following example defines two properties.</source>
          <target state="translated">L'esempio seguente definisce due proprietà.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The first property is writable and the <ph id="ph1">`CanWrite`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">La prima proprietà è accessibile in scrittura e <ph id="ph1">`CanWrite`</ph> proprietà <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The second property is not writable (there is no <ph id="ph1">`set`</ph> accessor), and the <ph id="ph2">`CanWrite`</ph> property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">La seconda proprietà non è accessibile in scrittura (è presente alcun <ph id="ph1">`set`</ph> della funzione di accesso) e <ph id="ph2">`CanWrite`</ph> proprietà <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Oggetto da confrontare con questa istanza o <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> è uguale al tipo e al valore di questa istanza; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns an array of the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors on this property.</source>
          <target state="translated">Restituisce una matrice delle funzioni di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> e <ph id="ph2">&lt;see langword="set" /&gt;</ph> per questa proprietà.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Returns an array whose elements reflect the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Restituisce una matrice i cui elementi riflettono le funzioni di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> e <ph id="ph2">&lt;see langword="set" /&gt;</ph> pubbliche della proprietà riflesse dall'istanza corrente.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects that reflect the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> and <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</source>
          <target state="translated">Matrice di oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> che riflette le funzioni di accesso <ph id="ph2">&lt;see langword="get" /&gt;</ph> e <ph id="ph3">&lt;see langword="set" /&gt;</ph> pubbliche della proprietà riflesse dall'istanza corrente, se rilevate; in caso contrario, il metodo restituisce una matrice con zero (0) elementi.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">Per chiamare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> metodo:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Ottenere un <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta la classe.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto, ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> dell'oggetto, chiamare il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>The following example retrieves the public accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">L'esempio seguente recupera le funzioni di accesso pubblici di <ph id="ph1">`ClassWithProperty.Caption`</ph> proprietà e visualizza le informazioni su di essi.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">Chiama anche il <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> metodo setter per impostare il valore della proprietà e il metodo Get per recuperare il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Indicates whether non-public methods should be returned in the returned array.</source>
          <target state="translated">Indica se nella matrice devono essere restituiti metodi non pubblici.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se devono essere inclusi i metodi non pubblici; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Returns an array whose elements reflect the public and, if specified, non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Restituisce una matrice i cui elementi riflettono le funzioni di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph>e <ph id="ph2">&lt;see langword="set" /&gt;</ph> pubbliche e, se specificato, non pubbliche della proprietà riflesse dall'istanza corrente.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>An array whose elements reflect the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Matrice i cui elementi riflettono le funzioni di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> e <ph id="ph2">&lt;see langword="set" /&gt;</ph> della proprietà riflesse dall'istanza corrente.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, this array contains public and non-public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">Se <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph2">&lt;see langword="true" /&gt;</ph>, la matrice contiene le funzioni di accesso <ph id="ph3">&lt;see langword="get" /&gt;</ph> e <ph id="ph4">&lt;see langword="set" /&gt;</ph> pubbliche e non pubbliche.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>, this array contains only public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">Se <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph2">&lt;see langword="false" /&gt;</ph>, la matrice contiene solo le funzioni di accesso <ph id="ph3">&lt;see langword="get" /&gt;</ph> e <ph id="ph4">&lt;see langword="set" /&gt;</ph> pubbliche.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</source>
          <target state="translated">Se non vengono rilevate funzioni di accesso con la visibilità specificata, il metodo restituisce una matrice con zero (0) elementi.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">Per chiamare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> metodo:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Ottenere un <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta la classe.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto, ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> dell'oggetto, chiamare il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>The following example retrieves the accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">L'esempio seguente recupera le funzioni di accesso di <ph id="ph1">`ClassWithProperty.Caption`</ph> proprietà e visualizza le informazioni su di essi.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">Chiama anche il <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> metodo setter per impostare il valore della proprietà e il metodo Get per recuperare il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">Restituisce un valore letterale associato alla proprietà da un compilatore.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> contenente il valore letterale associato alla proprietà.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Se il valore letterale è un tipo di classe con un valore dell'elemento uguale a zero, il valore restituito è <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Questo metodo è fornito per i progettisti di compilatori gestiti e analizzatori di codice.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Do not use this method in the reflection-only context, because it might cause code to execute.</source>
          <target state="translated">Non utilizzare questo metodo nel contesto reflection-only, poiché potrebbe causare l'esecuzione di codice.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> method instead.</source>
          <target state="translated">Al suo posto usa il metodo <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">Nei metadati non gestiti, la tabella costante viene utilizzata per archiviare valori costanti per i campi, parametri e proprietà.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Le informazioni sulle costanti non influiscono direttamente sul comportamento di runtime.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">I compilatori analizzano queste informazioni, in fase di compilazione durante l'importazione di metadati.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Se utilizzato, il valore di una costante è incorporato nel flusso Microsoft intermediate language (MSIL) viene generato.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">Non sono disponibili istruzioni MSIL che possono essere utilizzate per accedere alla tabella delle costanti in fase di esecuzione.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui valori costanti e la tabella delle costanti, vedere la documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">La tabella Constant nei metadati non gestiti non contiene un valore costante per la proprietà corrente.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">Il tipo di valore non è uno dei tipi consentiti dalle specifiche CLS (Common Language Specification).</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>See the ECMA Partition II specification, Metadata.</source>
          <target state="translated">Vedere le specifiche ECMA Partition II, Metadata.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> che rappresenta la funzione di accesso <ph id="ph2">&lt;see langword="get" /&gt;</ph> per questa proprietà.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Restituisce la funzione di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> pubblica per questa proprietà.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public or does not exist.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> che rappresenta la funzione di accesso <ph id="ph2">&lt;see langword="get" /&gt;</ph> pubblica per questa proprietà o <ph id="ph3">&lt;see langword="null" /&gt;</ph> se la funzione di accesso <ph id="ph4">&lt;see langword="get" /&gt;</ph> non è pubblica o non esiste.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetGetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si tratta di un metodo pratico che fornisce un'implementazione per la classe astratta <ph id="ph1">`GetGetMethod`</ph> metodo con il <ph id="ph2">`nonPublic`</ph> parametro impostato su <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`GetGetMethod`</ph> (metodo), ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, utilizzare il <ph id="ph2">`GetGetMethod`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Indicates whether a non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor should be returned.</source>
          <target state="translated">Indica se deve essere restituita una funzione di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> non pubblica.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se una funzione di accesso non pubblica deve essere restituita; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the public or non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Quando ne viene eseguito l'override in una classe derivata, restituisce la funzione di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> pubblica o non pubblica per la proprietà.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, if <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> che rappresenta la funzione di accesso <ph id="ph2">&lt;see langword="get" /&gt;</ph> per questa proprietà, se <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> and the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public, or if <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph6">&lt;see langword="true" /&gt;</ph> but no <ph id="ph7">&lt;see langword="get" /&gt;</ph> accessors exist.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see langword="null" /&gt;</ph> se <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph3">&lt;see langword="false" /&gt;</ph> e la funzione di accesso <ph id="ph4">&lt;see langword="get" /&gt;</ph> non è pubblica o se <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph6">&lt;see langword="true" /&gt;</ph>, ma non esiste alcuna funzione di accesso <ph id="ph7">&lt;see langword="get" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>This property is the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> representing the get accessor.</source>
          <target state="translated">Questa proprietà è di <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> che rappresenta la funzione di accesso get.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`GetGetMethod`</ph> (metodo), ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, utilizzare il <ph id="ph2">`GetGetMethod`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The following example displays the public or non-public <ph id="ph1">`get`</ph> accessor for the specified property.</source>
          <target state="translated">L'esempio seguente mostra il pubblico o non pubblica <ph id="ph1">`get`</ph> funzione di accesso per la proprietà specificata.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">Il metodo richiesto non è pubblico e il chiamante non contiene oggetti <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> di cui eseguire la reflection in questo metodo non pubblico.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Restituisce il codice hash per l'istanza.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Codice hash di un intero con segno a 32 bit.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>When overridden in a derived class, returns an array of all the index parameters for the property.</source>
          <target state="translated">Quando ne viene eseguito l'override in una classe derivata, restituisce una matrice di tutti i parametri di indice per la proprietà.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> containing the parameters for the indexes.</source>
          <target state="translated">Matrice di tipo <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> contenente i parametri per gli indici.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>If the property is not indexed, the array has 0 (zero) elements.</source>
          <target state="translated">Se la proprietà non è stata indicizzata, la matrice conterrà 0 (zero) elementi.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Extract any required parameter information from the returned array.</source>
          <target state="translated">Estrarre le informazioni di parametro richiesto dalla matrice restituita.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>To use the <ph id="ph1">`GetIndexParameters`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`GetIndexParameters`</ph> (metodo), ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetIndexParameters`</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, utilizzare il <ph id="ph2">`GetIndexParameters`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>The following example displays the index parameters of the specified property.</source>
          <target state="translated">Nell'esempio seguente mostra i parametri di indice della proprietà specificata.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Ottiene la funzione di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> per questa proprietà.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>The <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Funzione di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> per questa proprietà.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>Returns an array of types representing the optional custom modifiers of the property.</source>
          <target state="translated">Restituisce una matrice di tipi che rappresentano i modificatori personalizzati facoltativi della proprietà.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Matrice di oggetti <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che identificano i modificatori personalizzati facoltativi della proprietà corrente, ad esempio <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> metodi vengono forniti per i progettisti di compilatori gestiti.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui modificatori personalizzati, vedere <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> e le classi correlate nel <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> dello spazio dei nomi e le specifiche dei metadati nella documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">Restituisce un valore letterale associato alla proprietà da un compilatore.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> contenente il valore letterale associato alla proprietà.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Se il valore letterale è un tipo di classe con un valore dell'elemento uguale a zero, il valore restituito è <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Questo metodo è fornito per i progettisti di compilatori gestiti e analizzatori di codice.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Questo metodo può essere utilizzato il contesto di esecuzione sia il contesto reflection-only.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">Nei metadati non gestiti, la tabella costante viene utilizzata per archiviare valori costanti per i campi, parametri e proprietà.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Le informazioni sulle costanti non influiscono direttamente sul comportamento di runtime.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">I compilatori analizzano queste informazioni, in fase di compilazione durante l'importazione di metadati.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Se utilizzato, il valore di una costante è incorporato nel flusso Microsoft intermediate language (MSIL) viene generato.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">Non sono disponibili istruzioni MSIL che possono essere utilizzate per accedere alla tabella delle costanti in fase di esecuzione.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui valori costanti e la tabella delle costanti, vedere la documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">La tabella Constant nei metadati non gestiti non contiene un valore costante per la proprietà corrente.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">Il tipo di valore non è uno dei tipi consentiti dalle specifiche CLS (Common Language Specification).</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">Vedere le specifiche ECMA Partition II, formato logico dei metadati: altre strutture, tipi di elementi usanti nelle firme.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>Returns an array of types representing the required custom modifiers of the property.</source>
          <target state="translated">Restituisce una matrice di tipi che rappresentano i modificatori personalizzati obbligatori della proprietà.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Matrice di oggetti <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che identificano i modificatori personalizzati obbligatori della proprietà corrente, ad esempio <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> metodi vengono forniti per i progettisti di compilatori gestiti.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui modificatori personalizzati, vedere <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> e le classi correlate nel <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> dello spazio dei nomi e le specifiche dei metadati nella documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> che rappresenta la funzione di accesso <ph id="ph2">&lt;see langword="set" /&gt;</ph> per questa proprietà.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Restituisce la funzione di accesso <ph id="ph1">&lt;see langword="set" /&gt;</ph> pubblica per questa proprietà.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="Set" /&gt;</ph> method for this property if the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> if the <ph id="ph5">&lt;see langword="set" /&gt;</ph> accessor is not public.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> che rappresenta il metodo <ph id="ph2">&lt;see langword="Set" /&gt;</ph> per questa proprietà se la funzione di accesso <ph id="ph3">&lt;see langword="set" /&gt;</ph> è pubblica o <ph id="ph4">&lt;see langword="null" /&gt;</ph> se la funzione di accesso <ph id="ph5">&lt;see langword="set" /&gt;</ph> non è pubblica.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetSetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si tratta di un metodo pratico che fornisce un'implementazione per la classe astratta <ph id="ph1">`GetSetMethod`</ph> metodo con il <ph id="ph2">`nonPublic`</ph> parametro impostato su <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`GetSetMethod`</ph> (metodo), ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, utilizzare il <ph id="ph2">`GetSetMethod`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Indicates whether the accessor should be returned if it is non-public.</source>
          <target state="translated">Indica se la funzione di accesso deve essere restituita se non è pubblica.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se una funzione di accesso non pubblica deve essere restituita; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Quando ne viene eseguito l'override in una classe derivata, restituisce la funzione di accesso <ph id="ph1">&lt;see langword="set" /&gt;</ph> per questa proprietà.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>This property's <ph id="ph1">&lt;see langword="Set" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">Metodo <ph id="ph1">&lt;see langword="Set" /&gt;</ph> della proprietà oppure <ph id="ph2">&lt;see langword="null" /&gt;</ph>, come illustrato nella tabella seguente.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valore</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condizione</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> The <ph id="ph5">&lt;see langword="Set" /&gt;</ph> method for this property.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Metodo <ph id="ph5">&lt;see langword="Set" /&gt;</ph> della proprietà.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> La funzione di accesso <ph id="ph3">&lt;see langword="set" /&gt;</ph> è pubblica.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph2">&lt;see langword="true" /&gt;</ph> e la funzione di accesso <ph id="ph3">&lt;see langword="set" /&gt;</ph> non è pubblica.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph7">&lt;see langword="true" /&gt;</ph>, but the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph7">&lt;see langword="true" /&gt;</ph>, ma la proprietà è di sola lettura.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> è <ph id="ph2">&lt;see langword="false" /&gt;</ph> e la funzione di accesso <ph id="ph3">&lt;see langword="set" /&gt;</ph> non è pubblica.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>There is no <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">Non è presente alcuna funzione di accesso <ph id="ph1">&lt;see langword="set" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`GetSetMethod`</ph> (metodo), ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, utilizzare il <ph id="ph2">`GetSetMethod`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The following example displays the <ph id="ph1">`set`</ph> accessor for the specified property.</source>
          <target state="translated">L'esempio seguente mostra il <ph id="ph1">`set`</ph> della funzione di accesso per la proprietà specificata.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">Il metodo richiesto non è pubblico e il chiamante non contiene oggetti <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> di cui eseguire la reflection in questo metodo non pubblico.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">Restituisce il valore della proprietà di un oggetto specificato.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Oggetto di cui verrà restituito il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">Restituisce il valore della proprietà di un oggetto specificato.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The property value of the specified object.</source>
          <target state="translated">Valore della proprietà dell'oggetto specificato.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> exception.</source>
          <target state="translated">Chiamare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> l'overload per recuperare il valore di una proprietà non indicizzate; se si tenta di recuperare il valore di una proprietà indicizzata, il metodo genera un <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> eccezione.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You can determine whether a property is indexed or not by calling the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">È possibile determinare se una proprietà indicizzata o non chiamando il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>If the length of the returned <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array is zero, the property is not indexed.</source>
          <target state="translated">Se la lunghezza dell'oggetto restituito <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matrice è uguale a zero, la proprietà non indicizzata.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> parameter set to <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, the <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> set to <ph id="ph5">`null`</ph>, the object array of index values set to <ph id="ph6">`null`</ph>, and the <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> set to <ph id="ph8">`null`</ph>.</source>
          <target state="translated">Si tratta di un metodo pratico che fornisce un'implementazione per la classe astratta <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> metodo con il <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> parametro impostato su <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> impostato su <ph id="ph5">`null`</ph>, la matrice di oggetti di valori di indice impostato su <ph id="ph6">`null`</ph>, e <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> impostato su <ph id="ph8">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The following example defines a <ph id="ph1">`Planet`</ph> class that has two properties: <ph id="ph2">`Name`</ph>, the name of the planet; and <ph id="ph3">`Distance`</ph>, the planet's distance from Earth.</source>
          <target state="translated">L'esempio seguente definisce un <ph id="ph1">`Planet`</ph> classe che ha due proprietà: <ph id="ph2">`Name`</ph>, il nome del pianeta; e <ph id="ph3">`Distance`</ph>, la distanza del pianeta da terra.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The example instantiates a <ph id="ph1">`Planet`</ph> object that represents the planet Jupiter and passes it to a <ph id="ph2">`GetPropertyValues`</ph> method that displays information about the properties and uses the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> method to get the value of each <ph id="ph4">`Planet`</ph> property.</source>
          <target state="translated">Nell'esempio viene creata un'istanza di un <ph id="ph1">`Planet`</ph> oggetto che rappresenta il pianeta Jupiter e lo passa a un <ph id="ph2">`GetPropertyValues`</ph> metodo che visualizza informazioni sulle proprietà e viene utilizzato il <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> metodo per ottenere il valore di ogni <ph id="ph4">`Planet`</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Oggetto di cui verrà restituito il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The indexes of indexed properties are zero-based.</source>
          <target state="translated">Gli indici delle proprietà indicizzate sono in base zero.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Il valore deve essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per le proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Returns the property value of a specified object with optional index values for indexed properties.</source>
          <target state="translated">Restituisce il valore della proprietà di un oggetto specificato, con valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property value of the specified object.</source>
          <target state="translated">Valore della proprietà dell'oggetto specificato.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Per determinare se una proprietà è indicizzata, utilizzare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Se la matrice risultante è 0 (zero) elementi, la proprietà non indicizzata.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetValue`</ph> method with a <ph id="ph2">`BindingFlags`</ph> parameter of <ph id="ph3">`Default`</ph>, the <ph id="ph4">`Binder`</ph> set to <ph id="ph5">`null`</ph>, and the <ph id="ph6">`CultureInfo`</ph> set to <ph id="ph7">`null`</ph>.</source>
          <target state="translated">Si tratta di un metodo pratico che fornisce un'implementazione per la classe astratta <ph id="ph1">`GetValue`</ph> metodo con un <ph id="ph2">`BindingFlags`</ph> parametro di <ph id="ph3">`Default`</ph>, <ph id="ph4">`Binder`</ph> impostato su <ph id="ph5">`null`</ph>e <ph id="ph6">`CultureInfo`</ph> impostato su <ph id="ph7">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">Poiché le proprietà statiche appartengono al tipo, non i singoli oggetti, ottenere le proprietà statiche passando <ph id="ph1">`null`</ph> come argomento dell'oggetto.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">Ad esempio, utilizzare il codice seguente per ottenere statica <ph id="ph1">`CurrentCulture`</ph> proprietà <ph id="ph2">`CultureInfo`</ph> :</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`GetValue`</ph> (metodo), ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, utilizzare il <ph id="ph2">`GetValue`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The following example shows how to get the value of an indexed property.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come ottenere il valore di una proprietà indicizzata.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> property is the default property (the indexer in C#) of the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> proprietà ha la proprietà predefinita (l'indicizzatore in c#) di <ph id="ph2">&lt;xref:System.String&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="index" /&gt;</ph> non contiene il tipo di argomenti necessari.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">La funzione di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> della proprietà non è stata trovata.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella <bpt id="p2">[</bpt>libreria di classi portabile<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> rilevare invece l'eccezione <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L'oggetto non corrisponde al tipo di destinazione oppure una proprietà è una proprietà dell'istanza, ma <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Il numero di parametri in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> non corrisponde al numero di parametri accettati dalla proprietà indicizzata.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella <bpt id="p2">[</bpt>libreria di classi portabile<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> rilevare invece l'eccezione della classe di base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">È stato effettuato un tentativo non valido di accedere a un metodo privato o protetto all'interno di una classe.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">Si è verificato un errore durante il recupero del valore della proprietà.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Ad esempio, un valore di indice specificato per una proprietà indicizzata non è compreso nell'intervallo.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La causa di questo errore è indicata dalla proprietà <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Oggetto di cui verrà restituito il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, and <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Una combinazione bit per bit dei seguenti membri di enumerazione che specificano l'attributo di chiamata: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph> e <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">È necessario specificare un attributo di chiamata appropriato.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">Ad esempio, per richiamare un membro statico, impostare il flag <ph id="ph1">&lt;see langword="Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Oggetto che consente l'associazione, la coercizione di tipi di argomento, la chiamata di membri e il recupero di oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> tramite la reflection.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, verrà usato il binder predefinito.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Il valore deve essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per le proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">Impostazioni cultura in base alle quali deve essere localizzata la risorsa.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">Se la risorsa non viene localizzata con queste impostazioni cultura, la proprietà <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> verrà successivamente chiamata in cerca di una corrispondenza.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Se questo valore è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, le informazioni specifiche delle impostazioni cultura vengono ottenute dalla proprietà <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">Quando ne viene eseguito l'override in una classe derivata, restituisce il valore della proprietà di un oggetto specificato con l'associazione, l'indice e le informazioni specifiche delle impostazioni cultura indicati.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property value of the specified object.</source>
          <target state="translated">Valore della proprietà dell'oggetto specificato.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Per determinare se una proprietà è indicizzata, utilizzare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Se la matrice risultante è 0 (zero) elementi, la proprietà non indicizzata.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">Poiché le proprietà statiche appartengono al tipo, non i singoli oggetti, ottenere le proprietà statiche passando <ph id="ph1">`null`</ph> come argomento dell'oggetto.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">Ad esempio, utilizzare il codice seguente per ottenere statica <ph id="ph1">`CurrentCulture`</ph> proprietà <ph id="ph2">`CultureInfo`</ph> :</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`GetValue`</ph> (metodo), ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, utilizzare il <ph id="ph2">`GetValue`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="index" /&gt;</ph> non contiene il tipo di argomenti necessari.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">La funzione di accesso <ph id="ph1">&lt;see langword="get" /&gt;</ph> della proprietà non è stata trovata.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L'oggetto non corrisponde al tipo di destinazione oppure una proprietà è una proprietà dell'istanza, ma <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Il numero di parametri in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> non corrisponde al numero di parametri accettati dalla proprietà indicizzata.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">È stato effettuato un tentativo non valido di accedere a un metodo privato o protetto all'interno di una classe.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">Si è verificato un errore durante il recupero del valore della proprietà.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Ad esempio, un valore di indice specificato per una proprietà indicizzata non è compreso nell'intervallo.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La causa di questo errore è indicata dalla proprietà <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>Gets a value indicating whether the property is the special name.</source>
          <target state="translated">Ottiene un valore che indica se la proprietà è il nome speciale.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property is the special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se questa proprietà è il nome speciale; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>The <ph id="ph1">`SpecialName`</ph> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</source>
          <target state="translated">Il <ph id="ph1">`SpecialName`</ph> bit viene impostato su membri di flag che sono gestiti in modo speciale da alcuni compilatori (ad esempio funzioni di accesso a proprietà e metodi di overload di operatori).</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>To get the <ph id="ph1">`IsSpecialName`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`IsSpecialName`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`IsSpecialName`</ph> value.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, ottenere il <ph id="ph2">`IsSpecialName`</ph> valore.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">Ottiene un valore <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> che indica che questo membro è una proprietà.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">Valore <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> che indica che questo membro è una proprietà.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Esegue l'override di questa proprietà <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> only when a given member is a property.</source>
          <target state="translated">Pertanto, quando si esamina un set di <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> oggetti, ad esempio, la matrice restituita dal <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> : il <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> restituisce proprietà <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> solo quando un membro specificato è una proprietà.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source><ph id="ph1">`MemberType`</ph> is a derived class of <ph id="ph2">`MemberInfo`</ph> and specifies the type of member this is.</source>
          <target state="translated"><ph id="ph1">`MemberType`</ph> è una classe derivata di <ph id="ph2">`MemberInfo`</ph> e specifica il tipo di membro rappresentato.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Member types are constructors, properties, fields, and methods.</source>
          <target state="translated">Tipi di membro sono costruttori, proprietà, campi e metodi.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Since this is a <ph id="ph1">`PropertyInfo`</ph> property, the returned type is a property.</source>
          <target state="translated">Poiché si tratta di un <ph id="ph1">`PropertyInfo`</ph> , il tipo restituito è una proprietà.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`MemberType`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`MemberType`</ph> value.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, ottenere il <ph id="ph2">`MemberType`</ph> valore.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>The following example displays the type of the specified member.</source>
          <target state="translated">Nell'esempio seguente visualizza il tipo del membro specificato.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Primo oggetto da confrontare.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Secondo oggetto da confrontare.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Indica se due oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> sono uguali.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> è uguale a <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Primo oggetto da confrontare.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Secondo oggetto da confrontare.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Indica se due oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> non sono uguali.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> non è uguale a <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Gets the type of this property.</source>
          <target state="translated">Ottiene il tipo della proprietà.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The type of this property.</source>
          <target state="translated">Tipo della proprietà.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>To determine the type of a particular property, do the following:</source>
          <target state="translated">Per determinare il tipo di una proprietà specifica, eseguire le operazioni seguenti:</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type (the class or structure) that contains the property.</source>
          <target state="translated">Ottenere un <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il tipo (la classe o struttura) che contiene la proprietà.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>If you are working with an object (an instance of a type), you can call its <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method.</source>
          <target state="translated">Se si lavora con un oggetto (un'istanza di un tipo), è possibile chiamare il relativo <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</source>
          <target state="translated">In caso contrario, è possibile utilizzare l'operatore in c# o l'operatore di Visual Basic, come illustra l'esempio.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property in which you're interested.</source>
          <target state="translated">Ottenere un <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto che rappresenta la proprietà in cui si è interessati.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>You can do this by getting an array of all properties from the <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> method and then iterating the elements in the array, or you can retrieve the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property directly by calling the <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method and specifying the property name.</source>
          <target state="translated">È possibile farlo tramite il recupero di una matrice di tutte le proprietà dal <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> (metodo) e quindi si esegue l'iterazione gli elementi di matrice o è possibile recuperare il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto che rappresenta la proprietà chiamando direttamente il <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> metodo e specificando il nome della proprietà.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Recuperare il valore della <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> proprietà il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class that has five properties.</source>
          <target state="translated">L'esempio seguente definisce un <ph id="ph1">`Employee`</ph> classe che dispone di cinque proprietà.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>It then uses retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects that represent those properties and displays the name and type of each.</source>
          <target state="translated">Viene quindi utilizzato recupera una matrice di <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetti che rappresentano le proprietà e consente di visualizzare il nome e il tipo di ogni.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Ottiene la funzione di accesso <ph id="ph1">&lt;see langword="set" /&gt;</ph> per questa proprietà.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>The <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the property is read-only.</source>
          <target state="translated">Il <ph id="ph1">&lt;see langword="set" /&gt;</ph> funzione di accesso per questa proprietà, o <ph id="ph2">&lt;see langword="null" /&gt;</ph> se la proprietà è di sola lettura.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> property is equivalent to calling the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> method with a value of <ph id="ph3">`true`</ph> for the <ph id="ph4">`nonPublic`</ph> argument.</source>
          <target state="translated">Il recupero del valore del <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> proprietà è equivalente alla chiamata di <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> metodo con un valore di <ph id="ph3">`true`</ph> per il <ph id="ph4">`nonPublic`</ph> argomento.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Sets the property value for a specified object.</source>
          <target state="translated">Imposta il valore della proprietà per un oggetto specificato.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The object whose property value will be set.</source>
          <target state="translated">Oggetto di cui verrà impostato il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The new property value.</source>
          <target state="translated">Nuovo valore della proprietà.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Sets the property value of a specified object.</source>
          <target state="translated">Imposta il valore della proprietà di un oggetto specificato.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> overload sets the value of a non-indexed property.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> overload imposta il valore di una proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To determine whether a property is indexed, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Per determinare se una proprietà è indicizzata, chiamare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Se la matrice risultante è 0 (zero) elementi, la proprietà non indicizzata.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To set the value of an indexed property, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> overload.</source>
          <target state="translated">Per impostare il valore di una proprietà indicizzata, chiamare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> rapporto di overload.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the property type of this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, the property will be set to the default value for that type.</source>
          <target state="translated">Se la proprietà di questo tipo di <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto è un tipo di valore e <ph id="ph2">`value`</ph> è <ph id="ph3">`null`</ph>, la proprietà verrà impostata sul valore predefinito per tale tipo.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> for <ph id="ph7">`Object[]`</ph>, and <ph id="ph8">`null`</ph> for <ph id="ph9">`CultureInfo`</ph>.</source>
          <target state="translated">Si tratta di un metodo pratico che chiama l'implementazione di runtime della classe astratta <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> metodo, specificando <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> per il <ph id="ph3">`BindingFlags`</ph> parametro <ph id="ph4">`null`</ph> per <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> per <ph id="ph7">`Object[]`</ph>e <ph id="ph8">`null`</ph> per <ph id="ph9">`CultureInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> (metodo), ottenere innanzitutto un <ph id="ph2">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta la classe.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Type&gt;</ph>, ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> dell'oggetto, chiamare il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with one <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) and one instance property.</source>
          <target state="translated">Nell'esempio seguente viene dichiarata una classe denominata <ph id="ph1">`Example`</ph> con uno <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) e proprietà di un'istanza.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> method to change the original property values and displays the original and final values.</source>
          <target state="translated">Nell'esempio viene utilizzato il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> metodo per modificare la proprietà originale e di visualizzare i valori originali e finali.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">La funzione di accesso <ph id="ph1">&lt;see langword="set" /&gt;</ph> della proprietà non è stata trovata.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated">Non è possibile convertire <ph id="ph1">&lt;paramref name="value" /&gt;</ph> nel tipo di <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella <bpt id="p2">[</bpt>libreria di classi portabile<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> rilevare invece l'eccezione <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> does not match the target type, or a property is an instance property but <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il tipo di <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> non corrisponde al tipo di destinazione oppure una proprietà è una proprietà dell'istanza ma <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella <bpt id="p2">[</bpt>libreria di classi portabile<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> rilevare invece l'eccezione della classe di base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">È stato effettuato un tentativo non valido di accedere a un metodo privato o protetto all'interno di una classe.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Si è verificato un errore durante l'impostazione del valore della proprietà.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La causa di questo errore è indicata dalla proprietà <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object whose property value will be set.</source>
          <target state="translated">Oggetto di cui verrà impostato il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The new property value.</source>
          <target state="translated">Nuovo valore della proprietà.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Il valore deve essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per le proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Sets the property value of a specified object with optional index values for index properties.</source>
          <target state="translated">Imposta il valore della proprietà di un oggetto specificato con valori di indice facoltativi per le proprietà di indice.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">Se questo <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto è un tipo di valore e <ph id="ph2">`value`</ph> è <ph id="ph3">`null`</ph>, la proprietà verrà impostata sul valore predefinito per tale tipo.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Per determinare se una proprietà è indicizzata, utilizzare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Se la matrice risultante è 0 (zero) elementi, la proprietà non indicizzata.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, and <ph id="ph6">`null`</ph> for <ph id="ph7">`CultureInfo`</ph>.</source>
          <target state="translated">Si tratta di un metodo pratico che chiama l'implementazione di runtime della classe astratta <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> metodo, specificando <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> per il <ph id="ph3">`BindingFlags`</ph> parametro <ph id="ph4">`null`</ph> per <ph id="ph5">`Binder`</ph>, e <ph id="ph6">`null`</ph> per <ph id="ph7">`CultureInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> (metodo), ottenere innanzitutto un <ph id="ph2">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta la classe.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Type&gt;</ph>, ottenere il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, utilizzare il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example defines a class named <ph id="ph1">`TestClass`</ph> that has a read-write property named <ph id="ph2">`Caption`</ph>.</source>
          <target state="translated">L'esempio seguente definisce una classe denominata <ph id="ph1">`TestClass`</ph> che dispone di una proprietà di lettura / scrittura denominata <ph id="ph2">`Caption`</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>It  displays the default value of the <ph id="ph1">`Caption`</ph> property, calls the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the property value, and displays the result.</source>
          <target state="translated">Visualizza il valore predefinito del <ph id="ph1">`Caption`</ph> proprietà, chiama il <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metodo per modificare il valore della proprietà e viene visualizzato il risultato.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Note that, because the <ph id="ph1">`Caption`</ph> property is not a parameter array, the <ph id="ph2">`index`</ph> argument is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Si noti che, in quanto il <ph id="ph1">`Caption`</ph> proprietà non è una matrice di parametri, il <ph id="ph2">`index`</ph> argomento <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with three properties: a <ph id="ph2">`static`</ph> property (<ph id="ph3">`Shared`</ph> in Visual Basic), an instance property, and an indexed instance property.</source>
          <target state="translated">Nell'esempio seguente viene dichiarata una classe denominata <ph id="ph1">`Example`</ph> con tre proprietà: una <ph id="ph2">`static`</ph> proprietà (<ph id="ph3">`Shared`</ph> in Visual Basic), una proprietà dell'istanza e una proprietà dell'istanza indicizzata.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the default values of the properties and displays the original and final values.</source>
          <target state="translated">Nell'esempio viene utilizzato il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> metodo per modificare i valori predefiniti delle proprietà e consente di visualizzare i valori originali e finali.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</source>
          <target state="translated">Il nome che viene eseguito la ricerca per una proprietà dell'istanza indicizzata con reflection è diverso a seconda del linguaggio e dagli attributi applicati alla proprietà.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In Visual Basic, the property name is always used to search for the property with reflection.</source>
          <target state="translated">In Visual Basic, il nome della proprietà è sempre usato per la ricerca della proprietà con reflection.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">`Default`</ph> keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">`Default`</ph> (parola chiave) per rendere la proprietà valore predefinito è di proprietà indicizzata, nel qual caso è possibile omettere il nome durante l'accesso alla proprietà, come nel seguente esempio.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can also use the property name.</source>
          <target state="translated">È inoltre possibile utilizzare il nome della proprietà.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</source>
          <target state="translated">La proprietà di istanza indicizzata è una proprietà predefinita denominata indicizzatore in c#, e il nome non viene mai utilizzato quando l'accesso alla proprietà nel codice.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>By default, the name of the property is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection.</source>
          <target state="translated">Per impostazione predefinita, il nome della proprietà è <ph id="ph1">`Item`</ph>, ed è necessario utilizzare tale nome quando si cerca la proprietà tramite reflection.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the indexer a different name.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attributo da assegnare all'indicizzatore.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In this example, the name is <ph id="ph1">`IndexedInstanceProperty`</ph>.</source>
          <target state="translated">In questo esempio il nome è <ph id="ph1">`IndexedInstanceProperty`</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C++, the <ph id="ph1">`default`</ph> specifier can be used to make an indexed property a default indexed property (class indexer).</source>
          <target state="translated">In C++, il <ph id="ph1">`default`</ph> identificatore può essere utilizzato per rendere una proprietà indicizzata predefinito proprietà indicizzata (classe indexer).</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In that case, the name of the property by default is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection, as in this example.</source>
          <target state="translated">In tal caso, il nome della proprietà per impostazione predefinita è <ph id="ph1">`Item`</ph>, ed è necessario utilizzare tale nome quando si cerca la proprietà con reflection, come nel seguente esempio.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attributo per assegnare l'indicizzatore di classe, un nome diverso nella reflection, ma è possibile utilizzare tale nome per accedere alla proprietà nel codice.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</source>
          <target state="translated">Una proprietà indicizzata non è un indicizzatore di classe è accessibile tramite il relativo nome, nel codice e nella reflection.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="index" /&gt;</ph> non contiene il tipo di argomenti necessari.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">La funzione di accesso <ph id="ph1">&lt;see langword="set" /&gt;</ph> della proprietà non è stata trovata.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated">Non è possibile convertire <ph id="ph1">&lt;paramref name="value" /&gt;</ph> nel tipo di <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella <bpt id="p2">[</bpt>libreria di classi portabile<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> rilevare invece l'eccezione <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L'oggetto non corrisponde al tipo di destinazione oppure una proprietà è una proprietà dell'istanza, ma <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Il numero di parametri in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> non corrisponde al numero di parametri accettati dalla proprietà indicizzata.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella <bpt id="p2">[</bpt>libreria di classi portabile<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> rilevare invece l'eccezione della classe di base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">È stato effettuato un tentativo non valido di accedere a un metodo privato o protetto all'interno di una classe.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Si è verificato un errore durante l'impostazione del valore della proprietà.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Ad esempio, un valore di indice specificato per una proprietà indicizzata non è compreso nell'intervallo.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La causa di questo errore è indicata dalla proprietà <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be set.</source>
          <target state="translated">Oggetto di cui verrà impostato il valore della proprietà.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The new property value.</source>
          <target state="translated">Nuovo valore della proprietà.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Una combinazione bit per bit dei seguenti membri di enumerazione che specificano l'attributo di chiamata: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph> o <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">È necessario specificare un attributo di chiamata appropriato.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">Ad esempio, per richiamare un membro statico, impostare il flag <ph id="ph1">&lt;see langword="Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Oggetto che consente l'associazione, la coercizione di tipi di argomento, la chiamata di membri e il recupero di oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> tramite la reflection.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, verrà usato il binder predefinito.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valori di indice facoltativi per le proprietà indicizzate.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Il valore deve essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per le proprietà non indicizzate.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">Impostazioni cultura in base alle quali deve essere localizzata la risorsa.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">Se la risorsa non viene localizzata con queste impostazioni cultura, la proprietà <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> verrà successivamente chiamata in cerca di una corrispondenza.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Se questo valore è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, le informazioni specifiche delle impostazioni cultura vengono ottenute dalla proprietà <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">Quando ne viene eseguito l'override in una classe derivata, imposta il valore della proprietà per un oggetto specificato con il binding, l'indice e le informazioni specifiche delle impostazioni cultura indicati.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">Se questo <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> oggetto è un tipo di valore e <ph id="ph2">`value`</ph> è <ph id="ph3">`null`</ph>, la proprietà verrà impostata sul valore predefinito per tale tipo.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Per determinare se una proprietà è indicizzata, utilizzare il <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Se la matrice risultante è 0 (zero) elementi, la proprietà non indicizzata.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Le restrizioni di accesso vengono ignorate per il codice completamente attendibile.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</source>
          <target state="translated">Vale a dire, proprietà, metodi, campi e costruttori privati accessibili e richiamate tramite Reflection, ogni volta che il codice è completamente attendibile.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`SetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`SetValue`</ph> (metodo), ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`SetValue`</ph> method.</source>
          <target state="translated">Dal <ph id="ph1">`PropertyInfo`</ph>, utilizzare il <ph id="ph2">`SetValue`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">La matrice <ph id="ph1">&lt;paramref name="index" /&gt;</ph> non contiene il tipo di argomenti necessari.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">La funzione di accesso <ph id="ph1">&lt;see langword="set" /&gt;</ph> della proprietà non è stata trovata.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated">Non è possibile convertire <ph id="ph1">&lt;paramref name="value" /&gt;</ph> nel tipo di <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">L'oggetto non corrisponde al tipo di destinazione oppure una proprietà è una proprietà dell'istanza, ma <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">Il numero di parametri in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> non corrisponde al numero di parametri accettati dalla proprietà indicizzata.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">È stato effettuato un tentativo non valido di accedere a un metodo privato o protetto all'interno di una classe.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Si è verificato un errore durante l'impostazione del valore della proprietà.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Ad esempio, un valore di indice specificato per una proprietà indicizzata non è compreso nell'intervallo.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La causa di questo errore è indicata dalla proprietà <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matrice di nomi passata di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Conteggio dei nomi di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contesto delle impostazioni locali in cui interpretare i nomi.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Matrice allocata dal chiamante che riceve gli ID corrispondenti ai nomi.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Esegue il mapping di un set di nomi a un set corrispondente di ID dispatch.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informazioni sul tipo da restituire.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificatore delle impostazioni locali per le informazioni sul tipo.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Riceve un puntatore all'oggetto relativo alle informazioni sul tipo richiesto.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera le informazioni sul tipo relative a un oggetto che può quindi essere usato per ottenere informazioni sul tipo relative a un'interfaccia.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Punta a una posizione che riceve il numero di interfacce di informazioni sul tipo fornite dall'oggetto.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Recupera il numero delle interfacce di informazioni sul tipo fornite da un oggetto (0 o 1).</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica il membro.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contesto di impostazioni locali all'interno del quale devono essere interpretati gli argomenti.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flag che descrivono il contesto della chiamata.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Puntatore a una struttura contenente una matrice di argomenti, una matrice di DISPID per argomenti denominati e i conteggi del numero di elementi nelle matrici.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Puntatore alla posizione in cui deve essere archiviato il risultato.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Puntatore a una struttura contenente informazioni sull'eccezione.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indice del primo argomento che contiene un errore.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fornisce l'accesso a proprietà e metodi esposti da un oggetto.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::Invoke`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>