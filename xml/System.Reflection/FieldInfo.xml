<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FieldInfo.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5eaf3da8149c7beea481d56464ce8b739bcbe0488.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eaf3da8149c7beea481d56464ce8b739bcbe0488</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Discovers the attributes of a field and provides access to field metadata.</source>
          <target state="translated">Individua gli attributi di un campo e consente di accedere ai relativi metadati.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The field information is obtained from metadata.</source>
          <target state="translated">Informazioni sui campi ottenute dai metadati.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class does not have a public constructor.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> classe dispone di un costruttore pubblico.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects are obtained by calling either the <ph id="ph2">&lt;xref:System.Type.GetFields%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Type.GetField%2A&gt;</ph> method of a <ph id="ph4">`Type`</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> gli oggetti vengono ottenuti chiamando il <ph id="ph2">&lt;xref:System.Type.GetFields%2A&gt;</ph> o <ph id="ph3">&lt;xref:System.Type.GetField%2A&gt;</ph> metodo di un <ph id="ph4">`Type`</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>Fields are variables defined in the class.</source>
          <target state="translated">I campi sono variabili definite nella classe.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> fornisce l'accesso ai metadati per un campo all'interno di una classe e fornisce funzionalità di get e set dinamico per il campo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The class is not loaded into memory until invoke or get is called on the object.</source>
          <target state="translated">La classe non caricata in memoria finché invoke o get viene chiamato sull'oggetto.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get the field-related information from the <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class, and then displays field attributes.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> metodo per ottenere le informazioni relative al campo da di <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> classe, quindi consente di visualizzare gli attributi di campo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">per l'attendibilità totale per gli eredi.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Questa classe non può essere ereditata da codice parzialmente attendibile.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Questo tipo è thread-safe.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /&gt;</ph>.</source>
          <target state="translated">Quando si eredita da <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>, è necessario eseguire l'override dei seguenti membri: <ph id="ph2">&lt;see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /&gt;</ph> e <ph id="ph3">&lt;see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>Gets the attributes associated with this field.</source>
          <target state="translated">Ottiene gli attributi associati a questo campo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>The <ph id="ph1">&lt;see langword="FieldAttributes" /&gt;</ph> for this field.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="FieldAttributes" /&gt;</ph> di questo campo.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>All members have a set of attributes, which are defined in relation to the specific type of member.</source>
          <target state="translated">Tutti i membri dispongono di un set di attributi, che sono definiti in relazione al tipo specifico di membro.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source><ph id="ph1">`FieldAttributes`</ph> informs the user whether this field is the private field, a static field, and so on.</source>
          <target state="translated"><ph id="ph1">`FieldAttributes`</ph> informa l'utente se questo campo è il campo privato, un campo statico e così via.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>To get the <ph id="ph1">`Attributes`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`Attributes`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`Attributes`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`FieldInfo`</ph>, ottenere il <ph id="ph2">`Attributes`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>The following code example builds three fields and displays their field attributes.</source>
          <target state="translated">Esempio di codice seguente compila tre campi e visualizzati i relativi attributi.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>A <ph id="ph1">`FieldAttributes`</ph> value can contain more than one attribute, such as both <ph id="ph2">`Public`</ph> and <ph id="ph3">`Literal`</ph>, as shown in the third field.</source>
          <target state="translated">Oggetto <ph id="ph1">`FieldAttributes`</ph> valore può contenere più di un attributo, ad esempio entrambi <ph id="ph2">`Public`</ph> e <ph id="ph3">`Literal`</ph>, come illustrato nel terzo campo.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Oggetto da confrontare con questa istanza o <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> è uguale al tipo e al valore di questa istanza; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>Gets a <ph id="ph1">&lt;see langword="RuntimeFieldHandle" /&gt;</ph>, which is a handle to the internal metadata representation of a field.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see langword="RuntimeFieldHandle" /&gt;</ph>, che è un handle della rappresentazione dei metadati interni di un campo.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>A handle to the internal metadata representation of a field.</source>
          <target state="translated">Handle per la rappresentazione dei metadati interni di un campo.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>The handles are valid only in the appdomain in which they were obtained.</source>
          <target state="translated">Gli handle sono validi solo nel dominio applicazione in cui sono stati ottenuti.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.</source>
          <target state="translated">Nell'esempio seguente recupera informazioni sui campi di MyClass. MyField e viene visualizzato il campo associato all'handle del campo.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>Gets the type of this field object.</source>
          <target state="translated">Ottiene il tipo di questo oggetto campo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The type of this field object.</source>
          <target state="translated">Il tipo di questo oggetto campo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The type is some primitive data type, such as <ph id="ph1">`String`</ph>, <ph id="ph2">`Boolean`</ph>, or <ph id="ph3">`GUID`</ph>.</source>
          <target state="translated">Il tipo è un tipo di dati primitivi, ad esempio <ph id="ph1">`String`</ph>, <ph id="ph2">`Boolean`</ph>, o <ph id="ph3">`GUID`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>To get the <ph id="ph1">`FieldType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`FieldType`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`FieldType`</ph> value.</source>
          <target state="translated">Dal <ph id="ph1">`FieldInfo`</ph>, ottenere il <ph id="ph2">`FieldType`</ph> valore.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The following example creates a field, gets its type and <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, and displays its <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene creato un campo, ottiene il tipo e <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>e consente di visualizzare il relativo <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by a handle.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> per il campo rappresentato da un handle.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> structure that contains the handle to the internal metadata representation of a field.</source>
          <target state="translated">Struttura <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> contenente l'handle per la rappresentazione dei metadati interni di un campo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by the specified handle.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> per il campo rappresentato dall'handle specificato.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field specified by <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> che rappresenta il campo specificato da <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Handles are valid only in the application domain in which they were obtained.</source>
          <target state="translated">Handle sono validi solo nel dominio dell'applicazione in cui sono stati ottenuti.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects for the fields of a type, gets a <ph id="ph3">&lt;xref:System.RuntimeFieldHandle&gt;</ph> structure for each field, and then retrieves the <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects from the handles using this overload of the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio di codice viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> metodo da ottenere <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> Ottiene gli oggetti per i campi di un tipo, un <ph id="ph3">&lt;xref:System.RuntimeFieldHandle&gt;</ph> struttura per ogni campo e quindi recupera il <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> oggetti dagli handle utilizzando questo overload di <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A&gt;</ph>metodo.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> non è valido.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> structure that contains the handle to the internal metadata representation of a field.</source>
          <target state="translated">Struttura <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> contenente l'handle per la rappresentazione dei metadati interni di un campo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeTypeHandle" /&gt;</ph> structure that contains the handle to the generic type that defines the field.</source>
          <target state="translated">Struttura <ph id="ph1">&lt;see cref="T:System.RuntimeTypeHandle" /&gt;</ph> contenente l'handle al tipo generico che definisce il campo.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by the specified handle, for the specified generic type.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> per il campo rappresentato dall'handle specificato, per il tipo generico specificato.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field specified by <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, in the generic type specified by <ph id="ph3">&lt;paramref name="declaringType" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> che rappresenta il campo specificato da <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, nel tipo generico specificato da <ph id="ph3">&lt;paramref name="declaringType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Handles are valid only in the application domain in which they were obtained.</source>
          <target state="translated">Handle sono validi solo nel dominio dell'applicazione in cui sono stati ottenuti.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The recommended practice is that <ph id="ph1">`declaringType`</ph> should always be the runtime type handle of the constructed type that <ph id="ph2">`handle`</ph> belongs to.</source>
          <target state="translated">La procedura consigliata è che <ph id="ph1">`declaringType`</ph> deve essere sempre l'handle del tipo di runtime di costruito tipo <ph id="ph2">`handle`</ph> appartiene.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>That is, if <ph id="ph1">`handle`</ph> is a runtime field handle for a field that belongs to <ph id="ph2">`MyType&lt;int&gt;`</ph> (<ph id="ph3">`MyType(Of Integer)`</ph> in Visual Basic), <ph id="ph4">`declaringType`</ph> is the runtime type handle for <ph id="ph5">`MyType&lt;int&gt;`</ph>.</source>
          <target state="translated">Vale a dire se <ph id="ph1">`handle`</ph> è un handle di runtime per un campo che appartiene a <ph id="ph2">`MyType&lt;int&gt;`</ph> (<ph id="ph3">`MyType(Of Integer)`</ph> in Visual Basic), <ph id="ph4">`declaringType`</ph> è l'handle del tipo di runtime per <ph id="ph5">`MyType&lt;int&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</source>
          <target state="translated">Non utilizzare l'handle del tipo di runtime della definizione del tipo generico, a meno che l'handle di runtime rappresenta un campo nella definizione di tipo generico.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Implementations are compatible in some cases.</source>
          <target state="translated">Le implementazioni sono compatibili in alcuni casi.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments.</source>
          <target state="translated">Ad esempio, una singola implementazione è condivisa da tutti i tipi che sono costituiti da una definizione di tipo generico specifica utilizzando i tipi di riferimento per gli argomenti di tipo generico.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, <ph id="ph1">`MyType&lt;string&gt;`</ph>, <ph id="ph2">`MyType&lt;object&gt;`</ph>, and <ph id="ph3">`MyType&lt;ArrayList&gt;`</ph> all share the same implementation.</source>
          <target state="translated">Ad esempio, <ph id="ph1">`MyType&lt;string&gt;`</ph>, <ph id="ph2">`MyType&lt;object&gt;`</ph>, e <ph id="ph3">`MyType&lt;ArrayList&gt;`</ph> condividono la stessa implementazione.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In this situation, the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> object that is returned represents a field on the type that <ph id="ph2">`declaringType`</ph> specifies, regardless of the original source of <ph id="ph3">`handle`</ph>.</source>
          <target state="translated">In questo caso, il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> oggetto restituito rappresenta un campo del tipo che <ph id="ph2">`declaringType`</ph> specifica, indipendentemente dall'origine di <ph id="ph3">`handle`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</source>
          <target state="translated">Questa operazione non è consigliabile, perché funziona solo se gli argomenti di tipo generico del tipo costruito sono tipi di riferimento.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position.</source>
          <target state="translated">Se un argomento generico è un tipo di valore, l'handle del tipo di runtime del tipo costruito non è compatibile con gli handle del campo runtime da costruzioni che contengono un riferimento di tipo nella stessa posizione di parametro generico, o che ha un diverso tipo valore in tale posizione .</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In that case, the only way to use the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType&gt;</ph> overload is to ensure that <ph id="ph2">`declaringType`</ph> is the runtime type handle for the constructed type that <ph id="ph3">`handle`</ph> belongs to.</source>
          <target state="translated">In questo caso, l'unico modo per utilizzare il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType&gt;</ph> overload consiste nel verificare che <ph id="ph2">`declaringType`</ph> è l'handle del tipo di runtime per il tipo costruito che <ph id="ph3">`handle`</ph> appartiene.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The following example shows how to retrieve <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects for fields on constructed generic classes.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come recuperare <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> gli oggetti in classi generiche costruite.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The example defines the generic type <ph id="ph1">`Test&lt;T&gt;`</ph> (<ph id="ph2">`Test(Of T)`</ph> in Visual Basic) with a single field named <ph id="ph3">`TestField`</ph>, of type <ph id="ph4">`T`</ph>.</source>
          <target state="translated">L'esempio definisce il tipo generico <ph id="ph1">`Test&lt;T&gt;`</ph> (<ph id="ph2">`Test(Of T)`</ph> in Visual Basic) con un campo unico denominato <ph id="ph3">`TestField`</ph>, di tipo <ph id="ph4">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The example gets the <ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph> and <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> for the case where <ph id="ph3">`T`</ph> is <ph id="ph4">&lt;xref:System.String&gt;</ph>, and demonstrates the following:</source>
          <target state="translated">Nell'esempio viene ottenuto il <ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph> e <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> nel caso in cui <ph id="ph3">`T`</ph> è <ph id="ph4">&lt;xref:System.String&gt;</ph>e vengono illustrate le seguenti operazioni:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>An exception is thrown if the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29&gt;</ph> method overload is used.</source>
          <target state="translated">Viene generata un'eccezione se il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29&gt;</ph> viene utilizzato l'overload del metodo.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>This is true even if the field is not of type <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Questo vale anche se il campo non è di tipo <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case <ph id="ph2">`Test&lt;string&gt;`</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> viene recuperato correttamente se l'handle del tipo di runtime dalla stessa costruzione dell'handle del runtime campo, in questo caso <ph id="ph2">`Test&lt;string&gt;`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If the runtime type handle is from a compatible construction, in this case <ph id="ph1">`Test&lt;object&gt;`</ph>, a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field on the compatible construction is retrieved.</source>
          <target state="translated">Se l'handle del tipo di runtime da una costruzione compatibile, in questo caso è <ph id="ph1">`Test&lt;object&gt;`</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> per il campo nella costruzione compatibile viene recuperato.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If the runtime type handle is not from a compatible construction, an exception is thrown.</source>
          <target state="translated">Se l'handle del tipo di runtime non è compatibile, viene generata un'eccezione.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In this case, a value type is specified for <ph id="ph1">`T`</ph>.</source>
          <target state="translated">In questo caso, in cui viene specificato un tipo di valore per <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> non è valido.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source><ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> is not compatible with <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> non è compatibile con <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, <ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> is the runtime type handle of the generic type definition, and <ph id="ph2">&lt;paramref name="handle" /&gt;</ph> comes from a constructed type.</source>
          <target state="translated">Ad esempio, il parametro <ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> è l'handle di tipo runtime della definizione di tipo generico e <ph id="ph2">&lt;paramref name="handle" /&gt;</ph> proviene da un tipo costruito.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Restituisce il codice hash per l'istanza.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Codice hash di un intero con segno a 32 bit.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>Gets an array of types that identify the optional custom modifiers of the field.</source>
          <target state="translated">Ottiene una matrice di tipi che identificano i modificatori personalizzati facoltativi del campo.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current field, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>.</source>
          <target state="translated">Matrice di oggetti <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che identificano i modificatori personalizzati facoltativi del campo corrente, ad esempio <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> metodi vengono forniti per i progettisti di compilatori gestiti.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui modificatori personalizzati, vedere <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> e le classi correlate nel <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> dello spazio dei nomi e le specifiche dei metadati nella documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the field by a compiler.</source>
          <target state="translated">Restituisce un valore letterale associato al campo da un compilatore.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the field.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> contenente il valore letterale associato al campo.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Se il valore letterale è un tipo di classe con un valore dell'elemento uguale a zero, il valore restituito è <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Questo metodo è fornito per i progettisti di compilatori gestiti e analizzatori di codice.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Questo metodo può essere utilizzato il contesto di esecuzione sia il contesto reflection-only.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">Nei metadati non gestiti, la tabella costante viene utilizzata per archiviare valori costanti per i campi, parametri e proprietà.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Le informazioni sulle costanti non influiscono direttamente sul comportamento di runtime.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">I compilatori analizzano queste informazioni, in fase di compilazione durante l'importazione di metadati.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Se utilizzato, il valore di una costante è incorporato nel flusso Microsoft intermediate language (MSIL) viene generato.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">Non sono disponibili istruzioni MSIL che possono essere utilizzate per accedere alla tabella delle costanti in fase di esecuzione.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui valori costanti e la tabella delle costanti, vedere la documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current field.</source>
          <target state="translated">La tabella Constant nei metadati non gestiti non contiene un valore costante per il campo corrente.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">Il tipo di valore non è uno dei tipi consentiti dalle specifiche CLS (Common Language Specification).</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">Vedere le specifiche ECMA Partition II, formato logico dei metadati: altre strutture, tipi di elementi usati nelle firme.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The constant value for the field is not set.</source>
          <target state="translated">Il valore costante per il campo non è impostato.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>Gets an array of types that identify the required custom modifiers of the property.</source>
          <target state="translated">Ottiene una matrice di tipi che identificano i modificatori personalizzati obbligatori della proprietà.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Matrice di oggetti <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che identificano i modificatori personalizzati obbligatori della proprietà corrente, ad esempio <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> metodi vengono forniti per i progettisti di compilatori gestiti.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Per ulteriori informazioni sui modificatori personalizzati, vedere <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> e le classi correlate nel <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> dello spazio dei nomi e le specifiche dei metadati nella documentazione di specifiche ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentazione è disponibile online; vedere <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (ECMA C# e standard di Common Language Infrastructure) in MSDN e <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> nel sito Web internazionale Ecma.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The object whose field value will be returned.</source>
          <target state="translated">Oggetto di cui verrà restituito il valore del campo.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>When overridden in a derived class, returns the value of a field supported by a given object.</source>
          <target state="translated">In caso di override in una classe derivata, restituisce il valore di un campo supportato da un determinato oggetto.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>An object containing the value of the field reflected by this instance.</source>
          <target state="translated">Oggetto contenente il valore del campo riflesso da questa istanza.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> is ignored.</source>
          <target state="translated">Se il campo è statico, <ph id="ph1">`obj`</ph> viene ignorato.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Per i campi non statici, <ph id="ph1">`obj`</ph> deve essere un'istanza di una classe che eredita o dichiara il campo.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Note that the return type of <ph id="ph1">`GetValue`</ph> is <ph id="ph2">`Object`</ph>.</source>
          <target state="translated">Si noti che il tipo restituito di <ph id="ph1">`GetValue`</ph> è <ph id="ph2">`Object`</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>For example, if the field holds a Boolean primitive value, an instance of <ph id="ph1">`Object`</ph> with the appropriate Boolean value is returned.</source>
          <target state="translated">Ad esempio, se il campo contiene un valore booleano primitivi valore, un'istanza di <ph id="ph1">`Object`</ph> con il valore booleano appropriato viene restituito.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Before returning the value, <ph id="ph1">`GetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">Prima di restituire il valore, <ph id="ph1">`GetValue`</ph> controlla se l'utente dispone dell'autorizzazione di accesso.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Le restrizioni di accesso vengono ignorate per il codice completamente attendibile.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</source>
          <target state="translated">Vale a dire, proprietà, metodi, campi e costruttori privati accessibili e richiamate tramite reflection, ogni volta che il codice è completamente attendibile.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> method to retrieve the value of a static field.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> metodo per recuperare il valore di un campo statico.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Note that the value of the <ph id="ph1">`obj`</ph> argument is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Si noti che il valore di <ph id="ph1">`obj`</ph> argomento <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The following example retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that represents the fields of the <ph id="ph2">`FieldsClass`</ph> type, and then calls the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> to display the value of each field for the <ph id="ph4">`fieldsInst`</ph> object.</source>
          <target state="translated">Nell'esempio seguente recupera una matrice di <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> gli oggetti che rappresentano i campi del <ph id="ph2">`FieldsClass`</ph> tipo e quindi chiama il <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> per visualizzare il valore di ogni campo per il <ph id="ph4">`fieldsInst`</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella libreria di classi portabile rilevare invece l'eccezione <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The field is non-static and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il campo non è statico e <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>A field is marked literal, but the field does not have one of the accepted literal types.</source>
          <target state="translated">Un campo viene contrassegnato come valore letterale, ma non contiene uno dei tipi letterali accettati.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella libreria di classi portabile rilevare invece l'eccezione della classe di base <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">Il chiamante non ha l'autorizzazione necessaria per accedere a questo campo.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The method is neither declared nor inherited by the class of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated">Il metodo non viene dichiarato né ereditato dalla classe di <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</source>
          <target state="translated">Struttura <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> che incapsula un puntatore gestito a un percorso e una rappresentazione di runtime del tipo che potrebbe essere memorizzato in tale percorso.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>Returns the value of a field supported by a given object.</source>
          <target state="translated">Restituisce il valore di un campo supportato da un dato oggetto.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> containing a field value.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see langword="Object" /&gt;</ph> che contiene un valore di campo.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</source>
          <target state="translated">Il chiamante richiede le specifiche CLS (Common Language Specification), ma invece ha chiamato questo metodo.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>Gets a value indicating whether the potential visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</source>
          <target state="translated">Ottiene un valore che indica se la visibilità potenziale di questo campo è descritta da <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>, ovvero se il campo è visibile al massimo ad altri tipi dello stesso assembly, ma non ai tipi derivati all'esterno dell'assembly.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the visibility of this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se la visibilità di questo campo è descritta esattamente da <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The actual visibility of a field is limited by the visibility of its type.</source>
          <target state="translated">La visibilità di un campo effettiva è limitata dalla visibilità del relativo tipo.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph> property might be <ph id="ph2">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph> proprietà potrebbe essere <ph id="ph2">`true`</ph> per un campo, ma se è un campo di un tipo annidato privato, quindi il campo non è visibile all'esterno del tipo che lo contiene.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType&gt;</ph> if the only visibility modifier is <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic).</source>
          <target state="translated">La visibilità di un campo è descritta esattamente da <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType&gt;</ph> se è l'unico modificatore di visibilità <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic).</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>This property is <ph id="ph1">`false`</ph> for fields that are <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++); use the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.</source>
          <target state="translated">Questa proprietà è <ph id="ph1">`false`</ph> per i campi che sono <ph id="ph2">`protected internal`</ph> in c# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic <ph id="ph4">`protected public`</ph> in C++); usare il <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> proprietà per identificare tali campi.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">Esempio di codice seguente definisce i campi con livelli di visibilità e visualizza i valori di loro <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">I linguaggi Visual Basic e c# non è possibile definire i campi con <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibilità; che il livello di accesso viene visualizzata solo nell'esempio C++.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>Gets a value indicating whether the visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; that is, the field is visible only within its class and derived classes.</source>
          <target state="translated">Ottiene un valore che indica se la visibilità di questo campo è descritta da <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>, ovvero se il campo è visibile solo all'interno della relativa classe e delle classi derivate.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'accesso al campo è descritto esattamente da <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; in caso contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType&gt;</ph> if the only visibility modifier is <ph id="ph2">`protected`</ph>.</source>
          <target state="translated">La visibilità di un campo è descritta esattamente da <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType&gt;</ph> se è l'unico modificatore di visibilità <ph id="ph2">`protected`</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>This property is <ph id="ph1">`false`</ph> for fields that are <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++); use the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.</source>
          <target state="translated">Questa proprietà è <ph id="ph1">`false`</ph> per i campi che sono <ph id="ph2">`protected internal`</ph> in c# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic <ph id="ph4">`protected public`</ph> in C++); usare il <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> proprietà per identificare tali campi.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">Esempio di codice seguente definisce i campi con livelli di visibilità e visualizza i valori di loro <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">I linguaggi Visual Basic e c# non è possibile definire i campi con <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibilità; che il livello di accesso viene visualizzata solo nell'esempio C++.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>Gets a value indicating whether the visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</source>
          <target state="translated">Ottiene un valore che indica se la visibilità di questo campo è descritta da <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>, ovvero se è possibile accedere al campo da classi derivate, ma solo se appartenenti allo stesso assembly.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'accesso al campo è descritto esattamente da <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; in caso contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>If a field has <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</source>
          <target state="translated">Se un campo include <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph> visibilità livello, può essere chiamato da qualsiasi membro in una classe derivata che è anche nello stesso assembly, ma non da qualsiasi altro tipo.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> if the visibility modifier is <ph id="ph2">`protected private`</ph> in C++.</source>
          <target state="translated">La visibilità di un campo è descritta esattamente da <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> se il modificatore di visibilità <ph id="ph2">`protected private`</ph> in C++.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>Fields with this visibility cannot be defined in Visual Basic or C#.</source>
          <target state="translated">Non è possibile definire i campi con questa visibilità in Visual Basic o c#.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">Esempio di codice seguente definisce i campi con livelli di visibilità e visualizza i valori di loro <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">I linguaggi Visual Basic e c# non è possibile definire i campi con <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibilità; che il livello di accesso viene visualizzata solo nell'esempio C++.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>Gets a value indicating whether the potential visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</source>
          <target state="translated">Ottiene un valore che indica se la visibilità potenziale di questo campo è descritta da <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>, ovvero se è possibile accedere al campo da classi derivate indipendentemente dalla posizione e da classi appartenenti allo stesso assembly.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'accesso al campo è descritto esattamente da <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; in caso contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>If a field has <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</source>
          <target state="translated">Se un campo include <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph> visibilità livello, può essere chiamato da qualsiasi membro in una classe derivata o qualsiasi membro nello stesso assembly, ma non da qualsiasi altro tipo.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The actual visibility of a field is limited by the visibility of its type.</source>
          <target state="translated">La visibilità di un campo effettiva è limitata dalla visibilità del relativo tipo.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property might be <ph id="ph2">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> proprietà potrebbe essere <ph id="ph2">`true`</ph> per un campo, ma se è un campo di un tipo annidato privato, quindi il campo non è visibile all'esterno del tipo che lo contiene.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType&gt;</ph> if the visibility modifier is <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++).</source>
          <target state="translated">La visibilità di un campo è descritta esattamente da <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType&gt;</ph> se il modificatore di visibilità <ph id="ph2">`protected internal`</ph> in c# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic <ph id="ph4">`protected public`</ph> in C++).</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">Esempio di codice seguente definisce i campi con livelli di visibilità e visualizza i valori di loro <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, e <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">I linguaggi Visual Basic e c# non è possibile definire i campi con <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibilità; che il livello di accesso viene visualizzata solo nell'esempio C++.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Gets a value indicating whether the field can only be set in the body of the constructor.</source>
          <target state="translated">Ottiene un valore che indica se il campo può essere impostato solo nel corpo del costruttore.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="InitOnly" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'attributo <ph id="ph2">&lt;see langword="InitOnly" /&gt;</ph> del campo è impostato; in caso contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>If the returned value is <ph id="ph1">`true`</ph>, the field can only be initialized, and is read-only thereafter.</source>
          <target state="translated">Se il valore restituito è <ph id="ph1">`true`</ph>, il campo può essere inizializzato solo e successivamente è di sola lettura.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>To get the <ph id="ph1">`IsInitOnly`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`IsInitOnly`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsInitOnly`</ph> property.</source>
          <target state="translated">Dal <ph id="ph1">`FieldInfo`</ph>, ottenere il <ph id="ph2">`IsInitOnly`</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>To access a non-public field, combine <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> with either or both of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType&gt;</ph> in the <ph id="ph4">`GetField`</ph> method.</source>
          <target state="translated">Per accedere a un campo non pubblico, combinare <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> con uno o entrambi <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType&gt;</ph> e <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType&gt;</ph> nel <ph id="ph4">`GetField`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>The <ph id="ph1">`IsInitOnly`</ph> property is set when the <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType&gt;</ph> attribute is set.</source>
          <target state="translated">Il <ph id="ph1">`IsInitOnly`</ph> proprietà viene impostata quando il <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType&gt;</ph> attributo è impostato.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>In the following example, two fields are created.</source>
          <target state="translated">Nell'esempio seguente, vengono creati due campi.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>The second field is read-only, having no set accessor, and <ph id="ph1">`IsInitOnly`</ph> is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Il secondo campo è di sola lettura, non disponendo di alcuna funzione di accesso set, e <ph id="ph1">`IsInitOnly`</ph> è impostato su <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>This code produces the following output:</source>
          <target state="translated">L'output del codice è il seguente:</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Myfielda - A- modified, IsInitOnly = False</source>
          <target state="translated">Myfielda: - A - modificato, IsInitOnly = False</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Myfieldb - B readonly field, IsInitOnly = True</source>
          <target state="translated">Myfieldb - campo di sola lettura B, IsInitOnly = True</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>Gets a value indicating whether the value is written at compile time and cannot be changed.</source>
          <target state="translated">Ottiene un valore che indica se il valore viene scritto in fase di compilazione e non può essere modificato.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="Literal" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'attributo <ph id="ph2">&lt;see langword="Literal" /&gt;</ph> del campo è impostato; in caso contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>The <ph id="ph1">`IsLiteral`</ph> property is set when the <ph id="ph2">`FieldAttributes.Literal`</ph> attribute is set.</source>
          <target state="translated">Il <ph id="ph1">`IsLiteral`</ph> proprietà viene impostata quando il <ph id="ph2">`FieldAttributes.Literal`</ph> attributo è impostato.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>If this attribute is set, the field cannot be changed and is constant.</source>
          <target state="translated">Se questo attributo è impostato, il campo non può essere modificato ed è costante.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>Gets a value indicating whether this field has the <ph id="ph1">&lt;see langword="NotSerialized" /&gt;</ph> attribute.</source>
          <target state="translated">Ottiene un valore che indica se questo campo dispone dell'attributo <ph id="ph1">&lt;see langword="NotSerialized" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="NotSerialized" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'attributo <ph id="ph2">&lt;see langword="NotSerialized" /&gt;</ph> del campo è impostato; in caso contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>The <ph id="ph1">`IsNotSerialized`</ph> property returns <ph id="ph2">`true`</ph> when the field is marked with the <ph id="ph3">`FieldAttributes.NotSerialized`</ph> flag.</source>
          <target state="translated">Il <ph id="ph1">`IsNotSerialized`</ph> restituisce proprietà <ph id="ph2">`true`</ph> quando il campo è contrassegnato con il <ph id="ph3">`FieldAttributes.NotSerialized`</ph> flag.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.</source>
          <target state="translated">Quando questo flag è impostato su un campo, indica che il campo non deve essere serializzato quando il tipo è remoto.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.</source>
          <target state="translated">Nell'esempio seguente recupera le informazioni sui campi dei campi di MyClass, determina se i campi possono essere serializzati e visualizza i risultati.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source>Gets a value indicating whether the corresponding <ph id="ph1">&lt;see langword="PinvokeImpl" /&gt;</ph> attribute is set in <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>.</source>
          <target state="translated">Ottiene un valore che indica se l'attributo <ph id="ph1">&lt;see langword="PinvokeImpl" /&gt;</ph> corrispondente è impostato su <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="PinvokeImpl" /&gt;</ph> attribute is set in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'attributo <ph id="ph2">&lt;see langword="PinvokeImpl" /&gt;</ph> è impostato in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source>The following example creates a class and displays the name, field and <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A&gt;</ph> property value of the field.</source>
          <target state="translated">Nell'esempio seguente viene creata una classe e visualizza il nome, campo e <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A&gt;</ph> valore della proprietà del campo.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>Gets a value indicating whether the field is private.</source>
          <target state="translated">Ottiene un valore che indica se il campo è privato.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field is private; otherwise; <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il campo è privato; in caso contrario,<ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>Private fields are accessible only from member functions.</source>
          <target state="translated">Campi privati sono accessibili solo da funzioni membro.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>The <ph id="ph1">`IsPrivate`</ph> property is set when the <ph id="ph2">`FieldAttributes.Private`</ph> attribute is set.</source>
          <target state="translated">Il <ph id="ph1">`IsPrivate`</ph> proprietà viene impostata quando il <ph id="ph2">`FieldAttributes.Private`</ph> attributo è impostato.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>To get the <ph id="ph1">`IsPrivate`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`IsPrivate`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsPrivate`</ph> property.</source>
          <target state="translated">Dal <ph id="ph1">`FieldInfo`</ph>, ottenere il <ph id="ph2">`IsPrivate`</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>To access a non-public field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph>, and either <ph id="ph3">`Static`</ph> or <ph id="ph4">`Instance`</ph> in the <ph id="ph5">`GetField`</ph> method.</source>
          <target state="translated">Per accedere a un campo non pubblico, impostare il <ph id="ph1">`BindingFlags`</ph> a <ph id="ph2">`NonPublic`</ph>e <ph id="ph3">`Static`</ph> o <ph id="ph4">`Instance`</ph> nel <ph id="ph5">`GetField`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>The following example returns a value indicating whether or not the field of the class is private.</source>
          <target state="translated">L'esempio seguente restituisce un valore che indica se il campo della classe è privato.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>Gets a value indicating whether the field is public.</source>
          <target state="translated">Ottiene un valore che indica se il campo è pubblico.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this field is public; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il campo è pubblico; in caso contrario,<ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>Public fields are accessible everywhere their corresponding classes are visible.</source>
          <target state="translated">Campi pubblici sono accessibili ovunque che le classi corrispondenti sono visibili.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>The <ph id="ph1">`IsPublic`</ph> property is set when the <ph id="ph2">`FieldAttributes.Public`</ph> attribute is set.</source>
          <target state="translated">Il <ph id="ph1">`IsPublic`</ph> proprietà viene impostata quando il <ph id="ph2">`FieldAttributes.Public`</ph> attributo è impostato.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>To get the <ph id="ph1">`IsPublic`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`IsPublic`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsPublic`</ph> property.</source>
          <target state="translated">Dal <ph id="ph1">`FieldInfo`</ph>, ottenere il <ph id="ph2">`IsPublic`</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>If the field is other than public, it is protected and cannot be readily accessed.</source>
          <target state="translated">Se il campo non sono pubblici, è protetto e non è possibile accedervi.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>To access a nonpublic field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph>, specify either <ph id="ph3">`BindingFlags.Instance`</ph> or <ph id="ph4">`BindingFlags.Static`</ph>, and use this for the <ph id="ph5">`GetField`</ph> method.</source>
          <target state="translated">Per accedere a un campo non pubblico, impostare il <ph id="ph1">`BindingFlags`</ph> a <ph id="ph2">`NonPublic`</ph>, specificare il parametro <ph id="ph3">`BindingFlags.Instance`</ph> o <ph id="ph4">`BindingFlags.Static`</ph>e usarlo per il <ph id="ph5">`GetField`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>The following example returns a value indicating whether or not the field of the class is public or private.</source>
          <target state="translated">L'esempio seguente restituisce un valore che indica se il campo della classe è pubblica o privata.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</source>
          <target state="translated">Ottiene un valore che indica se il campo corrente è critico per la sicurezza o security-safe-critical al livello di attendibilità corrente.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current field is security-critical or security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is transparent.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il campo corrente è critico per la sicurezza o security-safe-critical al livello di attendibilità corrente; <ph id="ph2">&lt;see langword="false" /&gt;</ph> se è trasparente.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> riportano il livello di trasparenza del campo al livello di attendibilità corrente, come determinato da common language runtime (CLR).</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">Le combinazioni di queste proprietà vengono visualizzate nella tabella seguente:</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Security level</source>
          <target state="translated">Livello di sicurezza</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">Critico</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Safe critical</source>
          <target state="translated">Critico per la sicurezza</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">Trasparente</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Utilizzo di queste proprietà è molto più semplice che esaminare le annotazioni di sicurezza di un assembly e i relativi tipi e membri, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">Per gli assembly parzialmente attendibile, il valore di questa proprietà dipende dal livello di attendibilità corrente dell'assembly.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Se l'assembly viene caricato in un dominio di applicazione parzialmente attendibile (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">L'assembly e tutti i relativi tipi vengono considerati come trasparente.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">Il runtime presta attenzione per le annotazioni di sicurezza di un assembly con attendibilità parziale solo quando l'assembly viene caricato in un dominio applicazione completamente attendibile (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">Al contrario, un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) è sempre caricato con attendibilità indipendentemente dal livello di trust del dominio dell'applicazione, pertanto il relativo livello di attendibilità corrente è sempre completamente attendibile.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">È possibile determinare i livelli di attendibilità corrente di domini applicazione e assembly utilizzando il <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla reflection e trasparenza, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Per informazioni su trasparenza, vedere <bpt id="p1">[</bpt>modifiche della sicurezza<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</source>
          <target state="translated">Ottiene un valore che indica se il campo corrente è critico security-safe-critical al livello di attendibilità corrente.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current field is security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is security-critical or transparent.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il campo corrente è security-safe-critical al livello di attendibilità corrente; <ph id="ph2">&lt;see langword="false" /&gt;</ph> se è critico per la sicurezza o trasparente.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> riportano il livello di trasparenza del campo al livello di attendibilità corrente, come determinato da common language runtime (CLR).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">Le combinazioni di queste proprietà vengono visualizzate nella tabella seguente:</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Security level</source>
          <target state="translated">Livello di sicurezza</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">Critico</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Safe critical</source>
          <target state="translated">Critico per la sicurezza</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">Trasparente</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Utilizzo di queste proprietà è molto più semplice che esaminare le annotazioni di sicurezza di un assembly e i relativi tipi e membri, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">Per gli assembly parzialmente attendibile, il valore di questa proprietà dipende dal livello di attendibilità corrente dell'assembly.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Se l'assembly viene caricato in un dominio di applicazione parzialmente attendibile (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">L'assembly e tutti i relativi tipi vengono considerati come trasparente.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">Il runtime presta attenzione per le annotazioni di sicurezza di un assembly con attendibilità parziale solo quando l'assembly viene caricato in un dominio applicazione completamente attendibile (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">Al contrario, un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) è sempre caricato con attendibilità indipendentemente dal livello di trust del dominio dell'applicazione, pertanto il relativo livello di attendibilità corrente è sempre completamente attendibile.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">È possibile determinare i livelli di attendibilità corrente di domini applicazione e assembly utilizzando il <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla reflection e trasparenza, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Per informazioni su trasparenza, vedere <bpt id="p1">[</bpt>modifiche della sicurezza<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Gets a value that indicates whether the current field is transparent at the current trust level.</source>
          <target state="translated">Ottiene un valore che indica se il campo corrente è trasparente al livello di attendibilità corrente.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field is security-transparent at the current trust level; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il campo è SecurityTransparent al livello di attendibilità corrente; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, e <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> riportano il livello di trasparenza del campo al livello di attendibilità corrente, come determinato da common language runtime (CLR).</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">Le combinazioni di queste proprietà vengono visualizzate nella tabella seguente:</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Security level</source>
          <target state="translated">Livello di sicurezza</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">Critico</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Safe critical</source>
          <target state="translated">Critico per la sicurezza</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">Trasparente</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Utilizzo di queste proprietà è molto più semplice che esaminare le annotazioni di sicurezza di un assembly e i relativi tipi e membri, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">Per gli assembly parzialmente attendibile, il valore di questa proprietà dipende dal livello di attendibilità corrente dell'assembly.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Se l'assembly viene caricato in un dominio di applicazione parzialmente attendibile (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">L'assembly e tutti i relativi tipi vengono considerati come trasparente.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">Il runtime presta attenzione per le annotazioni di sicurezza di un assembly con attendibilità parziale solo quando l'assembly viene caricato in un dominio applicazione completamente attendibile (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">Al contrario, un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) è sempre caricato con attendibilità indipendentemente dal livello di trust del dominio dell'applicazione, pertanto il relativo livello di attendibilità corrente è sempre completamente attendibile.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">È possibile determinare i livelli di attendibilità corrente di domini applicazione e assembly utilizzando il <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla reflection e trasparenza, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Per informazioni su trasparenza, vedere <bpt id="p1">[</bpt>modifiche della sicurezza<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>Gets a value indicating whether the corresponding <ph id="ph1">&lt;see langword="SpecialName" /&gt;</ph> attribute is set in the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> enumerator.</source>
          <target state="translated">Ottiene un valore che indica se l'attributo <ph id="ph1">&lt;see langword="SpecialName" /&gt;</ph> corrispondente è impostato sull'enumeratore <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="SpecialName" /&gt;</ph> attribute is set in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'attributo <ph id="ph2">&lt;see langword="SpecialName" /&gt;</ph> è impostato in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</source>
          <target state="translated">I nomi che iniziano con o contengono un carattere di sottolineatura (_), funzioni di accesso a proprietà e metodi di overload dell'operatore sono esempi di nomi che potrebbero richiedere un trattamento speciale da alcuni compilatori.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.</source>
          <target state="translated">L'esempio seguente restituisce un valore che indica se i campi nella classe contengono un attributo come SpecialName.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Gets a value indicating whether the field is static.</source>
          <target state="translated">Ottiene un valore che indica se il campo è statico.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this field is static; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il campo è statico; in caso contrario,<ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>When a field is static, one copy of the field is shared by all instances of the type.</source>
          <target state="translated">Quando un campo è statico, una copia del campo viene condiviso da tutte le istanze del tipo.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>The <ph id="ph1">`IsStatic`</ph> property is set when the <ph id="ph2">`FieldAttributes.Static`</ph> attribute is set.</source>
          <target state="translated">Il <ph id="ph1">`IsStatic`</ph> proprietà viene impostata quando il <ph id="ph2">`FieldAttributes.Static`</ph> attributo è impostato.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>To get the <ph id="ph1">`IsStatic`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Per ottenere il <ph id="ph1">`IsStatic`</ph> proprietà, ottenere innanzitutto la classe <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Dal <ph id="ph1">`Type`</ph>, ottenere il <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsStatic`</ph> property.</source>
          <target state="translated">Dal <ph id="ph1">`FieldInfo`</ph>, ottenere il <ph id="ph2">`IsStatic`</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>To access a non-public field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph> in the <ph id="ph3">`GetField`</ph> method and set the accessibility to <ph id="ph4">`Instance`</ph> or <ph id="ph5">`Static`</ph>.</source>
          <target state="translated">Per accedere a un campo non pubblico, impostare il <ph id="ph1">`BindingFlags`</ph> a <ph id="ph2">`NonPublic`</ph> nel <ph id="ph3">`GetField`</ph> metodo e impostare l'accessibilità su <ph id="ph4">`Instance`</ph> o <ph id="ph5">`Static`</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>The following example determines whether the specified field is static and displays the result.</source>
          <target state="translated">Nell'esempio seguente determina se il campo specificato è statico e viene visualizzato il risultato.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>This code produces the following output:</source>
          <target state="translated">L'output del codice è il seguente:</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Myfielda - A private field; IsStatic - False</source>
          <target state="translated">Myfielda: un campo privato. IsStatic - False</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Myfieldb - B static field; IsStatic - True</source>
          <target state="translated">Myfieldb - campo statico di B; IsStatic - True</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a field.</source>
          <target state="translated">Ottiene un valore di <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> che indica che questo membro è un campo.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a field.</source>
          <target state="translated">Valore di <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> che indica che questo membro è un campo.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Esegue l'override di questa proprietà <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType&gt;</ph> only when a given member is a field.</source>
          <target state="translated">Pertanto, quando si esamina un set di <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> oggetti, ad esempio, la matrice restituita dal <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> : il <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> restituisce proprietà <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType&gt;</ph> solo quando un membro specificato è un campo.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>The following example determines whether the specified member is a field and displays the result.</source>
          <target state="translated">Nell'esempio seguente determina se il membro specificato è un campo e viene visualizzato il risultato.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>This code produces the following output:</source>
          <target state="translated">L'output del codice è il seguente:</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Myfield.field - a private field; MemberType is a Field</source>
          <target state="translated">MyField. Field: un campo privato. MemberType è un campo</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Primo oggetto da confrontare.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Secondo oggetto da confrontare.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Indica se due oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> sono uguali.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> è uguale a <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Primo oggetto da confrontare.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Secondo oggetto da confrontare.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Indica se due oggetti <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> non sono uguali.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> non è uguale a <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Sets the value of the field for the given object to the given value.</source>
          <target state="translated">Imposta il valore del campo per il dato oggetto sul valore specificato.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The object whose field value will be set.</source>
          <target state="translated">Oggetto di cui verrà impostato il valore del campo.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The value to assign to the field.</source>
          <target state="translated">Valore da assegnare al campo.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Sets the value of the field supported by the given object.</source>
          <target state="translated">Imposta il valore del campo supportato dall'oggetto specificato.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>This method will assign <ph id="ph1">`value`</ph> to the field reflected by this instance on object <ph id="ph2">`obj`</ph>.</source>
          <target state="translated">Questo metodo assegnerà <ph id="ph1">`value`</ph> al campo riflesso da questa istanza sull'oggetto <ph id="ph2">`obj`</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> will be ignored.</source>
          <target state="translated">Se il campo è statico, <ph id="ph1">`obj`</ph> verrà ignorato.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Per i campi non statici, <ph id="ph1">`obj`</ph> deve essere un'istanza di una classe che eredita o dichiara il campo.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The new value is passed as an <ph id="ph1">`Object`</ph>.</source>
          <target state="translated">Il nuovo valore viene passato come un <ph id="ph1">`Object`</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>For example, if the field's type is Boolean, an instance of <ph id="ph1">`Object`</ph> with the appropriate Boolean value is passed.</source>
          <target state="translated">Ad esempio, se il tipo del campo è Boolean, un'istanza di <ph id="ph1">`Object`</ph> con il valore booleano appropriato valore viene passato.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Before setting the value, <ph id="ph1">`SetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">Prima di impostare il valore, <ph id="ph1">`SetValue`</ph> controlla se l'utente dispone dell'autorizzazione di accesso.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>This final method is a convenience method for calling the following <ph id="ph1">`SetValue`</ph> method.</source>
          <target state="translated">Questo metodo finale è un metodo pratico per chiamare le operazioni seguenti <ph id="ph1">`SetValue`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</source>
          <target state="translated">Il codice completamente attendibile dispone delle autorizzazioni necessarie per accedere e richiamare i costruttori privati, metodi, campi e proprietà tramite reflection.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.</source>
          <target state="translated">Nell'esempio seguente imposta il valore di un campo, ottiene e visualizza il valore, viene modificato il campo e viene visualizzato il risultato.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella <bpt id="p2">[</bpt>libreria di classi portabile<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> rilevare invece l'eccezione della classe di base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">Il chiamante non ha l'autorizzazione necessaria per accedere a questo campo.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">In <bpt id="p1">[</bpt>.NET per app di Windows Store<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> o nella <bpt id="p2">[</bpt>libreria di classi portabile<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept> rilevare invece l'eccezione <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the field is an instance field.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph> e il campo è un campo di istanza.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The field does not exist on the object.</source>
          <target state="translated">Il campo non esiste nell'oggetto.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter cannot be converted and stored in the field.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> non può essere convertito e memorizzato nel campo.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>for updating init-only fields.</source>
          <target state="translated">Per aggiornare i campi di sola inizializzazione.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The object whose field value will be set.</source>
          <target state="translated">Oggetto di cui verrà impostato il valore del campo.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The value to assign to the field.</source>
          <target state="translated">Valore da assegnare al campo.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>A field of <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> that specifies the type of binding that is desired (for example, <ph id="ph2">&lt;see langword="Binder.CreateInstance" /&gt;</ph> or <ph id="ph3">&lt;see langword="Binder.ExactBinding" /&gt;</ph>).</source>
          <target state="translated">Campo di <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> che specifica il tipo di associazione desiderata, ad esempio <ph id="ph2">&lt;see langword="Binder.CreateInstance" /&gt;</ph> o <ph id="ph3">&lt;see langword="Binder.ExactBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</source>
          <target state="translated">Insieme di proprietà che attiva l'associazione, l'assegnazione forzata dei tipi di argomento e la chiamata dei membri tramite la funzionalità di reflection.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, then <ph id="ph2">&lt;see langword="Binder.DefaultBinding" /&gt;</ph> is used.</source>
          <target state="translated">Se <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> è <ph id="ph1">&lt;see langword="null" /&gt;</ph>, viene usato <ph id="ph2">&lt;see langword="Binder.DefaultBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The software preferences of a particular culture.</source>
          <target state="translated">Preferenze software di determinate impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the value of the field supported by the given object.</source>
          <target state="translated">Quando se ne effettua l'override in una classe derivata, imposta il valore del campo supportato dall'oggetto dato.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>This method will assign <ph id="ph1">`value`</ph> to the field reflected by this instance on <ph id="ph2">`obj`</ph>.</source>
          <target state="translated">Questo metodo assegnerà <ph id="ph1">`value`</ph> al campo riflesso da questa istanza <ph id="ph2">`obj`</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> will be ignored.</source>
          <target state="translated">Se il campo è statico, <ph id="ph1">`obj`</ph> verrà ignorato.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Per i campi non statici, <ph id="ph1">`obj`</ph> deve essere un'istanza di una classe che eredita o dichiara il campo.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The new value is passed as an <ph id="ph1">`Object`</ph>.</source>
          <target state="translated">Il nuovo valore viene passato come un <ph id="ph1">`Object`</ph>.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>For example, if the field's type is <ph id="ph1">`Boolean`</ph>, an instance of <ph id="ph2">`Object`</ph> with the appropriate Boolean value is passed.</source>
          <target state="translated">Ad esempio, se il tipo del campo è <ph id="ph1">`Boolean`</ph>, un'istanza di <ph id="ph2">`Object`</ph> con il valore booleano appropriato valore viene passato.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Before setting the value, <ph id="ph1">`SetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">Prima di impostare il valore, <ph id="ph1">`SetValue`</ph> controlla se l'utente dispone dell'autorizzazione di accesso.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</source>
          <target state="translated">Il codice completamente attendibile dispone delle autorizzazioni necessarie per accedere e richiamare i costruttori privati, metodi, campi e proprietà tramite reflection.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">Il chiamante non ha l'autorizzazione necessaria per accedere a questo campo.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the field is an instance field.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph> e il campo è un campo di istanza.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The field does not exist on the object.</source>
          <target state="translated">Il campo non esiste nell'oggetto.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter cannot be converted and stored in the field.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> non può essere convertito e memorizzato nel campo.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>for updating init-only fields.</source>
          <target state="translated">Per aggiornare i campi di sola inizializzazione.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</source>
          <target state="translated">Struttura <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> che incapsula un puntatore gestito a una posizione e una rappresentazione di runtime del tipo che può essere archiviata in tale posizione.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>The value to assign to the field.</source>
          <target state="translated">Valore da assegnare al campo.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Sets the value of the field supported by the given object.</source>
          <target state="translated">Imposta il valore del campo supportato dall'oggetto specificato.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partire dal <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con il <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per la Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Per usare questa funzionalità, l'applicazione deve essere destinata a <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o versione successiva.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</source>
          <target state="translated">Il chiamante richiede le specifiche CLS (Common Language Specification), ma invece ha chiamato questo metodo.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Quando viene richiamato ad associazione tardiva tramite meccanismi, ad esempio <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumerazione associata: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matrice di nomi passata di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Conteggio dei nomi di cui eseguire il mapping.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contesto delle impostazioni locali in cui interpretare i nomi.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Matrice allocata dal chiamante che riceve gli ID corrispondenti ai nomi.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Esegue il mapping di un set di nomi a un set corrispondente di ID dispatch.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> type.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> type.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> che rappresenta il tipo <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Informazioni sul tipo da restituire.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificatore delle impostazioni locali per le informazioni sul tipo.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Riceve un puntatore all'oggetto relativo alle informazioni sul tipo richiesto.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera le informazioni sul tipo relative a un oggetto che può quindi essere usato per ottenere informazioni sul tipo relative a un'interfaccia.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Punta a una posizione che riceve il numero di interfacce di informazioni sul tipo fornite dall'oggetto.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Recupera il numero delle interfacce di informazioni sul tipo fornite da un oggetto (0 o 1).</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica il membro.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Riservato per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Deve essere IID_NULL.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contesto di impostazioni locali all'interno del quale devono essere interpretati gli argomenti.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Flag che descrivono il contesto della chiamata.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Puntatore a una struttura contenente una matrice di argomenti, una matrice di DISPID per argomenti denominati e i conteggi del numero di elementi nelle matrici.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Puntatore alla posizione in cui deve essere archiviato il risultato.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Puntatore a una struttura contenente informazioni sull'eccezione.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Indice del primo argomento che contiene un errore.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Fornisce l'accesso a proprietà e metodi esposti da un oggetto.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">`IDispatch::Invoke`</ph>, vedere MSDN Library.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">L'accesso ad associazione tardiva usando l'interfaccia COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> non è supportato.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>