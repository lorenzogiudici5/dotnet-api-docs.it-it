<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="604364a9fb843d960f70874b849b40c35eb11b70" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36413581" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce le impostazioni delle credenziali per un servizio di conversazione protetta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le conversazioni protette comportano lo scambio di più messaggi e utilizzano un token del contesto di sicurezza (Security Context Token, SCT) per assicurare la sicurezza. L'SCT è condiviso fra le parti della comunicazione per la durata di una sessione di comunicazione. Un servizio può rilasciare due tipi diversi di SCT:  
  
-   Il primo è un SCT basato sulla sessione, contenente un ID univoco. I messaggi contengono solo l'ID e il servizio gestisce una cache dei mapping di stato che esegue il mapping fra gli ID e i contenuti degli SCT (ad esempio attestazioni, chiavi di sicurezza e così via). Un client che si comporta correttamente deve inviare un annullamento SCT per contribuire all'ottimizzazione delle risorse della cache del servizio. Se si crea un'istanza di questa classe chiamando <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> con il parametro `requireCancellation` uguale a `true`, l'SCT viene rilasciato in questo modo.  
  
-   Il secondo è un SCT autonomo che risiede in un cookie sul client. Questo SCT contiene informazioni di stato complete, pertanto non richiede al servizio la gestione dello stato né l'annullamento dal client. Viene a volte definito SCT in "modalità cookie". Poiché l'SCT contiene informazioni di stato complete, è di dimensioni più grandi rispetto all'SCT basato sulla sessione. Con gli SCT basati sulla sessione, è il servizio a memorizzare gran parte delle informazioni di stato. Poiché l'SCT è autonomo, può tuttavia essere utilizzato per la durata del servizio ed essere reso persistente fra l'arresto e il riavvio del servizio.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di attestazioni <see cref="T:System.Type" /> per la serializzazione del cookie.</summary>
        <value>Raccolta di attestazioni <see cref="T:System.Type" /> per la serializzazione del cookie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per serializzare le attestazioni in cookie SCT, utilizza Windows Communication Foundation (WCF) <xref:System.Runtime.Serialization.DataContractSerializer> come impostazione predefinita. Poiché la risorsa di attestazione è estensibile, WCF consente di fornire un elenco di tipi di risorse conosciuti. Ciò è utile per <xref:System.Runtime.Serialization.DataContractSerializer> durante la deserializzazione delle attestazioni nel cookie in modo che possa restituire gli oggetti fortemente tipizzati originali.  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come ottenere questa proprietà.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un elemento <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> personalizzato per la codifica e la decodifica della serializzazione del cookie.</summary>
        <value>Oggetto <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> che è una personalizzazione di <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In "modalità cookie" un servizio rilascia un token del contesto di sicurezza (SCT) sotto forma di cookie per il client, in modo da non dover gestire uno stato di sicurezza. Il client restituisce il cookie nel messaggio di richiesta in modo che il servizio sia in grado di rimuovere la sicurezza e verificare il messaggio di richiesta. Poiché l'SCT viene spesso trasmesso su una rete non sicura, deve essere protetto.  
  
 Per impostazione predefinita, utilizza Windows Communication Foundation (WCF) di <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> (classe) per proteggere il cookie mediante Data Protection API (DPAPI). Affinché la DPAPI funzioni in ambiente Web farm, tutti i servizi di back-end devono essere in esecuzione con lo stesso account utente di dominio. In altre parole, se il servizio è ospitato sul Web, il processo di lavoro di Internet Information Services (IIS) deve essere configurato in modo da essere eseguito come utente del dominio.  
  
 Questa proprietà consente di utilizzare un oggetto <xref:System.ServiceModel.Security.SecurityStateEncoder> personalizzato per crittografare e decrittografare il cookie senza dipendere dalla DPAPI.  
  
   
  
## Examples  
 Nel codice seguente viene mostrato come impostare questa proprietà.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>