<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="440e3168fb00e14f288d11a68c367234fe8d4432" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39872014" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <TypeSignature Language="F#" Value="type NegotiateStream = class&#xA;    inherit AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce un flusso che utilizza il protocollo di sicurezza Negotiate per autenticare il client e, facoltativamente, il server, nella comunicazione client-server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Net.Security.NegotiateStream> (classe) per l'autenticazione e per proteggere le informazioni trasmesse tra un client e un server. Usando <xref:System.Net.Security.NegotiateStream>, è possibile eseguire le operazioni seguenti.  
  
-   Inviare le credenziali del client al server per la rappresentazione o delega.  
  
-   Richiedere l'autenticazione server.  
  
-   Crittografare e/o firmare i dati prima della trasmissione.  
  
 L'autenticazione deve essere eseguita prima della trasmissione di informazioni. I client richiedono l'autenticazione usano le repliche sincrone <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> metodi, che blocca fino al completamento dell'autenticazione, o asincrona <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> metodi, che non si bloccano durante l'attesa del completamento dell'autenticazione. Server richiedono l'autenticazione usano le repliche sincrone <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> o asincroni <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi. Il client e, facoltativamente, il server, viene autenticato utilizzando il protocollo di sicurezza Negotiate. Nei sistemi Windows 95 o 98, Windows NT LAN Manager (NTLM) è il protocollo usato per l'autenticazione. In altre piattaforme di Kerberos viene utilizzato per l'autenticazione se client e server supportarlo; in caso contrario, viene usato NTLM. Per una descrizione dettagliata di questi protocolli, vedere la documentazione di Platform SDK in MSDN, in msdn.microsoft.com/library/. Il <xref:System.Net.Security.NegotiateStream> classe esegue l'autenticazione tramite Security Support Provider Interface (SSPI).  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare il <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza da utilizzare per il <xref:System.Net.Security.NegotiateStream> per la protezione dei dati durante la trasmissione. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca. È possibile ottenere informazioni sul client remoto o server con il <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> proprietà.  
  
 Se l'autenticazione non riesce, si riceverà un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 Si inviano dati usano le repliche sincrone <xref:System.Net.Security.NegotiateStream.Write%2A> o asincroni <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> metodi. Si ricevono dati usano le repliche sincrone <xref:System.Net.Security.NegotiateStream.Read%2A> o asincroni <xref:System.Net.Security.NegotiateStream.BeginRead%2A> metodi. Se i servizi di sicurezza, ad esempio la crittografia o firma sono abilitati, questi vengono applicati automaticamente ai dati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Il <xref:System.Net.Security.NegotiateStream> trasmette i dati utilizzando un flusso che viene fornito quando si crea il <xref:System.Net.Security.NegotiateStream>. Quando si fornisce questo flusso sottostante, è possibile specificare se la chiusura di <xref:System.Net.Security.NegotiateStream> chiude anche il flusso sottostante.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato il lato client di una connessione client-server che utilizza il <xref:System.Net.Security.NegotiateStream>. Il client esegue l'autenticazione e invia un messaggio al server in modo asincrono.  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 Esempio di codice seguente viene illustrato il lato server di una connessione client-server che utilizza il <xref:System.Net.Security.NegotiateStream> per autenticare il client e leggere un messaggio inviato dal client.  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Security.NegotiateStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per evitare il <xref:System.Net.Security.NegotiateStream> chiuda il flusso che viene fornito, usare il <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> costruttore.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream innerStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">L'oggetto <see cref="T:System.IO.Stream" /> utilizzato dalla classe <see cref="T:System.Net.Security.NegotiateStream" /> per inviare e ricevere dati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Security.NegotiateStream" /> usando il <see cref="T:System.IO.Stream" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrata la chiamata di questo costruttore.  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream * bool -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream (innerStream, leaveInnerStreamOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">L'oggetto <see cref="T:System.IO.Stream" /> utilizzato dalla classe <see cref="T:System.Net.Security.NegotiateStream" /> per inviare e ricevere dati.</param>
        <param name="leaveInnerStreamOpen">
          <see langword="true" /> per indicare che la chiusura della classe <see cref="T:System.Net.Security.NegotiateStream" /> non ha effetto su <c>innerstream</c>; <see langword="false" /> per indicare che la chiusura della classe <see cref="T:System.Net.Security.NegotiateStream" /> chiude anche <c>innerStream</c>.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Security.NegotiateStream" /> tramite l'oggetto <see cref="T:System.IO.Stream" /> specificato e il comportamento di chiusura del flusso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si specifica `true` per il `leaveStreamOpen` parametro, chiudere il <xref:System.Net.Security.NegotiateStream> non ha alcun effetto sul `innerStream` streaming; è necessario chiudere esplicitamente `innerStream` quando non è più necessario.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata la chiamata di questo costruttore. Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.Net.Security.NegotiateStream> classe.  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="innerStream" /> è uguale a <see cref="F:System.IO.Stream.Null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Viene chiamato dai client per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : unit -&gt; unit&#xA;override this.AuthenticateAsClient : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Viene chiamato dai client per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il client <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, ed è richiesta l'autenticazione reciproca. Il <xref:System.Net.Security.NegotiateStream> classe costruisce il nome dell'entità servizio usata per l'autenticazione reciproca.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <summary>Viene chiamato dai client per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del client specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, ed è richiesta l'autenticazione reciproca. Il <xref:System.Net.Security.NegotiateStream> classe costruisce il nome dell'entità servizio usata per l'autenticazione reciproca.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="binding">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> che viene utilizzato per la protezione estesa.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <summary>Viene chiamato dai client per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza l'associazione di canale e le credenziali del client specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, ed è richiesta l'autenticazione reciproca. Il <xref:System.Net.Security.NegotiateStream> classe costruisce il nome dell'entità servizio usata per l'autenticazione reciproca.  
  
 Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> utilizzato per la protezione estesa che viene passata al metodo nel `binding` parametro verrebbe recuperato da un'applicazione dalla <xref:System.Net.Security.SslStream.TransportContext%2A> proprietà sull'oggetto associato <xref:System.Net.Security.SslStream>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="allowedImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <summary>Viene chiamato dai client per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali e le opzioni di autenticazione specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi tramite il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valore. L'autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel> è stata concessa. È necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> non è un valore valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> è null.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="binding">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> che viene utilizzato per la protezione estesa.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="allowedImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <summary>Viene chiamato dai client per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza l'associazione di canale, le opzioni di autenticazione e la credenziale specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi tramite il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valore. L'autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel> è stata concessa. È necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> utilizzato per la protezione estesa che viene passata al metodo nel `binding` parametro verrebbe recuperato da un'applicazione dalla <xref:System.Net.Security.SslStream.TransportContext%2A> proprietà sull'oggetto associato <xref:System.Net.Security.SslStream>.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> non è un valore valido.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Viene chiamato per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come operazione asincrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Viene chiamato per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come operazione asincrona.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il client <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, ed è richiesta l'autenticazione reciproca. Il <xref:System.Net.Security.NegotiateStream> classe costruisce il nome dell'entità servizio usata per l'autenticazione reciproca.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <summary>Viene chiamato per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza le credenziali del client specificate.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, ed è richiesta l'autenticazione reciproca. Il <xref:System.Net.Security.NegotiateStream> classe costruisce il nome dell'entità servizio usata per l'autenticazione reciproca.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="binding">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> che viene utilizzato per la protezione estesa.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <summary>Viene chiamato per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza l'associazione di canale e le credenziali del client specificate.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, ed è richiesta l'autenticazione reciproca. Il <xref:System.Net.Security.NegotiateStream> classe costruisce il nome dell'entità servizio usata per l'autenticazione reciproca.  
  
 Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> utilizzato per la protezione estesa che viene passata al metodo nel `binding` parametro verrebbe recuperato da un'applicazione dalla <xref:System.Net.Security.SslStream.TransportContext%2A> proprietà sull'oggetto associato <xref:System.Net.Security.SslStream>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="allowedImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <summary>Viene chiamato per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza le credenziali e le opzioni di autenticazione specificate.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi tramite il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valore. L'autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel> è stata concessa. È necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> non è un valore valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> è null.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="binding">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> che viene utilizzato per la protezione estesa.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="allowedImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <summary>Viene chiamato per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza l'associazione di canale, le opzioni di autenticazione e la credenziale specificate.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi tramite il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valore. L'autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel> è stata concessa. È necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> utilizzato per la protezione estesa che viene passata al metodo nel `binding` parametro verrebbe recuperato da un'applicazione dalla <xref:System.Net.Security.SslStream.TransportContext%2A> proprietà sull'oggetto associato <xref:System.Net.Security.SslStream>.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> non è un valore valido.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gestisce il lato server dell'autenticazione di una connessione client-server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questi metodi bloccano mentre l'autenticazione è in corso. Per evitare il blocco durante l'attesa del completamento dell'autenticazione dell'applicazione, usare il <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : unit -&gt; unit&#xA;override this.AuthenticateAsServer : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsServer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Viene chiamato dai server per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Questo metodo si blocca fino al completamento dell'operazione. Per evitare il blocco fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> overload del metodo.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit&#xA;override this.AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit" Usage="negotiateStream.AuthenticateAsServer policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> che viene utilizzato per la protezione estesa.</param>
        <summary>Viene chiamato dai server per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza i criteri di protezione estesa specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Se il `policy` parametro è `null`, quindi viene usato con un criterio di protezione estesa <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Questo metodo si blocca fino al completamento dell'operazione. Per evitare il blocco fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> overload del metodo.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le proprietà <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sui criteri di protezione estesa passati al parametro <paramref name="policy" /> sono entrambe <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Il parametro <paramref name="policy" /> è stato impostato su <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> in una piattaforma che non supporta la protezione estesa.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="requiredImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <summary>Viene chiamato dai server per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del server e le opzioni di autenticazione specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Questo metodo si blocca fino al completamento dell'operazione. Per evitare il blocco fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> overload del metodo.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve essere <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> o <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come client. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come server.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="policy">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> che viene utilizzato per la protezione estesa.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="requiredImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <summary>Viene chiamato dai server per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del server, le opzioni di autenticazione e i criteri di protezione estesa specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `policy` parametro è `null`, quindi viene usato con un criterio di protezione estesa <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Questo metodo si blocca fino al completamento dell'operazione. Per evitare il blocco fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> overload del metodo.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le proprietà <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sui criteri di protezione estesa passati al parametro <paramref name="policy" /> sono entrambe <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve essere <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> o <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come client. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come server.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Il parametro <paramref name="policy" /> è stato impostato su <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> in una piattaforma che non supporta la protezione estesa.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gestisce il lato server di un'autenticazione per una connessione client-server come operazione asincrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Viene chiamato dai server per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come un'operazione asincrona.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> che viene utilizzato per la protezione estesa.</param>
        <summary>Viene chiamato dai server per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come un'operazione asincrona. Il processo di autenticazione utilizza i criteri di protezione estesa specificati.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Se il `policy` parametro è `null`, quindi viene usato con un criterio di protezione estesa <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le proprietà <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sui criteri di protezione estesa passati al parametro <paramref name="policy" /> sono entrambe <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Il parametro <paramref name="policy" /> è stato impostato su <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> in una piattaforma che non supporta la protezione estesa.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="requiredImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <summary>Viene chiamato dai server per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come un'operazione asincrona. Il processo di autenticazione utilizza le credenziali del server e le opzioni di autenticazione specificate.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve essere <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> o <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come client. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come server.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="policy">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> che viene utilizzato per la protezione estesa.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="requiredImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <summary>Viene chiamato dai server per l'autenticazione del client e, facoltativamente, del server, in una connessione client-server come un'operazione asincrona. Il processo di autenticazione utilizza le credenziali del server, le opzioni di autenticazione e i criteri di protezione estesa specificati.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `policy` parametro è `null`, quindi viene usato con un criterio di protezione estesa <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le proprietà <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sui criteri di protezione estesa passati al parametro <paramref name="policy" /> sono entrambe <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve essere <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> o <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come client. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come server.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Il parametro <paramref name="policy" /> è stato impostato su <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> in una piattaforma che non supporta la protezione estesa.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia un'operazione asincrona per autenticare il lato client di una connessione client-server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli overload di questo metodo non vengono bloccati durante l'autenticazione è in corso. Per bloccare durante l'attesa del completamento dell'autenticazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> metodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai client per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il client <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>. Il <xref:System.Net.Security.NegotiateStream> classe costruisce il nome dell'entità servizio usata per l'autenticazione reciproca.  
  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> overload del metodo.  
  
 L'operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata la chiamata di questo metodo per avviare un'autenticazione asincrona per il client.  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione di scrittura. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai client per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali specificate. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> overload del metodo.  
  
 L'operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="targetName" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="binding">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> che viene utilizzato per la protezione estesa.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione di scrittura. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai client per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali e l'associazione di canale specificate. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> overload del metodo.  
  
 L'operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="targetName" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="allowedImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione di scrittura. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai client per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali e le opzioni di autenticazione specificate. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi tramite il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valore. L'autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel> è stata concessa. È necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> overload del metodo.  
  
 L'operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="targetName" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="binding">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> che viene utilizzato per la protezione estesa.</param>
        <param name="targetName">L'SPN (Service Principal Name, Nome principale servizio) che identifica in modo univoco il server da autenticare.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="allowedImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione di scrittura. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai client per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza l'associazione di canale, le opzioni di autenticazione e le credenziali specificate. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi tramite il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valore. L'autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel> è stata concessa. È necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> overload del metodo.  
  
 L'operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="targetName" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come server. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come client.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia un'operazione asincrona per gestire il lato server dell'autenticazione di una connessione client-server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli overload di questo metodo non vengono bloccati durante l'autenticazione è in corso. Per bloccare durante l'attesa del completamento dell'autenticazione, usare il <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai server per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> overload del metodo.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (policy, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> che viene utilizzato per la protezione estesa.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione di scrittura. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai server per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza i criteri di protezione estesa specificati. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione usa il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>. Viene specificato alcun nome dell'entità servizio (SPN) per il server. È il livello di rappresentazione <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.  
  
 Se il `policy` parametro è `null`, quindi viene usato con un criterio di protezione estesa <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> overload del metodo.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le proprietà <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sui criteri di protezione estesa passati al parametro <paramref name="policy" /> sono entrambe <see langword="null" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Il parametro <paramref name="policy" /> è stato impostato su <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> in una piattaforma che non supporta la protezione estesa.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="requiredImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai server per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del server e le opzioni di autenticazione specificate. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi tramite il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valore. L'autenticazione non garantisce che, la richiesta <xref:System.Net.Security.ProtectionLevel> è stata concessa. È necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> overload del metodo.  
  
 L'operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve essere <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> o <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come client. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come server.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">usare l'impostazione esplicita <see cref="T:System.Net.NetworkCredential" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">Classe <see cref="T:System.Net.NetworkCredential" /> che viene utilizzata per stabilire l'identità del client.</param>
        <param name="policy">Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> che viene utilizzato per la protezione estesa.</param>
        <param name="requiredProtectionLevel">Uno dei valori della classe <see cref="T:System.Net.Security.ProtectionLevel" /> che indica i servizi di sicurezza per il flusso.</param>
        <param name="requiredImpersonationLevel">Uno dei valori della classe <see cref="T:System.Security.Principal.TokenImpersonationLevel" />, che indica il modo in cui il server può utilizzare le credenziali del client per accedere alle risorse.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare al completamento dell'autenticazione.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione di scrittura. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Viene chiamato dai server per avviare un'operazione asincrona di autenticazione del client e, facoltativamente, del server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del server, le opzioni di autenticazione e i criteri di protezione estesa specificati. Questo metodo non si blocca.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi tramite il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> valore. L'autenticazione non garantisce che, la richiesta <xref:System.Net.Security.ProtectionLevel> è stata concessa. È necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>.  
  
 Se il `policy` parametro è `null`, quindi viene usato con un criterio di protezione estesa <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.  
  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> overload del metodo.  
  
 L'operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le proprietà <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> e <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> sui criteri di protezione estesa passati al parametro <paramref name="policy" /> sono entrambe <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> deve essere <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" /> o <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione è già stata effettuata.  
  
\- oppure - 
Questo flusso è stato precedentemente utilizzato per tentare l'autenticazione come client. Non è possibile utilizzare il flusso per tentare nuovamente l'autenticazione come server.</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 e Windows 98 non sono supportati.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Il parametro <paramref name="policy" /> è stato impostato su <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> in una piattaforma che non supporta la protezione estesa.</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginRead (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> che riceve i byte letti dal flusso.</param>
        <param name="offset">Posizione in base zero in <c>buffer</c> da cui iniziare l'archiviazione dei dati letti da questo flusso.</param>
        <param name="count">Numero massimo di byte da leggere dal flusso.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> cui fa riferimento il metodo da richiamare quando l'operazione di lettura è completa.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione di lettura. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Avvia un'operazione di lettura asincrona dei dati del flusso, archiviandoli nella matrice specificata.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se sono abilitate la crittografia, firma, o la crittografia e firma, l'operazione di lettura legge i dati dal flusso sottostante, controlla l'integrità dei dati e lo decrittografa. Se nessuna sicurezza dei servizi, ad esempio la crittografia dei dati o l'accesso sono in uso, questo metodo avvia un'operazione di lettura asincrona sul flusso sottostante.  
  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare il <xref:System.Net.Security.NegotiateStream.Read%2A> (metodo).  
  
 L'operazione di lettura asincrona da completare tramite la chiamata di <xref:System.Net.Security.NegotiateStream.EndRead%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Il <xref:System.Net.Security.NegotiateStream> classe non supporta operazioni di lettura multiple simultanee. Se si prova ad avviare un'operazione di lettura, mentre un'altra lettura operazione è già in esecuzione nello stesso flusso, un <xref:System.NotSupportedException> verrà generata l'eccezione.  
  
 È possibile chiamare questo metodo fino a quando non è stata effettuata l'autenticazione. Per eseguire l'autenticazione, chiamare uno dei <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come avviare un'operazione di lettura asincrona. Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.Net.Security.NegotiateStream> classe.  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> è minore di 0.  
  
\- oppure - 
 <paramref name="offset" /> è maggiore della lunghezza di <paramref name="buffer" />.  
  
\- oppure - 
 la somma di <paramref name="offset" /> e <paramref name="count" /> è maggiore della lunghezza di <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">L'operazione di lettura non è riuscita.  
  
\- oppure - 
La crittografia è in uso, ma non è stato possibile decrittografare i dati.</exception>
        <exception cref="T:System.NotSupportedException">È già in corso un'operazione di lettura.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione non è stata effettuata.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginWrite (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di <see cref="T:System.Byte" /> che fornisce i byte che devono essere scritti nel flusso.</param>
        <param name="offset">Posizione in base zero in <c>buffer</c> da cui iniziare la lettura dei byte che devono essere scritti nel flusso.</param>
        <param name="count">Valore <see cref="T:System.Int32" /> che specifica il numero di byte da leggere da <c>buffer</c>.</param>
        <param name="asyncCallback">Delegato <see cref="T:System.AsyncCallback" /> che fa riferimento al metodo da richiamare quando l'operazione di scrittura è completa.</param>
        <param name="asyncState">Oggetto definito dall'utente contenente informazioni sull'operazione di scrittura. L'oggetto viene passato al delegato <c>asyncCallback</c> al completamento dell'operazione.</param>
        <summary>Avvia un'operazione di scrittura asincrona che scrive i <see cref="T:System.Byte" /> dal buffer specificato nel flusso.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che indica lo stato dell'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se sono abilitate la crittografia, firma, o la crittografia e firma, questo metodo legge i dati dal buffer esegue la crittografia, firma, oppure esegue la crittografia e lo firma e trasmette tramite il flusso sottostante. Se nessuna sicurezza dei servizi, ad esempio la crittografia dei dati o l'accesso sono in uso, questo metodo avvia un'operazione di scrittura asincrona sul flusso sottostante.  
  
 Questo metodo è asincrono e non si blocca durante il completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare il <xref:System.Net.Security.NegotiateStream.Read%2A> (metodo).  
  
 L'operazione di lettura asincrona da completare tramite la chiamata di <xref:System.Net.Security.NegotiateStream.EndWrite%2A> (metodo). In genere, il metodo viene richiamato dal `asyncCallback` delegare. Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
 Il <xref:System.Net.Security.NegotiateStream> classe non supporta più operazioni di scrittura simultanee. Se si prova ad avviare un'operazione di scrittura, mentre un'altra operazione di scrittura è già in esecuzione nello stesso flusso, un <xref:System.NotSupportedException> verrà generata l'eccezione.  
  
 È possibile chiamare questo metodo fino a quando non è stata effettuata l'autenticazione. Per eseguire l'autenticazione, chiamare uno dei <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'avvio di un'operazione di scrittura asincrona.  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 Il metodo seguente viene chiamato al termine dell'operazione.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
\- oppure - 
 <paramref name="offset" /> è maggiore della lunghezza di <paramref name="buffer" />.  
  
\- oppure - 
 la somma di <paramref name="offset" /> e conteggio è maggiore della lunghezza del <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Operazione di scrittura non riuscita.  
  
\- oppure - 
La crittografia è in uso, ma non è stato possibile crittografare i dati.</exception>
        <exception cref="T:System.NotSupportedException">È già in corso un'operazione di scrittura.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione non è stata effettuata.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Security.NegotiateStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" />che indica se il flusso sottostante è leggibile.</summary>
        <value>
          <see langword="true" /> se l'autenticazione è avvenuta e il flusso sottostante è leggibile; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si è verificato l'autenticazione ha esito positivo, questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.CanRead%2A> proprietà nel flusso sottostante. Il flusso sottostante viene specificato quando si crea un'istanza di <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Security.NegotiateStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se il flusso sottostante consente le ricerche.</summary>
        <value>Questa proprietà restituisce sempre <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non provare a impostare la posizione del <xref:System.Net.Security.NegotiateStream> oggetto o il flusso sottostante. Il flusso sottostante viene specificato quando si crea un'istanza di <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se il flusso sottostante supporta i timeout.</summary>
        <value>
          <see langword="true" /> se il flusso sottostante supporta i timeout; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.CanTimeout%2A> proprietà nel flusso sottostante. Il flusso sottostante viene specificato quando si crea un'istanza di <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Security.NegotiateStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se è possibile scrivere nel flusso sottostante.</summary>
        <value>
          <see langword="true" /> se l'autenticazione è avvenuta ed è possibile scrivere nel flusso sottostante; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si è verificato l'autenticazione ha esito positivo, questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.CanWrite%2A> proprietà nel flusso sottostante. Il flusso sottostante viene specificato quando si crea un'istanza di <xref:System.Net.Security.NegotiateStream> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="negotiateStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Net.Security.NegotiateStream" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato da parte del pubblico `Dispose()` metodo e <xref:System.Object.Finalize%2A> (metodo). `Dispose()` richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A> richiama `Dispose` con `disposing` impostato su `false`.  
  
 Quando la `disposing` parametro è true, questo metodo rilascia tutte le risorse utilizzate da qualsiasi oggetto gestito da questo <xref:System.Net.Security.NegotiateStream> riferimenti. Il metodo richiama il metodo `Dispose()` di ciascun oggetto cui viene fatto riferimento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> può essere chiamato più volte da altri oggetti. Quando si esegue l'override <see langword="Dispose(Boolean)" /> prestare attenzione a non fare riferimento agli oggetti che sono stati eliminati in una precedente chiamata a <see langword="Dispose" />. Per altre informazioni su come implementare <see langword="Dispose(Boolean)" />, vedere [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  Per altre informazioni sulle <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [override del metodo Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsClient : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsClient : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Istanza della classe <see cref="T:System.IAsyncResult" /> restituita da una chiamata di <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</param>
        <summary>Termina un'operazione di autenticazione asincrona del client avviata con la chiamata del metodo  <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione non è stata completata, questo metodo si blocca fino a quando non avviene. Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 Per eseguire questa operazione in modo sincrono, usare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> non è stato creato da una chiamata al metodo <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">Non esiste alcuna autenticazione del client in sospeso da completare.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsServer : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsServer : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsServer asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Istanza della classe <see cref="T:System.IAsyncResult" /> restituita da una chiamata di <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</param>
        <summary>Termina un'operazione di autenticazione asincrona del client avviata con la chiamata del metodo  <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione non è stata completata, questo metodo si blocca fino a quando non avviene.  
  
 Quando l'autenticazione ha esito positivo, è necessario controllare la <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> e <xref:System.Net.Security.NegotiateStream.IsSigned%2A> delle proprietà per determinare quali servizi di sicurezza vengono utilizzati dal <xref:System.Net.Security.NegotiateStream>. Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> proprietà per determinare se si è verificato durante l'autenticazione reciproca.  
  
 Se l'autenticazione non riesce, si riceve un <xref:System.Security.Authentication.AuthenticationException> o un <xref:System.Security.Authentication.InvalidCredentialException>. In questo caso, è possibile riprovare a eseguire l'autenticazione con credenziali diverse.  
  
 Per eseguire questa operazione in modo sincrono, usare il <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> non è stato creato da una chiamata al metodo <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">L'autenticazione non è riuscita. È possibile utilizzare questo oggetto per tentare nuovamente l'autenticazione.</exception>
        <exception cref="T:System.InvalidOperationException">Non esiste alcuna autenticazione in sospeso da completare.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="negotiateStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Istanza della classe <see cref="T:System.IAsyncResult" /> restituita da una chiamata del metodo <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <summary>Termina un'operazione di lettura asincrona avviata con la chiamata del metodo <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <returns>Valore <see cref="T:System.Int32" /> che specifica il numero di byte letti dal flusso sottostante.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione non è stata completata, questo metodo si blocca fino a quando non avviene.  
  
 Per eseguire questa operazione in modo sincrono, usare il <xref:System.Net.Security.NegotiateStream.Read%2A> (metodo).  
  
 È possibile chiamare questo metodo fino a quando non è stata effettuata l'autenticazione. Per eseguire l'autenticazione, chiamare uno dei <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'operazione finale asincrona read. Per un esempio che illustra l'avvio dell'operazione, vedere <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">asyncResult non è stato creato da una chiamata del metodo <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione non è stata effettuata.</exception>
        <exception cref="T:System.IO.IOException">L'operazione di lettura non è riuscita.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="negotiateStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Istanza della classe <see cref="T:System.IAsyncResult" /> restituita da una chiamata del metodo <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <summary>Termina un'operazione di scrittura asincrona avviata con la chiamata del metodo <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione non è stata completata, questo metodo si blocca fino a quando non avviene.  
  
 È possibile chiamare questo metodo fino a quando non è stata effettuata l'autenticazione. Per eseguire l'autenticazione, chiamare uno dei <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi.  
  
 Per eseguire questa operazione in modo sincrono, usare il <xref:System.Net.Security.NegotiateStream.Write%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato un metodo che viene chiamato per completare l'operazione di scrittura asincrona. Per un esempio che illustra l'avvio dell'operazione, vedere <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">asyncResult non è stato creato da una chiamata del metodo <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione non è stata effettuata.</exception>
        <exception cref="T:System.IO.IOException">Operazione di scrittura non riuscita.</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="negotiateStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Consente la scrittura dei dati memorizzati nel buffer nel dispositivo sottostante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo richiama <xref:System.IO.Stream.Flush%2A> nel flusso sottostante.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come la cancellazione del flusso.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberSignature Language="F#" Value="member this.ImpersonationLevel : System.Security.Principal.TokenImpersonationLevel" Usage="System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica il modo in cui il server può utilizzare le credenziali del client.</summary>
        <value>Uno dei valori di <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario eseguire l'autenticazione prima di chiamare questo metodo. I client specifichino il livello di rappresentazione quando richiedono l'autenticazione, chiamando uno dei <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> metodi. Se si esegue l'autenticazione senza specificare una <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> viene usato.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'autenticazione non è riuscita o non è stata effettuata.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se l'autenticazione è stata effettuata con esito positivo.</summary>
        <value>
          <see langword="true" /> se l'autenticazione è stata effettuata con esito positivo; in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I client si autentichino chiamando il <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> metodi. Eseguire l'autenticazione server chiamando il <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEncrypted : bool" Usage="System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se la classe <see cref="T:System.Net.Security.NegotiateStream" /> utilizza la crittografia dei dati.</summary>
        <value>
          <see langword="true" /> se i dati vengono crittografati prima di essere trasmessi in rete e decrittografati quando raggiungono l'endpoint remoto; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La crittografia consente di proteggere la privacy dei dati. in particolare, consente di garantire che quando i dati sono in transito non possano essere decifrati da terze parti.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMutuallyAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se il server e il client sono stati entrambi autenticati.</summary>
        <value>
          <see langword="true" /> se il server è stato autenticato; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autenticazione reciproca viene specificata dal client quando il client richiede al server di fornire le credenziali per l'autenticazione. Per impostazione predefinita, i client richiedono l'autenticazione reciproca.  
  
 Il protocollo di negoziazione consente di selezionare NTLM o Kerberos in base i protocolli di sicurezza supportati dal client e server. NTLM non supporta l'autenticazione reciproca.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServer : bool" Usage="System.Net.Security.NegotiateStream.IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se il lato locale della connessione utilizzato da questa classe <see cref="T:System.Net.Security.NegotiateStream" /> è stato autenticato come il server.</summary>
        <value>
          <see langword="true" /> se l'endpoint locale è stato autenticato con esito positivo come lato server della connessione autenticata; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'autenticazione non riuscita o non si è verificato, questa proprietà restituisce `false`.  
  
 Per eseguire l'autenticazione del server, chiamare il <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSigned : bool" Usage="System.Net.Security.NegotiateStream.IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se i dati inviati utilizzando questo flusso vengono firmati.</summary>
        <value>
          <see langword="true" /> se i dati vengono firmati prima di essere trasmessi; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La firma dei dati consente di proteggere l'integrità dei dati. vale a dire, consente al destinatario di determinare se sono stato manomesso i dati in transito.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Security.NegotiateStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la lunghezza del flusso sottostante.</summary>
        <value>Valore <see cref="T:System.Int64" /> che specifica la lunghezza del flusso sottostante.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.Length%2A> proprietà nel flusso sottostante. Se il flusso sottostante non ricercabile, questa proprietà in genere genererà un'eccezione. Il tipo di runtime del flusso sottostante determina il tipo di runtime dell'eccezione generata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Il recupero del valore di questa proprietà non è supportato quando il flusso sottostante è una classe <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Security.NegotiateStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione corrente nel flusso sottostante.</summary>
        <value>Valore <see cref="T:System.Int64" /> che specifica la posizione corrente nel flusso sottostante.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.Position%2A> proprietà nel flusso sottostante. Se il flusso sottostante non ricercabile, questa proprietà in genere genererà un'eccezione. Il tipo di runtime del flusso sottostante determina il tipo di runtime dell'eccezione generata.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">L'impostazione di questa proprietà non è supportata.  
  
\- oppure - 
Il recupero del valore di questa proprietà non è supportato quando il flusso sottostante è una classe <see cref="T:System.Net.Sockets.NetworkStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="negotiateStream.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> che riceve i byte letti dal flusso.</param>
        <param name="offset">Valore <see cref="T:System.Int32" /> contenente la posizione in base zero in <c>buffer</c> da cui iniziare l'archiviazione dei dati letti da questo flusso.</param>
        <param name="count">Valore <see cref="T:System.Int32" /> contenente il numero massimo di byte da leggere dal flusso.</param>
        <summary>Legge i dati da questo flusso e li archivia nella matrice specificata.</summary>
        <returns>Valore <see cref="T:System.Int32" /> che specifica il numero di byte letti dal flusso sottostante. Se non sono presenti altri dati da leggere, viene restituito 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo legge un numero massimo di `count` flusso di byte dall'oggetto corrente e li archivia in `buffer` partire `offset`.  
  
 È possibile chiamare questo metodo fino a quando non è stata effettuata l'autenticazione. Per eseguire l'autenticazione, chiamare uno dei <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi.  
  
 Per eseguire questa operazione in modo asincrono, utilizzare il <xref:System.Net.Security.NegotiateStream.BeginRead%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente illustra la lettura da un <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">L'operazione di lettura non è riuscita.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione non è stata effettuata.</exception>
        <exception cref="T:System.NotSupportedException">L'operazione <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> è già in corso.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'intervallo di tempo per il quale un'operazione di lettura si blocca in attesa dei dati.</summary>
        <value>Valore <see cref="T:System.Int32" /> che specifica l'intervallo di tempo che deve trascorrere prima che l'operazione di lettura generi un errore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.ReadTimeout%2A> proprietà nel flusso sottostante. Quando si imposta questa proprietà, il <xref:System.IO.Stream.ReadTimeout%2A> valore nel flusso sottostante è impostata sul valore specificato.  
  
 Se il flusso sottostante è un <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> è espresso in millisecondi e viene impostato su <xref:System.Threading.Timeout.Infinite> per impostazione predefinita, in modo che le operazioni di lettura verifica il timeout.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteIdentity : System.Security.Principal.IIdentity" Usage="System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene informazioni sull'identità della parte remota che condivide questo flusso autenticato.</summary>
        <value>Oggetto <see cref="T:System.Security.Principal.IIdentity" /> che descrive l'identità dell'endpoint remoto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si accede dal client, questa proprietà restituisce un <xref:System.Security.Principal.GenericIdentity> contenente il nome dell'entità di servizio (SPN) del server e il protocollo di autenticazione utilizzato. Quando si accede dal server, questa proprietà restituisce un <xref:System.Security.Principal.WindowsIdentity> che descrive il client. Se il <xref:System.Security.Principal.WindowsIdentity> è non disponibile, vengono restituite informazioni client al server in un <xref:System.Security.Principal.GenericIdentity>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'autenticazione non è riuscita o non è stata effettuata.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="negotiateStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Questo valore viene ignorato.</param>
        <param name="origin">Questo valore viene ignorato.</param>
        <summary>Genera l'eccezione <see cref="T:System.NotSupportedException" />.</summary>
        <returns>Genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non chiamare questo metodo. Viene ereditata, ma non è supportato da <xref:System.Net.Security.NegotiateStream>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">La ricerca non è supportata sulla classe <see cref="T:System.Net.Security.NegotiateStream" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="negotiateStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Valore <see cref="T:System.Int64" /> che specifica la lunghezza del flusso.</param>
        <summary>Imposta la lunghezza del flusso sottostante.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="negotiateStream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di <see cref="T:System.Byte" /> che fornisce i byte scritti nel flusso.</param>
        <param name="offset">Valore <see cref="T:System.Int32" /> contenente la posizione in base zero in <c>buffer</c> da cui iniziare la lettura dei byte che devono essere scritti nel flusso.</param>
        <param name="count">Valore <see cref="T:System.Int32" /> contenente il numero di byte da leggere da <c>buffer</c>.</param>
        <summary>Consente di scrivere il numero specificato di <see cref="T:System.Byte" /> nel flusso sottostante, utilizzando il buffer e l'offset specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se sono abilitate la crittografia, firma, o la crittografia e firma, questo metodo legge i dati dal buffer esegue la crittografia, firma, oppure esegue la crittografia e lo firma e trasmette tramite il flusso sottostante. Se nessuna sicurezza dei servizi, ad esempio la crittografia dei dati o l'accesso sono in uso, questo metodo richiama <xref:System.IO.Stream.Write%2A> nel flusso sottostante.  
  
 Questo metodo si blocca durante il completamento dell'operazione di scrittura. Per evitare di bloccare durante il completamento dell'operazione, usare il <xref:System.Net.Security.NegotiateStream.Write%2A> (metodo).  
  
 È possibile chiamare questo metodo fino a quando non è stata effettuata l'autenticazione. Per eseguire l'autenticazione, chiamare uno dei <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> metodi.  
  
 Il <xref:System.Net.Security.NegotiateStream> classe non supporta più operazioni di scrittura simultanee. Se si prova ad avviare un'operazione di scrittura, mentre un'altra operazione di scrittura è già in esecuzione nello stesso flusso, un <xref:System.NotSupportedException> verrà generata l'eccezione.  
  
   
  
## Examples  
 Esempio di codice seguente illustra la scrittura in un <xref:System.Net.Security.NegotiateStream>.  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />.  
  
\- oppure - 
 <paramref name="offset" /> è maggiore della lunghezza di <paramref name="buffer" />.  
  
\- oppure - 
 la somma di <paramref name="offset" /> e conteggio è maggiore della lunghezza del <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Operazione di scrittura non riuscita.  
  
\- oppure - 
La crittografia è in uso, ma non è stato possibile crittografare i dati.</exception>
        <exception cref="T:System.NotSupportedException">È già in corso un'operazione di scrittura.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso.</exception>
        <exception cref="T:System.InvalidOperationException">L'autenticazione non è stata effettuata.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'intervallo di tempo durante il quale un'operazione di scrittura si blocca in attesa dei dati.</summary>
        <value>Valore <see cref="T:System.Int32" /> che specifica l'intervallo di tempo che deve trascorrere prima che l'operazione di scrittura generi un errore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.WriteTimeout%2A> proprietà nel flusso sottostante. Per le operazioni set, imposta il valore specificato il <xref:System.IO.Stream.WriteTimeout%2A> valore nel flusso sottostante.  
  
 Se il flusso sottostante è un <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> è espresso in millisecondi e viene impostato su <xref:System.Threading.Timeout.Infinite> per impostazione predefinita, in modo che scrivere operazioni non presentano alcun timeout.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come visualizzare il valore di questa proprietà.  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>