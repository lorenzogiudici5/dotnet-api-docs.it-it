<Type Name="AttributeTableBuilder" FullName="System.Activities.Presentation.Metadata.AttributeTableBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1520f076d422188e330bb075fa1cf2fb3d6bc653" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36653662" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AttributeTableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AttributeTableBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class AttributeTableBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttributeTableBuilder" />
  <TypeSignature Language="F#" Value="type AttributeTableBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Crea e popola un oggetto <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" /> utilizzato da <see cref="T:System.Activities.Presentation.Metadata.MetadataStore" /> per fornire registrazione e ricerca degli attributi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>, <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> e <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable%2A> per popolare il generatore, quindi chiamare <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> per acquisire un oggetto <xref:System.Activities.Presentation.Metadata.AttributeTable> contenente la raccolta desiderata di attributi.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttributeTableBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AttributeTableBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCallback">
      <MemberSignature Language="C#" Value="public void AddCallback (Type type, System.Activities.Presentation.Metadata.AttributeCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCallback(class System.Type type, class System.Activities.Presentation.Metadata.AttributeCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCallback(Type ^ type, System::Activities::Presentation::Metadata::AttributeCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.AddCallback : Type * System.Activities.Presentation.Metadata.AttributeCallback -&gt; unit" Usage="attributeTableBuilder.AddCallback (type, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.Metadata.AttributeCallback" />
      </Parameters>
      <Docs>
        <param name="type">Tipo per il quale il callback fornirà i metadati.</param>
        <param name="callback">Metodo di callback.</param>
        <summary>Specifica il callback che verrà richiamato quando sono necessari i metadati per il tipo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La prima volta che un oggetto <xref:System.Activities.Presentation.Metadata.AttributeTable> restituito da <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> viene sottoposto a query per la ricerca degli attributi di `type`, viene chiamato `callback` per fornire informazioni sui metadati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge il contenuto degli attributi specificati a questo generatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un attributo è in conflitto con un altro attributo già incluso nel generatore, l'ultimo attributo aggiunto sostituisce quelli precedenti.  
  
 Quando si compila una tabella di attributi di grandi dimensioni, utilizzare <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> per rinviare la creazione degli attributi al momento in cui essi saranno necessari.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type type, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type type, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ type, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (type, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">Tipo cui aggiungere gli attributi a livello di classe.</param>
        <param name="attributes">Attributi aggiunti al generatore.</param>
        <summary>Aggiunge il contenuto degli attributi specificati a questo generatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un attributo è in conflitto con un altro attributo già incluso nel generatore, l'ultimo attributo aggiunto sostituisce quelli precedenti.  
  
 Quando si compila una tabella di attributi di grandi dimensioni, utilizzare <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> per rinviare la creazione degli attributi al momento in cui essi saranno necessari.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> o <paramref name="attributes" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.ComponentModel.MemberDescriptor descriptor, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.ComponentModel.MemberDescriptor descriptor, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, descriptor As MemberDescriptor, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::ComponentModel::MemberDescriptor ^ descriptor, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.ComponentModel.MemberDescriptor * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, descriptor, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="descriptor" Type="System.ComponentModel.MemberDescriptor" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType">Tipo che contiene il membro identificato da <c>descriptor</c>.</param>
        <param name="descriptor">Evento o informazioni sulle proprietà a cui vengono aggiunti gli attributi.</param>
        <param name="attributes">Attributi aggiunti al generatore.</param>
        <summary>Aggiunge il contenuto degli attributi specificati a questo generatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un attributo è in conflitto con un altro attributo già incluso nel generatore, l'ultimo attributo aggiunto sostituisce quelli precedenti.  
  
 Quando si compila una tabella di attributi di grandi dimensioni, utilizzare <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> per rinviare la creazione degli attributi al momento in cui essi saranno necessari.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ownerType" />, <paramref name="descriptor" /> o <paramref name="attributes" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.Reflection.MemberInfo member, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.Reflection.MemberInfo member, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, member As MemberInfo, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::Reflection::MemberInfo ^ member, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.Reflection.MemberInfo * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, member, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType">Tipo che contiene il membro identificato da <c>member</c>.</param>
        <param name="member">Evento o informazioni sulle proprietà a cui vengono aggiunti gli attributi.</param>
        <param name="attributes">Attributi aggiunti al generatore.</param>
        <summary>Aggiunge il contenuto degli attributi specificati a questo generatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un attributo è in conflitto con un altro attributo già incluso nel generatore, l'ultimo attributo aggiunto sostituisce quelli precedenti.  
  
 Quando si compila una tabella di attributi di grandi dimensioni, utilizzare <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> per rinviare la creazione degli attributi al momento in cui essi saranno necessari.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ownerType" />, <paramref name="member" /> o <paramref name="attributes" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, string memberName, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, string memberName, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.String,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, memberName As String, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::String ^ memberName, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * string * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, memberName, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType">Tipo che contiene il membro identificato da <c>memberName</c>.</param>
        <param name="memberName">Nome dell'evento o informazioni sulle proprietà a cui vengono aggiunti gli attributi.</param>
        <param name="attributes">Attributi aggiunti al generatore.</param>
        <summary>Aggiunge il contenuto degli attributi specificati a questo generatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un attributo è in conflitto con un altro attributo già incluso nel generatore, l'ultimo attributo aggiunto sostituisce quelli precedenti.  
  
 Quando si compila una tabella di attributi di grandi dimensioni, utilizzare <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> per rinviare la creazione degli attributi al momento in cui essi saranno necessari.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ownerType" />, <paramref name="memberName" /> o <paramref name="attributes" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.Windows.DependencyProperty dp, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.Windows.DependencyProperty dp, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, dp As DependencyProperty, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::Windows::DependencyProperty ^ dp, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.Windows.DependencyProperty * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, dp, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType">Tipo che contiene la dipendenza identificata da <c>dp</c>.</param>
        <param name="dp">Proprietà di dipendenza cui aggiungere gli attributi.</param>
        <param name="attributes">Attributi aggiunti al generatore.</param>
        <summary>Aggiunge il contenuto degli attributi specificati a questo generatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un attributo è in conflitto con un altro attributo già incluso nel generatore, l'ultimo attributo aggiunto sostituisce quelli precedenti.  
  
 Quando si compila una tabella di attributi di grandi dimensioni, utilizzare <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A> per rinviare la creazione degli attributi al momento in cui essi saranno necessari.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ownerType" />, <paramref name="dp" /> o <paramref name="attributes" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTable">
      <MemberSignature Language="C#" Value="public void AddTable (System.Activities.Presentation.Metadata.AttributeTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTable(class System.Activities.Presentation.Metadata.AttributeTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(System.Activities.Presentation.Metadata.AttributeTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddTable (table As AttributeTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddTable(System::Activities::Presentation::Metadata::AttributeTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.AddTable : System.Activities.Presentation.Metadata.AttributeTable -&gt; unit" Usage="attributeTableBuilder.AddTable table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Activities.Presentation.Metadata.AttributeTable" />
      </Parameters>
      <Docs>
        <param name="table">Tabella degli attributi di origine.</param>
        <summary>Aggiunge il contenuto della tabella di attributi specificata a questo generatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un attributo è in conflitto con un altro attributo già incluso nel generatore, l'ultimo attributo aggiunto sostituisce quelli precedenti.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="table" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="public System.Activities.Presentation.Metadata.AttributeTable CreateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Activities.Presentation.Metadata.AttributeTable CreateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTable () As AttributeTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Presentation::Metadata::AttributeTable ^ CreateTable();" />
      <MemberSignature Language="F#" Value="member this.CreateTable : unit -&gt; System.Activities.Presentation.Metadata.AttributeTable" Usage="attributeTableBuilder.CreateTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Metadata.AttributeTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una tabella di attributi che contiene tutte le definizioni di attributi fornite tramite chiamate a <see cref="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" />.</summary>
        <returns>Oggetto <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" /> che può essere passato all'archivio di metadati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella è un'istantanea dello stato corrente del generatore di attributi. Gli attributi aggiunti dalle chiamate successive a <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> non sono inclusi nella tabella.  
  
 Se i metodi di callback sono stati utilizzati per dichiarare attributi, non verranno valutati durante l'esecuzione di <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A>. La tabella conterrà invece tali callback e li valuterà in base alle esigenze.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTable">
      <MemberSignature Language="C#" Value="public void ValidateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateTable ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateTable();" />
      <MemberSignature Language="F#" Value="member this.ValidateTable : unit -&gt; unit" Usage="attributeTableBuilder.ValidateTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verifica che la tabella di attributi compilata contenga informazioni valide sugli attributi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alcuni override di <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> non è possibile convalidare che i valori passati ai relativi parametri rappresentano validità come membri delle classi. <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable%2A> verifica che tutte le informazioni sugli attributi personalizzati corrispondano ai membri effettivi. L'esecuzione di tale metodo può richiedere molto tempo. Non è pertanto consigliabile utilizzarlo a meno che non sia richiesta esplicitamente la convalida.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException">Lo stato della tabella non è valido.</exception>
      </Docs>
    </Member>
  </Members>
</Type>