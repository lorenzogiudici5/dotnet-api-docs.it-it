<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4d0b73d33e0efbb41a5d96a42ea4dbe6e5c16767" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48611028" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce la proprietà e i metodi per la scrittura dell'evento e delle informazioni sulle eccezioni nei listener del log dell'applicazione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `My.Application.Log` oggetto fornisce un punto di ingresso semplice da cui accedere al [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]di servizi di registrazione. Il `WriteEntry` e `WriteException` metodi scrivono messaggi ai listener di log dell'applicazione. I listener possono essere configurati dal file di configurazione dell'applicazione. Per altre informazioni, vedere [procedura dettagliata: modifica in cui My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) e [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Il `My.Application.Log` l'oggetto è disponibile solo per le applicazioni client. Per le applicazioni Web, usare `My.Log`. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.Logging.AspLog>.  
  
 La tabella seguente elenca alcuni esempi di attività che implicano il `My.Application.Log` oggetto.  
  
|A|Vedere|  
|--------|---------|  
|Scrivere informazioni sugli eventi ai listener di log dell'applicazione|[Procedura: Scrivere messaggi di log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Scrivere le informazioni sulle eccezioni nei listener di log dell'applicazione|[Procedura: Registrare eccezioni](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinare dove `My.Application.Log` scrive le informazioni|[Procedura dettagliata: Individuazione della posizione di inserimento delle informazioni con My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 Questo esempio illustra come usare il metodo `My.Application.Log.WriteEntry` per registrare le informazioni di traccia. Per altre informazioni, vedere [procedura: scrivere messaggi di Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />. Nome da assegnare all'oggetto della proprietà <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il file dell'oggetto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> sottostante l'oggetto <see langword="Log" />.</summary>
        <value>Restituisce l'oggetto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> sottostante all'oggetto <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare questa proprietà per determinare la configurazione corrente del <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> oggetto.  
  
 Nelle applicazioni client, il `Log` l'oggetto è disponibile tramite il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` l'oggetto è disponibile tramite il `My.Log` oggetto.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Risoluzione dei problemi: listener di log</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo oggetto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> e lo aggiunge all'insieme <see cref="P:System.Diagnostics.TraceSource.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo crea un nuovo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, imposta il nome `FileLog`e lo configura per registrare i messaggi con livello di gravità <xref:System.Diagnostics.SourceLevels.Information> e versioni successive. Il nuovo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> oggetto viene quindi aggiunto al <xref:System.Diagnostics.TraceSource.Listeners%2A> raccolta.  
  
 Il <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> chiama il metodo se il <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> proprietà non è stata configurata. L'origine di traccia può essere configurato nel file di configurazione dell'applicazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Diagnostics.TraceSource" /> sottostante l'oggetto <see langword="Log" />.</summary>
        <value>Restituisce l'oggetto <see cref="T:System.Diagnostics.TraceSource" /> sottostante all'oggetto <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare questa proprietà per determinare la configurazione corrente del `Log` oggetto.  
  
 Nelle applicazioni client, il `Log` l'oggetto è disponibile tramite il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` l'oggetto è disponibile tramite il `My.Log` oggetto.  
  
 Si tratta di un membro avanzato. non è visualizzato in IntelliSense a meno che non si seleziona il **tutti** scheda.  
  
 La tabella seguente elenca un esempio di un'attività che coinvolgono il `TraceSource` proprietà.  
  
|A|Vedere|  
|--------|---------|  
|Ottenere informazioni per ognuna del `Log` listener di log dell'oggetto.|[Risoluzione dei problemi: Listener di log](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|------------------|---------------|  
|Applicazione Windows|**Sì**|  
|Libreria di classi|**Sì**|  
|Applicazione console|**Sì**|  
|Libreria di controlli Windows|**Sì**|  
|Libreria di controlli Web|No|  
|Servizio Windows|**Sì**|  
|Sito Web|**Sì**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Risoluzione dei problemi: listener di log</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive un messaggio nei listener del log dell'applicazione.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Obbligatorio. Messaggio da registrare. Se <c>message</c> è <see langword="Nothing" />, viene usata una stringa vuota.</param>
        <summary>Scrive un messaggio nei listener del log dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `WriteEntry` metodo scrive un messaggio ai listener di log eventi dell'applicazione.  
  
 Nelle applicazioni client, il `Log` l'oggetto è disponibile tramite il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` l'oggetto è disponibile tramite il `My.Log` oggetto.  
  
 Informazioni del registro in cui i listener di ricezione il `WriteEntry` i messaggi del metodo, vedere [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). È possibile modificare i listener di log predefinito. Per altre informazioni, vedere [Uso dei log applicazione](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Per gli overload che non accettano il `id` argomento, il `id` scritti nel log viene definito nella tabella seguente.  
  
|`severity`|Impostazione predefinita `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 La tabella seguente elenca alcuni esempi di attività che implicano il `WriteEntry` (metodo).  
  
|A|Vedere|  
|--------|---------|  
|Scrivere informazioni sugli eventi ai listener di log dell'applicazione|[Procedura: Scrivere messaggi di log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinare dove `Log` scrive le informazioni|[Procedura dettagliata: Individuazione della posizione di inserimento delle informazioni con My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|------------------|---------------|  
|Applicazione Windows|**Sì**|  
|Libreria di classi|**Sì**|  
|Applicazione console|**Sì**|  
|Libreria di controlli Windows|**Sì**|  
|Libreria di controlli Web|No|  
|Servizio Windows|**Sì**|  
|Sito Web|**Sì**|  
  
   
  
## Examples  
 Questo esempio illustra come usare il metodo `My.Application.Log.WriteEntry` per registrare le informazioni di traccia. Per altre informazioni, vedere [procedura: scrivere messaggi di Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Questo esempio di codice può eseguire solo all'interno di un'applicazione client. Change `My.Application.Log.WriteEntry` a `My.Log.WriteEntry` per le applicazioni Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Il metodo viene chiamato dal codice con attendibilità parziale che tuttavia consente di scrivere nel listener del registro eventi che richiede attendibilità totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilizzo dei log applicazione in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Procedura: scrivere messaggi di log</related>
        <related type="Article" href="http://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procedura dettagliata: individuazione della posizione di inserimento delle informazioni con My.Application.Log</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">Obbligatorio. Messaggio da registrare. Se <c>message</c> è <see langword="Nothing" />, viene usata una stringa vuota.</param>
        <param name="severity">Tipo di messaggio. Per impostazione predefinita, <see langword="TraceEventType.Information" />.</param>
        <summary>Scrive un messaggio nei listener del log dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `WriteEntry` metodo scrive un messaggio ai listener di log eventi dell'applicazione.  
  
 Nelle applicazioni client, il `Log` l'oggetto è disponibile tramite il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` l'oggetto è disponibile tramite il `My.Log` oggetto.  
  
 Informazioni del registro in cui i listener di ricezione il `WriteEntry` i messaggi del metodo, vedere [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). È possibile modificare i listener di log predefinito. Per altre informazioni, vedere [Uso dei log applicazione](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Per gli overload che non accettano il `id` argomento, il `id` scritti nel log viene definito nella tabella seguente.  
  
|`severity`|Impostazione predefinita `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 La tabella seguente elenca alcuni esempi di attività che implicano il `WriteEntry` (metodo).  
  
|A|Vedere|  
|--------|---------|  
|Scrivere informazioni sugli eventi ai listener di log dell'applicazione|[Procedura: Scrivere messaggi di log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinare dove `Log` scrive le informazioni|[Procedura dettagliata: Individuazione della posizione di inserimento delle informazioni con My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|------------------|---------------|  
|Applicazione Windows|**Sì**|  
|Libreria di classi|**Sì**|  
|Applicazione console|**Sì**|  
|Libreria di controlli Windows|**Sì**|  
|Libreria di controlli Web|No|  
|Servizio Windows|**Sì**|  
|Sito Web|**Sì**|  
  
   
  
## Examples  
 Questo esempio illustra come usare il metodo `My.Application.Log.WriteEntry` per registrare le informazioni di traccia. Per altre informazioni, vedere [procedura: scrivere messaggi di Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Questo esempio di codice può eseguire solo all'interno di un'applicazione client. Change `My.Application.Log.WriteEntry` a `My.Log.WriteEntry` per le applicazioni Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Il tipo di messaggio non è uno dei valori di enumerazione <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il metodo viene chiamato dal codice con attendibilità parziale che tuttavia consente di scrivere nel listener del registro eventi che richiede attendibilità totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilizzo dei log applicazione in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Procedura: scrivere messaggi di log</related>
        <related type="Article" href="http://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procedura dettagliata: individuazione della posizione di inserimento delle informazioni con My.Application.Log</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Obbligatorio. Messaggio da registrare. Se <c>message</c> è <see langword="Nothing" />, viene usata una stringa vuota.</param>
        <param name="severity">Tipo di messaggio. Per impostazione predefinita, <see langword="TraceEventType.Information" />.</param>
        <param name="id">Identificatore di messaggio, solitamente utilizzato per la correlazione. Per impostazione predefinita, è correlato a <c>entryType</c> come descritto nella tabella.</param>
        <summary>Scrive un messaggio nei listener del log dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `WriteEntry` metodo scrive un messaggio ai listener di log eventi dell'applicazione.  
  
 Nelle applicazioni client, il `Log` l'oggetto è disponibile tramite il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` l'oggetto è disponibile tramite il `My.Log` oggetto.  
  
 Informazioni del registro in cui i listener di ricezione il `WriteEntry` i messaggi del metodo, vedere [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). È possibile modificare i listener di log predefinito. Per altre informazioni, vedere [Uso dei log applicazione](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Per gli overload che non accettano il `id` argomento, il `id` scritti nel log viene definito nella tabella seguente.  
  
|`severity`|Impostazione predefinita `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 La tabella seguente elenca alcuni esempi di attività che implicano il `WriteEntry` (metodo).  
  
|A|Vedere|  
|--------|---------|  
|Scrivere informazioni sugli eventi ai listener di log dell'applicazione|[Procedura: Scrivere messaggi di log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinare dove `Log` scrive le informazioni|[Procedura dettagliata: Individuazione della posizione di inserimento delle informazioni con My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|------------------|---------------|  
|Applicazione Windows|**Sì**|  
|Libreria di classi|**Sì**|  
|Applicazione console|**Sì**|  
|Libreria di controlli Windows|**Sì**|  
|Libreria di controlli Web|No|  
|Servizio Windows|**Sì**|  
|Sito Web|**Sì**|  
  
   
  
## Examples  
 Questo esempio illustra come usare il metodo `My.Application.Log.WriteEntry` per registrare le informazioni di traccia. Per altre informazioni, vedere [procedura: scrivere messaggi di Log](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Questo esempio di codice può eseguire solo all'interno di un'applicazione client. Change `My.Application.Log.WriteEntry` a `My.Log.WriteEntry` per le applicazioni Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Il tipo di messaggio non è uno dei valori di enumerazione <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il metodo viene chiamato dal codice con attendibilità parziale che tuttavia consente di scrivere nel listener del registro eventi che richiede attendibilità totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilizzo dei log applicazione in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Procedura: scrivere messaggi di log</related>
        <related type="Article" href="http://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procedura dettagliata: individuazione della posizione di inserimento delle informazioni con My.Application.Log</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive le informazioni sull'eccezione nei listener del log dell'applicazione</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Obbligatorio. Eccezione da registrare.</param>
        <summary>Scrive le informazioni sull'eccezione nei listener del log dell'applicazione</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `WriteException` metodo scrive le informazioni contenute in un'eccezione nei listener di log eventi dell'applicazione.  
  
 Nelle applicazioni client, il `Log` l'oggetto è disponibile tramite il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` l'oggetto è disponibile tramite il `My.Log` oggetto.  
  
 Informazioni del registro in cui i listener di ricezione il `WriteException` i messaggi del metodo, vedere [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). È possibile modificare i listener di log predefinito. Per altre informazioni, vedere [Uso dei log applicazione](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Per gli overload che non accettano il `id` argomento, l'identificatore scritto nel log è definito nella tabella seguente.  
  
|`severity`|Impostazione predefinita `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 La tabella seguente elenca alcuni esempi di attività che implicano il `WriteException` (metodo).  
  
|A|Vedere|  
|--------|---------|  
|Scrivere le informazioni sulle eccezioni nei listener di log eventi dell'applicazione.|[Procedura: Registrare eccezioni](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinare la posizione in cui `Log` scrive le informazioni.|[Procedura dettagliata: Individuazione della posizione di inserimento delle informazioni con My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|------------------|---------------|  
|Applicazione Windows|**Sì**|  
|Libreria di classi|**Sì**|  
|Applicazione console|**Sì**|  
|Libreria di controlli Windows|**Sì**|  
|Libreria di controlli Web|No|  
|Servizio Windows|**Sì**|  
|Sito Web|**Sì**|  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare il `My.Application.Log.WriteException` metodo per registrare le eccezioni. Rimuovere il commento dalle righe `Dim` e `MsgBox` per causare un'eccezione <xref:System.NullReferenceException>. Per altre informazioni, vedere [procedura: registrare eccezioni](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Questo esempio di codice può eseguire solo all'interno di un'applicazione client. Change `My.Application.Log.WriteException` a `My.Log.WriteException` per le applicazioni Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> è <see langword="Nothing" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il metodo viene chiamato dal codice con attendibilità parziale che tuttavia consente di scrivere nel listener del registro eventi che richiede attendibilità totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilizzo dei log applicazione in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Procedura: registrare eccezioni in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procedura dettagliata: individuazione della posizione di inserimento delle informazioni con My.Application.Log</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Obbligatorio. Eccezione da registrare.</param>
        <param name="severity">Tipo di messaggio. Per impostazione predefinita, <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Stringa da aggiungere al messaggio. Per impostazione predefinita, questa è una stringa vuota.</param>
        <summary>Scrive le informazioni sull'eccezione nei listener del log dell'applicazione</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `WriteException` metodo scrive le informazioni contenute in un'eccezione nei listener di log eventi dell'applicazione.  
  
 Nelle applicazioni client, il `Log` l'oggetto è disponibile tramite il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` l'oggetto è disponibile tramite il `My.Log` oggetto.  
  
 Informazioni del registro in cui i listener di ricezione il `WriteException` i messaggi del metodo, vedere [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). È possibile modificare i listener di log predefinito. Per altre informazioni, vedere [Uso dei log applicazione](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Per gli overload che non accettano il `id` argomento, l'identificatore scritto nel log è definito nella tabella seguente.  
  
|`severity`|Impostazione predefinita `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 La tabella seguente elenca alcuni esempi di attività che implicano il `WriteException` (metodo).  
  
|A|Vedere|  
|--------|---------|  
|Scrivere le informazioni sulle eccezioni nei listener di log eventi dell'applicazione.|[Procedura: Registrare eccezioni](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinare la posizione in cui `Log` scrive le informazioni.|[Procedura dettagliata: Individuazione della posizione di inserimento delle informazioni con My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|------------------|---------------|  
|Applicazione Windows|**Sì**|  
|Libreria di classi|**Sì**|  
|Applicazione console|**Sì**|  
|Libreria di controlli Windows|**Sì**|  
|Libreria di controlli Web|No|  
|Servizio Windows|**Sì**|  
|Sito Web|**Sì**|  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare il `My.Application.Log.WriteException` metodo per registrare le eccezioni. Rimuovere il commento dalle righe `Dim` e `MsgBox` per causare un'eccezione <xref:System.NullReferenceException>. Per altre informazioni, vedere [procedura: registrare eccezioni](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Questo esempio di codice può eseguire solo all'interno di un'applicazione client. Change `My.Application.Log.WriteException` a `My.Log.WriteException` per le applicazioni Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> è <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Il tipo di messaggio non è uno dei valori di enumerazione <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il metodo viene chiamato dal codice con attendibilità parziale che tuttavia consente di scrivere nel listener del registro eventi che richiede attendibilità totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilizzo dei log applicazione in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Procedura: registrare eccezioni in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procedura dettagliata: individuazione della posizione di inserimento delle informazioni con My.Application.Log</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">Obbligatorio. Eccezione da registrare.</param>
        <param name="severity">Tipo di messaggio. Per impostazione predefinita, <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Stringa da aggiungere al messaggio. Per impostazione predefinita, questa è una stringa vuota.</param>
        <param name="id">Identificatore di messaggio, solitamente utilizzato per la correlazione. Per impostazione predefinita, è correlato a <c>entryType</c> come descritto nella tabella nella sezione Note.</param>
        <summary>Scrive le informazioni sull'eccezione nei listener del log dell'applicazione</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `WriteException` metodo scrive le informazioni contenute in un'eccezione nei listener di log eventi dell'applicazione.  
  
 Nelle applicazioni client, il `Log` l'oggetto è disponibile tramite il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` l'oggetto è disponibile tramite il `My.Log` oggetto.  
  
 Informazioni del registro in cui i listener di ricezione il `WriteException` i messaggi del metodo, vedere [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). È possibile modificare i listener di log predefinito. Per altre informazioni, vedere [Uso dei log applicazione](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Per gli overload che non accettano il `id` argomento, l'identificatore scritto nel log è definito nella tabella seguente.  
  
|`severity`|Impostazione predefinita `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 La tabella seguente elenca alcuni esempi di attività che implicano il `WriteException` (metodo).  
  
|A|Vedere|  
|--------|---------|  
|Scrivere le informazioni sulle eccezioni nei listener di log eventi dell'applicazione.|[Procedura: Registrare eccezioni](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinare la posizione in cui `Log` scrive le informazioni.|[Procedura dettagliata: Individuazione della posizione di inserimento delle informazioni con My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilità dal tipo di progetto  
  
|Tipo di progetto|Disponibile|  
|------------------|---------------|  
|Applicazione Windows|**Sì**|  
|Libreria di classi|**Sì**|  
|Applicazione console|**Sì**|  
|Libreria di controlli Windows|**Sì**|  
|Libreria di controlli Web|No|  
|Servizio Windows|**Sì**|  
|Sito Web|**Sì**|  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare il `My.Application.Log.WriteException` metodo per registrare le eccezioni. Rimuovere il commento dalle righe `Dim` e `MsgBox` per causare un'eccezione <xref:System.NullReferenceException>. Per altre informazioni, vedere [procedura: registrare eccezioni](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Questo esempio di codice può eseguire solo all'interno di un'applicazione client. Change `My.Application.Log.WriteException` a `My.Log.WriteException` per le applicazioni Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> è <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Il tipo di messaggio non è uno dei valori di enumerazione <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il metodo viene chiamato dal codice con attendibilità parziale che tuttavia consente di scrivere nel listener del registro eventi che richiede attendibilità totale.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controlla se è possibile accedere ai file e alle cartelle. Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Utilizzo dei log applicazione in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Procedura: registrare eccezioni in Visual Basic</related>
        <related type="Article" href="http://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Procedura dettagliata: individuazione della posizione di inserimento delle informazioni con My.Application.Log</related>
      </Docs>
    </Member>
  </Members>
</Type>