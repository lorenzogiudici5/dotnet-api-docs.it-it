<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="53068a51dff2dbff03cc98be639f8278b78a3c38" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48587437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Viene fornito un listener semplice che indirizza l'output di registrazione in un file.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe fornisce funzioni di operazioni di manutenzione automatica per l'archiviazione file di log in base alle esigenze, su base giornaliera o per ogni applicazione. Questa funzionalità di archiviazione automatica consente di ridurre le responsabilità di manutenzione di sviluppatori e amministratori.  
  
 Un'istanza di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> possono essere aggiunti al <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> o <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> raccolte per reindirizzare l'output di registrazione in un file di testo. È anche possibile aggiungere istanze di questa classe per `My.Application.Log` o `My.Log` (per le applicazioni Web) nelle applicazioni Visual Basic. Per altre informazioni, vedere [procedura dettagliata: modifica in cui My.Application.Log scrive informazioni](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 Le principali funzionalità di questa classe sono:  
  
1.  *Funzionalità di archiviazione*. I file di log generati da questa classe sono denominati in base al nome di base e la data, insieme a un numero per distinguere il file di log rispetto alle versioni successive del log. Vengono creati nuovi file di log in base alle esigenze.  
  
     È il formato del nome del file esplicito `baseName`[-`dateStamp`] [-`version`]. log, dove:  
  
    -   Il `baseName` parte è il nome di log fondamentale, specificato da di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> proprietà.  
  
    -   Il `dateStamp` parte ha il formato "Aaaa-MM-GG" e viene visualizzato quando <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> viene <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> o <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
    -   Se sono necessari più di un file di log con lo stesso `baseName` e `dateStamp`, il `version` parte, un numero positivo `Integer`, viene aggiunto al nome del file.  
  
2.  *Più istanze della classe*. Se un'istanza del <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe scrive in un file in uso:  
  
    -   La classe condivide il file perché è in uso da un'altra istanza di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe nello stesso processo.  
  
    -   La classe crea un nuovo file di log usando il nome successivo disponibile se il file viene usato da un altro processo.  
  
3.  *Thread safety*. Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe sia thread-safe. In questo modo è possibile scrivere in modo sicuro i messaggi del log da più thread senza usare blocchi.  
  
 **Percorso del File di log**  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> proprietà accetta un <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumerazione per specificare una delle directory comuni in cui scrivere il file di log.  
  
-   Per scrivere i log in un'altra posizione, impostare il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> proprietà in tale posizione.  
  
 **Nome del File di log**  
  
-   Il nome di base per il file di registro è specificato da di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> proprietà.  
  
-   Il nome di file di log corrente può essere lette dal <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> proprietà. Deriva da molte altre proprietà e lo stato corrente dei log nel file system.  
  
 **Manutenzione del log**  
  
-   La frequenza minima per la creazione di nuovi file di log è determinata dal <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> proprietà. Quando il valore è <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> oppure <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, un nuovo file di log viene creato almeno una volta al giorno o settimana e viene inserito un indicatore di data nel <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nome.  
  
-   La dimensione massima (in byte) del file di log è determinata dal <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> proprietà. Se le dimensioni del file di log superano questa dimensione, ulteriori messaggi scritti nel log vengono scartati e, a seconda di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> proprietà, viene generata un'eccezione.  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> proprietà determina la quantità di spazio libero (in byte) devono essere disponibili. Ciò garantisce che il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe non utilizzeranno tutto lo spazio disponibile su disco. Usare la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> proprietà per specificare il comportamento del log scrive quando sono presenti meno di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> byte liberi.  
  
 **Impostazioni di Output del File di log**  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> proprietà specifica se il flusso sottostante deve essere scaricato automaticamente dopo ogni operazione di scrittura nel file di log.  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> proprietà specifica se accodare i messaggi per il file di log corrente, se consentito, o scriverli in un nuovo file di log.  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> proprietà specifica la stringa da utilizzare per delimitare i campi all'interno di un messaggio di log.  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> proprietà specifica la codifica da utilizzare quando si crea un nuovo file di log.  
  
 **Output del File di log**  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> e <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metodi scrivono messaggi nel file di log. Questi metodi controllano il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> proprietà, insieme a eventuali log esistenti con lo stesso nome di base per determinare se è necessario creare un nuovo log.  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> metodo scarica eventuali messaggi attualmente nel buffer di output nel file di log.  
  
-   Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metodo chiude il file di log in modo che può essere utilizzato da altri processi.  
  
 **Abilitazione di Output**  
  
 È necessario abilitare la tracciatura o di debug per usare un listener di traccia. La sintassi seguente è specifica del compilatore. Se si utilizzano i compilatori diversi da c# o Visual Basic, vedere la documentazione per il compilatore.  
  
-   Per abilitare il debug in c#, aggiungere il `/d:DEBUG` flag per la riga di comando del compilatore quando si compila il codice oppure è possibile aggiungere `#define DEBUG` nella parte superiore del file app. In Visual Basic, aggiungere il `/d:DEBUG=True` flag per la riga di comando del compilatore.  
  
-   Per abilitare la traccia in c#, aggiungere il `/d:TRACE` flag per la riga di comando del compilatore quando si compila il codice, o aggiungere `#define TRACE` nella parte superiore del file app. In Visual Basic, aggiungere il `/d:TRACE=True` flag per la riga di comando del compilatore.  
  
 Per impostare il livello del listener, modificare il file di configurazione per l'applicazione. All'interno di questo file, è possibile aggiungere un listener, impostarne il tipo e impostare i relativi parametri, rimuovere un listener o cancellare tutti i listener precedentemente impostati dall'applicazione. Il file di configurazione deve essere formattato come nell'esempio seguente.  
  
 Per eseguire questo esempio, è necessario specificare il nome completo dell'assembly. Per informazioni su come ottenere il nome completo dell'assembly, vedere [i nomi degli Assembly](~/docs/framework/app-domains/assembly-names.md).  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
    <related type="Article" href="http://msdn.microsoft.com/library/ecc74f95-743c-450d-93f6-09a30db0fe4a">Procedura dettagliata: modifica della posizione di inserimento delle informazioni con My.Application.Log</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> e ne imposta il nome.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> con il nome predefinito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo imposta il nome dell'istanza di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe FileLogTraceListener.  
  
 È possibile accedere tramite il nome dell'istanza di <xref:System.Diagnostics.TraceListener.Name%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see langword="String" />. Nome dell'oggetto dell'istanza.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> con il nome specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo imposta il nome dell'istanza di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe `name`.  
  
 È possibile accedere al nome dell'istanza mediante il <xref:System.Diagnostics.TraceListener.Name%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Oggetti (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina se aggiungere l'output al file corrente o se scriverlo in un nuovo file.</summary>
        <value>
          <see langword="Boolean" />, con valore <see langword="True" /> che indica che l'output viene aggiunto al file corrente e <see langword="False" /> che indica che verrà scritto in un nuovo file. L'impostazione predefinita di questa proprietà è <see langword="True" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> è di proprietà `False`, l'output viene scritto in un nuovo file. Quando la proprietà è `True`, l'output viene aggiunto al file corrente, a meno che non:  
  
-   Il file di output è bloccato da un altro processo. In questo caso, viene creato un nuovo file di log con un numero di versione che viene incorporato nel <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nome.  
  
-   Le dimensioni del file corrente sono maggiore di quella di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> consente a proprietà. In questo caso, i messaggi aggiuntivi vengono ignorati e, a seconda di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> proprietà, viene generata un'eccezione.  
  
-   Il nome del file esistente viene aggiornato in base alla pianificazione per la creazione del log specificata dal <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> proprietà. In questo caso, viene creato un nuovo file di log e della data e ora è incorporata nel <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nome.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica se la scrittura nel flusso del file di log deve scaricare il buffer o meno.</summary>
        <value>
          <see langword="Boolean" />, con valore <see langword="True" /> che indica che il flusso deve essere scaricato dopo ogni scrittura; in caso contrario le voci di log vengono inserite nel buffer e scritte in modo più efficace. L'impostazione predefinita di questa proprietà è <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `False` impostazione per il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> proprietà offre le migliori prestazioni per la maggior parte delle applicazioni, perché è più efficiente per scrivere più messaggi nel file di log in una sola volta. È possibile usare il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> buffer di output del metodo per scaricare i messaggi attualmente nel file di log. È anche possibile usare il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metodo, che scarica in modo implicito il flusso prima di chiudere il file di log.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome base per i file di log, utilizzato per la creazione del nome completo del file di log.</summary>
        <value>
          <see langword="String" />. Nome base dei file di log. Il nome predefinito è quello del prodotto dell'applicazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> proprietà determina il nome di base dei file di log che il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> scritti dalla classe.  
  
 Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> proprietà fornisce il nome completo del file di log corrente. Viene generato in base al percorso del log, il nome di base, la data e un numero per distinguerlo da versioni diverse del log. Vengono creati nuovi file di log in base alle esigenze.  
  
 È il formato del nome del file di log pieno esplicito `path` \\ `baseName`[-`dateStamp`] [-`iteration`]. log, dove  
  
-   Il `path` ambito è determinato dal <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> proprietà e, se il valore della proprietà è impostato su <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> proprietà.  
  
-   Il `baseName` parte è il nome di log fondamentale, specificato da di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> proprietà.  
  
-   Il `dateStamp` parte ha il formato "Aaaa-MM-GG" e viene visualizzato quando <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> è impostata su <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> o <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
-   Se sono necessari più di un file di log con lo stesso `baseName` e `dateStamp`, il `iteration` parte, un numero positivo `Integer`, viene aggiunto al nome del file.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude il flusso sottostante per il file di log corrente e rilascia tutte le risorse associate al flusso corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è necessario chiamare il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> metodo in modo esplicito, perché il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe gestisce il flusso sottostante.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la directory del file di log se la proprietà <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> e impostata su <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />.</summary>
        <value>
          <see langword="String" /> che rappresenta il nome della directory del file di log. L'impostazione predefinita per questa proprietà è la directory dell'utente per i dati dell'applicazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> è impostata, imposta inoltre il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> proprietà <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>.  
  
 Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> proprietà genererà un'eccezione se la directory non può essere risolta.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il delimitatore utilizzato per delimitare i campi all'interno di un messaggio di log.</summary>
        <value>
          <see langword="String" /> che rappresenta il delimitatore utilizzato per i campi all'interno di un messaggio di log. L'impostazione predefinita di questa proprietà è il carattere TAB.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> proprietà consente di modificare il delimitatore predefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina quale comportamento seguire se durante la scrittura del file di log viene rilevato meno spazio libero su disco disponibile di quello specificato dalla proprietà <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />. Determina il comportamento da adottare durante il tentativo di scrittura nel file di log quando lo spazio libero su disco è inferiore a quello specificato dalla proprietà <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> o la dimensione del file di log è maggiore di quella consentita dalla proprietà <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />. Il valore predefinito è <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> è impostata su <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, i messaggi di log vengono eliminati automaticamente se non esiste spazio su disco riservato. Si tratta del comportamento predefinito e impedisce semplici applicazioni non riesca se il disco sia pieno.  
  
 Le applicazioni più affidabili possono impostare il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> proprietà <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>e aggiungere `Try...Catch` blocchi tutto il codice che scrive nel registro.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="True" /> rilascia sia le risorse gestite che quelle non gestite; <see langword="False" /> rilascia solo le risorse non gestite.</param>
        <summary>Chiude il flusso sottostante ed eventualmente rilascia le risorse gestite. </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il parametro `disposing` è `True`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti a cui la classe <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> fa riferimento. Il metodo richiama il metodo `Dispose` di ciascun oggetto cui viene fatto riferimento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il metodo 
            <see langword="Dispose" /> può essere chiamato più volte da altri oggetti. In caso di override di <see langword="Dispose" />, non fare riferimento a oggetti già eliminati in una chiamata precedente a <see langword="Dispose" />.  
  
Questo metodo chiama il <see langword="Dispose" /> metodo della classe di base, <see langword="Dispose" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la codifica da utilizzare durante la creazione di un nuovo file di log.</summary>
        <value>
          <see cref="T:System.Text.Encoding" />, che rappresenta la codifica da utilizzare durante la creazione di un nuovo file di log. Il valore predefinito di questa proprietà è <see cref="T:System.Text.UTF8Encoding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si aggiunge del testo in un file di log esistente, anziché la codifica specificata da viene utilizzata la codifica per il file di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scarica il flusso sottostante che scrive ne file di log corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> metodo per scrivere dati memorizzati nel buffer tutti i file di log attuale.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome corrente completo del file di log.</summary>
        <value>
          <see langword="String" />, che rappresenta il nome corrente completo del file di log.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> proprietà fornisce il nome completo del file di log corrente. Viene generato in base al percorso del log, il nome di base, la data e un numero per distinguerlo da versioni diverse del log. Vengono creati nuovi file di log in base alle esigenze.  
  
 È il formato del nome completo del file di log esplicito `path` \\ `baseName`[-`dateStamp`] [-`iteration`]. log, dove:  
  
-   Il `path` ambito è determinato dal <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> proprietà e, se il valore della proprietà è impostato su <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> proprietà.  
  
-   Il `baseName` parte è il nome di log fondamentale, specificato da di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> proprietà.  
  
-   Il `dateStamp` parte ha il formato AAAA-MM-GG e viene visualizzato quando <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> viene <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> o <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
-   Se sono necessari più di un file di log con lo stesso `baseName` e `dateStamp`, il `iteration` parte, un numero positivo `Integer`, viene aggiunto al nome del file.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene gli attributi di configurazione XML personalizzati supportati dal listener di traccia.</summary>
        <returns>Matrice di <see langword="String" /> contenente gli attributi di configurazione XML riconosciuti da questo listener.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli attributi personalizzati per il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> può essere usato nel file di configurazione XML per controllare il comportamento di un'istanza del <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe. Uso di qualsiasi altro attributo provoca un'eccezione di configurazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica se includere o meno nell'output il nome dell'host della macchina che esegue la registrazione.</summary>
        <value>
          <see langword="Boolean" />. Utilizzare <see langword="True" /> se è necessario includere l'identificatore host; in caso contrario, utilizzare <see langword="False" />. Il valore predefinito è <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la proprietà per configurare il comportamento dei <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> e <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metodi.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il percorso dei file di log.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />, che rappresenta il percorso per il file di log. Il valore predefinito è <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> proprietà da impostare il percorso del log a uno dei percorsi predefiniti, determinati dal <xref:Microsoft.VisualBasic.Logging.LogFileLocation> valori di enumerazione.  
  
|**Valore del percorso**|**Percorso**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|Il percorso per i dati applicazione condivisi fra tutti gli utenti, con il formato:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Un valore tipico per `BasePath` è:<br /><br /> C:\Documents and Settings\All Users\dati<br /><br /> I valori della `CompanyName`, `ProductName`, e `ProductVersion` provengono dall'assembly.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|Percorso del file eseguibile che ha avviato l'applicazione.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|Il percorso per i dati dell'applicazione di un utente, con il formato:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Un valore tipico per `BasePath` è:<br /><br /> C:\Documents and Settings\\\`username`\Dati applicazioni<br /><br /> I valori della `CompanyName`, `ProductName`, e `ProductVersion` derivano dall'assembly.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|Il percorso della cartella temporanea del sistema corrente.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|Se la stringa specificata dal <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> è non vuoto, quindi usarlo come percorso; in caso contrario, usare il percorso per i dati dell'applicazione di un utente.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina che data includere nei nomi dei file di log.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />. Indica la data da includere nei nomi dei file di log. Il valore predefinito è <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Assegnare uno dei <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> valori dell'enumerazione di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> proprietà per specificare che data includere nei nomi dei file di log.  
  
 Il formato della data è aaaa-MM-GG. Per altre informazioni sul formato del nome del file di log, vedere <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
|**Valore LogFileCreationSchedule**|**Restituisce una data in nome file di log**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|Includere la data corrente nel nome del file di log.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|Non includere la data nel nome del file di log.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|Includere il primo giorno della settimana corrente nel nome del file di log.<br /><br /> La settimana inizia domenica.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la dimensione massima consentita in byte del file di log.</summary>
        <value>
          <see langword="Long" />. Dimensione massima consentita, in byte, per il file di log. Il valore predefinito è 5000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa proprietà per assicurarsi che i file di log non raggiungano dimensioni eccessive.  
  
 Se il log di dimensioni del file (in byte) è maggiore del valore di questa proprietà, quindi quando il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe tenta di scrivere un messaggio nel log, il messaggio viene eliminato e l'errore è invisibile all'utente o un'eccezione viene generata in base al valore di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>proprietà. In caso contrario, il messaggio viene scritto nel log, se la quantità di spazio libero su disco (in byte) è minore di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Se questa proprietà è impostata su un valore minore di 1000.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la quantità di spazio libero su disco in byte, necessaria per la scrittura dei messaggi nel file di log.</summary>
        <value>
          <see langword="Long" />. Quantità di spazio libero su disco necessaria. Il valore predefinito è 10000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa proprietà per assicurarsi che i file di log non riempire completamente il disco.  
  
 Se la quantità di disco spazio (in byte) è minore del valore di questa proprietà, quindi quando il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> classe tenta di scrivere un messaggio nel log, il messaggio viene eliminato e l'errore è invisibile all'utente o un'eccezione viene generata in base al valore di < C2 > <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>  proprietà. In caso contrario, il messaggio viene scritto nel log, se le dimensioni del file di log (in byte) sono maggiore di <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Quando la proprietà è impostata su un valore minore di 0.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive dati di traccia nel file di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metodi non sono destinati a essere chiamato dal codice dell'applicazione. Questi metodi vengono chiamati dai membri del <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> per scrivere i dati di traccia nell'output.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome dell'origine di traccia richiamata da questo metodo.</param>
        <param name="eventType">Uno dei valori dell'enumerazione <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="data">I dati di traccia da creare.</param>
        <summary>Scrive informazioni di traccia, un oggetto dati e informazioni di evento nel file o nel flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo:  
  
1.  Formatta le informazioni dei dati e il contesto per l'output.  
  
2.  Crea un nuovo file di log, se necessario.  
  
3.  Scrive le informazioni nel file di log.  
  
 Per altre informazioni sulla creazione di nuovi file di log, vedere <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Nella tabella seguente elenca i campi di output in ordine che vengono visualizzati. I campi sono delimitati dalla stringa di cui il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> specifica proprietà e sono seguiti da un terminatore di riga.  
  
|**Campo**|**Condizione di output**|**Descrizione**|  
|---------------|--------------------------|---------------------|  
|`source`|Sempre|Valore di `name`.|  
|`severity`|Sempre|Il nome del valore di enumerazione `eventType`.|  
|`id`|Sempre|Rappresentazione di stringa di `id`.|  
|`message`|Sempre|Rappresentazione di stringa di `data`.|  
|`callStack`|Quando la <xref:System.Diagnostics.TraceOptions.Callstack> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.Callstack%2A> proprietà di `eventCache`.|  
|`CorrelationID`|Quando la <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> proprietà di `eventCache`.|  
|`DateTime`|Quando la <xref:System.Diagnostics.TraceOptions.DateTime> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.DateTime%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`ProcessID`|Quando la <xref:System.Diagnostics.TraceOptions.ProcessId> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`ThreadID`|Quando la <xref:System.Diagnostics.TraceOptions.ThreadId> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> proprietà di `eventCache`.|  
|`Timestamp`|Quando la <xref:System.Diagnostics.TraceOptions.Timestamp> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`HostName`|Quando la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> è di proprietà `True`.|Il nome del computer.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome dell'origine di traccia richiamata da questo metodo.</param>
        <param name="eventType">Uno dei valori dell'enumerazione <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="data">Matrice di oggetti dati da creare come dati.</param>
        <summary>Scrive informazioni di traccia, una matrice di oggetti dati e informazioni di evento nel flusso o nel file di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo:  
  
1.  Formatta le informazioni dei dati e il contesto per l'output,  
  
2.  Crea un nuovo file di log, se necessario,  
  
3.  Scrive le informazioni nel file di log.  
  
 Per altre informazioni sulla creazione di nuovi file di log, vedere <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Questa tabella elenca i campi di output in ordine che vengono visualizzati. I campi sono delimitati dalla stringa di cui il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> specifica proprietà e sono seguiti da un terminatore di riga.  
  
|**Campo**|**Condizione di output**|**Descrizione**|  
|---------------|--------------------------|---------------------|  
|`source`|Sempre|Valore di `name`.|  
|`severity`|Sempre|Il nome del valore di enumerazione `eventType`.|  
|`id`|Sempre|Rappresentazione di stringa di `id`.|  
|`message`|Sempre|La stringa composta da della rappresentazione di stringa di ogni elemento nella `data`, ciascuno separato da <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|  
|`callStack`|Quando la <xref:System.Diagnostics.TraceOptions.Callstack> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.Callstack%2A> proprietà di `eventCache`.|  
|`CorrelationID`|Quando la <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> proprietà di `eventCache`.|  
|`DateTime`|Quando la <xref:System.Diagnostics.TraceOptions.DateTime> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.DateTime%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`ProcessID`|Quando la <xref:System.Diagnostics.TraceOptions.ProcessId> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`ThreadID`|Quando la <xref:System.Diagnostics.TraceOptions.ThreadId> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> proprietà di `eventCache`.|  
|`Timestamp`|Quando la <xref:System.Diagnostics.TraceOptions.Timestamp> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`HostName`|Quando la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> è di proprietà `True`.|Il nome del computer.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive informazioni relative alle tracce e agli eventi nel file o flusso di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> metodi non sono destinati a essere chiamato dal codice dell'applicazione. Questi metodi vengono chiamati dai membri del <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource> per scrivere i dati di traccia nell'output.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome dell'origine di traccia richiamata da questo metodo.</param>
        <param name="eventType">Uno dei valori dell'enumerazione <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="message">Messaggio da scrivere.</param>
        <summary>Scrive informazioni di traccia, un messaggio e informazioni di evento nel flusso o nel file di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo:  
  
1.  Formatta le informazioni dei dati e il contesto per l'output.  
  
2.  Crea un nuovo file di log, se necessario.  
  
3.  Scrive le informazioni nel file di log.  
  
 Per altre informazioni sulla creazione di nuovi file di log, vedere <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Questa tabella elenca i campi di output nell'ordine in cui vengono visualizzati. I campi sono delimitati dalla stringa di cui il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> specifica proprietà e sono seguiti da un terminatore di riga.  
  
|**Campo**|**Condizione di output**|**Descrizione**|  
|---------------|--------------------------|---------------------|  
|`source`|Sempre|Valore di `name`.|  
|`severity`|Sempre|Il nome del valore di enumerazione `eventType`.|  
|`id`|Sempre|Rappresentazione di stringa di `id`.|  
|`message`|Sempre|Valore di `message`.|  
|`callStack`|Quando la <xref:System.Diagnostics.TraceOptions.Callstack> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.Callstack%2A> proprietà di `eventCache`.|  
|`CorrelationID`|Quando la <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> proprietà di `eventCache`.|  
|`DateTime`|Quando la <xref:System.Diagnostics.TraceOptions.DateTime> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.DateTime%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`ProcessID`|Quando la <xref:System.Diagnostics.TraceOptions.ProcessId> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`ThreadID`|Quando la <xref:System.Diagnostics.TraceOptions.ThreadId> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> proprietà di `eventCache`.|  
|`Timestamp`|Quando la <xref:System.Diagnostics.TraceOptions.Timestamp> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`HostName`|Quando la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> è di proprietà `True`.|Il nome del computer.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Oggetto <see cref="T:System.Diagnostics.TraceEventCache" /> contenente l'ID processo corrente, l'ID thread e le informazioni di traccia dello stack.</param>
        <param name="source">Nome dell'origine di traccia richiamata da questo metodo.</param>
        <param name="eventType">Uno dei valori dell'enumerazione <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificatore numerico per l'evento.</param>
        <param name="format">Stringa di formato che contiene zero o più elementi di formato, corrispondenti a oggetti nella matrice <c>args</c>.</param>
        <param name="args">Matrice <see langword="Object" /> che contiene zero o più oggetti da formattare.</param>
        <summary>Scrive informazioni di traccia, una matrice di oggetti formattata e informazioni di evento nel flusso o nel file di output.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo:  
  
1.  Formatta le informazioni dei dati e il contesto per l'output.  
  
2.  Crea un nuovo un nuovo file di log, se necessario.  
  
3.  Scrive le informazioni nel file di log.  
  
 Per altre informazioni sulla creazione di nuovi file di log, vedere <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Questa tabella elenca i campi di output nell'ordine in cui vengono visualizzati. I campi sono delimitati dalla stringa di cui il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> proprietà specifica, seguita da un terminatore di riga.  
  
|**Campo**|**Condizione di output**|**Descrizione**|  
|---------------|--------------------------|---------------------|  
|`source`|Sempre|Valore di `name`.|  
|`severity`|Sempre|Il nome del valore di enumerazione `eventType`.|  
|`id`|Sempre|Rappresentazione di stringa di `id`.|  
|`message`|Sempre|I dati in `args` formattati con il `format` stringa e usando la lingua inglese per le conversioni di stringa.|  
|`callStack`|Quando la <xref:System.Diagnostics.TraceOptions.Callstack> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.Callstack%2A> proprietà di `eventCache`.|  
|`CorrelationID`|Quando la <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> proprietà di `eventCache`.|  
|`DateTime`|Quando la <xref:System.Diagnostics.TraceOptions.DateTime> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.DateTime%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`ProcessID`|Quando la <xref:System.Diagnostics.TraceOptions.ProcessId> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`ThreadID`|Quando la <xref:System.Diagnostics.TraceOptions.ThreadId> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Il <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> proprietà di `eventCache`.|  
|`Timestamp`|Quando la <xref:System.Diagnostics.TraceOptions.Timestamp> flag è impostato <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> proprietà.|Rappresentazione di stringa del <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> proprietà di `eventCache`. La lingua inglese viene utilizzata per la conversione di stringa.|  
|`HostName`|Quando la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> è di proprietà `True`.|Il nome del computer.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />. Messaggio personalizzato da scrivere.</param>
        <summary>Scrive un messaggio testuale sul disco, senza ulteriori informazioni contestuali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> metodo scrive un messaggio specifico per il file di log senza informazioni di contesto aggiuntive.  
  
 Utilizzare uno del <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metodi per includere le informazioni di contesto nell'output del log.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />. Messaggio personalizzato da scrivere.</param>
        <summary>Scrive un messaggio testuale sul disco, seguito dal terminatore di riga corrente, senza ulteriori informazioni contestuali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> metodo scrive un messaggio specifico per il file di log senza informazioni di contesto aggiuntive.  
  
 Utilizzare uno del <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> metodi per includere le informazioni di contesto nell'output del log.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>