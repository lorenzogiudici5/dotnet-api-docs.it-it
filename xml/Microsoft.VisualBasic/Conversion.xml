<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8e0e14960480e0249f53d698cc92d75e8301b99" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659021" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="86d5e-101">Il modulo <see langword="Conversion" /> contiene procedure che consentono di eseguire operazioni varie operazioni di conversione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="86d5e-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-102">Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri libreria run-time per la conversione di numeri decimali in altre basi, numeri in stringhe, stringhe in numeri e i dati di un tipo a un altro.</span><span class="sxs-lookup"><span data-stu-id="86d5e-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-103">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="86d5e-104">Oggetto da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="86d5e-105">Tipo in cui convertire l'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-106">Converte un oggetto nel tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-107">Oggetto il cui tipo in fase di esecuzione è il tipo di destinazione richiesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-108">Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` al tipo specificato dal parametro di `TargetType` parametro.</span><span class="sxs-lookup"><span data-stu-id="86d5e-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="86d5e-109">Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.</span><span class="sxs-lookup"><span data-stu-id="86d5e-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="86d5e-110">Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso.</span><span class="sxs-lookup"><span data-stu-id="86d5e-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="86d5e-111">Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, il `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente, statica.</span><span class="sxs-lookup"><span data-stu-id="86d5e-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="86d5e-112">Se la conversione definita dall'utente, statica non riesce, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche.</span><span class="sxs-lookup"><span data-stu-id="86d5e-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="86d5e-113">Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, il `CTypeDynamic` metodo fornisce precedenza alle conversioni dinamiche sulle conversioni definite dall'utente, statiche.</span><span class="sxs-lookup"><span data-stu-id="86d5e-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-114">L'esempio seguente usa il `CTypeDynamic` metodo per convertire un oggetto dinamico in una stringa tramite la conversione definita dall'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="86d5e-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="86d5e-115">Tipo in cui convertire l'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="86d5e-116">Oggetto da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-117">Converte un oggetto nel tipo generico specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-118">Oggetto tipizzato in modo statico come tipo generico richiesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-119">Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` parametro nel tipo specificato dal tipo del parametro generico.</span><span class="sxs-lookup"><span data-stu-id="86d5e-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="86d5e-120">Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.</span><span class="sxs-lookup"><span data-stu-id="86d5e-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="86d5e-121">Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso.</span><span class="sxs-lookup"><span data-stu-id="86d5e-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="86d5e-122">Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, il `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente, statica.</span><span class="sxs-lookup"><span data-stu-id="86d5e-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="86d5e-123">Se la conversione definita dall'utente, statica non riesce, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche.</span><span class="sxs-lookup"><span data-stu-id="86d5e-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="86d5e-124">Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, il `CTypeDynamic` metodo fornisce precedenza alle conversioni dinamiche sulle conversioni definite dall'utente, statiche.</span><span class="sxs-lookup"><span data-stu-id="86d5e-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-125">L'esempio seguente usa il `CTypeDynamic` metodo per convertire un oggetto dinamico in una stringa tramite la conversione definita dall'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="86d5e-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="86d5e-126">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="86d5e-127">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-128">Messaggio di errore corrispondente all'errore di runtime più recente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-129">Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore di runtime più recente.</span><span class="sxs-lookup"><span data-stu-id="86d5e-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="86d5e-130">Il valore restituito del `ErrorToString` funzione corrisponde al `Description` proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="86d5e-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="86d5e-131">Se si è verificato alcun errore di run-time, `ErrorToString` restituisce una stringa di lunghezza zero ("").</span><span class="sxs-lookup"><span data-stu-id="86d5e-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="86d5e-132">In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita dal `Error` (funzione).</span><span class="sxs-lookup"><span data-stu-id="86d5e-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-133">Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-134">
            <paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="86d5e-135">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-135">Optional.</span>
          </span>
          <span data-ttu-id="86d5e-136">Qualsiasi numero di errore valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-137">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-138">Messaggio di errore corrispondente a un numero di errore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-139">Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore di runtime più recente.</span><span class="sxs-lookup"><span data-stu-id="86d5e-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="86d5e-140">Il valore restituito del `ErrorToString` funzione corrisponde al `Description` proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="86d5e-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="86d5e-141">Se `ErrorNumber` è un numero errore valido ma non è definito `ErrorToString` restituisce la stringa `"Application-defined or object-defined error."` se `ErrorNumber` non è valido, si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="86d5e-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="86d5e-142">Se `ErrorNumber` viene omesso, il messaggio corrispondente la più recente viene restituito l'errore di run-time.</span><span class="sxs-lookup"><span data-stu-id="86d5e-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="86d5e-143">Se si è verificato alcun errore di run-time o `ErrorNumber` è 0, `ErrorToString` restituisce una stringa di lunghezza zero ("").</span><span class="sxs-lookup"><span data-stu-id="86d5e-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="86d5e-144">In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita dal `Error` (funzione).</span><span class="sxs-lookup"><span data-stu-id="86d5e-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-145">Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-146">
            <paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="86d5e-147">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-148">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-148">Required.</span>
          </span>
          <span data-ttu-id="86d5e-149">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-150">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-151">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-152">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-153">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-154">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-155">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-156">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-157">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-158">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-159">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-160">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-161">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-162">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-163">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-164">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-165">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-166">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-167">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-168">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-168">Required.</span>
          </span>
          <span data-ttu-id="86d5e-169">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-170">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-171">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-172">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-173">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-174">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-175">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-176">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-177">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-178">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-179">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-180">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-181">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-182">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-183">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-184">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-185">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-186">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-187">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-188">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-188">Required.</span>
          </span>
          <span data-ttu-id="86d5e-189">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-190">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-191">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-192">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-193">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-194">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-195">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-196">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-197">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-198">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-199">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-200">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-201">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-202">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-203">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-204">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-205">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-206">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-207">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-208">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-208">Required.</span>
          </span>
          <span data-ttu-id="86d5e-209">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-210">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-211">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-212">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-213">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-214">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-215">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-216">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-217">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-218">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-219">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-220">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-221">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-222">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-223">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-224">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-225">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-226">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-227">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-228">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-228">Required.</span>
          </span>
          <span data-ttu-id="86d5e-229">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-230">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-231">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-232">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-233">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-234">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-235">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-236">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-237">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-238">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-239">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-240">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-241">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-242">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-243">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-244">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-245">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-246">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-247">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-248">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-248">Required.</span>
          </span>
          <span data-ttu-id="86d5e-249">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-250">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-251">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-252">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-253">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-254">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-255">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-256">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-257">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-258">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-259">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-260">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-261">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-262">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-263">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-264">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-265">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-266">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-267">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-268">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-268">Required.</span>
          </span>
          <span data-ttu-id="86d5e-269">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-270">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-271">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-272">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-273">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-274">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-275">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-276">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-277">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-278">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-279">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-280">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-281">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-282">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-283">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-284">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-285">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-286">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-287">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="86d5e-288">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-289">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-289">Required.</span>
          </span>
          <span data-ttu-id="86d5e-290">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-291">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-292">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-293">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-294">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-294">If `Number` is</span></span>|<span data-ttu-id="86d5e-295">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-296">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-296">Empty</span></span>|<span data-ttu-id="86d5e-297">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-297">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-298">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-298">Any numeric value</span></span>|<span data-ttu-id="86d5e-299">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-300">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-301">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-302">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-303">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-304">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-305">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-305">Required.</span>
          </span>
          <span data-ttu-id="86d5e-306">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-307">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-308">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-309">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-310">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-310">If `Number` is</span></span>|<span data-ttu-id="86d5e-311">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-312">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-312">Empty</span></span>|<span data-ttu-id="86d5e-313">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-313">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-314">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-314">Any numeric value</span></span>|<span data-ttu-id="86d5e-315">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-316">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-317">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-318">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-319">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-320">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-321">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-321">Required.</span>
          </span>
          <span data-ttu-id="86d5e-322">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-323">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-324">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-325">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-326">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-326">If `Number` is</span></span>|<span data-ttu-id="86d5e-327">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-328">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-328">Empty</span></span>|<span data-ttu-id="86d5e-329">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-329">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-330">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-330">Any numeric value</span></span>|<span data-ttu-id="86d5e-331">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-332">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-333">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-334">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-335">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-336">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-337">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-337">Required.</span>
          </span>
          <span data-ttu-id="86d5e-338">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-339">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-340">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-341">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-342">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-342">If `Number` is</span></span>|<span data-ttu-id="86d5e-343">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-344">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-344">Empty</span></span>|<span data-ttu-id="86d5e-345">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-345">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-346">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-346">Any numeric value</span></span>|<span data-ttu-id="86d5e-347">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-348">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-349">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-350">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-351">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-352">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-353">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-353">Required.</span>
          </span>
          <span data-ttu-id="86d5e-354">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-355">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-356">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-357">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-358">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-358">If `Number` is</span></span>|<span data-ttu-id="86d5e-359">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-360">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-360">Empty</span></span>|<span data-ttu-id="86d5e-361">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-361">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-362">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-362">Any numeric value</span></span>|<span data-ttu-id="86d5e-363">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-364">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-365">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-366">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-367">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-368">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-369">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-369">Required.</span>
          </span>
          <span data-ttu-id="86d5e-370">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-371">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-372">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-373">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-374">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-374">If `Number` is</span></span>|<span data-ttu-id="86d5e-375">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-376">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-376">Empty</span></span>|<span data-ttu-id="86d5e-377">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-377">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-378">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-378">Any numeric value</span></span>|<span data-ttu-id="86d5e-379">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-380">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-381">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-382">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-383">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-384">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-385">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-385">Required.</span>
          </span>
          <span data-ttu-id="86d5e-386">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-387">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-388">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-389">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-390">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-390">If `Number` is</span></span>|<span data-ttu-id="86d5e-391">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-392">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-392">Empty</span></span>|<span data-ttu-id="86d5e-393">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-393">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-394">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-394">Any numeric value</span></span>|<span data-ttu-id="86d5e-395">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-396">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-397">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-398">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-399">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-400">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-401">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-401">Required.</span>
          </span>
          <span data-ttu-id="86d5e-402">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-403">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-404">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-405">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-406">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-406">If `Number` is</span></span>|<span data-ttu-id="86d5e-407">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-408">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-408">Empty</span></span>|<span data-ttu-id="86d5e-409">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-409">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-410">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-410">Any numeric value</span></span>|<span data-ttu-id="86d5e-411">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-412">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-413">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-414">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-415">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-416">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-417">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-417">Required.</span>
          </span>
          <span data-ttu-id="86d5e-418">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-419">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-420">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-421">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-422">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="86d5e-422">If `Number` is</span></span>|<span data-ttu-id="86d5e-423">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-424">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-424">Empty</span></span>|<span data-ttu-id="86d5e-425">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-425">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-426">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="86d5e-426">Any numeric value</span></span>|<span data-ttu-id="86d5e-427">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="86d5e-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="86d5e-428">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="86d5e-429">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="86d5e-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-430">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-431">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-432">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="86d5e-433">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-434">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-434">Required.</span>
          </span>
          <span data-ttu-id="86d5e-435">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-436">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-437">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-438">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-439">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-440">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-441">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-442">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-443">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-444">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-445">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-446">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-447">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-448">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-449">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-450">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-451">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-452">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-453">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-454">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-454">Required.</span>
          </span>
          <span data-ttu-id="86d5e-455">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-456">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-457">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-458">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-459">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-460">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-461">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-462">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-463">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-464">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-465">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-466">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-467">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-468">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-469">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-470">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-471">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-472">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-473">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-474">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-474">Required.</span>
          </span>
          <span data-ttu-id="86d5e-475">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-476">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-477">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-478">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-479">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-480">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-481">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-482">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-483">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-484">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-485">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-486">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-487">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-488">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-489">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-490">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-491">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-492">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-493">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-494">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-494">Required.</span>
          </span>
          <span data-ttu-id="86d5e-495">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-496">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-497">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-498">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-499">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-500">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-501">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-502">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-503">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-504">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-505">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-506">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-507">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-508">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-509">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-510">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-511">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-512">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-513">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-514">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-514">Required.</span>
          </span>
          <span data-ttu-id="86d5e-515">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-516">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-517">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-518">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-519">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-520">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-521">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-522">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-523">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-524">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-525">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-526">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-527">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-528">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-529">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-530">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-531">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-532">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-533">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-534">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-534">Required.</span>
          </span>
          <span data-ttu-id="86d5e-535">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-536">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-537">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-538">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-539">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-540">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-541">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-542">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-543">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-544">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-545">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-546">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-547">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-548">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-549">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-550">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-551">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-552">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-553">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-554">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-554">Required.</span>
          </span>
          <span data-ttu-id="86d5e-555">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="86d5e-556">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-557">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-558">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-559">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria del `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="86d5e-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="86d5e-560">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="86d5e-561">Ad esempio `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="86d5e-562">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="86d5e-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-563">Questo esempio viene illustrato il modo in cui `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="86d5e-564">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="86d5e-565">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="86d5e-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="86d5e-566">È possibile usare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="86d5e-567">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="86d5e-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="86d5e-568">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="86d5e-569">È possibile usare il `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="86d5e-570">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="86d5e-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="86d5e-571">Per ulteriori informazioni sul `CInt`, vedere [le funzioni di conversione di tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="86d5e-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-572">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-573">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="86d5e-574">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-575">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-575">Required.</span>
          </span>
          <span data-ttu-id="86d5e-576">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-577">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-578">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-579">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-580">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-580">If Number is</span></span>|<span data-ttu-id="86d5e-581">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-582">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-582">Empty</span></span>|<span data-ttu-id="86d5e-583">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-583">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-584">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-584">Any other number</span></span>|<span data-ttu-id="86d5e-585">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-586">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-587">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-588">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-589">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-590">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-591">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-591">Required.</span>
          </span>
          <span data-ttu-id="86d5e-592">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-593">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-594">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-595">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-596">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-596">If Number is</span></span>|<span data-ttu-id="86d5e-597">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-598">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-598">Empty</span></span>|<span data-ttu-id="86d5e-599">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-599">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-600">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-600">Any other number</span></span>|<span data-ttu-id="86d5e-601">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-602">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-603">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-604">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-605">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-606">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-607">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-607">Required.</span>
          </span>
          <span data-ttu-id="86d5e-608">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-609">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-610">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-611">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-612">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-612">If Number is</span></span>|<span data-ttu-id="86d5e-613">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-614">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-614">Empty</span></span>|<span data-ttu-id="86d5e-615">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-615">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-616">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-616">Any other number</span></span>|<span data-ttu-id="86d5e-617">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-618">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-619">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-620">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-621">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-622">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-623">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-623">Required.</span>
          </span>
          <span data-ttu-id="86d5e-624">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-625">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-626">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-627">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-628">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-628">If Number is</span></span>|<span data-ttu-id="86d5e-629">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-630">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-630">Empty</span></span>|<span data-ttu-id="86d5e-631">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-631">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-632">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-632">Any other number</span></span>|<span data-ttu-id="86d5e-633">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-634">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-635">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-636">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-637">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-638">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-639">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-639">Required.</span>
          </span>
          <span data-ttu-id="86d5e-640">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-641">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-642">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-643">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-644">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-644">If Number is</span></span>|<span data-ttu-id="86d5e-645">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-646">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-646">Empty</span></span>|<span data-ttu-id="86d5e-647">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-647">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-648">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-648">Any other number</span></span>|<span data-ttu-id="86d5e-649">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-650">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-651">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-652">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-653">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-654">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-655">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-655">Required.</span>
          </span>
          <span data-ttu-id="86d5e-656">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-657">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-658">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-659">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-660">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-660">If Number is</span></span>|<span data-ttu-id="86d5e-661">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-662">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-662">Empty</span></span>|<span data-ttu-id="86d5e-663">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-663">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-664">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-664">Any other number</span></span>|<span data-ttu-id="86d5e-665">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-666">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-667">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-668">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-669">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-670">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-671">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-671">Required.</span>
          </span>
          <span data-ttu-id="86d5e-672">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-673">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-674">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-675">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-676">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-676">If Number is</span></span>|<span data-ttu-id="86d5e-677">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-678">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-678">Empty</span></span>|<span data-ttu-id="86d5e-679">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-679">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-680">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-680">Any other number</span></span>|<span data-ttu-id="86d5e-681">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-682">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-683">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-684">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-685">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-686">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-687">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-687">Required.</span>
          </span>
          <span data-ttu-id="86d5e-688">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-689">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-690">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-691">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-692">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-692">If Number is</span></span>|<span data-ttu-id="86d5e-693">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-694">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-694">Empty</span></span>|<span data-ttu-id="86d5e-695">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-695">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-696">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-696">Any other number</span></span>|<span data-ttu-id="86d5e-697">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-698">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-699">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-700">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-701">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-702">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-703">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-703">Required.</span>
          </span>
          <span data-ttu-id="86d5e-704">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-705">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-706">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-707">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="86d5e-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="86d5e-708">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="86d5e-708">If Number is</span></span>|<span data-ttu-id="86d5e-709">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="86d5e-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="86d5e-710">Empty</span><span class="sxs-lookup"><span data-stu-id="86d5e-710">Empty</span></span>|<span data-ttu-id="86d5e-711">zero (0)</span><span class="sxs-lookup"><span data-stu-id="86d5e-711">Zero (0)</span></span>|  
|<span data-ttu-id="86d5e-712">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="86d5e-712">Any other number</span></span>|<span data-ttu-id="86d5e-713">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="86d5e-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="86d5e-714">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="86d5e-715">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="86d5e-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-716">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-717">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-718">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="86d5e-719">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-719">Required.</span>
          </span>
          <span data-ttu-id="86d5e-720">Oggetto <see langword="Object" /> contenente qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-721">Restituisce una rappresentazione <see langword="String" /> di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-722">Restituisce una rappresentazione <see langword="String" /> di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-723">Quando i numeri vengono convertiti in stringhe, uno spazio iniziale è sempre riservato per il segno di `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="86d5e-724">Se `Number` è positivo, la stringa restituita conterrà uno spazio iniziale e il segno di addizione è implicito.</span><span class="sxs-lookup"><span data-stu-id="86d5e-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="86d5e-725">Un numero negativo includerà il segno meno (-) e senza spazi iniziali.</span><span class="sxs-lookup"><span data-stu-id="86d5e-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="86d5e-726">Utilizzare il `Format` funzione per convertire i valori numerici da formattare come date, ore o valuta o altri formati definiti dall'utente.</span><span class="sxs-lookup"><span data-stu-id="86d5e-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="86d5e-727">A differenza di `Str` funzione, il `Format` funzione non include uno spazio iniziale per il segno di `Number`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86d5e-728">Il `Str` funzione riconosce solo il punto (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="86d5e-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="86d5e-729">Se si utilizzano separatori decimali (ad esempio, nelle applicazioni internazionali), utilizzare il `CStr` o `Format` funzioni per convertire un numero in una stringa.</span><span class="sxs-lookup"><span data-stu-id="86d5e-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="86d5e-730">Per ottenere la rappresentazione di stringa di un numero in una lingua specifica, usare il numero `ToString(IFormatProvider)` metodo.</span><span class="sxs-lookup"><span data-stu-id="86d5e-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="86d5e-731">Ad esempio, utilizzare <xref:System.Double.ToString%2A> quando si converte un valore di tipo `Double` in una stringa.</span><span class="sxs-lookup"><span data-stu-id="86d5e-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-732">Questo esempio viene utilizzata la `Str` funzione per restituire un `String` rappresentazione di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="86d5e-733">Quando un numero positivo viene convertito in una stringa, uno spazio iniziale è sempre riservato per il segno.</span><span class="sxs-lookup"><span data-stu-id="86d5e-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="86d5e-734">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="86d5e-735">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="86d5e-736">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="86d5e-737">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-737">Required.</span>
          </span>
          <span data-ttu-id="86d5e-738">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="86d5e-739">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-740">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-741">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-742">Il `Val` funzione interrompe la lettura della stringa con il primo carattere non riconosciuto come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="86d5e-743">I simboli e caratteri che sono spesso considerati parti di valori numerici, ad esempio segni di dollaro e virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="86d5e-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="86d5e-744">Tuttavia, la funzione riconosce i prefissi di radice `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="86d5e-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="86d5e-745">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="86d5e-746">La chiamata seguente restituisce il valore 1615198.</span><span class="sxs-lookup"><span data-stu-id="86d5e-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="86d5e-747">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="86d5e-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="86d5e-748">Il `Val` funzione riconosce solo il punto (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="86d5e-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="86d5e-749">Quando vengono utilizzati i separatori decimali diversi, come le applicazioni interne, utilizzare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="86d5e-750">Per convertire la rappresentazione di stringa di un numero in una lingua specifica in un valore numerico, utilizzare il tipo numerico `Parse(String, IFormatProvider)` metodo.</span><span class="sxs-lookup"><span data-stu-id="86d5e-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="86d5e-751">Ad esempio, utilizzare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86d5e-752">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati numerici non comune.</span><span class="sxs-lookup"><span data-stu-id="86d5e-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="86d5e-753">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="86d5e-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="86d5e-754">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se non fosse contenuto in una stringa.</span><span class="sxs-lookup"><span data-stu-id="86d5e-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-755">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="86d5e-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="86d5e-756">`Val` Interrompe la conversione con il primo carattere che non può essere interpretato come una cifra numerica, modificatore numerico, punteggiatura numerica o lo spazio vuoto.</span><span class="sxs-lookup"><span data-stu-id="86d5e-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="86d5e-757">
            <paramref name="InputStr" /> è troppo grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-758">
            <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="86d5e-759">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-759">Required.</span>
          </span>
          <span data-ttu-id="86d5e-760">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="86d5e-761">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-762">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-763">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-764">Il `Val` funzione interrompe la lettura della stringa con il primo carattere non riconosciuto come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="86d5e-765">I simboli e caratteri che sono spesso considerati parti di valori numerici, ad esempio segni di dollaro e virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="86d5e-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="86d5e-766">Tuttavia, la funzione riconosce i prefissi di radice `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="86d5e-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="86d5e-767">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="86d5e-768">La chiamata seguente restituisce il valore 1234123.</span><span class="sxs-lookup"><span data-stu-id="86d5e-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="86d5e-769">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="86d5e-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="86d5e-770">Il `Val` funzione riconosce solo il punto (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="86d5e-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="86d5e-771">Quando si utilizzano altri separatori decimali, come le applicazioni interne, utilizzare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="86d5e-772">Per convertire la rappresentazione di stringa di un numero in una lingua specifica in un valore numerico, utilizzare il tipo numerico `Parse(String, IFormatProvider)` metodo.</span><span class="sxs-lookup"><span data-stu-id="86d5e-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="86d5e-773">Ad esempio, utilizzare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86d5e-774">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati numerici non comune.</span><span class="sxs-lookup"><span data-stu-id="86d5e-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="86d5e-775">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="86d5e-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="86d5e-776">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se il conflitto non inclusi nelle stringhe.</span><span class="sxs-lookup"><span data-stu-id="86d5e-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-777">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="86d5e-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="86d5e-778">`Val` Interrompe la conversione con il primo carattere che non può essere interpretato come una cifra numerica, modificatore numerico, punteggiatura numerica o lo spazio vuoto.</span><span class="sxs-lookup"><span data-stu-id="86d5e-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="86d5e-779">
            <paramref name="InputStr" /> è troppo grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-780">
            <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="86d5e-781">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-781">Required.</span>
          </span>
          <span data-ttu-id="86d5e-782">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="86d5e-783">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="86d5e-784">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="86d5e-785">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86d5e-786">Il `Val` funzione interrompe la lettura della stringa con il primo carattere non riconosciuto come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="86d5e-787">I simboli e caratteri che sono spesso considerati parti di valori numerici, ad esempio segni di dollaro e virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="86d5e-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="86d5e-788">Tuttavia, la funzione riconosce i prefissi di radice `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="86d5e-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="86d5e-789">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="86d5e-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="86d5e-790">La chiamata seguente restituisce il valore 1234123.</span><span class="sxs-lookup"><span data-stu-id="86d5e-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="86d5e-791">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="86d5e-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="86d5e-792">Il `Val` funzione riconosce solo il punto (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="86d5e-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="86d5e-793">Quando si utilizzano altri separatori decimali, come le applicazioni interne, utilizzare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="86d5e-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="86d5e-794">Per convertire la rappresentazione di stringa di un numero in una lingua specifica in un valore numerico, utilizzare il tipo numerico `Parse(String, IFormatProvider)` metodo.</span><span class="sxs-lookup"><span data-stu-id="86d5e-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="86d5e-795">Ad esempio, utilizzare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="86d5e-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="86d5e-796">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati numerici non comune.</span><span class="sxs-lookup"><span data-stu-id="86d5e-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="86d5e-797">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="86d5e-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="86d5e-798">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se il conflitto non inclusi nelle stringhe.</span><span class="sxs-lookup"><span data-stu-id="86d5e-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="86d5e-799">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="86d5e-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="86d5e-800">`Val` Interrompe la conversione con il primo carattere che non può essere interpretato come una cifra numerica, modificatore numerico, punteggiatura numerica o lo spazio vuoto.</span><span class="sxs-lookup"><span data-stu-id="86d5e-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="86d5e-801">
            <paramref name="InputStr" /> è troppo grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="86d5e-802">
            <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="86d5e-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>