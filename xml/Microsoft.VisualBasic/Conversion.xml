<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="159eb-101">Il modulo <see langword="Conversion" /> contiene procedure che consentono di eseguire operazioni varie operazioni di conversione.</span><span class="sxs-lookup"><span data-stu-id="159eb-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-102">Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri di libreria run-time per la conversione di numeri decimali in altre basi, numeri in stringhe, stringhe in numeri e dati di un tipo in un altro.</span><span class="sxs-lookup"><span data-stu-id="159eb-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-103">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="159eb-104">Oggetto da convertire.</span><span class="sxs-lookup"><span data-stu-id="159eb-104">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="159eb-105">Tipo in cui convertire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="159eb-105">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="159eb-106">Converte un oggetto nel tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-106">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="159eb-107">Oggetto il cui tipo in fase di esecuzione è il tipo di destinazione richiesto.</span><span class="sxs-lookup"><span data-stu-id="159eb-107">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-108">Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` tipo specificato dal parametro di `TargetType` parametro.</span><span class="sxs-lookup"><span data-stu-id="159eb-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="159eb-109">Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.</span><span class="sxs-lookup"><span data-stu-id="159eb-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="159eb-110">Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso.</span><span class="sxs-lookup"><span data-stu-id="159eb-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="159eb-111">Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente, statica.</span><span class="sxs-lookup"><span data-stu-id="159eb-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="159eb-112">Se la conversione definita dall'utente, statica non riesce, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche.</span><span class="sxs-lookup"><span data-stu-id="159eb-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="159eb-113">Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metodo fornisce precedenza alle conversioni dinamiche sulle conversioni definite dall'utente, statiche.</span><span class="sxs-lookup"><span data-stu-id="159eb-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-114">L'esempio seguente usa il `CTypeDynamic` per convertire un oggetto dinamico a una stringa tramite la conversione definita dall'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="159eb-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="159eb-115">Tipo in cui convertire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="159eb-115">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="159eb-116">Oggetto da convertire.</span><span class="sxs-lookup"><span data-stu-id="159eb-116">The object to convert.</span></span></param>
        <summary><span data-ttu-id="159eb-117">Converte un oggetto nel tipo generico specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-117">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="159eb-118">Oggetto tipizzato in modo statico come tipo generico richiesto.</span><span class="sxs-lookup"><span data-stu-id="159eb-118">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-119">Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` parametro nel tipo specificato dal tipo del parametro generico.</span><span class="sxs-lookup"><span data-stu-id="159eb-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="159eb-120">Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.</span><span class="sxs-lookup"><span data-stu-id="159eb-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="159eb-121">Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso.</span><span class="sxs-lookup"><span data-stu-id="159eb-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="159eb-122">Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente, statica.</span><span class="sxs-lookup"><span data-stu-id="159eb-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="159eb-123">Se la conversione definita dall'utente, statica non riesce, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche.</span><span class="sxs-lookup"><span data-stu-id="159eb-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="159eb-124">Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` metodo fornisce precedenza alle conversioni dinamiche sulle conversioni definite dall'utente, statiche.</span><span class="sxs-lookup"><span data-stu-id="159eb-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-125">L'esempio seguente usa il `CTypeDynamic` per convertire un oggetto dinamico a una stringa tramite la conversione definita dall'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="159eb-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="159eb-126">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span><span class="sxs-lookup"><span data-stu-id="159eb-126">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="159eb-127">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span><span class="sxs-lookup"><span data-stu-id="159eb-127">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="159eb-128">Messaggio di errore corrispondente all'errore di runtime più recente.</span><span class="sxs-lookup"><span data-stu-id="159eb-128">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-129">Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore in fase di esecuzione più recente.</span><span class="sxs-lookup"><span data-stu-id="159eb-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="159eb-130">Il valore restituito del `ErrorToString` corrisponde all'impostazione di `Description` proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="159eb-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="159eb-131">Se non si è verificato alcun errore di run-time, `ErrorToString` restituisce una stringa di lunghezza zero ("").</span><span class="sxs-lookup"><span data-stu-id="159eb-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="159eb-132">In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita per il `Error` (funzione).</span><span class="sxs-lookup"><span data-stu-id="159eb-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-133">Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-134"><paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</span><span class="sxs-lookup"><span data-stu-id="159eb-134"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="159eb-135">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="159eb-135">Optional.</span></span> <span data-ttu-id="159eb-136">Qualsiasi numero di errore valido.</span><span class="sxs-lookup"><span data-stu-id="159eb-136">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="159eb-137">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span><span class="sxs-lookup"><span data-stu-id="159eb-137">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="159eb-138">Messaggio di errore corrispondente a un numero di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-138">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-139">Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore in fase di esecuzione più recente.</span><span class="sxs-lookup"><span data-stu-id="159eb-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="159eb-140">Il valore restituito del `ErrorToString` corrisponde all'impostazione di `Description` proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="159eb-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="159eb-141">Se `ErrorNumber` è un numero errore valido ma non è definito, `ErrorToString` restituisce la stringa `"Application-defined or object-defined error."` se `ErrorNumber` non è valido, si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="159eb-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="159eb-142">Se `ErrorNumber` viene omesso, il messaggio corrispondente al più recente viene restituito l'errore di run-time.</span><span class="sxs-lookup"><span data-stu-id="159eb-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="159eb-143">Se non si è verificato alcun errore in fase di esecuzione o `ErrorNumber` è 0, `ErrorToString` restituisce una stringa di lunghezza zero ("").</span><span class="sxs-lookup"><span data-stu-id="159eb-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="159eb-144">In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita per il `Error` (funzione).</span><span class="sxs-lookup"><span data-stu-id="159eb-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-145">Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-146"><paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</span><span class="sxs-lookup"><span data-stu-id="159eb-146"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="159eb-147">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-147">Return the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-148">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-148">Required.</span></span> <span data-ttu-id="159eb-149">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-149">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-150">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-151">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-151">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-152">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-152">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-153">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-154">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-155">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-156">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-157">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-158">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-159">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-160">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-161">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-162">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-163">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-164">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-165">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-166">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-166">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-167">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-167">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-168">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-168">Required.</span></span> <span data-ttu-id="159eb-169">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-169">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-170">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-171">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-171">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-172">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-172">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-173">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-174">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-175">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-176">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-177">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-178">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-179">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-180">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-181">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-182">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-183">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-184">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-185">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-186">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-186">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-187">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-187">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-188">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-188">Required.</span></span> <span data-ttu-id="159eb-189">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-189">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-190">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-191">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-191">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-192">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-192">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-193">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-194">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-195">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-196">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-197">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-198">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-199">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-200">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-201">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-202">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-203">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-204">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-205">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-206">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-206">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-207">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-207">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-208">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-208">Required.</span></span> <span data-ttu-id="159eb-209">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-209">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-210">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-211">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-211">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-212">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-212">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-213">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-214">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-215">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-216">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-217">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-218">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-219">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-220">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-221">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-222">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-223">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-224">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-225">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-226">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-226">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-227">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-227">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-228">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-228">Required.</span></span> <span data-ttu-id="159eb-229">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-229">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-230">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-231">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-231">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-232">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-232">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-233">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-234">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-235">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-236">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-237">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-238">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-239">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-240">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-241">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-242">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-243">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-244">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-245">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-246">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-246">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-247">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-247">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-248">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-248">Required.</span></span> <span data-ttu-id="159eb-249">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-249">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-250">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-251">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-251">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-252">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-252">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-253">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-254">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-255">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-256">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-257">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-258">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-259">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-260">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-261">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-262">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-263">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-264">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-265">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-266">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-266">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-267">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-267">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-268">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-268">Required.</span></span> <span data-ttu-id="159eb-269">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-269">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-270">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-271">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-271">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-272">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-272">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-273">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-274">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-275">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-276">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-277">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-278">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-279">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-280">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-281">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-282">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-283">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-284">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-285">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-286">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-286">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-287">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-287">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="159eb-288">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-288">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-289">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-289">Required.</span></span> <span data-ttu-id="159eb-290">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-290">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-291">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-291">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-292">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-292">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-293">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-294">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-294">If `Number` is</span></span>|<span data-ttu-id="159eb-295">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-296">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-296">Empty</span></span>|<span data-ttu-id="159eb-297">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-297">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-298">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-298">Any numeric value</span></span>|<span data-ttu-id="159eb-299">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-300">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-301">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-302">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-303"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-303"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-304"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-304"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-305">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-305">Required.</span></span> <span data-ttu-id="159eb-306">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-306">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-307">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-307">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-308">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-308">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-309">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-310">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-310">If `Number` is</span></span>|<span data-ttu-id="159eb-311">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-312">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-312">Empty</span></span>|<span data-ttu-id="159eb-313">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-313">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-314">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-314">Any numeric value</span></span>|<span data-ttu-id="159eb-315">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-316">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-317">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-318">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-319"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-319"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-320"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-320"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-321">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-321">Required.</span></span> <span data-ttu-id="159eb-322">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-322">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-323">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-323">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-324">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-324">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-325">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-326">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-326">If `Number` is</span></span>|<span data-ttu-id="159eb-327">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-328">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-328">Empty</span></span>|<span data-ttu-id="159eb-329">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-329">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-330">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-330">Any numeric value</span></span>|<span data-ttu-id="159eb-331">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-332">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-333">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-334">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-335"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-335"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-336"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-336"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-337">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-337">Required.</span></span> <span data-ttu-id="159eb-338">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-338">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-339">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-339">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-340">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-340">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-341">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-342">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-342">If `Number` is</span></span>|<span data-ttu-id="159eb-343">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-344">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-344">Empty</span></span>|<span data-ttu-id="159eb-345">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-345">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-346">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-346">Any numeric value</span></span>|<span data-ttu-id="159eb-347">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-348">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-349">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-350">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-351"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-351"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-352"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-352"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-353">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-353">Required.</span></span> <span data-ttu-id="159eb-354">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-354">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-355">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-355">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-356">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-356">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-357">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-358">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-358">If `Number` is</span></span>|<span data-ttu-id="159eb-359">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-360">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-360">Empty</span></span>|<span data-ttu-id="159eb-361">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-361">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-362">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-362">Any numeric value</span></span>|<span data-ttu-id="159eb-363">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-364">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-365">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-366">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-367"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-367"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-368"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-368"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-369">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-369">Required.</span></span> <span data-ttu-id="159eb-370">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-370">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-371">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-371">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-372">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-372">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-373">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-374">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-374">If `Number` is</span></span>|<span data-ttu-id="159eb-375">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-376">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-376">Empty</span></span>|<span data-ttu-id="159eb-377">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-377">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-378">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-378">Any numeric value</span></span>|<span data-ttu-id="159eb-379">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-380">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-381">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-382">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-383"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-383"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-384"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-384"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-385">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-385">Required.</span></span> <span data-ttu-id="159eb-386">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-386">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-387">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-387">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-388">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-388">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-389">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-390">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-390">If `Number` is</span></span>|<span data-ttu-id="159eb-391">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-392">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-392">Empty</span></span>|<span data-ttu-id="159eb-393">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-393">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-394">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-394">Any numeric value</span></span>|<span data-ttu-id="159eb-395">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-396">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-397">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-398">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-399"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-399"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-400"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-400"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-401">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-401">Required.</span></span> <span data-ttu-id="159eb-402">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-402">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-403">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-403">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-404">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-404">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-405">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-406">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-406">If `Number` is</span></span>|<span data-ttu-id="159eb-407">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-408">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-408">Empty</span></span>|<span data-ttu-id="159eb-409">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-409">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-410">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-410">Any numeric value</span></span>|<span data-ttu-id="159eb-411">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-412">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-413">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-414">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-415"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-415"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-416"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-416"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-417">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-417">Required.</span></span> <span data-ttu-id="159eb-418">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-418">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-419">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-419">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-420">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-420">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-421">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-422">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="159eb-422">If `Number` is</span></span>|<span data-ttu-id="159eb-423">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-424">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-424">Empty</span></span>|<span data-ttu-id="159eb-425">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-425">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-426">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="159eb-426">Any numeric value</span></span>|<span data-ttu-id="159eb-427">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="159eb-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="159eb-428">È possibile rappresentare numeri esadecimali direttamente prima dei numeri nell'intervallo corretto `&H`.</span><span class="sxs-lookup"><span data-stu-id="159eb-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="159eb-429">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="159eb-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-430">Questo esempio viene utilizzato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-431"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-431"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-432"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-432"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="159eb-433">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-433">Return the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-434">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-434">Required.</span></span> <span data-ttu-id="159eb-435">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-435">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-436">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-437">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-437">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-438">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-438">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-439">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-440">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-441">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-442">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-443">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-444">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-445">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-446">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-447">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-448">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-449">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-450">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-451">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-452">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-452">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-453">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-453">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-454">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-454">Required.</span></span> <span data-ttu-id="159eb-455">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-455">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-456">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-457">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-457">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-458">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-458">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-459">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-460">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-461">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-462">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-463">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-464">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-465">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-466">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-467">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-468">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-469">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-470">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-471">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-472">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-472">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-473">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-473">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-474">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-474">Required.</span></span> <span data-ttu-id="159eb-475">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-475">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-476">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-477">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-477">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-478">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-478">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-479">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-480">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-481">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-482">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-483">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-484">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-485">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-486">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-487">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-488">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-489">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-490">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-491">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-492">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-492">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-493">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-493">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-494">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-494">Required.</span></span> <span data-ttu-id="159eb-495">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-495">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-496">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-497">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-497">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-498">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-498">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-499">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-500">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-501">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-502">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-503">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-504">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-505">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-506">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-507">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-508">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-509">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-510">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-511">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-512">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-512">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-513">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-513">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-514">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-514">Required.</span></span> <span data-ttu-id="159eb-515">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-515">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-516">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-517">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-517">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-518">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-518">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-519">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-520">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-521">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-522">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-523">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-524">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-525">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-526">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-527">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-528">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-529">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-530">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-531">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-532">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-532">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-533">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-533">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-534">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-534">Required.</span></span> <span data-ttu-id="159eb-535">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-535">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-536">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-537">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-537">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-538">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-538">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-539">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-540">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-541">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-542">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-543">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-544">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-545">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-546">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-547">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-548">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-549">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-550">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-551">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-552">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-552">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-553">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-553">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-554">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-554">Required.</span></span> <span data-ttu-id="159eb-555">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-555">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="159eb-556">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="159eb-557">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-557">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-558">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-558">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-559">Sia il `Int` e `Fix` funzioni rimuovono la parte frazionaria `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="159eb-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="159eb-560">La differenza tra `Int` e `Fix` funzioni è che se `Number` è negativo, `Int` restituisce il primo intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="159eb-561">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="159eb-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="159eb-562">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="159eb-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-563">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="159eb-564">Se l'argomento numero negativo, il `Int` funzione restituisce il primo intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="159eb-565">Nell'esempio seguente è necessario specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite in `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="159eb-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="159eb-566">È possibile utilizzare il `CInt` funzione per convertire in modo esplicito altri tipi di dati di tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="159eb-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="159eb-567">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché troncare la parte frazionaria dei numeri.</span><span class="sxs-lookup"><span data-stu-id="159eb-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="159eb-568">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="159eb-569">È possibile utilizzare il `CInt` funzione sul risultato di una chiamata a `Fix` o `Int` per eseguire la conversione esplicita a valore integer senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="159eb-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="159eb-570">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="159eb-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="159eb-571">Per ulteriori informazioni su `CInt`, vedere [funzioni di conversione del tipo](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="159eb-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="159eb-572">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-572">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="159eb-573">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-573">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="159eb-574">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-574">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-575">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-575">Required.</span></span> <span data-ttu-id="159eb-576">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-576">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-577">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-577">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-578">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-578">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-579">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-580">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-580">If Number is</span></span>|<span data-ttu-id="159eb-581">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-582">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-582">Empty</span></span>|<span data-ttu-id="159eb-583">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-583">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-584">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-584">Any other number</span></span>|<span data-ttu-id="159eb-585">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-586">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-587">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-588">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-589"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-589"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-590"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-590"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-591">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-591">Required.</span></span> <span data-ttu-id="159eb-592">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-592">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-593">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-593">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-594">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-594">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-595">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-596">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-596">If Number is</span></span>|<span data-ttu-id="159eb-597">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-598">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-598">Empty</span></span>|<span data-ttu-id="159eb-599">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-599">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-600">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-600">Any other number</span></span>|<span data-ttu-id="159eb-601">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-602">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-603">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-604">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-605"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-605"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-606"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-606"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-607">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-607">Required.</span></span> <span data-ttu-id="159eb-608">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-608">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-609">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-609">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-610">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-610">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-611">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-612">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-612">If Number is</span></span>|<span data-ttu-id="159eb-613">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-614">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-614">Empty</span></span>|<span data-ttu-id="159eb-615">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-615">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-616">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-616">Any other number</span></span>|<span data-ttu-id="159eb-617">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-618">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-619">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-620">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-621"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-621"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-622"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-622"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-623">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-623">Required.</span></span> <span data-ttu-id="159eb-624">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-624">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-625">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-625">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-626">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-626">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-627">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-628">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-628">If Number is</span></span>|<span data-ttu-id="159eb-629">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-630">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-630">Empty</span></span>|<span data-ttu-id="159eb-631">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-631">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-632">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-632">Any other number</span></span>|<span data-ttu-id="159eb-633">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-634">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-635">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-636">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-637"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-637"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-638"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-638"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-639">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-639">Required.</span></span> <span data-ttu-id="159eb-640">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-640">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-641">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-641">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-642">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-642">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-643">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-644">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-644">If Number is</span></span>|<span data-ttu-id="159eb-645">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-646">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-646">Empty</span></span>|<span data-ttu-id="159eb-647">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-647">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-648">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-648">Any other number</span></span>|<span data-ttu-id="159eb-649">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-650">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-651">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-652">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-653"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-653"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-654"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-654"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-655">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-655">Required.</span></span> <span data-ttu-id="159eb-656">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-656">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-657">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-657">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-658">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-658">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-659">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-660">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-660">If Number is</span></span>|<span data-ttu-id="159eb-661">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-662">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-662">Empty</span></span>|<span data-ttu-id="159eb-663">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-663">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-664">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-664">Any other number</span></span>|<span data-ttu-id="159eb-665">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-666">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-667">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-668">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-669"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-669"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-670"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-670"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-671">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-671">Required.</span></span> <span data-ttu-id="159eb-672">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-672">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-673">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-673">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-674">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-674">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-675">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-676">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-676">If Number is</span></span>|<span data-ttu-id="159eb-677">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-678">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-678">Empty</span></span>|<span data-ttu-id="159eb-679">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-679">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-680">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-680">Any other number</span></span>|<span data-ttu-id="159eb-681">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-682">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-683">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-684">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-685"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-685"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-686"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-686"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-687">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-687">Required.</span></span> <span data-ttu-id="159eb-688">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-688">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-689">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-689">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-690">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-690">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-691">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-692">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-692">If Number is</span></span>|<span data-ttu-id="159eb-693">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-694">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-694">Empty</span></span>|<span data-ttu-id="159eb-695">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-695">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-696">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-696">Any other number</span></span>|<span data-ttu-id="159eb-697">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-698">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-699">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-700">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-701"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-701"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-702"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-702"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-703">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-703">Required.</span></span> <span data-ttu-id="159eb-704">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-704">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="159eb-705">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-705">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-706">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-706">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-707">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="159eb-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="159eb-708">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="159eb-708">If Number is</span></span>|<span data-ttu-id="159eb-709">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="159eb-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="159eb-710">Empty</span><span class="sxs-lookup"><span data-stu-id="159eb-710">Empty</span></span>|<span data-ttu-id="159eb-711">Zero (0)</span><span class="sxs-lookup"><span data-stu-id="159eb-711">Zero (0)</span></span>|  
|<span data-ttu-id="159eb-712">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="159eb-712">Any other number</span></span>|<span data-ttu-id="159eb-713">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="159eb-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="159eb-714">È possibile rappresentare numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="159eb-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="159eb-715">Ad esempio, `&O10` è la notazione ottale del decimale 8.</span><span class="sxs-lookup"><span data-stu-id="159eb-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-716">Questo esempio viene utilizzato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-717"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-717"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-718"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-718"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="159eb-719">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-719">Required.</span></span> <span data-ttu-id="159eb-720">Oggetto <see langword="Object" /> contenente qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="159eb-720">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="159eb-721">Restituisce una rappresentazione <see langword="String" /> di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-721">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="159eb-722">Restituisce una rappresentazione <see langword="String" /> di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-722">Returns a <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-723">Quando i numeri vengono convertiti in stringhe, uno spazio iniziale è sempre riservato per il segno di `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="159eb-724">Se `Number` è positivo, la stringa restituita conterrà uno spazio iniziale e il segno è implicito.</span><span class="sxs-lookup"><span data-stu-id="159eb-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="159eb-725">Il segno meno (-) e non uno spazio iniziale, si includerà un numero negativo.</span><span class="sxs-lookup"><span data-stu-id="159eb-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="159eb-726">Utilizzare il `Format` funzione per convertire valori numerici da formattare come date, ore o currency o in altri formati definiti dall'utente.</span><span class="sxs-lookup"><span data-stu-id="159eb-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="159eb-727">A differenza di `Str` funzione, il `Format` funzione non include uno spazio iniziale per il segno di `Number`.</span><span class="sxs-lookup"><span data-stu-id="159eb-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="159eb-728">Il `Str` funzione riconosce solo il punto (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="159eb-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="159eb-729">Se vengono utilizzati separatori decimali diversi (ad esempio, nelle applicazioni internazionali), utilizzare il `CStr` o `Format` funzioni per convertire un numero in una stringa.</span><span class="sxs-lookup"><span data-stu-id="159eb-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="159eb-730">Per ottenere la rappresentazione di stringa di un numero in una lingua specifica, utilizzare il numero `ToString(IFormatProvider)` metodo.</span><span class="sxs-lookup"><span data-stu-id="159eb-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="159eb-731">Ad esempio, utilizzare <xref:System.Double.ToString%2A> durante la conversione di un valore di tipo `Double` in una stringa.</span><span class="sxs-lookup"><span data-stu-id="159eb-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="159eb-732">Questo esempio viene utilizzato il `Str` funzione per restituire un `String` rappresentazione di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="159eb-733">Quando un numero positivo viene convertito in una stringa, uno spazio iniziale è sempre riservato per il segno.</span><span class="sxs-lookup"><span data-stu-id="159eb-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="159eb-734"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="159eb-734"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="159eb-735"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="159eb-735"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="159eb-736">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="159eb-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="159eb-737">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-737">Required.</span></span> <span data-ttu-id="159eb-738">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span><span class="sxs-lookup"><span data-stu-id="159eb-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="159eb-739">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="159eb-740">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="159eb-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="159eb-741">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="159eb-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-742">Il `Val` funzione interrompe la lettura della stringa con il primo carattere non riconosciuto come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="159eb-743">I simboli e caratteri che sono spesso considerati parti di valori numerici, ad esempio segni di dollaro e virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="159eb-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="159eb-744">Tuttavia, la funzione riconosce i prefissi di radice `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="159eb-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="159eb-745">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimossi dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="159eb-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="159eb-746">La chiamata seguente restituisce il valore 1615198.</span><span class="sxs-lookup"><span data-stu-id="159eb-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="159eb-747">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="159eb-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="159eb-748">Il `Val` funzione riconosce solo il punto (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="159eb-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="159eb-749">Quando vengono utilizzati i separatori decimali, ad esempio in applicazioni internazionali, utilizzare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="159eb-750">Per convertire la rappresentazione di stringa di un numero in una lingua specifica in un valore numerico, utilizzare il tipo numerico `Parse(String, IFormatProvider)` metodo.</span><span class="sxs-lookup"><span data-stu-id="159eb-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="159eb-751">Ad esempio, utilizzare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="159eb-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="159eb-752">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numeri insoliti.</span><span class="sxs-lookup"><span data-stu-id="159eb-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="159eb-753">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="159eb-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="159eb-754">Il conflitto tra il numero formattato come un `Double` e `Integer` e `Long` caratteri di tipo verrebbero intercettati dal compilatore se non fosse contenuto in una stringa.</span><span class="sxs-lookup"><span data-stu-id="159eb-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="159eb-755">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="159eb-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="159eb-756">`Val` Interrompe la conversione con il primo carattere che non può essere interpretato come una cifra numerica, modificatore numerico, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="159eb-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="159eb-757"><paramref name="InputStr" /> è troppo grande.</span><span class="sxs-lookup"><span data-stu-id="159eb-757"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-758"><paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-758"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="159eb-759">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-759">Required.</span></span> <span data-ttu-id="159eb-760">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span><span class="sxs-lookup"><span data-stu-id="159eb-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="159eb-761">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="159eb-762">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="159eb-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="159eb-763">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="159eb-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-764">Il `Val` funzione interrompe la lettura della stringa con il primo carattere non riconosciuto come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="159eb-765">I simboli e caratteri che sono spesso considerati parti di valori numerici, ad esempio segni di dollaro e virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="159eb-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="159eb-766">Tuttavia, la funzione riconosce i prefissi di radice `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="159eb-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="159eb-767">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimossi dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="159eb-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="159eb-768">La chiamata seguente restituisce il valore 1234123.</span><span class="sxs-lookup"><span data-stu-id="159eb-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="159eb-769">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="159eb-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="159eb-770">Il `Val` funzione riconosce solo il punto (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="159eb-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="159eb-771">Quando si utilizzano altri separatori decimali, come applicazioni internazionali, utilizzare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="159eb-772">Per convertire la rappresentazione di stringa di un numero in una lingua specifica in un valore numerico, utilizzare il tipo numerico `Parse(String, IFormatProvider)` metodo.</span><span class="sxs-lookup"><span data-stu-id="159eb-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="159eb-773">Ad esempio, utilizzare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="159eb-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="159eb-774">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numeri insoliti.</span><span class="sxs-lookup"><span data-stu-id="159eb-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="159eb-775">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="159eb-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="159eb-776">Il conflitto tra il numero formattato come un `Double` e `Integer` e `Long` caratteri di tipo verrebbero intercettati dal compilatore se non fosse contenuto in stringhe.</span><span class="sxs-lookup"><span data-stu-id="159eb-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="159eb-777">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="159eb-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="159eb-778">`Val` Interrompe la conversione con il primo carattere che non può essere interpretato come una cifra numerica, modificatore numerico, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="159eb-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="159eb-779"><paramref name="InputStr" /> è troppo grande.</span><span class="sxs-lookup"><span data-stu-id="159eb-779"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-780"><paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-780"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="159eb-781">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="159eb-781">Required.</span></span> <span data-ttu-id="159eb-782">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span><span class="sxs-lookup"><span data-stu-id="159eb-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="159eb-783">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="159eb-784">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="159eb-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="159eb-785">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="159eb-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="159eb-786">Il `Val` funzione interrompe la lettura della stringa con il primo carattere non riconosciuto come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="159eb-787">I simboli e caratteri che sono spesso considerati parti di valori numerici, ad esempio segni di dollaro e virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="159eb-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="159eb-788">Tuttavia, la funzione riconosce i prefissi di radice `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="159eb-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="159eb-789">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimossi dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="159eb-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="159eb-790">La chiamata seguente restituisce il valore 1234123.</span><span class="sxs-lookup"><span data-stu-id="159eb-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="159eb-791">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="159eb-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="159eb-792">Il `Val` funzione riconosce solo il punto (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="159eb-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="159eb-793">Quando si utilizzano altri separatori decimali, come applicazioni internazionali, utilizzare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="159eb-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="159eb-794">Per convertire la rappresentazione di stringa di un numero in una lingua specifica in un valore numerico, utilizzare il tipo numerico `Parse(String, IFormatProvider)` metodo.</span><span class="sxs-lookup"><span data-stu-id="159eb-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="159eb-795">Ad esempio, utilizzare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="159eb-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="159eb-796">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numeri insoliti.</span><span class="sxs-lookup"><span data-stu-id="159eb-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="159eb-797">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="159eb-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="159eb-798">Il conflitto tra il numero formattato come un `Double` e `Integer` e `Long` caratteri di tipo verrebbero intercettati dal compilatore se non fosse contenuto in stringhe.</span><span class="sxs-lookup"><span data-stu-id="159eb-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="159eb-799">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="159eb-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="159eb-800">`Val` Interrompe la conversione con il primo carattere che non può essere interpretato come una cifra numerica, modificatore numerico, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="159eb-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="159eb-801"><paramref name="InputStr" /> è troppo grande.</span><span class="sxs-lookup"><span data-stu-id="159eb-801"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="159eb-802"><paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="159eb-802"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>