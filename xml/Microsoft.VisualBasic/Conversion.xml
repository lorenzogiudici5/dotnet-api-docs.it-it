<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc28c5733fb9f77e132ec584a6f025b3048ad10b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48643508" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4d253-101">Il modulo <see langword="Conversion" /> contiene procedure che consentono di eseguire operazioni varie operazioni di conversione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d253-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-102">Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri delle librerie di runtime che consentono di convertire i numeri decimali in altre basi, numeri in stringhe, le stringhe in numeri e i dati di un tipo a altro.</span><span class="sxs-lookup"><span data-stu-id="4d253-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-103">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="4d253-104">Riepilogo della conversione</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d253-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="4d253-105">Parole chiave (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d253-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="4d253-106">Membri della libreria Run-Time Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="4d253-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="4d253-107">Oggetto da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="4d253-108">Tipo in cui convertire l'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-109">Converte un oggetto nel tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-110">Oggetto il cui tipo in fase di esecuzione è il tipo di destinazione richiesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-111">Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` al tipo specificato dal parametro di `TargetType` parametro.</span><span class="sxs-lookup"><span data-stu-id="4d253-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="4d253-112">Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.</span><span class="sxs-lookup"><span data-stu-id="4d253-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="4d253-113">Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso.</span><span class="sxs-lookup"><span data-stu-id="4d253-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="4d253-114">Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, il `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente statica.</span><span class="sxs-lookup"><span data-stu-id="4d253-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="4d253-115">Se la conversione definita dall'utente, statica ha esito negativo, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche.</span><span class="sxs-lookup"><span data-stu-id="4d253-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="4d253-116">Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, il `CTypeDynamic` metodo offre la precedenza alle conversioni dinamiche sulle conversioni definite dall'utente statiche.</span><span class="sxs-lookup"><span data-stu-id="4d253-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-117">L'esempio seguente usa il `CTypeDynamic` metodo per convertire un oggetto dinamico in una stringa tramite la conversione definita dall'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="4d253-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="4d253-118">Utilizzo di oggetti dinamici (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="4d253-119">Procedura dettagliata: creazione e utilizzo di oggetti dinamici (C# e Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="4d253-120">Tipo in cui convertire l'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="4d253-121">Oggetto da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-122">Converte un oggetto nel tipo generico specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-123">Oggetto tipizzato in modo statico come tipo generico richiesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-124">Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` parametro nel tipo specificato dal tipo del parametro generico.</span><span class="sxs-lookup"><span data-stu-id="4d253-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="4d253-125">Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.</span><span class="sxs-lookup"><span data-stu-id="4d253-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="4d253-126">Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso.</span><span class="sxs-lookup"><span data-stu-id="4d253-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="4d253-127">Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, il `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente statica.</span><span class="sxs-lookup"><span data-stu-id="4d253-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="4d253-128">Se la conversione definita dall'utente, statica ha esito negativo, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche.</span><span class="sxs-lookup"><span data-stu-id="4d253-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="4d253-129">Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, il `CTypeDynamic` metodo offre la precedenza alle conversioni dinamiche sulle conversioni definite dall'utente statiche.</span><span class="sxs-lookup"><span data-stu-id="4d253-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-130">L'esempio seguente usa il `CTypeDynamic` metodo per convertire un oggetto dinamico in una stringa tramite la conversione definita dall'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="4d253-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="4d253-131">Utilizzo di oggetti dinamici (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="4d253-132">Procedura dettagliata: creazione e utilizzo di oggetti dinamici (C# e Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d253-133">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="4d253-134">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-135">Messaggio di errore corrispondente all'errore di runtime più recente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-136">Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore in fase di esecuzione più recente.</span><span class="sxs-lookup"><span data-stu-id="4d253-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="4d253-137">Il valore restituito del `ErrorToString` corrisponde all'impostazione di `Description` proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="4d253-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="4d253-138">Se non si è verificato alcun errore di run-time, `ErrorToString` restituisce una stringa di lunghezza zero ("").</span><span class="sxs-lookup"><span data-stu-id="4d253-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="4d253-139">In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita dal `Error` (funzione).</span><span class="sxs-lookup"><span data-stu-id="4d253-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-140">Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="4d253-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-141">
            <paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="4d253-142">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-142">Optional.</span>
          </span>
          <span data-ttu-id="4d253-143">Qualsiasi numero di errore valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-144">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-145">Messaggio di errore corrispondente a un numero di errore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-146">Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore in fase di esecuzione più recente.</span><span class="sxs-lookup"><span data-stu-id="4d253-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="4d253-147">Il valore restituito del `ErrorToString` corrisponde all'impostazione di `Description` proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="4d253-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="4d253-148">Se `ErrorNumber` è un numero errore valido, ma non è definito `ErrorToString` restituisce la stringa `"Application-defined or object-defined error."` se `ErrorNumber` non è valido, si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="4d253-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="4d253-149">Se `ErrorNumber` viene omesso, il messaggio corrispondente la più recente viene restituito l'errore di run-time.</span><span class="sxs-lookup"><span data-stu-id="4d253-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="4d253-150">Se si è verificato alcun errore di run-time o `ErrorNumber` è 0, `ErrorToString` restituisce una stringa di lunghezza zero ("").</span><span class="sxs-lookup"><span data-stu-id="4d253-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="4d253-151">In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita dal `Error` (funzione).</span><span class="sxs-lookup"><span data-stu-id="4d253-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-152">Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="4d253-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-153">
            <paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d253-154">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-155">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-155">Required.</span>
          </span>
          <span data-ttu-id="4d253-156">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-157">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-157">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-158">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-159">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-160">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-161">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-162">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-163">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-164">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-165">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-166">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-167">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-168">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-169">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-170">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-171">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-172">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-173">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-174">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-175">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-176">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-177">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-178">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-179">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-180">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-180">Required.</span>
          </span>
          <span data-ttu-id="4d253-181">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-182">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-182">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-183">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-184">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-185">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-186">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-187">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-188">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-189">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-190">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-191">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-192">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-193">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-194">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-195">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-196">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-197">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-198">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-199">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-200">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-201">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-202">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-203">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-204">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-205">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-205">Required.</span>
          </span>
          <span data-ttu-id="4d253-206">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-207">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-207">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-208">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-209">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-210">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-211">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-212">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-213">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-214">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-215">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-216">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-217">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-218">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-219">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-220">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-221">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-222">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-223">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-224">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-225">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-226">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-227">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-228">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-229">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-230">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-230">Required.</span>
          </span>
          <span data-ttu-id="4d253-231">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-232">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-232">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-233">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-234">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-235">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-236">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-237">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-238">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-239">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-240">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-241">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-242">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-243">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-244">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-245">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-246">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-247">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-248">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-249">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-250">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-251">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-252">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-253">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-254">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-255">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-255">Required.</span>
          </span>
          <span data-ttu-id="4d253-256">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-257">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-257">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-258">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-259">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-260">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-261">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-262">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-263">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-264">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-265">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-266">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-267">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-268">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-269">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-270">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-271">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-272">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-273">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-274">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-275">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-276">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-277">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-278">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-279">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-280">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-280">Required.</span>
          </span>
          <span data-ttu-id="4d253-281">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-282">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-282">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-283">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-284">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-285">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-286">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-287">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-288">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-289">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-290">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-291">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-292">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-293">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-294">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-295">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-296">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-297">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-298">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-299">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-300">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-301">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-302">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-303">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-304">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-305">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-305">Required.</span>
          </span>
          <span data-ttu-id="4d253-306">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-307">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-307">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-308">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-309">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-310">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-311">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-312">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-313">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-314">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-315">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-316">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-317">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-318">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-319">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-320">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-321">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-322">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-323">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-324">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-325">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-326">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-327">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-328">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-329">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d253-330">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-331">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-331">Required.</span>
          </span>
          <span data-ttu-id="4d253-332">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-333">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-334">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-335">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-336">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-336">If `Number` is</span></span>|<span data-ttu-id="4d253-337">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-338">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-338">Empty</span></span>|<span data-ttu-id="4d253-339">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-339">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-340">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-340">Any numeric value</span></span>|<span data-ttu-id="4d253-341">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-342">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-343">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-344">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-345">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-346">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-347">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-348">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-349">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-349">Required.</span>
          </span>
          <span data-ttu-id="4d253-350">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-351">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-352">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-353">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-354">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-354">If `Number` is</span></span>|<span data-ttu-id="4d253-355">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-356">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-356">Empty</span></span>|<span data-ttu-id="4d253-357">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-357">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-358">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-358">Any numeric value</span></span>|<span data-ttu-id="4d253-359">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-360">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-361">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-362">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-363">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-364">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-365">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-366">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-367">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-367">Required.</span>
          </span>
          <span data-ttu-id="4d253-368">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-369">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-370">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-371">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-372">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-372">If `Number` is</span></span>|<span data-ttu-id="4d253-373">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-374">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-374">Empty</span></span>|<span data-ttu-id="4d253-375">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-375">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-376">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-376">Any numeric value</span></span>|<span data-ttu-id="4d253-377">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-378">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-379">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-380">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-381">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-382">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-383">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-384">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-385">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-385">Required.</span>
          </span>
          <span data-ttu-id="4d253-386">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-387">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-388">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-389">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-390">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-390">If `Number` is</span></span>|<span data-ttu-id="4d253-391">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-392">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-392">Empty</span></span>|<span data-ttu-id="4d253-393">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-393">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-394">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-394">Any numeric value</span></span>|<span data-ttu-id="4d253-395">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-396">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-397">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-398">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-399">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-400">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-401">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-402">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-403">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-403">Required.</span>
          </span>
          <span data-ttu-id="4d253-404">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-405">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-406">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-407">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-408">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-408">If `Number` is</span></span>|<span data-ttu-id="4d253-409">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-410">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-410">Empty</span></span>|<span data-ttu-id="4d253-411">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-411">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-412">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-412">Any numeric value</span></span>|<span data-ttu-id="4d253-413">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-414">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-415">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-416">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-417">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-418">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-419">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-420">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-421">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-421">Required.</span>
          </span>
          <span data-ttu-id="4d253-422">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-423">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-424">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-425">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-426">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-426">If `Number` is</span></span>|<span data-ttu-id="4d253-427">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-428">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-428">Empty</span></span>|<span data-ttu-id="4d253-429">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-429">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-430">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-430">Any numeric value</span></span>|<span data-ttu-id="4d253-431">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-432">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-433">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-434">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-435">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-436">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-437">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-438">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-439">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-439">Required.</span>
          </span>
          <span data-ttu-id="4d253-440">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-441">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-442">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-443">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-444">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-444">If `Number` is</span></span>|<span data-ttu-id="4d253-445">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-446">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-446">Empty</span></span>|<span data-ttu-id="4d253-447">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-447">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-448">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-448">Any numeric value</span></span>|<span data-ttu-id="4d253-449">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-450">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-451">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-452">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-453">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-454">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-455">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-456">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-457">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-457">Required.</span>
          </span>
          <span data-ttu-id="4d253-458">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-459">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-460">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-461">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-462">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-462">If `Number` is</span></span>|<span data-ttu-id="4d253-463">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-464">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-464">Empty</span></span>|<span data-ttu-id="4d253-465">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-465">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-466">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-466">Any numeric value</span></span>|<span data-ttu-id="4d253-467">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-468">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-469">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-470">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-471">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-472">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-473">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-474">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-475">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-475">Required.</span>
          </span>
          <span data-ttu-id="4d253-476">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-477">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-478">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-479">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-480">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="4d253-480">If `Number` is</span></span>|<span data-ttu-id="4d253-481">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="4d253-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-482">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-482">Empty</span></span>|<span data-ttu-id="4d253-483">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-483">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-484">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="4d253-484">Any numeric value</span></span>|<span data-ttu-id="4d253-485">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="4d253-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="4d253-486">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="4d253-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="4d253-487">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-488">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-489">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-490">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-491">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="4d253-492">Procedura: convertire stringhe esadecimali in numeri</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d253-493">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-494">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-494">Required.</span>
          </span>
          <span data-ttu-id="4d253-495">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-496">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-497">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-498">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-499">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-500">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-501">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-502">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-503">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-504">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-505">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-506">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-507">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-508">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-509">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-510">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-511">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-512">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-513">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-514">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-515">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-516">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-517">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-518">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-519">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-519">Required.</span>
          </span>
          <span data-ttu-id="4d253-520">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-521">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-521">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-522">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-523">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-524">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-525">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-526">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-527">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-528">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-529">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-530">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-531">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-532">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-533">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-534">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-535">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-536">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-537">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-538">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-539">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-540">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-541">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-542">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-543">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-544">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-544">Required.</span>
          </span>
          <span data-ttu-id="4d253-545">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-546">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-546">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-547">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-548">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-549">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-550">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-551">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-552">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-553">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-554">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-555">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-556">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-557">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-558">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-559">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-560">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-561">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-562">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-563">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-564">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-565">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-566">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-567">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-568">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-569">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-569">Required.</span>
          </span>
          <span data-ttu-id="4d253-570">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-571">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-571">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-572">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-573">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-574">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-575">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-576">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-577">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-578">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-579">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-580">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-581">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-582">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-583">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-584">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-585">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-586">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-587">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-588">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-589">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-590">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-591">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-592">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-593">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-594">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-594">Required.</span>
          </span>
          <span data-ttu-id="4d253-595">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-596">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-596">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-597">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-598">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-599">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-600">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-601">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-602">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-603">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-604">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-605">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-606">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-607">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-608">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-609">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-610">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-611">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-612">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-613">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-614">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-615">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-616">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-617">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-618">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-619">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-619">Required.</span>
          </span>
          <span data-ttu-id="4d253-620">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-621">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-621">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-622">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-623">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-624">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-625">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-626">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-627">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-628">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-629">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-630">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-631">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-632">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-633">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-634">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-635">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-636">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-637">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-638">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-639">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-640">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-641">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-642">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-643">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-644">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-644">Required.</span>
          </span>
          <span data-ttu-id="4d253-645">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="4d253-646">Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-646">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-647">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-648">Restituisce la parte intera di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-649">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="4d253-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="4d253-650">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="4d253-651">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="4d253-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="4d253-652">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="4d253-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-653">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="4d253-654">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="4d253-655">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="4d253-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="4d253-656">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="4d253-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="4d253-657">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="4d253-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="4d253-658">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4d253-659">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="4d253-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="4d253-660">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="4d253-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4d253-661">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="4d253-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-662">Number non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-663">Number non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-664">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="4d253-665">Riepilogo dei tipi di dati (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="4d253-666">Riepilogo degli elementi matematici</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="4d253-667">Funzioni matematiche (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-668">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d253-669">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-670">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-670">Required.</span>
          </span>
          <span data-ttu-id="4d253-671">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-672">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-673">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-674">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-675">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-675">If Number is</span></span>|<span data-ttu-id="4d253-676">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-677">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-677">Empty</span></span>|<span data-ttu-id="4d253-678">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-678">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-679">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-679">Any other number</span></span>|<span data-ttu-id="4d253-680">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-681">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-682">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-683">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-684">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-685">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-686">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-687">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-688">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-688">Required.</span>
          </span>
          <span data-ttu-id="4d253-689">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-690">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-691">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-692">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-693">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-693">If Number is</span></span>|<span data-ttu-id="4d253-694">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-695">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-695">Empty</span></span>|<span data-ttu-id="4d253-696">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-696">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-697">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-697">Any other number</span></span>|<span data-ttu-id="4d253-698">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-699">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-700">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-701">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-702">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-703">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-704">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-705">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-706">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-706">Required.</span>
          </span>
          <span data-ttu-id="4d253-707">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-708">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-709">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-710">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-711">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-711">If Number is</span></span>|<span data-ttu-id="4d253-712">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-713">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-713">Empty</span></span>|<span data-ttu-id="4d253-714">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-714">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-715">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-715">Any other number</span></span>|<span data-ttu-id="4d253-716">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-717">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-718">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-719">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-720">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-721">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-722">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-723">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-724">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-724">Required.</span>
          </span>
          <span data-ttu-id="4d253-725">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-726">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-727">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-728">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-729">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-729">If Number is</span></span>|<span data-ttu-id="4d253-730">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-731">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-731">Empty</span></span>|<span data-ttu-id="4d253-732">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-732">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-733">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-733">Any other number</span></span>|<span data-ttu-id="4d253-734">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-735">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-736">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-737">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-738">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-739">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-740">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-741">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-742">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-742">Required.</span>
          </span>
          <span data-ttu-id="4d253-743">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-744">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-745">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-746">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-747">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-747">If Number is</span></span>|<span data-ttu-id="4d253-748">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-749">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-749">Empty</span></span>|<span data-ttu-id="4d253-750">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-750">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-751">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-751">Any other number</span></span>|<span data-ttu-id="4d253-752">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-753">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-754">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-755">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-756">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-757">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-758">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-759">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-760">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-760">Required.</span>
          </span>
          <span data-ttu-id="4d253-761">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-762">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-763">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-764">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-765">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-765">If Number is</span></span>|<span data-ttu-id="4d253-766">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-767">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-767">Empty</span></span>|<span data-ttu-id="4d253-768">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-768">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-769">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-769">Any other number</span></span>|<span data-ttu-id="4d253-770">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-771">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-772">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-773">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-774">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-775">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-776">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-777">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-778">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-778">Required.</span>
          </span>
          <span data-ttu-id="4d253-779">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-780">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-781">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-782">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-783">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-783">If Number is</span></span>|<span data-ttu-id="4d253-784">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-785">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-785">Empty</span></span>|<span data-ttu-id="4d253-786">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-786">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-787">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-787">Any other number</span></span>|<span data-ttu-id="4d253-788">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-789">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-790">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-791">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-792">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-793">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-794">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-795">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-796">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-796">Required.</span>
          </span>
          <span data-ttu-id="4d253-797">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-798">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-799">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-800">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-801">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-801">If Number is</span></span>|<span data-ttu-id="4d253-802">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-803">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-803">Empty</span></span>|<span data-ttu-id="4d253-804">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-804">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-805">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-805">Any other number</span></span>|<span data-ttu-id="4d253-806">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-807">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-808">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-809">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-810">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-811">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-812">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-813">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-814">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-814">Required.</span>
          </span>
          <span data-ttu-id="4d253-815">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-816">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-817">Restituisce una stringa che rappresenta il valore ottale di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-818">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="4d253-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="4d253-819">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="4d253-819">If Number is</span></span>|<span data-ttu-id="4d253-820">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="4d253-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="4d253-821">Empty</span><span class="sxs-lookup"><span data-stu-id="4d253-821">Empty</span></span>|<span data-ttu-id="4d253-822">zero (0)</span><span class="sxs-lookup"><span data-stu-id="4d253-822">Zero (0)</span></span>|  
|<span data-ttu-id="4d253-823">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="4d253-823">Any other number</span></span>|<span data-ttu-id="4d253-824">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="4d253-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="4d253-825">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="4d253-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="4d253-826">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="4d253-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-827">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-828">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-829">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-830">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-831">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="4d253-832">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-832">Required.</span>
          </span>
          <span data-ttu-id="4d253-833">Oggetto <see langword="Object" /> contenente qualsiasi espressione numerica valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-834">Restituisce una rappresentazione <see langword="String" /> di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-835">Restituisce una rappresentazione <see langword="String" /> di un numero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-836">Quando i numeri vengono convertiti in stringhe, uno spazio iniziale è sempre riservato per il segno di `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="4d253-837">Se `Number` è positivo, la stringa restituita conterrà uno spazio iniziale e il segno è implicito.</span><span class="sxs-lookup"><span data-stu-id="4d253-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="4d253-838">Un numero negativo includerà il segno di sottrazione (-) e senza spazi iniziali.</span><span class="sxs-lookup"><span data-stu-id="4d253-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="4d253-839">Usare il `Format` funzione per convertire i valori numerici si desideri venga formattata come date, ore o valuta o in altri formati definiti dall'utente.</span><span class="sxs-lookup"><span data-stu-id="4d253-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="4d253-840">A differenza di `Str` funzione, il `Format` funzione non include uno spazio iniziale per il segno di `Number`.</span><span class="sxs-lookup"><span data-stu-id="4d253-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d253-841">Il `Str` funzione riconosce solo il periodo (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="4d253-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="4d253-842">Se vengono usati separatori decimali diversi (ad esempio, in applicazioni internazionali), usare il `CStr` o `Format` funzioni per convertire un numero in una stringa.</span><span class="sxs-lookup"><span data-stu-id="4d253-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="4d253-843">Per ottenere la rappresentazione di stringa di un numero in una specifica impostazione cultura, usare il numero `ToString(IFormatProvider)` (metodo).</span><span class="sxs-lookup"><span data-stu-id="4d253-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="4d253-844">Ad esempio, usare <xref:System.Double.ToString%2A> durante la conversione di un valore di tipo `Double` in una stringa.</span><span class="sxs-lookup"><span data-stu-id="4d253-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d253-845">Questo esempio Usa la `Str` funzione per restituire un `String` rappresentazione di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="4d253-846">Quando un numero positivo viene convertito in una stringa, uno spazio iniziale è sempre riservato per il segno.</span><span class="sxs-lookup"><span data-stu-id="4d253-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4d253-847">
            <paramref name="Number" /> non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="4d253-848">
            <paramref name="Number" /> non è un tipo numerico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="4d253-849">Riepilogo della conversione</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-850">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="4d253-851">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="4d253-852">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-852">Required.</span>
          </span>
          <span data-ttu-id="4d253-853">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="4d253-854">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-854">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-855">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-856">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-857">Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="4d253-858">I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="4d253-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="4d253-859">Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="4d253-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="4d253-860">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimossi dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="4d253-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="4d253-861">La chiamata seguente restituisce il valore 1615198.</span><span class="sxs-lookup"><span data-stu-id="4d253-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="4d253-862">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="4d253-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="4d253-863">Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="4d253-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="4d253-864">Quando vengono usati separatori decimali diversi, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="4d253-865">Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo).</span><span class="sxs-lookup"><span data-stu-id="4d253-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="4d253-866">Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="4d253-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d253-867">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numero insoliti.</span><span class="sxs-lookup"><span data-stu-id="4d253-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="4d253-868">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="4d253-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="4d253-869">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se non fosse contenuto in una stringa.</span><span class="sxs-lookup"><span data-stu-id="4d253-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="4d253-870">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="4d253-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="4d253-871">`Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="4d253-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="4d253-872">
            <paramref name="InputStr" /> è troppo grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-873">
            <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-874">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="4d253-875">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-875">Required.</span>
          </span>
          <span data-ttu-id="4d253-876">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="4d253-877">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-877">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-878">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-879">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-880">Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="4d253-881">I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="4d253-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="4d253-882">Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="4d253-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="4d253-883">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="4d253-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="4d253-884">La chiamata seguente restituisce il valore 1234123.</span><span class="sxs-lookup"><span data-stu-id="4d253-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="4d253-885">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="4d253-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="4d253-886">Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="4d253-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="4d253-887">Quando vengono utilizzati altri separatori decimali, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="4d253-888">Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo).</span><span class="sxs-lookup"><span data-stu-id="4d253-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="4d253-889">Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="4d253-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d253-890">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numero insoliti.</span><span class="sxs-lookup"><span data-stu-id="4d253-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="4d253-891">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="4d253-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="4d253-892">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se il conflitto non sono stato inserito in stringhe.</span><span class="sxs-lookup"><span data-stu-id="4d253-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="4d253-893">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="4d253-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="4d253-894">`Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="4d253-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="4d253-895">
            <paramref name="InputStr" /> è troppo grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-896">
            <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-897">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="4d253-898">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-898">Required.</span>
          </span>
          <span data-ttu-id="4d253-899">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="4d253-900">Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-900">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4d253-901">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4d253-902">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d253-903">Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="4d253-904">I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="4d253-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="4d253-905">Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="4d253-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="4d253-906">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="4d253-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="4d253-907">La chiamata seguente restituisce il valore 1234123.</span><span class="sxs-lookup"><span data-stu-id="4d253-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="4d253-908">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="4d253-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="4d253-909">Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="4d253-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="4d253-910">Quando vengono utilizzati altri separatori decimali, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="4d253-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="4d253-911">Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo).</span><span class="sxs-lookup"><span data-stu-id="4d253-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="4d253-912">Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="4d253-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4d253-913">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numero insoliti.</span><span class="sxs-lookup"><span data-stu-id="4d253-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="4d253-914">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="4d253-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="4d253-915">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se il conflitto non sono stato inserito in stringhe.</span><span class="sxs-lookup"><span data-stu-id="4d253-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="4d253-916">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="4d253-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="4d253-917">`Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="4d253-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="4d253-918">
            <paramref name="InputStr" /> è troppo grande.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="4d253-919">
            <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="4d253-920">CString</span>
          <span class="sxs-lookup">
            <span data-stu-id="4d253-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>