<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc28c5733fb9f77e132ec584a6f025b3048ad10b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48643508" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Il modulo <see langword="Conversion" /> contiene procedure che consentono di eseguire operazioni varie operazioni di conversione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri delle librerie di runtime che consentono di convertire i numeri decimali in altre basi, numeri in stringhe, le stringhe in numeri e i dati di un tipo a altro.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Parole chiave (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membri della libreria Run-Time Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">Oggetto da convertire.</param>
        <param name="TargetType">Tipo in cui convertire l'oggetto.</param>
        <summary>Converte un oggetto nel tipo specificato.</summary>
        <returns>Oggetto il cui tipo in fase di esecuzione è il tipo di destinazione richiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` al tipo specificato dal parametro di `TargetType` parametro. Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.  
  
 Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso. Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, il `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente statica. Se la conversione definita dall'utente, statica ha esito negativo, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche. Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, il `CTypeDynamic` metodo offre la precedenza alle conversioni dinamiche sulle conversioni definite dall'utente statiche.  
  
   
  
## Examples  
 L'esempio seguente usa il `CTypeDynamic` metodo per convertire un oggetto dinamico in una stringa tramite la conversione definita dall'oggetto dinamico.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Utilizzo di oggetti dinamici (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Procedura dettagliata: creazione e utilizzo di oggetti dinamici (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">Tipo in cui convertire l'oggetto.</typeparam>
        <param name="Expression">Oggetto da convertire.</param>
        <summary>Converte un oggetto nel tipo generico specificato.</summary>
        <returns>Oggetto tipizzato in modo statico come tipo generico richiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` parametro nel tipo specificato dal tipo del parametro generico. Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.  
  
 Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso. Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, il `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente statica. Se la conversione definita dall'utente, statica ha esito negativo, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche. Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, il `CTypeDynamic` metodo offre la precedenza alle conversioni dinamiche sulle conversioni definite dall'utente statiche.  
  
   
  
## Examples  
 L'esempio seguente usa il `CTypeDynamic` metodo per convertire un oggetto dinamico in una stringa tramite la conversione definita dall'oggetto dinamico.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Utilizzo di oggetti dinamici (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Procedura dettagliata: creazione e utilizzo di oggetti dinamici (C# e Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</summary>
        <returns>Messaggio di errore corrispondente all'errore di runtime più recente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore in fase di esecuzione più recente. Il valore restituito del `ErrorToString` corrisponde all'impostazione di `Description` proprietà del `Err` oggetto. Se non si è verificato alcun errore di run-time, `ErrorToString` restituisce una stringa di lunghezza zero ("").  
  
 In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita dal `Error` (funzione).  
  
   
  
## Examples  
 Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">Facoltativo. Qualsiasi numero di errore valido.</param>
        <summary>Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</summary>
        <returns>Messaggio di errore corrispondente a un numero di errore specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore in fase di esecuzione più recente. Il valore restituito del `ErrorToString` corrisponde all'impostazione di `Description` proprietà del `Err` oggetto. Se `ErrorNumber` è un numero errore valido, ma non è definito `ErrorToString` restituisce la stringa `"Application-defined or object-defined error."` se `ErrorNumber` non è valido, si verifica un errore. Se `ErrorNumber` viene omesso, il messaggio corrispondente la più recente viene restituito l'errore di run-time. Se si è verificato alcun errore di run-time o `ErrorNumber` è 0, `ErrorToString` restituisce una stringa di lunghezza zero ("").  
  
 In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita dal `Error` (funzione).  
  
   
  
## Examples  
 Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce la parte intera di un numero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore esadecimale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se `Number` è|Hex restituisce|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi valore numerico|Fino a 16 caratteri esadecimali|  
  
 È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`. Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procedura: convertire stringhe esadecimali in numeri</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce la parte intera di un numero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida. Se il <c>numero</c> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</param>
        <summary>Restituisce la parte intera di un numero.</summary>
        <returns>Restituisce la parte intera di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.  
  
 La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`. Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.  
  
 `Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri. Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero. Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`. Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri. Ad esempio:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento. Ad esempio:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number non è specificato.</exception>
        <exception cref="T:System.ArgumentException">Number non è un tipo numerico.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Riepilogo degli elementi matematici</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Funzioni matematiche (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa che rappresenta il valore ottale di un numero.</summary>
        <returns>Restituisce una stringa che rappresenta il valore ottale di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.  
  
|Se il numero è|Valore restituito|  
|-|-|  
|Empty|zero (0)|  
|Qualsiasi altro numero|Fino a 22 caratteri ottali|  
  
 È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`. Ad esempio, `&O10` è la notazione ottale per 8 decimale.  
  
   
  
## Examples  
 Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Oggetto <see langword="Object" /> contenente qualsiasi espressione numerica valida.</param>
        <summary>Restituisce una rappresentazione <see langword="String" /> di un numero.</summary>
        <returns>Restituisce una rappresentazione <see langword="String" /> di un numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando i numeri vengono convertiti in stringhe, uno spazio iniziale è sempre riservato per il segno di `Number`. Se `Number` è positivo, la stringa restituita conterrà uno spazio iniziale e il segno è implicito. Un numero negativo includerà il segno di sottrazione (-) e senza spazi iniziali.  
  
 Usare il `Format` funzione per convertire i valori numerici si desideri venga formattata come date, ore o valuta o in altri formati definiti dall'utente. A differenza di `Str` funzione, il `Format` funzione non include uno spazio iniziale per il segno di `Number`.  
  
> [!NOTE]
>  Il `Str` funzione riconosce solo il periodo (`.`) come separatore decimale valido. Se vengono usati separatori decimali diversi (ad esempio, in applicazioni internazionali), usare il `CStr` o `Format` funzioni per convertire un numero in una stringa. Per ottenere la rappresentazione di stringa di un numero in una specifica impostazione cultura, usare il numero `ToString(IFormatProvider)` (metodo). Ad esempio, usare <xref:System.Double.ToString%2A> durante la conversione di un valore di tipo `Double` in una stringa.  
  
   
  
## Examples  
 Questo esempio Usa la `Str` funzione per restituire un `String` rappresentazione di un numero. Quando un numero positivo viene convertito in una stringa, uno spazio iniziale è sempre riservato per il segno.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Number" /> non specificato.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Number" /> non è un tipo numerico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Riepilogo della conversione</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido. Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</param>
        <summary>Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</summary>
        <returns>Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero. I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti. Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale). Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimossi dall'argomento.  
  
 La chiamata seguente restituisce il valore 1615198.  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 La chiamata seguente restituisce il valore decimale -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido. Quando vengono usati separatori decimali diversi, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero. Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo). Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.  
  
> [!NOTE]
>  Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numero insoliti. Ad esempio, il codice seguente genera questa eccezione.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se non fosse contenuto in una stringa.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa. `Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> è troppo grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido. Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</param>
        <summary>Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</summary>
        <returns>Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero. I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti. Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale). Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.  
  
 La chiamata seguente restituisce il valore 1234123.  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 La chiamata seguente restituisce il valore decimale -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido. Quando vengono utilizzati altri separatori decimali, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero. Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo). Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.  
  
> [!NOTE]
>  Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numero insoliti. Ad esempio, il codice seguente genera questa eccezione.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se il conflitto non sono stato inserito in stringhe.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa. `Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> è troppo grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">Obbligatorio. Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido. Se l'<c>espressione</c> è di tipo <see langword="Object" />, il suo valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</param>
        <summary>Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</summary>
        <returns>Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero. I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti. Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale). Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.  
  
 La chiamata seguente restituisce il valore 1234123.  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 La chiamata seguente restituisce il valore decimale -1.  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido. Quando vengono utilizzati altri separatori decimali, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero. Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo). Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.  
  
> [!NOTE]
>  Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numero insoliti. Ad esempio, il codice seguente genera questa eccezione.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se il conflitto non sono stato inserito in stringhe.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa. `Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="InputStr" /> è troppo grande.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
  </Members>
</Type>