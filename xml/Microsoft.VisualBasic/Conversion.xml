<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="65720e28354cf9fe68efb56839ebd7d07c6348ef" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="it-IT" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52381416" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9c84c-101">Il modulo <see langword="Conversion" /> contiene procedure che consentono di eseguire operazioni varie operazioni di conversione.</span><span class="sxs-lookup"><span data-stu-id="9c84c-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-102">Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri delle librerie di runtime che consentono di convertire i numeri decimali in altre basi, numeri in stringhe, le stringhe in numeri e i dati di un tipo a altro.</span><span class="sxs-lookup"><span data-stu-id="9c84c-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-103">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-104">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="9c84c-105">Parole chiave (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="9c84c-106">Membri della libreria Run-Time Visual Basic</span><span class="sxs-lookup"><span data-stu-id="9c84c-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="9c84c-107">Oggetto da convertire.</span><span class="sxs-lookup"><span data-stu-id="9c84c-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="9c84c-108">Tipo in cui convertire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="9c84c-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="9c84c-109">Converte un oggetto nel tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="9c84c-110">Oggetto il cui tipo in fase di esecuzione è il tipo di destinazione richiesto.</span><span class="sxs-lookup"><span data-stu-id="9c84c-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-111">Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` al tipo specificato dal parametro di `TargetType` parametro.</span><span class="sxs-lookup"><span data-stu-id="9c84c-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="9c84c-112">Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.</span><span class="sxs-lookup"><span data-stu-id="9c84c-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="9c84c-113">Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso.</span><span class="sxs-lookup"><span data-stu-id="9c84c-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="9c84c-114">Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, il `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente statica.</span><span class="sxs-lookup"><span data-stu-id="9c84c-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="9c84c-115">Se la conversione definita dall'utente, statica ha esito negativo, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche.</span><span class="sxs-lookup"><span data-stu-id="9c84c-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="9c84c-116">Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, il `CTypeDynamic` metodo offre la precedenza alle conversioni dinamiche sulle conversioni definite dall'utente statiche.</span><span class="sxs-lookup"><span data-stu-id="9c84c-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-117">L'esempio seguente usa il `CTypeDynamic` metodo per convertire un oggetto dinamico in una stringa tramite la conversione definita dall'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="9c84c-118">Utilizzo di oggetti dinamici (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="9c84c-119">Procedura dettagliata: creazione e utilizzo di oggetti dinamici (C# e Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="9c84c-120">Tipo in cui convertire l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="9c84c-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="9c84c-121">Oggetto da convertire.</span><span class="sxs-lookup"><span data-stu-id="9c84c-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="9c84c-122">Converte un oggetto nel tipo generico specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="9c84c-123">Oggetto tipizzato in modo statico come tipo generico richiesto.</span><span class="sxs-lookup"><span data-stu-id="9c84c-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-124">Il `CTypeDynamic` metodo converte l'oggetto passato come il `Expression` parametro nel tipo specificato dal tipo del parametro generico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="9c84c-125">Se l'oggetto è un oggetto dinamico, il `CTypeDynamic` metodo si applica le conversioni dinamiche disponibili.</span><span class="sxs-lookup"><span data-stu-id="9c84c-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="9c84c-126">Il `CTypeDynamic` metodo si applica alle conversioni dinamiche in conformità con la semantica di conversione definita dall'oggetto stesso.</span><span class="sxs-lookup"><span data-stu-id="9c84c-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="9c84c-127">Se un oggetto dinamico eredita da <xref:System.Dynamic.DynamicObject>, il `CTypeDynamic` metodo innanzitutto tenta di eseguire la conversione utilizzando una conversione definita dall'utente statica.</span><span class="sxs-lookup"><span data-stu-id="9c84c-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="9c84c-128">Se la conversione definita dall'utente, statica ha esito negativo, il `CTypeDynamic` metodo tenta di eseguire la conversione utilizzando le conversioni dinamiche.</span><span class="sxs-lookup"><span data-stu-id="9c84c-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="9c84c-129">Se un oggetto dinamico implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>, il `CTypeDynamic` metodo offre la precedenza alle conversioni dinamiche sulle conversioni definite dall'utente statiche.</span><span class="sxs-lookup"><span data-stu-id="9c84c-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-130">L'esempio seguente usa il `CTypeDynamic` metodo per convertire un oggetto dinamico in una stringa tramite la conversione definita dall'oggetto dinamico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="9c84c-131">Utilizzo di oggetti dinamici (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="9c84c-132">Procedura dettagliata: creazione e utilizzo di oggetti dinamici (C# e Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9c84c-133">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span><span class="sxs-lookup"><span data-stu-id="9c84c-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9c84c-134">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span><span class="sxs-lookup"><span data-stu-id="9c84c-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-135">Messaggio di errore corrispondente all'errore di runtime più recente.</span><span class="sxs-lookup"><span data-stu-id="9c84c-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-136">Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore in fase di esecuzione più recente.</span><span class="sxs-lookup"><span data-stu-id="9c84c-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="9c84c-137">Il valore restituito del `ErrorToString` corrisponde all'impostazione di `Description` proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="9c84c-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="9c84c-138">Se non si è verificato alcun errore di run-time, `ErrorToString` restituisce una stringa di lunghezza zero ("").</span><span class="sxs-lookup"><span data-stu-id="9c84c-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="9c84c-139">In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita dal `Error` (funzione).</span><span class="sxs-lookup"><span data-stu-id="9c84c-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-140">Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-141"><paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</span><span class="sxs-lookup"><span data-stu-id="9c84c-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="9c84c-142">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="9c84c-142">Optional.</span></span> <span data-ttu-id="9c84c-143">Qualsiasi numero di errore valido.</span><span class="sxs-lookup"><span data-stu-id="9c84c-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="9c84c-144">Restituisce il messaggio di errore corrispondente a un determinato numero di errore.</span><span class="sxs-lookup"><span data-stu-id="9c84c-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-145">Messaggio di errore corrispondente a un numero di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-146">Il `ErrorToString` funzione esamina le impostazioni delle proprietà di `Err` oggetto per identificare l'errore in fase di esecuzione più recente.</span><span class="sxs-lookup"><span data-stu-id="9c84c-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="9c84c-147">Il valore restituito del `ErrorToString` corrisponde all'impostazione di `Description` proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="9c84c-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="9c84c-148">Se `ErrorNumber` è un numero errore valido, ma non è definito `ErrorToString` restituisce la stringa `"Application-defined or object-defined error."` se `ErrorNumber` non è valido, si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="9c84c-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="9c84c-149">Se `ErrorNumber` viene omesso, il messaggio corrispondente la più recente viene restituito l'errore di run-time.</span><span class="sxs-lookup"><span data-stu-id="9c84c-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="9c84c-150">Se si è verificato alcun errore di run-time o `ErrorNumber` è 0, `ErrorToString` restituisce una stringa di lunghezza zero ("").</span><span class="sxs-lookup"><span data-stu-id="9c84c-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="9c84c-151">In Visual Basic 6.0 e versioni precedenti, questa funzionalità è stata fornita dal `Error` (funzione).</span><span class="sxs-lookup"><span data-stu-id="9c84c-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-152">Il codice seguente usa il `ErrorToString` funzione per visualizzare i messaggi di errore che corrispondono ai numeri di errore specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-153"><paramref name="ErrorNumber" /> non è compreso nell'intervallo consentito.</span><span class="sxs-lookup"><span data-stu-id="9c84c-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9c84c-154">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-155">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-155">Required.</span></span> <span data-ttu-id="9c84c-156">Numero di tipo <see langword="Decimal" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-157">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-158">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-159">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-160">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-161">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-162">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="9c84c-163">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-164">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-165">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-166">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-167">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-168">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-169">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-170">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-171">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-172">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-173">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-174">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-175">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-176">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-177">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-178">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-179">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-179">Required.</span></span> <span data-ttu-id="9c84c-180">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-181">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-182">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-183">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-184">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-185">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-186">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="9c84c-187">A partire da Visual Basic 15.8, le prestazioni delle `Double`-per-conversione di un intero è ottimizzata se si passa il valore restituito dal `Fix` metodo da uno qualsiasi del [funzioni di conversione integrale](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o se la `Double`valore restituito da `Fix` viene implicitamente convertito in un intero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) impostato su `Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="9c84c-188">Questa ottimizzazione consente al codice eseguire più rapidamente, un massimo di volte più veloce per il codice che esegue un numero elevato di conversioni di tipi integer.</span><span class="sxs-lookup"><span data-stu-id="9c84c-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="9c84c-189">Nell'esempio seguente viene illustrato questo tipo una conversione ottimizzata:</span><span class="sxs-lookup"><span data-stu-id="9c84c-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="9c84c-190">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-191">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-192">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-193">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-194">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-195">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-196">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-197">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-198">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-199">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-200">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-201">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-202">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-203">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-204">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-205">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-206">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-206">Required.</span></span> <span data-ttu-id="9c84c-207">Numero di tipo <see langword="Short" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-208">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-209">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-210">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-211">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-212">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-213">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-214">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-215">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-216">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-217">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-218">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-219">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-220">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-221">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-222">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-223">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-224">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-225">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-226">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-227">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-228">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-229">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-230">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-230">Required.</span></span> <span data-ttu-id="9c84c-231">Numero di tipo <see langword="Integer" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-232">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-233">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-234">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-235">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-236">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-237">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-238">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-239">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-240">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-241">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-242">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-243">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-244">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-245">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-246">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-247">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-248">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-249">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-250">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-251">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-252">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-253">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-254">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-254">Required.</span></span> <span data-ttu-id="9c84c-255">Numero di tipo <see langword="Long" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-256">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-257">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-258">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-259">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-260">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-261">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-262">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-263">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-264">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-265">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-266">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-267">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-268">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-269">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-270">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-271">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-272">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-273">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-274">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-275">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-276">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-277">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-278">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-278">Required.</span></span> <span data-ttu-id="9c84c-279">Numero di tipo <see langword="Object" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="9c84c-280">Se <paramref name="Number" /> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="9c84c-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="9c84c-281">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-282">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-283">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-284">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-285">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-286">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="9c84c-287">A partire dalla 15.8 Visual Basic, se il `Number` argomento è un oggetto il cui tipo di runtime è `Double` o `Single`, le prestazioni della conversione a virgola mobile-virgola-a numero intero sono ottimizzata se si passa il valore restituito dal `Fix` metodo da uno qualsiasi del [funzioni di conversione integrale](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o se il valore restituito da `Fix` viene convertito automaticamente in un intero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) è impostata su Off.</span><span class="sxs-lookup"><span data-stu-id="9c84c-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="9c84c-288">Questa ottimizzazione consente al codice eseguire più rapidamente, un massimo di volte più veloce per il codice che esegue un numero elevato di conversioni di tipi integer.</span><span class="sxs-lookup"><span data-stu-id="9c84c-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="9c84c-289">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="9c84c-290">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-291">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-292">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-293">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-294">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-295">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-296">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-297">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-298">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-299">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-300">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-301">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-302">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-303">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-304">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-305">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-306">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-306">Required.</span></span> <span data-ttu-id="9c84c-307">Numero di tipo <see langword="Single" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-308">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-309">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-310">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-311">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-312">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-313">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="9c84c-314">A partire da Visual Basic 15.8, le prestazioni delle `Single`-per-conversione di un intero è ottimizzata se si passa il valore restituito dal `Fix` metodo da uno qualsiasi del [funzioni di conversione integrale](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o se la `Single`valore restituito da `Fix` viene convertito automaticamente in un intero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) è impostata su Off.</span><span class="sxs-lookup"><span data-stu-id="9c84c-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="9c84c-315">Questa ottimizzazione consente al codice eseguire più rapidamente, un massimo di volte più veloce per il codice che esegue un numero elevato di conversioni di tipi integer.</span><span class="sxs-lookup"><span data-stu-id="9c84c-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="9c84c-316">Nell'esempio seguente viene illustrato questo tipo una conversione ottimizzata:</span><span class="sxs-lookup"><span data-stu-id="9c84c-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="9c84c-317">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-318">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-319">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-320">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-321">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-322">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-323">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-324">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-325">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-326">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-327">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-328">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-329">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-330">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-331">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-332">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9c84c-333">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-334">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-334">Required.</span></span> <span data-ttu-id="9c84c-335">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-336">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-337">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-337">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-338">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-339">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-339">If `Number` is</span></span>|<span data-ttu-id="9c84c-340">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-341">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-341">Empty</span></span>|<span data-ttu-id="9c84c-342">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-342">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-343">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-343">Any numeric value</span></span>|<span data-ttu-id="9c84c-344">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-345">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-346">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-347">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-348"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-349"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-350">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-351">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-352">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-352">Required.</span></span> <span data-ttu-id="9c84c-353">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-354">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-355">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-355">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-356">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-357">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-357">If `Number` is</span></span>|<span data-ttu-id="9c84c-358">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-359">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-359">Empty</span></span>|<span data-ttu-id="9c84c-360">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-360">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-361">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-361">Any numeric value</span></span>|<span data-ttu-id="9c84c-362">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-363">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-364">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-365">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-366"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-367"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-368">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-369">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-370">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-370">Required.</span></span> <span data-ttu-id="9c84c-371">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-372">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-373">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-373">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-374">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-375">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-375">If `Number` is</span></span>|<span data-ttu-id="9c84c-376">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-377">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-377">Empty</span></span>|<span data-ttu-id="9c84c-378">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-378">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-379">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-379">Any numeric value</span></span>|<span data-ttu-id="9c84c-380">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-381">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-382">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-383">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-384"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-385"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-386">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-387">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-388">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-388">Required.</span></span> <span data-ttu-id="9c84c-389">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-390">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-391">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-391">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-392">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-393">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-393">If `Number` is</span></span>|<span data-ttu-id="9c84c-394">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-395">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-395">Empty</span></span>|<span data-ttu-id="9c84c-396">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-396">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-397">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-397">Any numeric value</span></span>|<span data-ttu-id="9c84c-398">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-399">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-400">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-401">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-402"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-403"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-404">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-405">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-406">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-406">Required.</span></span> <span data-ttu-id="9c84c-407">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-408">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-409">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-409">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-410">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-411">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-411">If `Number` is</span></span>|<span data-ttu-id="9c84c-412">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-413">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-413">Empty</span></span>|<span data-ttu-id="9c84c-414">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-414">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-415">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-415">Any numeric value</span></span>|<span data-ttu-id="9c84c-416">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-417">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-418">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-419">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-420"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-421"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-422">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-423">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-424">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-424">Required.</span></span> <span data-ttu-id="9c84c-425">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-426">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-427">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-427">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-428">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-429">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-429">If `Number` is</span></span>|<span data-ttu-id="9c84c-430">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-431">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-431">Empty</span></span>|<span data-ttu-id="9c84c-432">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-432">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-433">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-433">Any numeric value</span></span>|<span data-ttu-id="9c84c-434">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-435">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-436">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-437">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-438"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-439"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-440">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-441">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-442">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-442">Required.</span></span> <span data-ttu-id="9c84c-443">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-444">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-445">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-445">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-446">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-447">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-447">If `Number` is</span></span>|<span data-ttu-id="9c84c-448">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-449">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-449">Empty</span></span>|<span data-ttu-id="9c84c-450">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-450">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-451">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-451">Any numeric value</span></span>|<span data-ttu-id="9c84c-452">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-453">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-454">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-455">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-456"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-457"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-458">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-459">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-460">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-460">Required.</span></span> <span data-ttu-id="9c84c-461">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-462">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-463">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-463">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-464">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-465">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-465">If `Number` is</span></span>|<span data-ttu-id="9c84c-466">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-467">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-467">Empty</span></span>|<span data-ttu-id="9c84c-468">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-468">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-469">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-469">Any numeric value</span></span>|<span data-ttu-id="9c84c-470">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-471">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-472">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-473">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-474"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-475"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-476">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-477">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-478">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-478">Required.</span></span> <span data-ttu-id="9c84c-479">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-480">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-481">Restituisce una stringa che rappresenta il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-481">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-482">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-483">Se `Number` è</span><span class="sxs-lookup"><span data-stu-id="9c84c-483">If `Number` is</span></span>|<span data-ttu-id="9c84c-484">Hex restituisce</span><span class="sxs-lookup"><span data-stu-id="9c84c-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-485">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-485">Empty</span></span>|<span data-ttu-id="9c84c-486">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-486">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-487">Qualsiasi valore numerico</span><span class="sxs-lookup"><span data-stu-id="9c84c-487">Any numeric value</span></span>|<span data-ttu-id="9c84c-488">Fino a 16 caratteri esadecimali</span><span class="sxs-lookup"><span data-stu-id="9c84c-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="9c84c-489">È possibile rappresentare i numeri esadecimali direttamente prima dei numeri nell'intervallo appropriato da `&H`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="9c84c-490">Ad esempio, `&H10` rappresenta 16 decimale in notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-491">Questo esempio viene usato il `Hex` funzione per restituire il valore esadecimale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-492"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-493"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-494">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="9c84c-495">Procedura: convertire stringhe esadecimali in numeri</span><span class="sxs-lookup"><span data-stu-id="9c84c-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9c84c-496">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-497">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-497">Required.</span></span> <span data-ttu-id="9c84c-498">Numero di tipo <see langword="Decimal" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-499">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-500">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-501">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-502">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-503">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-504">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="9c84c-505">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-506">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-507">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-508">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-509">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-510">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-511">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-512">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-513">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-514">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-515">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-516">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-517">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-518">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-519">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-520">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-521">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-521">Required.</span></span> <span data-ttu-id="9c84c-522">Numero di tipo <see langword="Double" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-523">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-524">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-525">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-526">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-527">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-528">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="9c84c-529">A partire da Visual Basic 15.8, le prestazioni della conversione da Double a integer sono ottimizzata se si passa il valore restituito dal `Int` metodo da uno qualsiasi del [le funzioni di conversione integrale](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o se il valore Double restituito da `Int` viene convertito automaticamente in un intero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) è impostata su Off.</span><span class="sxs-lookup"><span data-stu-id="9c84c-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="9c84c-530">Questa ottimizzazione consente al codice eseguire più rapidamente, un massimo di volte più veloce per il codice che esegue un numero elevato di conversioni di tipi integer.</span><span class="sxs-lookup"><span data-stu-id="9c84c-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="9c84c-531">Nell'esempio seguente viene illustrato questo tipo una conversione ottimizzata:</span><span class="sxs-lookup"><span data-stu-id="9c84c-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="9c84c-532">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-533">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-534">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-535">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-536">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-537">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-538">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-539">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-540">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-541">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-542">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-543">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-544">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-545">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-546">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-547">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-548">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-548">Required.</span></span> <span data-ttu-id="9c84c-549">Numero di tipo <see langword="Short" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-550">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-551">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-552">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-553">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-554">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-555">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-556">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-557">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-558">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-559">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-560">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-561">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-562">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-563">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-564">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-565">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-566">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-567">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-568">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-569">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-570">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-571">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-572">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-572">Required.</span></span> <span data-ttu-id="9c84c-573">Numero di tipo <see langword="Integer" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-574">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-575">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-576">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-577">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-578">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-579">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-580">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-581">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-582">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-583">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-584">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-585">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-586">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-587">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-588">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-589">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-590">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-591">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-592">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-593">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-594">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-595">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-596">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-596">Required.</span></span> <span data-ttu-id="9c84c-597">Numero di tipo <see langword="Long" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-598">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-599">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-600">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-601">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-602">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-603">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-604">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-605">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-606">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-607">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-608">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-609">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-610">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-611">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-612">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-613">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-614">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-615">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-616">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-617">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-618">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-619">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-620">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-620">Required.</span></span> <span data-ttu-id="9c84c-621">Numero di tipo <see langword="Object" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="9c84c-622">Se <paramref name="Number" /> contiene <see langword="Nothing" />, viene restituito <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="9c84c-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="9c84c-623">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-624">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-625">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-626">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-627">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-628">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="9c84c-629">A partire dalla 15.8 Visual Basic, se il `Number` argomento è un oggetto il cui tipo di runtime è `Double` o `Single`, le prestazioni della conversione a virgola mobile-virgola-a numero intero sono ottimizzata se si passa il valore restituito dal `Int` metodo da uno qualsiasi del [funzioni di conversione integrale](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o se il valore restituito da `Int` viene convertito automaticamente in un intero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) è impostata su Off.</span><span class="sxs-lookup"><span data-stu-id="9c84c-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="9c84c-630">Questa ottimizzazione consente al codice eseguire più rapidamente, un massimo di volte più veloce per il codice che esegue un numero elevato di conversioni di tipi integer.</span><span class="sxs-lookup"><span data-stu-id="9c84c-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="9c84c-631">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="9c84c-632">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-633">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-634">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-635">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-636">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-637">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-638">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-639">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-640">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-641">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-642">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-643">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-644">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-645">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-646">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-647">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-648">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-648">Required.</span></span> <span data-ttu-id="9c84c-649">Numero di tipo <see langword="Single" /> o qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-650">Restituisce la parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-651">Parte intera di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-652">Sia la `Int` e `Fix` funzioni rimuovono la parte frazionaria di `Number` e restituire il valore intero risultante.</span><span class="sxs-lookup"><span data-stu-id="9c84c-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="9c84c-653">La differenza tra `Int` e `Fix` le funzioni è che se `Number` è un valore negativo `Int` restituisce il primo numero intero negativo minore o uguale a `Number`, mentre `Fix` restituisce il primo numero intero negativo maggiore o uguale a `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="9c84c-654">Ad esempio, `Int` 8,4 -9, e `Fix` 8,4 -8.</span><span class="sxs-lookup"><span data-stu-id="9c84c-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="9c84c-655">`Fix(number)` equivale a `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="9c84c-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="9c84c-656">A partire da Visual Basic 15.8, le prestazioni delle `Single`-per-conversione di un intero è ottimizzata se si passa il valore restituito dal `Int` metodo da uno qualsiasi del [funzioni di conversione integrale](~/docs/visual-basic/language-reference/functions/conversion-functions.md), o se la `Single`valore restituito da `Int` viene convertito automaticamente in un intero con [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) è impostata su Off.</span><span class="sxs-lookup"><span data-stu-id="9c84c-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="9c84c-657">Questa ottimizzazione consente al codice eseguire più rapidamente, un massimo di volte più veloce per il codice che esegue un numero elevato di conversioni di tipi integer.</span><span class="sxs-lookup"><span data-stu-id="9c84c-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="9c84c-658">Nell'esempio seguente viene illustrato questo tipo una conversione ottimizzata:</span><span class="sxs-lookup"><span data-stu-id="9c84c-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="9c84c-659">Questo esempio viene illustrato come la `Int` e `Fix` funzioni restituiscono le parti intere dei numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="9c84c-660">Nel caso di un argomento number è negativo, il `Int` funzione restituisce il primo numero intero negativo minore o uguale al numero; il `Fix` funzione restituisce il primo numero intero negativo maggiore o uguale al numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="9c84c-661">Nell'esempio seguente richiede di specificare `Option Strict Off` poiché le conversioni implicite dal tipo `Double` al tipo `Integer` non sono consentite nel `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="9c84c-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="9c84c-662">È possibile usare la `CInt` funzione per convertire altri tipi di dati in modo esplicito al tipo `Integer` con `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="9c84c-663">Tuttavia, `CInt` consente di arrotondare all'intero più vicino anziché il troncamento la parte frazionaria di numeri.</span><span class="sxs-lookup"><span data-stu-id="9c84c-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="9c84c-664">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="9c84c-665">È possibile usare la `CInt` sul risultato di una chiamata alla funzione `Fix` o `Int` per eseguire una conversione esplicita in un intero senza arrotondamento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="9c84c-666">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9c84c-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="9c84c-667">Per ulteriori informazioni sul `CInt`, vedere [CString](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="9c84c-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-668">Number non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-669">Number non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-670">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="9c84c-671">Riepilogo dei tipi di dati (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="9c84c-672">Riepilogo degli elementi matematici</span><span class="sxs-lookup"><span data-stu-id="9c84c-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="9c84c-673">Funzioni matematiche (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="9c84c-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-674">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9c84c-675">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-676">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-676">Required.</span></span> <span data-ttu-id="9c84c-677">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-678">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-679">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-679">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-680">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-681">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-681">If Number is</span></span>|<span data-ttu-id="9c84c-682">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-683">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-683">Empty</span></span>|<span data-ttu-id="9c84c-684">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-684">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-685">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-685">Any other number</span></span>|<span data-ttu-id="9c84c-686">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-687">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-688">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-689">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-690"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-691"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-692">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-693">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-694">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-694">Required.</span></span> <span data-ttu-id="9c84c-695">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-696">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-697">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-697">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-698">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-699">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-699">If Number is</span></span>|<span data-ttu-id="9c84c-700">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-701">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-701">Empty</span></span>|<span data-ttu-id="9c84c-702">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-702">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-703">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-703">Any other number</span></span>|<span data-ttu-id="9c84c-704">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-705">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-706">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-707">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-708"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-709"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-710">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-711">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-712">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-712">Required.</span></span> <span data-ttu-id="9c84c-713">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-714">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-715">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-715">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-716">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-717">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-717">If Number is</span></span>|<span data-ttu-id="9c84c-718">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-719">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-719">Empty</span></span>|<span data-ttu-id="9c84c-720">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-720">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-721">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-721">Any other number</span></span>|<span data-ttu-id="9c84c-722">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-723">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-724">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-725">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-726"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-727"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-728">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-729">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-730">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-730">Required.</span></span> <span data-ttu-id="9c84c-731">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-732">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-733">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-733">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-734">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-735">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-735">If Number is</span></span>|<span data-ttu-id="9c84c-736">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-737">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-737">Empty</span></span>|<span data-ttu-id="9c84c-738">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-738">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-739">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-739">Any other number</span></span>|<span data-ttu-id="9c84c-740">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-741">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-742">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-743">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-744"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-745"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-746">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-747">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-748">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-748">Required.</span></span> <span data-ttu-id="9c84c-749">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-750">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-751">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-751">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-752">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-753">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-753">If Number is</span></span>|<span data-ttu-id="9c84c-754">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-755">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-755">Empty</span></span>|<span data-ttu-id="9c84c-756">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-756">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-757">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-757">Any other number</span></span>|<span data-ttu-id="9c84c-758">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-759">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-760">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-761">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-762"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-763"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-764">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-765">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-766">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-766">Required.</span></span> <span data-ttu-id="9c84c-767">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-768">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-769">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-769">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-770">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-771">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-771">If Number is</span></span>|<span data-ttu-id="9c84c-772">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-773">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-773">Empty</span></span>|<span data-ttu-id="9c84c-774">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-774">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-775">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-775">Any other number</span></span>|<span data-ttu-id="9c84c-776">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-777">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-778">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-779">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-780"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-781"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-782">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-783">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-784">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-784">Required.</span></span> <span data-ttu-id="9c84c-785">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-786">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-787">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-787">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-788">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-789">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-789">If Number is</span></span>|<span data-ttu-id="9c84c-790">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-791">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-791">Empty</span></span>|<span data-ttu-id="9c84c-792">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-792">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-793">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-793">Any other number</span></span>|<span data-ttu-id="9c84c-794">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-795">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-796">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-797">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-798"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-799"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-800">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-801">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-802">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-802">Required.</span></span> <span data-ttu-id="9c84c-803">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-804">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-805">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-805">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-806">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-807">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-807">If Number is</span></span>|<span data-ttu-id="9c84c-808">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-809">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-809">Empty</span></span>|<span data-ttu-id="9c84c-810">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-810">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-811">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-811">Any other number</span></span>|<span data-ttu-id="9c84c-812">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-813">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-814">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-815">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-816"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-817"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-818">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-819">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-820">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-820">Required.</span></span> <span data-ttu-id="9c84c-821">Qualsiasi espressione numerica o espressione <see langword="String" /> valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-822">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-823">Restituisce una stringa che rappresenta il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-823">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-824">Se `Number` non è già un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="9c84c-825">Se il numero è</span><span class="sxs-lookup"><span data-stu-id="9c84c-825">If Number is</span></span>|<span data-ttu-id="9c84c-826">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="9c84c-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="9c84c-827">Empty</span><span class="sxs-lookup"><span data-stu-id="9c84c-827">Empty</span></span>|<span data-ttu-id="9c84c-828">zero (0)</span><span class="sxs-lookup"><span data-stu-id="9c84c-828">Zero (0)</span></span>|  
|<span data-ttu-id="9c84c-829">Qualsiasi altro numero</span><span class="sxs-lookup"><span data-stu-id="9c84c-829">Any other number</span></span>|<span data-ttu-id="9c84c-830">Fino a 22 caratteri ottali</span><span class="sxs-lookup"><span data-stu-id="9c84c-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="9c84c-831">È possibile rappresentare i numeri ottali direttamente prima dei numeri nell'intervallo corretto `&O`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="9c84c-832">Ad esempio, `&O10` è la notazione ottale per 8 decimale.</span><span class="sxs-lookup"><span data-stu-id="9c84c-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-833">Questo esempio viene usato il `Oct` funzione per restituire il valore ottale di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-834"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-835"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-836">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-837">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="9c84c-838">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-838">Required.</span></span> <span data-ttu-id="9c84c-839">Oggetto <see langword="Object" /> contenente qualsiasi espressione numerica valida.</span><span class="sxs-lookup"><span data-stu-id="9c84c-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="9c84c-840">Restituisce una rappresentazione <see langword="String" /> di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="9c84c-841">Restituisce una rappresentazione <see langword="String" /> di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-841">Returns a <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-842">Quando i numeri vengono convertiti in stringhe, uno spazio iniziale è sempre riservato per il segno di `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="9c84c-843">Se `Number` è positivo, la stringa restituita conterrà uno spazio iniziale e il segno è implicito.</span><span class="sxs-lookup"><span data-stu-id="9c84c-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="9c84c-844">Un numero negativo includerà il segno di sottrazione (-) e senza spazi iniziali.</span><span class="sxs-lookup"><span data-stu-id="9c84c-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="9c84c-845">Usare il `Format` funzione per convertire i valori numerici si desideri venga formattata come date, ore o valuta o in altri formati definiti dall'utente.</span><span class="sxs-lookup"><span data-stu-id="9c84c-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="9c84c-846">A differenza di `Str` funzione, il `Format` funzione non include uno spazio iniziale per il segno di `Number`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9c84c-847">Il `Str` funzione riconosce solo il periodo (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="9c84c-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="9c84c-848">Se vengono usati separatori decimali diversi (ad esempio, in applicazioni internazionali), usare il `CStr` o `Format` funzioni per convertire un numero in una stringa.</span><span class="sxs-lookup"><span data-stu-id="9c84c-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="9c84c-849">Per ottenere la rappresentazione di stringa di un numero in una specifica impostazione cultura, usare il numero `ToString(IFormatProvider)` (metodo).</span><span class="sxs-lookup"><span data-stu-id="9c84c-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="9c84c-850">Ad esempio, usare <xref:System.Double.ToString%2A> durante la conversione di un valore di tipo `Double` in una stringa.</span><span class="sxs-lookup"><span data-stu-id="9c84c-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-851">Questo esempio Usa la `Str` funzione per restituire un `String` rappresentazione di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="9c84c-852">Quando un numero positivo viene convertito in una stringa, uno spazio iniziale è sempre riservato per il segno.</span><span class="sxs-lookup"><span data-stu-id="9c84c-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9c84c-853"><paramref name="Number" /> non specificato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="9c84c-854"><paramref name="Number" /> non è un tipo numerico.</span><span class="sxs-lookup"><span data-stu-id="9c84c-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="9c84c-855">Riepilogo della conversione</span><span class="sxs-lookup"><span data-stu-id="9c84c-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-856">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9c84c-857">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="9c84c-858">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-858">Required.</span></span> <span data-ttu-id="9c84c-859">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span><span class="sxs-lookup"><span data-stu-id="9c84c-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="9c84c-860">Se <paramref name="Expression" /> è di tipo <see langword="Object" />, il valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="9c84c-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="9c84c-861">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="9c84c-862">Numeri contenuti in una stringa come valore numerico di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-863">Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="9c84c-864">I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="9c84c-865">Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="9c84c-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="9c84c-866">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimossi dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="9c84c-867">La chiamata seguente restituisce il valore 1615198.</span><span class="sxs-lookup"><span data-stu-id="9c84c-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="9c84c-868">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="9c84c-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="9c84c-869">Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="9c84c-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="9c84c-870">Quando vengono usati separatori decimali diversi, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="9c84c-871">Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo).</span><span class="sxs-lookup"><span data-stu-id="9c84c-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="9c84c-872">Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="9c84c-873">Un <xref:System.InvalidCastException> eccezione potrebbe essere generata in risposta a determinati formati di numero insoliti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="9c84c-874">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="9c84c-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="9c84c-875">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se non fosse contenuto in una stringa.</span><span class="sxs-lookup"><span data-stu-id="9c84c-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-876">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="9c84c-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="9c84c-877">`Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="9c84c-878"><paramref name="InputStr" /> è troppo grande.</span><span class="sxs-lookup"><span data-stu-id="9c84c-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-879"><paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="9c84c-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-880">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="9c84c-881">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-881">Required.</span></span> <span data-ttu-id="9c84c-882">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span><span class="sxs-lookup"><span data-stu-id="9c84c-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="9c84c-883">Se <paramref name="Expression" /> è di tipo <see langword="Object" />, il valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="9c84c-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="9c84c-884">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="9c84c-885">Numeri contenuti in una stringa come valore numerico di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-886">Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="9c84c-887">I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="9c84c-888">Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="9c84c-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="9c84c-889">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="9c84c-890">La chiamata seguente restituisce il valore 1234123.</span><span class="sxs-lookup"><span data-stu-id="9c84c-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="9c84c-891">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="9c84c-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="9c84c-892">Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="9c84c-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="9c84c-893">Quando vengono utilizzati altri separatori decimali, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="9c84c-894">Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo).</span><span class="sxs-lookup"><span data-stu-id="9c84c-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="9c84c-895">Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9c84c-896">Un <xref:System.InvalidCastException> eccezione potrebbe essere generata in risposta a determinati formati di numero insoliti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="9c84c-897">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="9c84c-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="9c84c-898">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se il conflitto non sono stato inserito in stringhe.</span><span class="sxs-lookup"><span data-stu-id="9c84c-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-899">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="9c84c-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="9c84c-900">`Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="9c84c-901"><paramref name="InputStr" /> è troppo grande.</span><span class="sxs-lookup"><span data-stu-id="9c84c-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-902"><paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="9c84c-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-903">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="9c84c-904">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="9c84c-904">Required.</span></span> <span data-ttu-id="9c84c-905">Qualsiasi espressione <see langword="String" />, variabile <see langword="Object" /> o valore <see langword="Char" /> valido.</span><span class="sxs-lookup"><span data-stu-id="9c84c-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="9c84c-906">Se <paramref name="Expression" /> è di tipo <see langword="Object" />, il valore deve essere convertibile in <see langword="String" /> o si verifica un errore <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="9c84c-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="9c84c-907">Restituisce i numeri contenuti in una stringa come valore numerico del tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="9c84c-908">Numeri contenuti in una stringa come valore numerico di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9c84c-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c84c-909">Il `Val` funzione interrompe la lettura della stringa in corrispondenza del primo carattere non riconosciuti come parte di un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="9c84c-910">I simboli e caratteri che vengono spesso considerati parte dei valori numerici, ad esempio dollaro e le virgole, non sono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="9c84c-911">Tuttavia, la funzione riconosce i prefissi di parametro radix `&O` (per ottale) e `&H` (per esadecimale).</span><span class="sxs-lookup"><span data-stu-id="9c84c-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="9c84c-912">Gli spazi, tabulazioni e caratteri di avanzamento riga vengono rimosse dall'argomento.</span><span class="sxs-lookup"><span data-stu-id="9c84c-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="9c84c-913">La chiamata seguente restituisce il valore 1234123.</span><span class="sxs-lookup"><span data-stu-id="9c84c-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="9c84c-914">La chiamata seguente restituisce il valore decimale -1.</span><span class="sxs-lookup"><span data-stu-id="9c84c-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="9c84c-915">Il `Val` funzione riconosce solo il periodo (`.`) come separatore decimale valido.</span><span class="sxs-lookup"><span data-stu-id="9c84c-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="9c84c-916">Quando vengono utilizzati altri separatori decimali, come le applicazioni interne, usare `CDbl` o `CInt` invece per convertire una stringa in un numero.</span><span class="sxs-lookup"><span data-stu-id="9c84c-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="9c84c-917">Per convertire la rappresentazione di stringa di un numero in una specifica impostazione cultura su un valore numerico, usare il tipo numerico `Parse(String, IFormatProvider)` (metodo).</span><span class="sxs-lookup"><span data-stu-id="9c84c-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="9c84c-918">Ad esempio, usare <xref:System.Double.Parse%2A?displayProperty=nameWithType> quando si converte una stringa in un `Double`.</span><span class="sxs-lookup"><span data-stu-id="9c84c-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9c84c-919">Un <xref:System.InvalidCastException> eccezione può essere generata in risposta a determinati formati di numero insoliti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="9c84c-920">Ad esempio, il codice seguente genera questa eccezione.</span><span class="sxs-lookup"><span data-stu-id="9c84c-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="9c84c-921">Il conflitto tra il numero formattato come un `Double` e il `Integer` e `Long` caratteri di tipo viene rilevati dal compilatore se il conflitto non sono stato inserito in stringhe.</span><span class="sxs-lookup"><span data-stu-id="9c84c-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="9c84c-922">L'esempio seguente usa il `Val` funzione per restituire i numeri contenuti in ciascuna stringa.</span><span class="sxs-lookup"><span data-stu-id="9c84c-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="9c84c-923">`Val` Interrompe la conversione in corrispondenza del primo carattere che non può essere interpretato come una cifra numerica compresa, modificatore numerici, punteggiatura numerica o spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="9c84c-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="9c84c-924"><paramref name="InputStr" /> è troppo grande.</span><span class="sxs-lookup"><span data-stu-id="9c84c-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9c84c-925"><paramref name="Expression" /> è un'espressione di tipo <see langword="Object" /> che non è convertibile in <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="9c84c-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="9c84c-926">CString</span><span class="sxs-lookup"><span data-stu-id="9c84c-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>