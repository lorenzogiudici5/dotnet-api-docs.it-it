<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5814ced66828ade58bba9aa840fb37abacbefcd4" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39790884" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Il modulo <see langword="Information" /> contiene procedure che consentono di restituire, testare o verificare informazioni.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri delle librerie di runtime che forniscono informazioni sull'errore, convalidano i dati, determinano i limiti della matrice e recuperano le informazioni sul tipo e il colore dei dati.  
  
   
  
## Examples  
 L'esempio seguente usa il `VbTypeName` funzione per restituire i nomi dei tipi di dati per diverse variabili.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore intero che indica il numero di riga dell'ultima istruzione eseguita. Sola lettura.</summary>
        <returns>Restituisce un valore intero che indica il numero di riga dell'ultima istruzione eseguita. Sola lettura.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se Visual Basic non rileva Nessun numero di riga, restituisce 0.  
  
   
  
## Examples  
 Questo esempio viene usato il `Erl` proprietà per indicare il numero di riga.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Contiene informazioni sugli errori di runtime.</summary>
        <returns>Contiene informazioni sugli errori di runtime.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le proprietà del `Err` oggetto vengono impostate dal generatore di un errore, Visual Basic, un oggetto o il programmatore.  
  
 Quando si verifica un errore di run-time, le proprietà del `Err` dell'oggetto vengono inserite le informazioni che identifica in modo univoco l'errore e che è possibile usare per gestire l'errore. Per generare un errore di run-time nel codice, usare il `Raise` (metodo).  
  
 Il `Err` le proprietà dell'oggetto vengono reimpostate su zero o stringhe di lunghezza zero ("") dopo un' `Exit Sub`, `Exit Function`, `Exit Property`, o `Resume Next` istruzione all'interno di una routine di gestione degli errori. Usando qualsiasi forma del `Resume` istruzione di fuori di una routine di gestione degli errori non vengono reimpostate il `Err` proprietà dell'oggetto. È possibile usare la `Clear` metodo reimpostare in modo esplicito `Err`.  
  
 Usare la `Raise` metodo anziché il `Error` istruzione per generare errori di runtime per gli errori di sistema e i moduli di classe. La decisione sull'opportunità di utilizzare il `Raise` metodo in un altro codice dipende dalla complessità delle informazioni si desidera restituire.  
  
 Il `Err` è un oggetto funzione intrinseco con ambito globale. Pertanto, non occorre creare un'istanza nel codice.  
  
   
  
## Examples  
 Questo esempio Usa le proprietà del `Err` oggetto per la costruzione di una finestra di dialogo del messaggio di errore. Si noti che se si usa il `Clear` metodo prima, quando si genera un errore di Visual Basic con il `Raise` metodo, i valori predefiniti di Visual Basic diventano le proprietà del `Err` oggetto.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obbligatorio. Variabile <see langword="Object" />.</param>
        <summary>Restituisce un valore <see langword="Boolean" /> che indica se una variabile rimanda a una matrice.</summary>
        <returns>Restituisce un valore <see langword="Boolean" /> che indica se una variabile rimanda a una matrice.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray` Restituisce `True` se la variabile punta a una matrice; in caso contrario, restituisce `False`. `IsArray` è particolarmente utile con gli oggetti che possono contenere matrici.  
  
   
  
## Examples  
 Questo esempio viene usato il `IsArray` funzione per verificare se alcune variabili fanno riferimento a una matrice.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione <see langword="Object" />.</param>
        <summary>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione rappresenta un valore <see langword="Date" /> valido.</summary>
        <returns>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione rappresenta un valore <see langword="Date" /> valido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate` Restituisce `True` se `Expression` è la <xref:System.DateTime> dati digitare oppure può essere convertito a esso; in caso contrario, restituisce `False`.  
  
 Il <xref:System.DateTime> tipo di dati contiene un valore di data e un valore di ora. `IsDate` Restituisce `True` se `Expression` rappresenta una data valida, un'ora valida o una data valida e ora.  
  
   
  
## Examples  
 L'esempio seguente usa il `IsDate` funzione per determinare se alcune variabili rappresentano valido <xref:System.DateTime> valori.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 Nell'esempio precedente, `IsDate` restituisce `True` per le prime quattro chiamate e `False` per l'ultima chiamata.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione <see langword="Object" />.</param>
        <summary>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione restituisce la classe <see cref="T:System.DBNull" />.</summary>
        <returns>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione restituisce la classe <see cref="T:System.DBNull" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull` Restituisce `True` se il tipo di dati `Expression` restituisce il <xref:System.DBNull> tipo; in caso contrario, `IsDBNull` restituisce `False`.  
  
 Il <xref:System.DBNull?displayProperty=nameWithType> valore indica che il `Object` rappresenta dati inesistenti o mancanti. `DBNull` non è identico `Nothing`, che indica che una variabile non è ancora stata inizializzata. `DBNull` Inoltre non è lo stesso come una stringa di lunghezza zero (`""`), talvolta detta una stringa null.  
  
   
  
## Examples  
 Questo esempio Usa la `IsDBNull` funzione per determinare se una variabile viene valutato `DBNull`.  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione <see langword="Object" />.</param>
        <summary>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione è un tipo di eccezione.</summary>
        <returns>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione è un tipo di eccezione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError` Restituisce `True` se l'espressione rappresenta un `Object` variabile da cui deriva il <xref:System.Exception> classe il <xref:System> dello spazio dei nomi.  
  
 Un'eccezione che deriva da <xref:System.Exception?displayProperty=nameWithType> possono essere rilevate con la `Try...Catch...Finally` istruzioni.  
  
   
  
## Examples  
 L'esempio seguente usa il `IsError` funzione per verificare se un'espressione rappresenta un'eccezione di sistema.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione <see langword="Object" />.</param>
        <summary>Restituisce un valore <see langword="Boolean" /> che indica se a un'espressione non è associato alcun oggetto.</summary>
        <returns>Restituisce un valore <see langword="Boolean" /> che indica se a un'espressione non è associato alcun oggetto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing` Restituisce `True` se l'espressione rappresenta una variabile oggetto che ha attualmente alcun oggetto assegnato a esso; in caso contrario, restituisce `False`.  
  
 `IsNothing` è progettato per funzionare su tipi di riferimento. Un tipo di valore non può contenere un valore di e viene ripristinato il valore predefinito se si assegna `Nothing` ad esso. Se si fornisce un tipo di valore in `Expression`, `IsNothing` restituisce sempre `False`.  
  
   
  
## Examples  
 L'esempio seguente usa il `IsNothing` funzione per determinare se una variabile oggetto è associata a un'istanza dell'oggetto.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione <see langword="Object" />.</param>
        <summary>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione può essere valutata come numero.</summary>
        <returns>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione può essere valutata come numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric` Restituisce `True` se il tipo di dati `Expression` viene `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, o `UShort`. Restituisce inoltre `True` se `Expression` è un `Char`, `String`, o `Object` che può essere convertito in un numero. `Expression` può contenere caratteri non numerici. `IsNumeric` Restituisce `True` se `Expression` è una stringa che contiene un numero ottale o esadecimale valido. `IsNumeric` Restituisce inoltre `True` se `Expression` contiene un'espressione numerica valida che inizia con un + o - caratteri o contiene virgole.  
  
 `IsNumeric` Restituisce `False` se `Expression` è del tipo di dati `Date`. Viene restituito `False` se `Expression` è un `Char`, `String`, o `Object` che non può essere convertito in un numero.  
  
   
  
## Examples  
 L'esempio seguente usa il `IsNumeric` funzione per determinare se il contenuto di una variabile può essere valutato come numero.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione <see langword="Object" />.</param>
        <summary>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione restituisce un tipo di riferimento.</summary>
        <returns>Restituisce un valore <see langword="Boolean" /> che indica se un'espressione restituisce un tipo di riferimento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference` Restituisce `True` se `Expression` rappresenta un tipo riferimento, ad esempio un'istanza della classe, una `String` tipo o una matrice di qualsiasi tipo; in caso contrario, restituisce `False`.  
  
 Un tipo di riferimento contiene un puntatore ai dati archiviati in un' posizione in memoria. Un tipo di valore contiene i propri dati.  
  
   
  
## Examples  
 Questo esempio viene usato il `IsReference` funzione per verificare se alcune variabili fanno riferimento ai tipi di riferimento.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 Nell'esempio precedente, i primi tre chiamate a `IsReference` restituire `True`. Restituisce l'ultima chiamata `False`, in quanto `Integer` è un tipo di valore, non un tipo di riferimento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Obbligatorio. Matrice di qualsiasi tipo di dati. Matrice in cui si desidera trovare l'indice più basso possibile di una dimensione.</param>
        <param name="Rank">Facoltativo. <see langword="Integer" />. Dimensione per cui deve essere restituito l'indice più basso possibile. Utilizzare 1 per la prima dimensione, 2 per la seconda e così via. Se <c>Rank</c> viene omesso, viene usato il valore 1.</param>
        <summary>Restituisce l'indice più basso disponibile per la dimensione indicata di una matrice.</summary>
        <returns>
          <see langword="Integer" />. Valore più basso che può essere contenuto nell'indice per la dimensione specificata. <see langword="LBound" /> restituisce sempre 0 purché <paramref name="Array" /> sia stato inizializzato, anche se privo di elementi, ad esempio se è una stringa di lunghezza zero. Se <paramref name="Array" /> è <see langword="Nothing" />, <see langword="LBound" /> genera un oggetto <see cref="T:System.ArgumentNullException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dato che gli indici di matrice partono da 0, l'indice minimo di qualsiasi dimensione è sempre 0.  
  
 Per una matrice con le dimensioni seguenti, `LBound` restituisce i valori nella tabella seguente:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Le chiamate a LBound|Valore restituito|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 L'esempio seguente usa il `LBound` funzione per determinare l'indice più basso disponibile per la dimensione indicata di una matrice.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Array" /> è <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException">
          <paramref name="Rank" /> è minore di 1 oppure <paramref name="Rank" /> è maggiore del numero di dimensioni di <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">Obbligatorio. Numero intero compreso nell'intervallo tra 0 e 15.</param>
        <summary>Restituisce un <see langword="Integer" /> che rappresenta il codice di colore RGB corrispondente al numero di colore specificato.</summary>
        <returns>Restituisce un <see langword="Integer" /> che rappresenta il codice di colore RGB corrispondente al numero di colore specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Iniziando con il byte meno significativo, il valore restituito specifica i valori di colore rosso, verdi e blu, utilizzati per impostare il colore appropriato nel sistema RGB usato dal linguaggio Visual Basic.  
  
 Il `Color` argomento presenta le impostazioni.  
  
|Number|Colore|Number|Colore|  
|------------|-----------|------------|-----------|  
|0|Nero|8|Grigio|  
|1|Blu|9|Blu chiaro|  
|2|Verde|10|Verde chiaro|  
|3|Azzurro|11|Azzurro tenue|  
|4|Rosso|12|Rosso|  
|5|Magenta|13|Magenta chiaro|  
|6|Giallo|14|Giallo chiaro|  
|7|Bianco|15|Sfondo bianco|  
  
   
  
## Examples  
 Questo esempio Usa la `QBColor` funzione per modificare il colore indicato da `colorInteger`. `QBColor` accetta valori interi compresi tra 0 e 15.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Color" /> non rientra nell'intervallo compreso tra 0 e 15, estremi inclusi.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">Obbligatorio. <see langword="Integer" /> nell'intervallo compreso tra 0 e 255 inclusi, che rappresenta l'intensità del componente rosso del colore.</param>
        <param name="Green">Obbligatorio. <see langword="Integer" /> nell'intervallo compreso tra 0 e 255 inclusi, che rappresenta l'intensità del componente verde del colore.</param>
        <param name="Blue">Obbligatorio. <see langword="Integer" /> nell'intervallo compreso tra 0 e 255 inclusi, che rappresenta l'intensità del componente blu del colore.</param>
        <summary>Restituisce un <see langword="Integer" /> che rappresenta un valore di colore RGB da un set di componenti rosso, verde e blu.</summary>
        <returns>Restituisce un <see langword="Integer" /> che rappresenta un valore di colore RGB da un set di componenti rosso, verde e blu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per i metodi e proprietà che accettano una specifica di colori aspettarsi che specifica un numero che rappresenta un RGB valore del colore. Un valore di colore RGB specifica l'intensità di colore rosso, verde e blu a causa di un colore specifico da visualizzare.  
  
 Se il valore per qualsiasi argomento a `RGB` è maggiore di 255, 255 viene utilizzato.  
  
 La tabella seguente elenca alcuni colori standard e i valori di colore rosso, verdi e blu che includono.  
  
|Colore|Valore del rosso|Valore di colore verde|Valore di colore blu|  
|-----------|---------------|-----------------|----------------|  
|Nero|0|0|0|  
|Blu|0|0|255|  
|Verde|0|255|0|  
|Azzurro|0|255|255|  
|Rosso|255|0|0|  
|Magenta|255|0|255|  
|Giallo|255|255|0|  
|Bianco|255|255|255|  
  
   
  
## Examples  
 Questo esempio viene illustrato come la `RGB` funzione viene utilizzata per restituire un numero intero che rappresenta un `RGB` valore del colore.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Green" />, <paramref name="Blue" /> o <paramref name="Red" /> non rientra nell'intervallo compreso tra 0 e 255, estremi inclusi.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">Obbligatorio. Variabile <see langword="String" /> contenente un nome di tipo di Visual Basic.</param>
        <summary>Restituisce un valore <see langword="String" /> contenente il nome del tipo di dati di sistema di una variabile.</summary>
        <returns>Restituisce un valore <see langword="String" /> contenente il nome del tipo di dati di sistema di una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName` Restituisce il common language runtime (CLR) digitare nome completo corrispondente al nome di tipo Visual Basic. Ad esempio, se `VbName` contiene "Data", `SystemTypeName` restituisce "DateTime". Se `SystemTypeName` non riconosce il valore di `VbName`, viene restituito `Nothing` (non la stringa "Nothing").  
  
   
  
## Examples  
 L'esempio seguente usa il `SystemTypeName` funzione per restituire i nomi dei tipi di dati per diverse variabili.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obbligatorio. Variabile <see langword="Object" />. Se <see langword="Option Strict" /> è <see langword="Off" />, è possibile passare una variabile di qualsiasi tipo di dati tranne una struttura.</param>
        <summary>Restituisce un valore <see langword="String" /> contenente informazioni relative al tipo di dati per una variabile.</summary>
        <returns>Restituisce un valore <see langword="String" /> contenente informazioni relative al tipo di dati per una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente illustra il `String` valori restituiti dalle `TypeName` per diversi tipi di contenuto di `VarName`.  
  
|`VarName` Contenuto|Stringa restituita|  
|------------------------|---------------------|  
|16-bit `True` o `False` tipo valore|"Boolean"|  
|tipo di valore binario a 8 bit|"Byte"|  
|tipo di valore di carattere a 16 bit|"Char"|  
|tipo di valore a 64 bit data e ora|"Data"|  
|Tipo di riferimento che indica dati mancanti o non esistenti|"DBNull"|  
|tipo di valore numerico a virgola fissa a 128 bit|"Decimale"|  
|tipo di valore numerico a virgola mobile a 64 bit|"Double"|  
|tipo di valore integer a 32 bit|"Integer"|  
|Tipo di riferimento che punta a un oggetto non specializzato|"Object"|  
|Tipo di riferimento che punta a un oggetto specifico creato dalla classe *objectclass*|"*objectclass*"|  
|tipo di valore integer a 64 bit|"Long"|  
|Tipo di riferimento con alcun oggetto attualmente assegnato|"Nothing"|  
|tipo di valore intero con segno a 8 bit|"SByte"|  
|tipo di valore integer a 16 bit|"Short"|  
|tipo di valore numerico a virgola mobile a 32 bit|"Single"|  
|Tipo di riferimento che punta a una stringa di caratteri a 16 bit|"String"|  
|tipo di valore intero senza segno a 32 bit|"UInteger"|  
|tipo di valore intero senza segno a 64 bit|"ULong"|  
|tipo di valore intero senza segno a 16 bit|"UShort"|  
  
 Se `VarName` è una matrice, la stringa restituita può essere una delle stringhe nella tabella precedente con parentesi vuote. Ad esempio, se `VarName` punta a una matrice di numeri interi, `TypeName` restituisce "Integer".  
  
 Quando si `TypeName` restituisce il nome di un tipo riferimento, ad esempio una classe, viene restituito solo il nome, non il nome completo. Ad esempio, se `VarName` punta a un oggetto della classe <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` restituisce "PaperSource". Si noti che se la variabile è dichiarata di un determinato tipo di classe ma non dispone di un oggetto assegnato, `TypeName` restituisce "Nothing".  
  
   
  
## Examples  
 L'esempio seguente usa il `TypeName` funzione per restituire informazioni sul tipo di dati su diverse variabili.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Obbligatorio. Matrice di qualsiasi tipo di dati. Matrice in cui si desidera trovare l'indice più alto possibile di una dimensione.</param>
        <param name="Rank">Facoltativo. <see langword="Integer" />. Dimensione per cui deve essere restituito l'indice più alto possibile. Utilizzare 1 per la prima dimensione, 2 per la seconda e così via. Se <c>Rank</c> viene omesso, viene usato il valore 1.</param>
        <summary>Restituisce l'indice più alto disponibile per la dimensione indicata di una matrice.</summary>
        <returns>
          <see langword="Integer" />. Il valore più alto possibile che può essere contenuto nell'indice per la dimensione specificata. Se <paramref name="Array" /> ha un solo elemento, <see langword="UBound" /> restituisce 0. Se <paramref name="Array" /> non ha elementi, ad esempio se è una stringa di lunghezza zero, <see langword="UBound" /> restituisce -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché gli indici di matrice iniziano da 0, la lunghezza di una dimensione è maggiore di quello l'indice più alto disponibile per la dimensione.  
  
 Per una matrice con le dimensioni seguenti, `UBound` restituisce i valori nella tabella seguente:  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Le chiamate a UBound|Valore restituito|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 È possibile usare `UBound` per determinare il totale numero di elementi in una matrice, ma è necessario modificare il valore restituito per conto del fatto che gli indici iniziano da 0. L'esempio seguente calcola la dimensione totale della matrice `a` nell'esempio precedente:  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 Il valore calcolato per `total` è 3030, vale a dire 101 * 6 * 5.  
  
   
  
## Examples  
 L'esempio seguente usa il `UBound` funzione per determinare l'indice più alto disponibile per la dimensione indicata di una matrice.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Array" /> è <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException">
          <paramref name="Rank" /> è minore di 1 oppure <paramref name="Rank" /> è maggiore del numero di dimensioni di <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obbligatorio. Variabile <see langword="Object" />. Se <see langword="Option Strict" /> è <see langword="Off" />, è possibile passare una variabile di qualsiasi tipo di dati tranne una struttura.</param>
        <summary>Restituisce un valore <see langword="Integer" /> contenente la classificazione del tipo di dati di una variabile.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> contenente la classificazione del tipo di dati di una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore intero restituito da `VarType` è un membro del <xref:Microsoft.VisualBasic.VariantType>.  
  
 La tabella seguente illustra i valori restituiti da `VarType` per i casi speciali di `VarName`.  
  
|Tipo di dati rappresentato da `VarName`|Valore restituito da `VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|Enumerazione|Tipo di dati sottostante (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, o `ULong`)|  
|Matrice|OR bit per bit del tipo di elemento di matrice e `VariantType.Array`|  
|Matrice di matrici|OR bit per bit di `VariantType.Object` e `VariantType.Array`|  
|Struttura (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|Sconosciuto|`VariantType.Object`|  
  
   
  
## Examples  
 L'esempio seguente usa il `VarType` funzione per restituire informazioni di classificazione del tipo di dati su diverse variabili.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">Obbligatorio. Variabile <see langword="String" /> contenente un nome del tipo utilizzato da Common Language Runtime.</param>
        <summary>Restituisce un valore <see langword="String" /> contenente il nome del tipo di dati di Visual Basic di una variabile.</summary>
        <returns>Restituisce un valore <see langword="String" /> contenente il nome del tipo di dati di Visual Basic di una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName` Restituisce il nome di tipo Visual Basic corrispondente al nome del tipo common language runtime. Ad esempio, se `UrtName` contiene "Int32" o "Int32", `VbTypeName` restituisce "Integer". Se `VbTypeName` non riconosce il valore di `UrtName`, viene restituito `Nothing` (non la stringa "Nothing").  
  
 Il nome del tipo in `UrtName` può essere ottenuto da diverse origini, ad esempio dal <xref:System.Reflection.MemberInfo.Name%2A> proprietà nel <xref:System.Reflection.MemberInfo> matrice del <xref:System.Type> classe.  
  
   
  
## Examples  
 L'esempio seguente usa il `VbTypeName` funzione per restituire i nomi dei tipi di dati per diverse variabili.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>