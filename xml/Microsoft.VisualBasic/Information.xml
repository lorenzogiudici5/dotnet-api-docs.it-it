<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f181a-101">Il modulo <see langword="Information" /> contiene procedure che consentono di restituire, testare o verificare informazioni.</span><span class="sxs-lookup"><span data-stu-id="f181a-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-102">Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri delle librerie di runtime che forniscono informazioni sull'errore, convalidano i dati, determinano i limiti di matrice e recuperano le informazioni sul tipo e il colore di dati.</span><span class="sxs-lookup"><span data-stu-id="f181a-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-103">L'esempio seguente usa il `VbTypeName` funzione per restituire i nomi dei tipi di dati di diverse variabili.</span><span class="sxs-lookup"><span data-stu-id="f181a-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f181a-104">Restituisce un valore intero che indica il numero di riga dell'ultima istruzione eseguita.</span><span class="sxs-lookup"><span data-stu-id="f181a-104">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="f181a-105">Sola lettura.</span><span class="sxs-lookup"><span data-stu-id="f181a-105">Read-only.</span></span></summary>
        <returns><span data-ttu-id="f181a-106">Restituisce un valore intero che indica il numero di riga dell'ultima istruzione eseguita.</span><span class="sxs-lookup"><span data-stu-id="f181a-106">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="f181a-107">Sola lettura.</span><span class="sxs-lookup"><span data-stu-id="f181a-107">Read-only.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-108">Se Visual Basic rilevati numeri di riga, viene restituito 0.</span><span class="sxs-lookup"><span data-stu-id="f181a-108">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-109">Questo esempio viene utilizzato il `Erl` proprietà per indicare il numero di riga.</span><span class="sxs-lookup"><span data-stu-id="f181a-109">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f181a-110">Contiene informazioni sugli errori di runtime.</span><span class="sxs-lookup"><span data-stu-id="f181a-110">Contains information about run-time errors.</span></span></summary>
        <returns><span data-ttu-id="f181a-111">Contiene informazioni sugli errori di runtime.</span><span class="sxs-lookup"><span data-stu-id="f181a-111">Contains information about run-time errors.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-112">Le proprietà del `Err` oggetto vengono impostate dal generatore di un errore, Visual Basic, un oggetto o il programmatore.</span><span class="sxs-lookup"><span data-stu-id="f181a-112">The properties of the `Err` object are set by the generator of an error—Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="f181a-113">Quando si verifica un errore di run-time, le proprietà del `Err` dell'oggetto vengono inserite le informazioni che identifica in modo univoco l'errore e che è possibile utilizzare per gestire l'errore.</span><span class="sxs-lookup"><span data-stu-id="f181a-113">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="f181a-114">Per generare un errore di run-time nel codice, utilizzare il `Raise` metodo.</span><span class="sxs-lookup"><span data-stu-id="f181a-114">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="f181a-115">Il `Err` le proprietà dell'oggetto vengono reimpostate su zero o stringhe di lunghezza zero ("") dopo un `Exit Sub`, `Exit Function`, `Exit Property`, o `Resume Next` all'interno di una routine di gestione degli errori.</span><span class="sxs-lookup"><span data-stu-id="f181a-115">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="f181a-116">Usando qualsiasi forma del `Resume` istruzione di fuori di una routine di gestione degli errori non vengono reimpostate le `Err` proprietà dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f181a-116">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="f181a-117">È possibile utilizzare il `Clear` per reimpostare in modo esplicito `Err`.</span><span class="sxs-lookup"><span data-stu-id="f181a-117">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="f181a-118">Utilizzare il `Raise` metodo anziché `Error` istruzione per generare errori di runtime per errori di sistema e i moduli di classe.</span><span class="sxs-lookup"><span data-stu-id="f181a-118">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="f181a-119">La decisione sulla possibilità di usare il `Raise` metodo in altro codice dipende dalla complessità delle informazioni si desidera restituire.</span><span class="sxs-lookup"><span data-stu-id="f181a-119">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="f181a-120">Il `Err` è un oggetto intrinseco con ambito globale.</span><span class="sxs-lookup"><span data-stu-id="f181a-120">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="f181a-121">Pertanto, non è necessario creare un'istanza nel codice.</span><span class="sxs-lookup"><span data-stu-id="f181a-121">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-122">In questo esempio Usa le proprietà del `Err` oggetto per la costruzione di una finestra di dialogo del messaggio di errore.</span><span class="sxs-lookup"><span data-stu-id="f181a-122">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="f181a-123">Si noti che se si utilizza il `Clear` metodo primo, quando si genera un errore di Visual Basic con il `Raise` (metodo), i valori predefiniti di Visual Basic diventano le proprietà del `Err` oggetto.</span><span class="sxs-lookup"><span data-stu-id="f181a-123">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="f181a-124">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-124">Required.</span></span> <span data-ttu-id="f181a-125">Variabile <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-125"><see langword="Object" /> variable.</span></span></param>
        <summary><span data-ttu-id="f181a-126">Restituisce un valore <see langword="Boolean" /> che indica se una variabile rimanda a una matrice.</span><span class="sxs-lookup"><span data-stu-id="f181a-126">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></summary>
        <returns><span data-ttu-id="f181a-127">Restituisce un valore <see langword="Boolean" /> che indica se una variabile rimanda a una matrice.</span><span class="sxs-lookup"><span data-stu-id="f181a-127">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-128">`IsArray` Restituisce `True` se la variabile punta a una matrice; in caso contrario, restituisce `False`.</span><span class="sxs-lookup"><span data-stu-id="f181a-128">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="f181a-129">`IsArray` è particolarmente utile con gli oggetti che potrebbero contenere matrici.</span><span class="sxs-lookup"><span data-stu-id="f181a-129">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-130">Questo esempio viene utilizzato il `IsArray` funzione per verificare se diverse variabili fanno riferimento a una matrice.</span><span class="sxs-lookup"><span data-stu-id="f181a-130">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="f181a-131">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-131">Required.</span></span> <span data-ttu-id="f181a-132">Espressione <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-132"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="f181a-133">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione rappresenta un valore <see langword="Date" /> valido.</span><span class="sxs-lookup"><span data-stu-id="f181a-133">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></summary>
        <returns><span data-ttu-id="f181a-134">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione rappresenta un valore <see langword="Date" /> valido.</span><span class="sxs-lookup"><span data-stu-id="f181a-134">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-135">`IsDate` Restituisce `True` se `Expression` è il <xref:System.DateTime> dati digitare oppure può essere convertito a esso; in caso contrario, restituisce `False`.</span><span class="sxs-lookup"><span data-stu-id="f181a-135">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="f181a-136">Il <xref:System.DateTime> tipo di dati contiene un valore di data e un valore di ora.</span><span class="sxs-lookup"><span data-stu-id="f181a-136">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="f181a-137">`IsDate` Restituisce `True` se `Expression` rappresenta una data valida, un'ora valida o una data valida e ora.</span><span class="sxs-lookup"><span data-stu-id="f181a-137">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-138">L'esempio seguente usa il `IsDate` funzione per determinare se diverse variabili rappresentano valido <xref:System.DateTime> valori.</span><span class="sxs-lookup"><span data-stu-id="f181a-138">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="f181a-139">Nell'esempio precedente, `IsDate` restituisce `True` per le prime quattro chiamate e `False` per l'ultima chiamata.</span><span class="sxs-lookup"><span data-stu-id="f181a-139">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="f181a-140">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-140">Required.</span></span> <span data-ttu-id="f181a-141">Espressione <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-141"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="f181a-142">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione restituisce la classe <see cref="T:System.DBNull" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-142">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></summary>
        <returns><span data-ttu-id="f181a-143">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione restituisce la classe <see cref="T:System.DBNull" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-143">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-144">`IsDBNull` Restituisce `True` se il tipo di dati `Expression` restituisce il <xref:System.DBNull> tipo; in caso contrario, `IsDBNull` restituisce `False`.</span><span class="sxs-lookup"><span data-stu-id="f181a-144">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="f181a-145">Il <xref:System.DBNull?displayProperty=nameWithType> valore indica che il `Object` rappresenta i dati mancanti o non esistenti.</span><span class="sxs-lookup"><span data-stu-id="f181a-145">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="f181a-146">`DBNull` non è identico `Nothing`, che indica che una variabile non è stata inizializzata.</span><span class="sxs-lookup"><span data-stu-id="f181a-146">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="f181a-147">`DBNull` Inoltre non è lo stesso come una stringa di lunghezza zero (`""`), talvolta detta una stringa null.</span><span class="sxs-lookup"><span data-stu-id="f181a-147">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-148">Questo esempio viene utilizzato il `IsDBNull` funzione per determinare se una variabile viene valutato `DBNull`.</span><span class="sxs-lookup"><span data-stu-id="f181a-148">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="f181a-149">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-149">Required.</span></span> <span data-ttu-id="f181a-150">Espressione <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-150"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="f181a-151">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione è un tipo di eccezione.</span><span class="sxs-lookup"><span data-stu-id="f181a-151">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></summary>
        <returns><span data-ttu-id="f181a-152">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione è un tipo di eccezione.</span><span class="sxs-lookup"><span data-stu-id="f181a-152">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-153">`IsError` Restituisce `True` se l'espressione rappresenta un `Object` variabile da cui deriva il <xref:System.Exception> classe il <xref:System> dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="f181a-153">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="f181a-154">Un'eccezione che deriva da <xref:System.Exception?displayProperty=nameWithType> possono essere rilevate con la `Try...Catch...Finally` istruzioni.</span><span class="sxs-lookup"><span data-stu-id="f181a-154">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-155">L'esempio seguente usa il `IsError` funzione per verificare se un'espressione rappresenta un'eccezione di sistema.</span><span class="sxs-lookup"><span data-stu-id="f181a-155">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="f181a-156">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-156">Required.</span></span> <span data-ttu-id="f181a-157">Espressione <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-157"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="f181a-158">Restituisce un valore <see langword="Boolean" /> che indica se a un'espressione non è associato alcun oggetto.</span><span class="sxs-lookup"><span data-stu-id="f181a-158">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></summary>
        <returns><span data-ttu-id="f181a-159">Restituisce un valore <see langword="Boolean" /> che indica se a un'espressione non è associato alcun oggetto.</span><span class="sxs-lookup"><span data-stu-id="f181a-159">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-160">`IsNothing` Restituisce `True` se l'espressione rappresenta una variabile oggetto che attualmente non ha alcun oggetto assegnato a esso; in caso contrario, restituisce `False`.</span><span class="sxs-lookup"><span data-stu-id="f181a-160">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="f181a-161">`IsNothing` è progettato per funzionare su tipi di riferimento.</span><span class="sxs-lookup"><span data-stu-id="f181a-161">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="f181a-162">Un tipo di valore non può contenere un valore e viene ripristinato il valore predefinito, se si assegna `Nothing` a esso.</span><span class="sxs-lookup"><span data-stu-id="f181a-162">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="f181a-163">Se si specifica un tipo di valore in `Expression`, `IsNothing` restituisce sempre `False`.</span><span class="sxs-lookup"><span data-stu-id="f181a-163">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-164">L'esempio seguente usa il `IsNothing` funzione per determinare se una variabile oggetto è associata a un'istanza dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f181a-164">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="f181a-165">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-165">Required.</span></span> <span data-ttu-id="f181a-166">Espressione <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-166"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="f181a-167">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione può essere valutata come numero.</span><span class="sxs-lookup"><span data-stu-id="f181a-167">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></summary>
        <returns><span data-ttu-id="f181a-168">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione può essere valutata come numero.</span><span class="sxs-lookup"><span data-stu-id="f181a-168">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-169">`IsNumeric` Restituisce `True` se il tipo di dati `Expression` è `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, o `UShort`.</span><span class="sxs-lookup"><span data-stu-id="f181a-169">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="f181a-170">Restituisce inoltre `True` se `Expression` è un `Char`, `String`, o `Object` che può essere convertito in un numero.</span><span class="sxs-lookup"><span data-stu-id="f181a-170">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="f181a-171">`Expression` può contenere caratteri non numerici.</span><span class="sxs-lookup"><span data-stu-id="f181a-171">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="f181a-172">`IsNumeric` Restituisce `True` se `Expression` è una stringa che contiene un numero esadecimale o ottale.</span><span class="sxs-lookup"><span data-stu-id="f181a-172">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="f181a-173">`IsNumeric` Restituisce inoltre `True` se `Expression` contiene un'espressione numerica valida che inizia con un + o - caratteri o contiene virgole.</span><span class="sxs-lookup"><span data-stu-id="f181a-173">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="f181a-174">`IsNumeric` Restituisce `False` se `Expression` è di tipo di dati `Date`.</span><span class="sxs-lookup"><span data-stu-id="f181a-174">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="f181a-175">Restituisce `False` se `Expression` è un `Char`, `String`, o `Object` che non può essere convertito in un numero.</span><span class="sxs-lookup"><span data-stu-id="f181a-175">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-176">L'esempio seguente usa il `IsNumeric` funzione per determinare se il contenuto di una variabile può essere valutato come un numero.</span><span class="sxs-lookup"><span data-stu-id="f181a-176">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="f181a-177">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-177">Required.</span></span> <span data-ttu-id="f181a-178">Espressione <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-178"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="f181a-179">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione restituisce un tipo di riferimento.</span><span class="sxs-lookup"><span data-stu-id="f181a-179">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></summary>
        <returns><span data-ttu-id="f181a-180">Restituisce un valore <see langword="Boolean" /> che indica se un'espressione restituisce un tipo di riferimento.</span><span class="sxs-lookup"><span data-stu-id="f181a-180">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-181">`IsReference` Restituisce `True` se `Expression` rappresenta un tipo riferimento, ad esempio un'istanza della classe, un `String` tipo o una matrice di qualsiasi tipo; in caso contrario, restituisce `False`.</span><span class="sxs-lookup"><span data-stu-id="f181a-181">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="f181a-182">Un tipo di riferimento contiene un puntatore ai dati archiviati in un' posizione in memoria.</span><span class="sxs-lookup"><span data-stu-id="f181a-182">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="f181a-183">Un tipo di valore contiene i propri dati.</span><span class="sxs-lookup"><span data-stu-id="f181a-183">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-184">Questo esempio viene utilizzato il `IsReference` funzione per verificare se diverse variabili fanno riferimento ai tipi di riferimento.</span><span class="sxs-lookup"><span data-stu-id="f181a-184">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="f181a-185">Nell'esempio precedente, le prime tre chiamate a `IsReference` restituire `True`.</span><span class="sxs-lookup"><span data-stu-id="f181a-185">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="f181a-186">Restituisce l'ultima chiamata `False`perché `Integer` è un tipo di valore, non un tipo di riferimento.</span><span class="sxs-lookup"><span data-stu-id="f181a-186">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="f181a-187">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-187">Required.</span></span> <span data-ttu-id="f181a-188">Matrice di qualsiasi tipo di dati.</span><span class="sxs-lookup"><span data-stu-id="f181a-188">Array of any data type.</span></span> <span data-ttu-id="f181a-189">Matrice in cui si desidera trovare l'indice più basso possibile di una dimensione.</span><span class="sxs-lookup"><span data-stu-id="f181a-189">The array in which you want to find the lowest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="f181a-190">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f181a-190">Optional.</span></span> <span data-ttu-id="f181a-191"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-191"><see langword="Integer" />.</span></span> <span data-ttu-id="f181a-192">Dimensione per cui deve essere restituito l'indice più basso possibile.</span><span class="sxs-lookup"><span data-stu-id="f181a-192">The dimension for which the lowest possible subscript is to be returned.</span></span> <span data-ttu-id="f181a-193">Utilizzare 1 per la prima dimensione, 2 per la seconda e così via.</span><span class="sxs-lookup"><span data-stu-id="f181a-193">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="f181a-194">Se <c>Rank</c> viene omesso, viene usato il valore 1.</span><span class="sxs-lookup"><span data-stu-id="f181a-194">If <c>Rank</c> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="f181a-195">Restituisce l'indice più basso disponibile per la dimensione indicata di una matrice.</span><span class="sxs-lookup"><span data-stu-id="f181a-195">Returns the lowest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns>
          <span data-ttu-id="f181a-196"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-196"><see langword="Integer" />.</span></span> <span data-ttu-id="f181a-197">Valore più basso che può essere contenuto nell'indice per la dimensione specificata.</span><span class="sxs-lookup"><span data-stu-id="f181a-197">The lowest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="f181a-198"><see langword="LBound" /> restituisce sempre 0 purché <paramref name="Array" /> sia stato inizializzato, anche se privo di elementi, ad esempio se è una stringa di lunghezza zero.</span><span class="sxs-lookup"><span data-stu-id="f181a-198"><see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span></span> <span data-ttu-id="f181a-199">Se <paramref name="Array" /> è <see langword="Nothing" />, <see langword="LBound" /> genera un oggetto <see cref="T:System.ArgumentNullException" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-199">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-200">Dato che gli indici di matrice partono da 0, l'indice minimo di qualsiasi dimensione è sempre 0.</span><span class="sxs-lookup"><span data-stu-id="f181a-200">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="f181a-201">Per una matrice con le seguenti dimensioni `LBound` restituisce i valori nella tabella seguente:</span><span class="sxs-lookup"><span data-stu-id="f181a-201">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="f181a-202">Chiamata di LBound</span><span class="sxs-lookup"><span data-stu-id="f181a-202">Call to LBound</span></span>|<span data-ttu-id="f181a-203">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="f181a-203">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="f181a-204">0</span><span class="sxs-lookup"><span data-stu-id="f181a-204">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="f181a-205">0</span><span class="sxs-lookup"><span data-stu-id="f181a-205">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="f181a-206">0</span><span class="sxs-lookup"><span data-stu-id="f181a-206">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f181a-207">L'esempio seguente usa il `LBound` funzione per determinare l'indice più basso disponibile per la dimensione della matrice indicata.</span><span class="sxs-lookup"><span data-stu-id="f181a-207">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f181a-208"><paramref name="Array" /> è <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-208"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="f181a-209"><paramref name="Rank" /> è minore di 1 oppure <paramref name="Rank" /> è maggiore del numero di dimensioni di <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-209"><paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color"><span data-ttu-id="f181a-210">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-210">Required.</span></span> <span data-ttu-id="f181a-211">Numero intero compreso nell'intervallo tra 0 e 15.</span><span class="sxs-lookup"><span data-stu-id="f181a-211">A whole number in the range 0–15.</span></span></param>
        <summary><span data-ttu-id="f181a-212">Restituisce un <see langword="Integer" /> che rappresenta il codice di colore RGB corrispondente al numero di colore specificato.</span><span class="sxs-lookup"><span data-stu-id="f181a-212">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></summary>
        <returns><span data-ttu-id="f181a-213">Restituisce un <see langword="Integer" /> che rappresenta il codice di colore RGB corrispondente al numero di colore specificato.</span><span class="sxs-lookup"><span data-stu-id="f181a-213">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-214">A partire dal byte meno significativo, il valore restituito specifica i valori di rossi, verde e blu utilizzati per impostare il colore adatto nel sistema RGB usato dal linguaggio Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f181a-214">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="f181a-215">Il `Color` presenta le impostazioni.</span><span class="sxs-lookup"><span data-stu-id="f181a-215">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="f181a-216">Number</span><span class="sxs-lookup"><span data-stu-id="f181a-216">Number</span></span>|<span data-ttu-id="f181a-217">Colore</span><span class="sxs-lookup"><span data-stu-id="f181a-217">Color</span></span>|<span data-ttu-id="f181a-218">Number</span><span class="sxs-lookup"><span data-stu-id="f181a-218">Number</span></span>|<span data-ttu-id="f181a-219">Colore</span><span class="sxs-lookup"><span data-stu-id="f181a-219">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="f181a-220">0</span><span class="sxs-lookup"><span data-stu-id="f181a-220">0</span></span>|<span data-ttu-id="f181a-221">Nero</span><span class="sxs-lookup"><span data-stu-id="f181a-221">Black</span></span>|<span data-ttu-id="f181a-222">8</span><span class="sxs-lookup"><span data-stu-id="f181a-222">8</span></span>|<span data-ttu-id="f181a-223">Grigio</span><span class="sxs-lookup"><span data-stu-id="f181a-223">Gray</span></span>|  
|<span data-ttu-id="f181a-224">1</span><span class="sxs-lookup"><span data-stu-id="f181a-224">1</span></span>|<span data-ttu-id="f181a-225">Blu</span><span class="sxs-lookup"><span data-stu-id="f181a-225">Blue</span></span>|<span data-ttu-id="f181a-226">9</span><span class="sxs-lookup"><span data-stu-id="f181a-226">9</span></span>|<span data-ttu-id="f181a-227">Celeste</span><span class="sxs-lookup"><span data-stu-id="f181a-227">Light blue</span></span>|  
|<span data-ttu-id="f181a-228">2</span><span class="sxs-lookup"><span data-stu-id="f181a-228">2</span></span>|<span data-ttu-id="f181a-229">Verde</span><span class="sxs-lookup"><span data-stu-id="f181a-229">Green</span></span>|<span data-ttu-id="f181a-230">10</span><span class="sxs-lookup"><span data-stu-id="f181a-230">10</span></span>|<span data-ttu-id="f181a-231">Verde chiaro</span><span class="sxs-lookup"><span data-stu-id="f181a-231">Light green</span></span>|  
|<span data-ttu-id="f181a-232">3</span><span class="sxs-lookup"><span data-stu-id="f181a-232">3</span></span>|<span data-ttu-id="f181a-233">ciano</span><span class="sxs-lookup"><span data-stu-id="f181a-233">Cyan</span></span>|<span data-ttu-id="f181a-234">11</span><span class="sxs-lookup"><span data-stu-id="f181a-234">11</span></span>|<span data-ttu-id="f181a-235">Azzurro</span><span class="sxs-lookup"><span data-stu-id="f181a-235">Light cyan</span></span>|  
|<span data-ttu-id="f181a-236">4</span><span class="sxs-lookup"><span data-stu-id="f181a-236">4</span></span>|<span data-ttu-id="f181a-237">Rosso</span><span class="sxs-lookup"><span data-stu-id="f181a-237">Red</span></span>|<span data-ttu-id="f181a-238">12</span><span class="sxs-lookup"><span data-stu-id="f181a-238">12</span></span>|<span data-ttu-id="f181a-239">Rosso</span><span class="sxs-lookup"><span data-stu-id="f181a-239">Light red</span></span>|  
|<span data-ttu-id="f181a-240">5</span><span class="sxs-lookup"><span data-stu-id="f181a-240">5</span></span>|<span data-ttu-id="f181a-241">Magenta</span><span class="sxs-lookup"><span data-stu-id="f181a-241">Magenta</span></span>|<span data-ttu-id="f181a-242">13</span><span class="sxs-lookup"><span data-stu-id="f181a-242">13</span></span>|<span data-ttu-id="f181a-243">Magenta chiaro</span><span class="sxs-lookup"><span data-stu-id="f181a-243">Light magenta</span></span>|  
|<span data-ttu-id="f181a-244">6</span><span class="sxs-lookup"><span data-stu-id="f181a-244">6</span></span>|<span data-ttu-id="f181a-245">Giallo</span><span class="sxs-lookup"><span data-stu-id="f181a-245">Yellow</span></span>|<span data-ttu-id="f181a-246">14</span><span class="sxs-lookup"><span data-stu-id="f181a-246">14</span></span>|<span data-ttu-id="f181a-247">Giallo chiaro</span><span class="sxs-lookup"><span data-stu-id="f181a-247">Light yellow</span></span>|  
|<span data-ttu-id="f181a-248">7</span><span class="sxs-lookup"><span data-stu-id="f181a-248">7</span></span>|<span data-ttu-id="f181a-249">Vuoto</span><span class="sxs-lookup"><span data-stu-id="f181a-249">White</span></span>|<span data-ttu-id="f181a-250">15</span><span class="sxs-lookup"><span data-stu-id="f181a-250">15</span></span>|<span data-ttu-id="f181a-251">Sfondo bianco</span><span class="sxs-lookup"><span data-stu-id="f181a-251">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f181a-252">Questo esempio viene utilizzato il `QBColor` funzione per modificare il colore indicato da `colorInteger`.</span><span class="sxs-lookup"><span data-stu-id="f181a-252">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="f181a-253">`QBColor` accetta valori integer compresi tra 0 e 15.</span><span class="sxs-lookup"><span data-stu-id="f181a-253">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f181a-254"><paramref name="Color" /> non rientra nell'intervallo compreso tra 0 e 15, estremi inclusi.</span><span class="sxs-lookup"><span data-stu-id="f181a-254"><paramref name="Color" /> is outside of range 0 to 15, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red"><span data-ttu-id="f181a-255">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-255">Required.</span></span> <span data-ttu-id="f181a-256"><see langword="Integer" /> nell'intervallo compreso tra 0 e 255 inclusi, che rappresenta l'intensità del componente rosso del colore.</span><span class="sxs-lookup"><span data-stu-id="f181a-256"><see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the red component of the color.</span></span></param>
        <param name="Green"><span data-ttu-id="f181a-257">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-257">Required.</span></span> <span data-ttu-id="f181a-258"><see langword="Integer" /> nell'intervallo compreso tra 0 e 255 inclusi, che rappresenta l'intensità del componente verde del colore.</span><span class="sxs-lookup"><span data-stu-id="f181a-258"><see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the green component of the color.</span></span></param>
        <param name="Blue"><span data-ttu-id="f181a-259">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-259">Required.</span></span> <span data-ttu-id="f181a-260"><see langword="Integer" /> nell'intervallo compreso tra 0 e 255 inclusi, che rappresenta l'intensità del componente blu del colore.</span><span class="sxs-lookup"><span data-stu-id="f181a-260"><see langword="Integer" /> in the range 0–255, inclusive, that represents the intensity of the blue component of the color.</span></span></param>
        <summary><span data-ttu-id="f181a-261">Restituisce un <see langword="Integer" /> che rappresenta un valore di colore RGB da un set di componenti rosso, verde e blu.</span><span class="sxs-lookup"><span data-stu-id="f181a-261">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></summary>
        <returns><span data-ttu-id="f181a-262">Restituisce un <see langword="Integer" /> che rappresenta un valore di colore RGB da un set di componenti rosso, verde e blu.</span><span class="sxs-lookup"><span data-stu-id="f181a-262">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-263">Per i metodi e proprietà che accettano una specifica di colori prevede che un valore di colore specifica sia un numero che rappresenta un RGB.</span><span class="sxs-lookup"><span data-stu-id="f181a-263">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="f181a-264">Un valore di colore RGB specifica l'intensità di colore rosso, verde e blu a causa di un colore specifico da visualizzare.</span><span class="sxs-lookup"><span data-stu-id="f181a-264">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="f181a-265">Se il valore di un argomento di `RGB` è maggiore di 255, 255 viene utilizzato.</span><span class="sxs-lookup"><span data-stu-id="f181a-265">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="f181a-266">Nella tabella seguente sono elencati alcuni colori standard e i valori di rossi, verde e blu che includono.</span><span class="sxs-lookup"><span data-stu-id="f181a-266">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="f181a-267">Colore</span><span class="sxs-lookup"><span data-stu-id="f181a-267">Color</span></span>|<span data-ttu-id="f181a-268">Valore del rosso</span><span class="sxs-lookup"><span data-stu-id="f181a-268">Red value</span></span>|<span data-ttu-id="f181a-269">Valore di colore verde</span><span class="sxs-lookup"><span data-stu-id="f181a-269">Green value</span></span>|<span data-ttu-id="f181a-270">Valore blu</span><span class="sxs-lookup"><span data-stu-id="f181a-270">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="f181a-271">Nero</span><span class="sxs-lookup"><span data-stu-id="f181a-271">Black</span></span>|<span data-ttu-id="f181a-272">0</span><span class="sxs-lookup"><span data-stu-id="f181a-272">0</span></span>|<span data-ttu-id="f181a-273">0</span><span class="sxs-lookup"><span data-stu-id="f181a-273">0</span></span>|<span data-ttu-id="f181a-274">0</span><span class="sxs-lookup"><span data-stu-id="f181a-274">0</span></span>|  
|<span data-ttu-id="f181a-275">Blu</span><span class="sxs-lookup"><span data-stu-id="f181a-275">Blue</span></span>|<span data-ttu-id="f181a-276">0</span><span class="sxs-lookup"><span data-stu-id="f181a-276">0</span></span>|<span data-ttu-id="f181a-277">0</span><span class="sxs-lookup"><span data-stu-id="f181a-277">0</span></span>|<span data-ttu-id="f181a-278">255</span><span class="sxs-lookup"><span data-stu-id="f181a-278">255</span></span>|  
|<span data-ttu-id="f181a-279">Verde</span><span class="sxs-lookup"><span data-stu-id="f181a-279">Green</span></span>|<span data-ttu-id="f181a-280">0</span><span class="sxs-lookup"><span data-stu-id="f181a-280">0</span></span>|<span data-ttu-id="f181a-281">255</span><span class="sxs-lookup"><span data-stu-id="f181a-281">255</span></span>|<span data-ttu-id="f181a-282">0</span><span class="sxs-lookup"><span data-stu-id="f181a-282">0</span></span>|  
|<span data-ttu-id="f181a-283">ciano</span><span class="sxs-lookup"><span data-stu-id="f181a-283">Cyan</span></span>|<span data-ttu-id="f181a-284">0</span><span class="sxs-lookup"><span data-stu-id="f181a-284">0</span></span>|<span data-ttu-id="f181a-285">255</span><span class="sxs-lookup"><span data-stu-id="f181a-285">255</span></span>|<span data-ttu-id="f181a-286">255</span><span class="sxs-lookup"><span data-stu-id="f181a-286">255</span></span>|  
|<span data-ttu-id="f181a-287">Rosso</span><span class="sxs-lookup"><span data-stu-id="f181a-287">Red</span></span>|<span data-ttu-id="f181a-288">255</span><span class="sxs-lookup"><span data-stu-id="f181a-288">255</span></span>|<span data-ttu-id="f181a-289">0</span><span class="sxs-lookup"><span data-stu-id="f181a-289">0</span></span>|<span data-ttu-id="f181a-290">0</span><span class="sxs-lookup"><span data-stu-id="f181a-290">0</span></span>|  
|<span data-ttu-id="f181a-291">Magenta</span><span class="sxs-lookup"><span data-stu-id="f181a-291">Magenta</span></span>|<span data-ttu-id="f181a-292">255</span><span class="sxs-lookup"><span data-stu-id="f181a-292">255</span></span>|<span data-ttu-id="f181a-293">0</span><span class="sxs-lookup"><span data-stu-id="f181a-293">0</span></span>|<span data-ttu-id="f181a-294">255</span><span class="sxs-lookup"><span data-stu-id="f181a-294">255</span></span>|  
|<span data-ttu-id="f181a-295">Giallo</span><span class="sxs-lookup"><span data-stu-id="f181a-295">Yellow</span></span>|<span data-ttu-id="f181a-296">255</span><span class="sxs-lookup"><span data-stu-id="f181a-296">255</span></span>|<span data-ttu-id="f181a-297">255</span><span class="sxs-lookup"><span data-stu-id="f181a-297">255</span></span>|<span data-ttu-id="f181a-298">0</span><span class="sxs-lookup"><span data-stu-id="f181a-298">0</span></span>|  
|<span data-ttu-id="f181a-299">Vuoto</span><span class="sxs-lookup"><span data-stu-id="f181a-299">White</span></span>|<span data-ttu-id="f181a-300">255</span><span class="sxs-lookup"><span data-stu-id="f181a-300">255</span></span>|<span data-ttu-id="f181a-301">255</span><span class="sxs-lookup"><span data-stu-id="f181a-301">255</span></span>|<span data-ttu-id="f181a-302">255</span><span class="sxs-lookup"><span data-stu-id="f181a-302">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f181a-303">Questo esempio viene illustrato come la `RGB` funzione viene utilizzata per restituire un numero intero che rappresenta un `RGB` valore del colore.</span><span class="sxs-lookup"><span data-stu-id="f181a-303">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f181a-304"><paramref name="Green" />, <paramref name="Blue" /> o <paramref name="Red" /> non rientra nell'intervallo compreso tra 0 e 255, estremi inclusi.</span><span class="sxs-lookup"><span data-stu-id="f181a-304"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName"><span data-ttu-id="f181a-305">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-305">Required.</span></span> <span data-ttu-id="f181a-306">Variabile <see langword="String" /> contenente un nome di tipo di Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f181a-306">A <see langword="String" /> variable containing a Visual Basic type name.</span></span></param>
        <summary><span data-ttu-id="f181a-307">Restituisce un valore <see langword="String" /> contenente il nome del tipo di dati di sistema di una variabile.</span><span class="sxs-lookup"><span data-stu-id="f181a-307">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="f181a-308">Restituisce un valore <see langword="String" /> contenente il nome del tipo di dati di sistema di una variabile.</span><span class="sxs-lookup"><span data-stu-id="f181a-308">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-309">`SystemTypeName` Restituisce il nome completo del common language runtime (CLR) tipo corrispondente al nome del tipo Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f181a-309">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="f181a-310">Ad esempio, se `VbName` contiene "Date", `SystemTypeName` restituisce "DateTime".</span><span class="sxs-lookup"><span data-stu-id="f181a-310">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="f181a-311">Se `SystemTypeName` non riconosce il valore di `VbName`, restituisce `Nothing` (non la stringa "Nothing").</span><span class="sxs-lookup"><span data-stu-id="f181a-311">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-312">L'esempio seguente usa il `SystemTypeName` funzione per restituire i nomi dei tipi di dati di diverse variabili.</span><span class="sxs-lookup"><span data-stu-id="f181a-312">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="f181a-313">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-313">Required.</span></span> <span data-ttu-id="f181a-314">Variabile <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-314"><see langword="Object" /> variable.</span></span> <span data-ttu-id="f181a-315">Se <see langword="Option Strict" /> è <see langword="Off" />, è possibile passare una variabile di qualsiasi tipo di dati tranne una struttura.</span><span class="sxs-lookup"><span data-stu-id="f181a-315">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="f181a-316">Restituisce un valore <see langword="String" /> contenente informazioni relative al tipo di dati per una variabile.</span><span class="sxs-lookup"><span data-stu-id="f181a-316">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></summary>
        <returns><span data-ttu-id="f181a-317">Restituisce un valore <see langword="String" /> contenente informazioni relative al tipo di dati per una variabile.</span><span class="sxs-lookup"><span data-stu-id="f181a-317">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-318">La tabella seguente mostra il `String` valori restituiti da `TypeName` per diversi tipi di contenuto di `VarName`.</span><span class="sxs-lookup"><span data-stu-id="f181a-318">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="f181a-319">`VarName` Contenuto</span><span class="sxs-lookup"><span data-stu-id="f181a-319">`VarName` contents</span></span>|<span data-ttu-id="f181a-320">Stringa restituita</span><span class="sxs-lookup"><span data-stu-id="f181a-320">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="f181a-321">16 bit `True` o `False` tipo di valore</span><span class="sxs-lookup"><span data-stu-id="f181a-321">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="f181a-322">"Booleano"</span><span class="sxs-lookup"><span data-stu-id="f181a-322">"Boolean"</span></span>|  
|<span data-ttu-id="f181a-323">tipo di valore binario a 8 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-323">8-bit binary value type</span></span>|<span data-ttu-id="f181a-324">"Byte"</span><span class="sxs-lookup"><span data-stu-id="f181a-324">"Byte"</span></span>|  
|<span data-ttu-id="f181a-325">tipo di valore di carattere a 16 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-325">16-bit character value type</span></span>|<span data-ttu-id="f181a-326">"Char"</span><span class="sxs-lookup"><span data-stu-id="f181a-326">"Char"</span></span>|  
|<span data-ttu-id="f181a-327">tipo di valore a 64 bit data e ora</span><span class="sxs-lookup"><span data-stu-id="f181a-327">64-bit date and time value type</span></span>|<span data-ttu-id="f181a-328">"Data"</span><span class="sxs-lookup"><span data-stu-id="f181a-328">"Date"</span></span>|  
|<span data-ttu-id="f181a-329">Tipo di riferimento che indica dati mancanti o non esistenti</span><span class="sxs-lookup"><span data-stu-id="f181a-329">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="f181a-330">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="f181a-330">"DBNull"</span></span>|  
|<span data-ttu-id="f181a-331">tipo di valore numerico a virgola fissa a 128 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-331">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="f181a-332">"Decimale"</span><span class="sxs-lookup"><span data-stu-id="f181a-332">"Decimal"</span></span>|  
|<span data-ttu-id="f181a-333">tipo di valore numerico a virgola mobile a 64 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-333">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="f181a-334">"Double"</span><span class="sxs-lookup"><span data-stu-id="f181a-334">"Double"</span></span>|  
|<span data-ttu-id="f181a-335">tipo di valore integer a 32 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-335">32-bit integer value type</span></span>|<span data-ttu-id="f181a-336">"Integer"</span><span class="sxs-lookup"><span data-stu-id="f181a-336">"Integer"</span></span>|  
|<span data-ttu-id="f181a-337">Tipo di riferimento che punta a un oggetto non specializzato</span><span class="sxs-lookup"><span data-stu-id="f181a-337">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="f181a-338">"Oggetto"</span><span class="sxs-lookup"><span data-stu-id="f181a-338">"Object"</span></span>|  
|<span data-ttu-id="f181a-339">Tipo di riferimento che punta a un oggetto specializzato creato dalla classe *objectclass*</span><span class="sxs-lookup"><span data-stu-id="f181a-339">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="f181a-340">"*objectclass*"</span><span class="sxs-lookup"><span data-stu-id="f181a-340">"*objectclass*"</span></span>|  
|<span data-ttu-id="f181a-341">tipo di valore integer a 64 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-341">64-bit integer value type</span></span>|<span data-ttu-id="f181a-342">"Long"</span><span class="sxs-lookup"><span data-stu-id="f181a-342">"Long"</span></span>|  
|<span data-ttu-id="f181a-343">Tipo di riferimento con nessun oggetto attualmente assegnato</span><span class="sxs-lookup"><span data-stu-id="f181a-343">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="f181a-344">"Nothing"</span><span class="sxs-lookup"><span data-stu-id="f181a-344">"Nothing"</span></span>|  
|<span data-ttu-id="f181a-345">tipo di valore intero con segno a 8 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-345">8-bit signed integer value type</span></span>|<span data-ttu-id="f181a-346">"SByte"</span><span class="sxs-lookup"><span data-stu-id="f181a-346">"SByte"</span></span>|  
|<span data-ttu-id="f181a-347">tipo di valore integer a 16 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-347">16-bit integer value type</span></span>|<span data-ttu-id="f181a-348">"Breve"</span><span class="sxs-lookup"><span data-stu-id="f181a-348">"Short"</span></span>|  
|<span data-ttu-id="f181a-349">tipo di valore numerico a virgola mobile a 32 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-349">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="f181a-350">"Singola"</span><span class="sxs-lookup"><span data-stu-id="f181a-350">"Single"</span></span>|  
|<span data-ttu-id="f181a-351">Tipo di riferimento che punta a una stringa di caratteri a 16 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-351">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="f181a-352">"String"</span><span class="sxs-lookup"><span data-stu-id="f181a-352">"String"</span></span>|  
|<span data-ttu-id="f181a-353">tipo di valore intero senza segno a 32 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-353">32-bit unsigned integer value type</span></span>|<span data-ttu-id="f181a-354">"UInteger"</span><span class="sxs-lookup"><span data-stu-id="f181a-354">"UInteger"</span></span>|  
|<span data-ttu-id="f181a-355">tipo di valore intero senza segno a 64 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-355">64-bit unsigned integer value type</span></span>|<span data-ttu-id="f181a-356">"ULong"</span><span class="sxs-lookup"><span data-stu-id="f181a-356">"ULong"</span></span>|  
|<span data-ttu-id="f181a-357">tipo di valore intero senza segno a 16 bit</span><span class="sxs-lookup"><span data-stu-id="f181a-357">16-bit unsigned integer value type</span></span>|<span data-ttu-id="f181a-358">"UShort"</span><span class="sxs-lookup"><span data-stu-id="f181a-358">"UShort"</span></span>|  
  
 <span data-ttu-id="f181a-359">Se `VarName` è una matrice, la stringa restituita può essere una delle stringhe nella tabella precedente con parentesi vuote.</span><span class="sxs-lookup"><span data-stu-id="f181a-359">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="f181a-360">Ad esempio, se `VarName` punta a una matrice di interi, `TypeName` restituisce "Integer ()".</span><span class="sxs-lookup"><span data-stu-id="f181a-360">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="f181a-361">Quando `TypeName` restituisce il nome di un tipo riferimento, ad esempio una classe, viene restituito solo il nome, non il nome completo.</span><span class="sxs-lookup"><span data-stu-id="f181a-361">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="f181a-362">Ad esempio, se `VarName` punta a un oggetto della classe <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` restituisce "PaperSource".</span><span class="sxs-lookup"><span data-stu-id="f181a-362">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="f181a-363">Si noti che se la variabile viene dichiarata da un determinato tipo di classe ma non dispone di un oggetto assegnato, `TypeName` restituisce "Nothing".</span><span class="sxs-lookup"><span data-stu-id="f181a-363">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-364">L'esempio seguente usa il `TypeName` funzione per restituire informazioni sul tipo di dati su diverse variabili.</span><span class="sxs-lookup"><span data-stu-id="f181a-364">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="f181a-365">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-365">Required.</span></span> <span data-ttu-id="f181a-366">Matrice di qualsiasi tipo di dati.</span><span class="sxs-lookup"><span data-stu-id="f181a-366">Array of any data type.</span></span> <span data-ttu-id="f181a-367">Matrice in cui si desidera trovare l'indice più alto possibile di una dimensione.</span><span class="sxs-lookup"><span data-stu-id="f181a-367">The array in which you want to find the highest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="f181a-368">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f181a-368">Optional.</span></span> <span data-ttu-id="f181a-369"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-369"><see langword="Integer" />.</span></span> <span data-ttu-id="f181a-370">Dimensione per cui deve essere restituito l'indice più alto possibile.</span><span class="sxs-lookup"><span data-stu-id="f181a-370">The dimension for which the highest possible subscript is to be returned.</span></span> <span data-ttu-id="f181a-371">Utilizzare 1 per la prima dimensione, 2 per la seconda e così via.</span><span class="sxs-lookup"><span data-stu-id="f181a-371">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="f181a-372">Se <c>Rank</c> viene omesso, viene usato il valore 1.</span><span class="sxs-lookup"><span data-stu-id="f181a-372">If <c>Rank</c> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="f181a-373">Restituisce l'indice più alto disponibile per la dimensione indicata di una matrice.</span><span class="sxs-lookup"><span data-stu-id="f181a-373">Returns the highest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns>
          <span data-ttu-id="f181a-374"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-374"><see langword="Integer" />.</span></span> <span data-ttu-id="f181a-375">Il valore più alto possibile che può essere contenuto nell'indice per la dimensione specificata.</span><span class="sxs-lookup"><span data-stu-id="f181a-375">The highest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="f181a-376">Se <paramref name="Array" /> ha un solo elemento, <see langword="UBound" /> restituisce 0.</span><span class="sxs-lookup"><span data-stu-id="f181a-376">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span></span> <span data-ttu-id="f181a-377">Se <paramref name="Array" /> non ha elementi, ad esempio se è una stringa di lunghezza zero, <see langword="UBound" /> restituisce -1.</span><span class="sxs-lookup"><span data-stu-id="f181a-377">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-378">Poiché gli indici di matrice iniziano da 0, la lunghezza di una dimensione è maggiore di uno rispetto all'indice massimo disponibile per la dimensione.</span><span class="sxs-lookup"><span data-stu-id="f181a-378">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="f181a-379">Per una matrice con le seguenti dimensioni `UBound` restituisce i valori nella tabella seguente:</span><span class="sxs-lookup"><span data-stu-id="f181a-379">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="f181a-380">Chiamata di UBound</span><span class="sxs-lookup"><span data-stu-id="f181a-380">Call to UBound</span></span>|<span data-ttu-id="f181a-381">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="f181a-381">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="f181a-382">100</span><span class="sxs-lookup"><span data-stu-id="f181a-382">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="f181a-383">5</span><span class="sxs-lookup"><span data-stu-id="f181a-383">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="f181a-384">4</span><span class="sxs-lookup"><span data-stu-id="f181a-384">4</span></span>|  
  
 <span data-ttu-id="f181a-385">È possibile utilizzare `UBound` per determinare il totale numero di elementi in una matrice, ma è necessario modificare il valore restituito in base al fatto che gli indici iniziano da 0.</span><span class="sxs-lookup"><span data-stu-id="f181a-385">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="f181a-386">L'esempio seguente calcola la dimensione totale della matrice `a` nell'esempio precedente:</span><span class="sxs-lookup"><span data-stu-id="f181a-386">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="f181a-387">Il valore calcolato per `total` è 3030, vale a dire 101 * 6 * 5.</span><span class="sxs-lookup"><span data-stu-id="f181a-387">The value calculated for `total` is 3030, which is 101 * 6 * 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-388">L'esempio seguente usa il `UBound` funzione per determinare l'indice massimo disponibile per la dimensione della matrice indicata.</span><span class="sxs-lookup"><span data-stu-id="f181a-388">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f181a-389"><paramref name="Array" /> è <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-389"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException">
          <span data-ttu-id="f181a-390"><paramref name="Rank" /> è minore di 1 oppure <paramref name="Rank" /> è maggiore del numero di dimensioni di <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-390"><paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="f181a-391">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-391">Required.</span></span> <span data-ttu-id="f181a-392">Variabile <see langword="Object" />.</span><span class="sxs-lookup"><span data-stu-id="f181a-392"><see langword="Object" /> variable.</span></span> <span data-ttu-id="f181a-393">Se <see langword="Option Strict" /> è <see langword="Off" />, è possibile passare una variabile di qualsiasi tipo di dati tranne una struttura.</span><span class="sxs-lookup"><span data-stu-id="f181a-393">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="f181a-394">Restituisce un valore <see langword="Integer" /> contenente la classificazione del tipo di dati di una variabile.</span><span class="sxs-lookup"><span data-stu-id="f181a-394">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></summary>
        <returns><span data-ttu-id="f181a-395">Restituisce un valore <see langword="Integer" /> contenente la classificazione del tipo di dati di una variabile.</span><span class="sxs-lookup"><span data-stu-id="f181a-395">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-396">Il valore intero restituito da `VarType` è membro il <xref:Microsoft.VisualBasic.VariantType>.</span><span class="sxs-lookup"><span data-stu-id="f181a-396">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="f181a-397">La tabella seguente illustra i valori restituiti da `VarType` per casi speciali di `VarName`.</span><span class="sxs-lookup"><span data-stu-id="f181a-397">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="f181a-398">Tipo di dati rappresentato da `VarName`</span><span class="sxs-lookup"><span data-stu-id="f181a-398">Data type represented by `VarName`</span></span>|<span data-ttu-id="f181a-399">Valore restituito da `VarType`</span><span class="sxs-lookup"><span data-stu-id="f181a-399">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="f181a-400">Nothing</span><span class="sxs-lookup"><span data-stu-id="f181a-400">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="f181a-401">Enumerazione</span><span class="sxs-lookup"><span data-stu-id="f181a-401">Enumeration</span></span>|<span data-ttu-id="f181a-402">Tipo di dati sottostante (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, o `ULong`)</span><span class="sxs-lookup"><span data-stu-id="f181a-402">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="f181a-403">Matrice</span><span class="sxs-lookup"><span data-stu-id="f181a-403">Array</span></span>|<span data-ttu-id="f181a-404">OR bit per bit del tipo di elemento di matrice e `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="f181a-404">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="f181a-405">Matrice di matrici</span><span class="sxs-lookup"><span data-stu-id="f181a-405">Array of arrays</span></span>|<span data-ttu-id="f181a-406">OR bit per bit di `VariantType.Object` e `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="f181a-406">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="f181a-407">Struttura (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="f181a-407">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="f181a-408">Sconosciuto</span><span class="sxs-lookup"><span data-stu-id="f181a-408">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="f181a-409">L'esempio seguente usa il `VarType` funzione per restituire informazioni di classificazione del tipo di dati su diverse variabili.</span><span class="sxs-lookup"><span data-stu-id="f181a-409">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName"><span data-ttu-id="f181a-410">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f181a-410">Required.</span></span> <span data-ttu-id="f181a-411">Variabile <see langword="String" /> contenente un nome del tipo utilizzato da Common Language Runtime.</span><span class="sxs-lookup"><span data-stu-id="f181a-411"><see langword="String" /> variable containing a type name used by the common language runtime.</span></span></param>
        <summary><span data-ttu-id="f181a-412">Restituisce un valore <see langword="String" /> contenente il nome del tipo di dati di Visual Basic di una variabile.</span><span class="sxs-lookup"><span data-stu-id="f181a-412">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="f181a-413">Restituisce un valore <see langword="String" /> contenente il nome del tipo di dati di Visual Basic di una variabile.</span><span class="sxs-lookup"><span data-stu-id="f181a-413">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f181a-414">`VbTypeName` Restituisce il nome di tipo Visual Basic corrispondente al nome del tipo common language runtime.</span><span class="sxs-lookup"><span data-stu-id="f181a-414">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="f181a-415">Ad esempio, se `UrtName` contiene "Int32" o "System. Int32", `VbTypeName` restituisce "Integer".</span><span class="sxs-lookup"><span data-stu-id="f181a-415">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="f181a-416">Se `VbTypeName` non riconosce il valore di `UrtName`, restituisce `Nothing` (non la stringa "Nothing").</span><span class="sxs-lookup"><span data-stu-id="f181a-416">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="f181a-417">Il nome del tipo in `UrtName` può essere ottenuto da origini diverse, ad esempio dal <xref:System.Reflection.MemberInfo.Name%2A> proprietà nel <xref:System.Reflection.MemberInfo> matrice il <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="f181a-417">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f181a-418">L'esempio seguente usa il `VbTypeName` funzione per restituire i nomi dei tipi di dati di diverse variabili.</span><span class="sxs-lookup"><span data-stu-id="f181a-418">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>