<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e838589ab86bb077df8b57d607604d4984561c33" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="it-IT" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53226880" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Il modulo <see langword="Financial" /> contiene procedure che consentono di eseguire operazioni finanziarie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo modulo supporta i membri della libreria run-time Visual Basic che eseguono i calcoli finanziari, ad esempio l'ammortamento del bene, valori attuali e futuri, i tassi di interesse, frequenze di ritorno e pagamenti.  
  
   
  
## Examples  
 Questo esempio Usa la `Rate` funzione per la quale calcolare il tasso di interesse di un prestito, dato il numero totale dei pagamenti (`TotPmts`), l'importo del pagamento del prestito (`Payment`), il valore attuale o l'entità del prestito (`PVal`), il futuro valore del prestito (`FVal`), un numero che indica se il pagamento è dovuto all'inizio o alla fine del periodo di pagamento (`PayType`) e un'approssimazione del tasso di interesse previsto (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Parole chiave (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membri della libreria Run-Time Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obbligatorio. Valore <see langword="Double" /> che specifica il costo iniziale del bene.</param>
        <param name="Salvage">Obbligatorio. Valore <see langword="Double" /> che specifica il valore del bene alla fine della sua vita utile.</param>
        <param name="Life">Obbligatorio. Valore <see langword="Double" /> che specifica la durata della vita utile del bene.</param>
        <param name="Period">Obbligatorio. Valore <see langword="Double" /> che specifica il periodo per cui viene calcolato l'ammortamento del bene.</param>
        <param name="Factor">Opzionale. Valore <see langword="Double" /> che specifica il tasso di deprezzamento del valore residuo. Se omesso, viene utilizzato 2 (metodo a doppie quote proporzionali).</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica l'ammortamento di un bene per un periodo di tempo specifico utilizzando il metodo a doppie quote proporzionali o un altro metodo specificato dall'utente.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica l'ammortamento di un bene per un periodo di tempo specifico utilizzando il metodo a doppie quote proporzionali o un altro metodo specificato dall'utente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo a doppie quote proporzionali calcola l'ammortamento più velocemente. Deprecare è più alto nel primo periodo e diminuisce nei periodi successivi.  
  
 Il `Life` e `Period` argomenti devono essere espressi nelle stesse unità. Ad esempio, se `Life` viene espresso in mesi, `Period` deve anche essere espresso in mesi. Tutti gli argomenti devono essere numeri positivi.  
  
 Il `DDB` funzione Usa la formula seguente per calcolare l'ammortamento del bene per un periodo specificato:  
  
 Deprecare / periodo = ((Cost-Salvage) * fattore) / vita  
  
   
  
## Examples  
 Questo esempio Usa la `DDB` funzione per restituire l'ammortamento di un asset per un periodo specificato, dato il costo iniziale (`InitCost`), il valore di recupero alla fine della vita utile del bene (`SalvageVal`), la durata totale dell'asset negli anni (`LifeTime`) e il numero di anni per il quale viene calcolato l'ammortamento (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0, o <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di interesse per periodo. Ad esempio, nel caso di un prestito per l'acquisto di un'auto con tasso di interesse annuo del 10% da restituire con pagamenti mensili, il tasso per periodo sarà pari a 0,1/12 ovvero 0,0083.</param>
        <param name="NPer">Obbligatorio. Valore <see langword="Double" /> che specifica il numero totale di periodi di pagamento nell'annualità. Se, ad esempio, si effettuano pagamenti mensili per restituire un prestito quadriennale, i periodi di pagamento totali saranno 48, cioè 4 x 12.</param>
        <param name="Pmt">Obbligatorio. Valore <see langword="Double" /> che specifica il pagamento da effettuare per ogni periodo. In genere i pagamenti contengono una quota di capitale e una quota di interessi che non cambiano nel corso dell'annualità.</param>
        <param name="PV">Opzionale. Valore <see langword="Double" /> che specifica il valore attuale di una serie di pagamenti futuri. Ad esempio, quando si richiede un prestito per l'acquisto di un'automobile, l'importo del prestito corrisponde al valore attuale per chi concede il prestito dei pagamenti mensili che verranno effettuati. Se omesso, viene utilizzato il valore 0.</param>
        <param name="Due">Opzionale. Oggetto di tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> che specifica la scadenza dei pagamenti. Questo argomento deve essere <see langword="DueDate.EndOfPeriod" /> se i pagamenti sono dovuti alla fine del periodo di pagamento o <see langword="DueDate.BegOfPeriod" /> se i pagamenti sono dovuti all'inizio del periodo di pagamento. Se omesso, viene utilizzato <see langword="DueDate.EndOfPeriod" />.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il valore futuro di una annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il valore futuro di una annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una rendita è una serie di pagamenti fissi apportate nel corso del tempo. Una rendita può essere un prestito (ad esempio un calcolo del mutuo domestica) o un investimento (ad esempio, un piano di risparmio mensile).  
  
 Il `Rate` e `NPer` argomenti devono essere calcolati usando i periodi di pagamento espressi nelle stesse unità. Ad esempio, se `Rate` è espresso in mesi, `NPer` deve anche essere espresso in mesi.  
  
 Per tutti gli argomenti, le uscite (ad esempio versamenti risparmi) sono rappresentata da numeri negativi. cassa ricevuto (ad esempio dividendo i controlli) è rappresentato da numeri positivi.  
  
   
  
## Examples  
 Questo esempio Usa il `FV` funzione per restituire il valore futuro di un investimento specificando la percentuale di frequenza che viene addebitata per ogni periodo (`APR / 12`), il numero totale dei pagamenti (`TotPmts`), il pagamento (`Payment`), il valore corrente del investimento (`PVal`) e un numero che indica se il pagamento viene eseguito all'inizio o alla fine del periodo di pagamento (`PayType`). Si noti che poiché `Payment` rappresenta le uscite, è un numero negativo.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di interesse per periodo. Ad esempio, nel caso di un prestito per l'acquisto di un'auto con tasso di interesse annuo del 10% da restituire con pagamenti mensili, il tasso per periodo sarà pari a 0,1/12 ovvero 0,0083.</param>
        <param name="Per">Obbligatorio. Valore <see langword="Double" /> che specifica il periodo di pagamento nell'intervallo compreso tra 1 e <paramref name="NPer" />.</param>
        <param name="NPer">Obbligatorio. Valore <see langword="Double" /> che specifica il numero totale di periodi di pagamento nell'annualità. Se, ad esempio, si effettuano pagamenti mensili per restituire un prestito quadriennale, i periodi di pagamento totali saranno 48, cioè 4 x 12.</param>
        <param name="PV">Obbligatorio. Valore <see langword="Double" /> che specifica il valore attuale di una serie di pagamenti futuri. Ad esempio, quando si richiede un prestito per l'acquisto di un'automobile, l'importo del prestito corrisponde al valore attuale per chi concede il prestito dei pagamenti mensili che verranno effettuati.</param>
        <param name="FV">Opzionale. Valore <see langword="Double" /> che specifica il valore futuro o il saldo cassa desiderato dopo il pagamento finale. Ad esempio, il valore futuro di un prestito è $0, perché questo è il valore dopo il pagamento finale. Se, invece, si desidera risparmiare $50.000 nell'arco di 18 anni, il valore futuro è pari a $50.000. Se omesso, viene utilizzato il valore 0.</param>
        <param name="Due">Opzionale. Oggetto di tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> che specifica la scadenza dei pagamenti. Questo argomento deve essere <c>DueDate.EndOfPeriod</c> se i pagamenti sono dovuti alla fine del periodo di pagamento o <c>DueDate.BegOfPeriod</c> se i pagamenti sono dovuti all'inizio del periodo di pagamento. Se omesso, viene usato <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il pagamento di interessi per un dato periodo di una annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il pagamento di interessi per un dato periodo di una annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una rendita è una serie di pagamenti fissi apportate nel corso del tempo. Una rendita può essere un prestito (ad esempio un calcolo del mutuo domestica) o un investimento (ad esempio, un piano di risparmio mensile).  
  
 Il `Rate` e `NPer` argomenti devono essere calcolati usando i periodi di pagamento espressi nelle stesse unità. Ad esempio, se `Rate` è espresso in mesi, `NPer` deve anche essere espresso in mesi.  
  
 Per tutti gli argomenti, le uscite (ad esempio versamenti risparmi) sono rappresentata da numeri negativi. cassa ricevuto (ad esempio dividendo i controlli) è rappresentato da numeri positivi.  
  
   
  
## Examples  
 Questo esempio viene usato il `IPmt` funzione per calcolare la parte di un pagamento interessi quando tutti i pagamenti sono di uguale al valore. Vengono specificati il tasso di interesse per periodo (`APR / 12`), il periodo di pagamento per il quale si desidera la parte di interesse (`Period`), il numero totale dei pagamenti (`TotPmts`), il valore attuale o l'entità del prestito (`PVal`), il valore futuro di cancellazione dei prestiti (`FVal`) e un numero che indica se il pagamento è dovuto all'inizio o alla fine del periodo di pagamento (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 o <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Obbligatorio. Matrice di valori <see langword="Double" /> che specificano valori del flusso di cassa. La matrice deve contenere almeno un valore negativo (uscita) e un valore positivo (entrata).</param>
        <param name="Guess">Opzionale. Oggetto che specifica il valore che si prevede verrà restituito da <see langword="IRR" />. Se omesso, <paramref name="Guess" /> è 0,1 (10 percento).</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il tasso di rendimento interno per una serie di flussi di cassa periodici (uscite ed entrate).</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il tasso di rendimento interno per una serie di flussi di cassa periodici (uscite ed entrate).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tasso di rendimento interno è il tasso di interesse ricevuto per un investimento composto pagamenti e incassi che si verificano a intervalli regolari.  
  
 Il `IRR` funzione Usa l'ordine dei valori all'interno della matrice per interpretare l'ordine dei pagamenti e Incassi. Assicurarsi di immettere i valori di conferma e il pagamento nella sequenza corretta. Il flusso di cassa per ogni periodo di tempo non è necessario essere corretti, come nel caso di una rendita.  
  
 `IRR` viene calcolata per iterazione. Iniziando dal valore della `Guess`, `IRR` cicli di calcolo fino a quando il risultato è preciso per 0,00001 percento. Se `IRR` non è stato trovato un risultato dopo 20 tentativi, si verifica un errore.  
  
   
  
## Examples  
 In questo esempio, il `IRR` funzione restituisce il tasso interno di rendimento di una serie di cinque flussi di cassa contenute nella matrice `Values()`. Il primo elemento della matrice è un flusso di cassa negativo che rappresenta i costi di business all'avvio. I flussi di cassa quattro rimanenti rappresentano positivi flussi di cassa per i quattro anni successivi. `Guess` è il tasso di rendimento interno previsto.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">I valori dell'argomento della matrice non sono validi oppure <paramref name="Guess" /> &lt;= -1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Obbligatorio. Matrice di valori <see langword="Double" /> che specificano valori di flusso di cassa. La matrice deve contenere almeno un valore negativo (uscita) e un valore positivo (entrata).</param>
        <param name="FinanceRate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di interesse dovuto come costo del finanziamento.</param>
        <param name="ReinvestRate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di interesse ricevuto per i proventi del reinvestimento.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il tasso di rendimento interno modificato per una serie di flussi di cassa periodici (uscite ed entrate).</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il tasso di rendimento interno modificato per una serie di flussi di cassa periodici (uscite ed entrate).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tasso di rendimento interno modificato è il tasso di rendimento interno quando pagamenti e Incassi finanziati con ritmi diversi. Il `MIRR` funzione prende in considerazione sia il costo dell'investimento (`FinanceRate`) e il tasso di interesse del premio in denaro reinvestimento (`ReinvestRate`).  
  
 Il `FinanceRate` e `ReinvestRatearguments` sono percentuali espresse come i valori decimali. Ad esempio, il 12% viene espresso come 0.12.  
  
 Il `MIRR` funzione Usa l'ordine dei valori all'interno della matrice per interpretare l'ordine dei pagamenti e Incassi. Assicurarsi di immettere i valori di conferma e il pagamento nella sequenza corretta.  
  
   
  
## Examples  
 Questo esempio Usa la `MIRR` funzione per restituire il tasso interno di rendimento di una serie di flussi di cassa contenute nella matrice modificato `Values()`. `LoanAPR` rappresenta l'interesse del finanziamento e `InvAPR` rappresenta il tasso di interesse reinvestimento.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il numero di dimensioni di <paramref name="ValueArray" /> non è uguale a 1, <paramref name="FinanceRate" /> = -1 oppure <paramref name="ReinvestRate" /> = -1</exception>
        <exception cref="T:System.DivideByZeroException">È stata eseguita una divisione per zero.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di interesse per periodo. Ad esempio, nel caso di un prestito per l'acquisto di un'auto con tasso di interesse annuo del 10% da restituire con pagamenti mensili, il tasso per periodo sarà pari a 0,1/12 ovvero 0,0083.</param>
        <param name="Pmt">Obbligatorio. Valore <see langword="Double" /> che specifica il pagamento da effettuare per ogni periodo. In genere i pagamenti contengono una quota di capitale e una quota di interessi che non cambiano nel corso dell'annualità.</param>
        <param name="PV">Obbligatorio. Valore <see langword="Double" /> che specifica il valore attuale di una serie di pagamenti futuri. Ad esempio, quando si richiede un prestito per l'acquisto di un'automobile, l'importo del prestito corrisponde al valore attuale per chi concede il prestito dei pagamenti mensili che verranno effettuati.</param>
        <param name="FV">Opzionale. Valore <see langword="Double" /> che specifica il valore futuro o il saldo cassa desiderato dopo il pagamento finale. Ad esempio, il valore futuro di un prestito è $0, perché questo è il valore dopo il pagamento finale. Se, invece, si desidera risparmiare $50.000 nell'arco di 18 anni, il valore futuro è pari a $50.000. Se omesso, viene utilizzato il valore 0.</param>
        <param name="Due">Opzionale. Oggetto di tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> che specifica la scadenza dei pagamenti. Questo argomento deve essere <c>DueDate.EndOfPeriod</c> se i pagamenti sono dovuti alla fine del periodo di pagamento o <c>DueDate.BegOfPeriod</c> se i pagamenti sono dovuti all'inizio del periodo di pagamento. Se omesso, viene usato <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il numero di periodi per un'annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il numero di periodi per un'annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una rendita è una serie di pagamenti fissi eseguite in un periodo di tempo. Una rendita può essere un prestito (ad esempio un calcolo del mutuo domestica) o un investimento (ad esempio, un piano di risparmio mensile).  
  
 Per tutti gli argomenti, le uscite (ad esempio versamenti risparmi) sono rappresentata da numeri negativi. cassa ricevuto (ad esempio dividendo i controlli) è rappresentato da numeri positivi.  
  
   
  
## Examples  
 Questo esempio Usa la `NPer` funzione per restituire il numero di periodi durante i quali è necessario effettuare i pagamenti per pagare un prestito il cui valore è contenuta in `PVal`. Vengono forniti anche il tasso di interesse per periodo (`APR / 12`), il pagamento (`Payment`), il valore futuro di cancellazione dei prestiti (`FVal`) e un numero che indica se il pagamento è dovuto all'inizio o alla fine del periodo di pagamento (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 e <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di sconto per la durata del periodo, espresso come numero decimale.</param>
        <param name="ValueArray">Obbligatorio. Matrice di valori <see langword="Double" /> che specificano valori del flusso di cassa. La matrice deve contenere almeno un valore negativo (uscita) e un valore positivo (entrata).</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il valore attuale netto di un investimento in base a una serie di flussi di cassa periodici (uscite ed entrate) e un tasso di sconto.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il valore attuale netto di un investimento in base a una serie di flussi di cassa periodici (uscite ed entrate) e un tasso di sconto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore attuale netto di un investimento è il valore corrente di una serie di pagamenti e Incassi future.  
  
 Il `NPV` funzione Usa l'ordine dei valori all'interno della matrice per interpretare l'ordine dei pagamenti e Incassi. Assicurarsi di immettere i valori di conferma e il pagamento nella sequenza corretta.  
  
 Il `NPV` investimento inizia un periodo precedente alla data del primo valore del flusso di cassa e finisce con l'ultimo valore di flusso di cassa nella matrice.  
  
 Il calcolo del valore attuale netto è basato sui flussi di cassa futuri. Se il primo flusso di cassa si verifica all'inizio del primo punto, il primo valore deve essere aggiunto al valore restituito da `NPV` e non deve essere incluso nei valori del flusso di cassa `ValueArray`.  
  
 Il `NPV` funzione è simile al `PV` funzione (il valore attuale) tranne il fatto che il `PV` funzione i flussi di cassa inizino alla fine o all'inizio di un periodo. A differenza di variabile `NPV` i valori del flusso di cassa, `PV` flussi di cassa devono essere corretti in tutta l'investimento.  
  
   
  
## Examples  
 Questo esempio Usa la `NPV` funzione per restituire il valore attuale netto per una serie di flussi di cassa contenute nella matrice `values()`. Il valore restituito, archiviato in `FixedRetRate`, rappresenta il tasso di rendimento interno predefinito.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> è <see langword="Nothing" />, classificazione di <paramref name="ValueArray" /> &lt;&gt; 1, o <paramref name="Rate" /> = -1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di interesse per periodo. Ad esempio, nel caso di un prestito per l'acquisto di un'auto con tasso di interesse annuo del 10% da restituire con pagamenti mensili, il tasso per periodo sarà pari a 0,1/12 ovvero 0,0083.</param>
        <param name="NPer">Obbligatorio. Valore <see langword="Double" /> che specifica il numero totale di periodi di pagamento nell'annualità. Se, ad esempio, si effettuano pagamenti mensili per restituire un prestito quadriennale, i periodi di pagamento totali saranno 48, cioè 4 × 12.</param>
        <param name="PV">Obbligatorio. Valore <see langword="Double" /> che specifica il valore attuale di una serie di pagamenti da effettuare in futuro. Ad esempio, quando si richiede un prestito per l'acquisto di un'automobile, l'importo del prestito corrisponde al valore attuale per chi concede il prestito dei pagamenti mensili che verranno effettuati.</param>
        <param name="FV">Opzionale. Valore <see langword="Double" /> che specifica il valore futuro o il saldo cassa desiderato dopo il pagamento finale. Ad esempio, il valore futuro di un prestito è $0, perché questo è il valore dopo il pagamento finale. Se, invece, si desidera risparmiare $50.000 nell'arco di 18 anni, il valore futuro è pari a $50.000. Se omesso, viene utilizzato il valore 0.</param>
        <param name="Due">Opzionale. Oggetto di tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> che specifica la scadenza dei pagamenti. Questo argomento deve essere <c>DueDate.EndOfPeriod</c> se i pagamenti sono dovuti alla fine del periodo di pagamento o <c>DueDate.BegOfPeriod</c> se i pagamenti sono dovuti all'inizio del periodo di pagamento. Se omesso, viene usato <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il pagamento per una annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il pagamento per una annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una rendita è una serie di pagamenti fissi durante un periodo di tempo. Una rendita può essere un prestito (ad esempio un calcolo del mutuo domestica) o un investimento (ad esempio, un piano di risparmio mensile).  
  
 Il `Rate` e `NPer` argomenti devono essere calcolati usando i periodi di pagamento espressi nelle stesse unità. Ad esempio, se `Rate` è espresso in mesi, `NPer` deve anche essere espresso in mesi.  
  
 Per tutti gli argomenti, contanti a pagamento (ad esempio versamenti risparmi) sono rappresentato da numeri negativi. cassa ricevuto (ad esempio dividendo i controlli) è rappresentato da numeri positivi.  
  
   
  
## Examples  
 Questo esempio viene usato il `Pmt` funzione per restituire il pagamento mensile per un prestito durante un periodo fisso. Vengono specificati il tasso di interesse per periodo (`APR / 12`), il numero totale dei pagamenti (`TotPmts`), il valore attuale o l'entità del prestito (`PVal`), il valore futuro di cancellazione dei prestiti (`FVal`) e un numero che indica se la il pagamento è dovuto all'inizio o alla fine del periodo di pagamento `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di interesse per periodo. Ad esempio, nel caso di un prestito per l'acquisto di un'auto con tasso di interesse annuo del 10% da restituire con pagamenti mensili, il tasso per periodo sarà pari a 0,1/12 ovvero 0,0083.</param>
        <param name="Per">Obbligatorio. Valore <see langword="Double" /> che specifica il periodo di pagamento nell'intervallo compreso tra 1 e <paramref name="NPer" />.</param>
        <param name="NPer">Obbligatorio. Valore <see langword="Double" /> che specifica il numero totale di periodi di pagamento nell'annualità. Se, ad esempio, si effettuano pagamenti mensili per restituire un prestito quadriennale, i periodi di pagamento totali saranno 48, cioè 4 x 12.</param>
        <param name="PV">Obbligatorio. Valore <see langword="Double" /> che specifica il valore attuale di una serie di pagamenti o entrate futuri. Ad esempio, quando si richiede un prestito per l'acquisto di un'automobile, l'importo del prestito corrisponde al valore attuale per chi concede il prestito dei pagamenti mensili che verranno effettuati.</param>
        <param name="FV">Opzionale. Valore <see langword="Double" /> che specifica il valore futuro o il saldo cassa desiderato dopo il pagamento finale. Ad esempio, il valore futuro di un prestito è $0, perché questo è il valore dopo il pagamento finale. Se, invece, si desidera risparmiare $50.000 nell'arco di 18 anni, il valore futuro è pari a $50.000. Se omesso, viene utilizzato il valore 0.</param>
        <param name="Due">Opzionale. Oggetto di tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> che specifica la scadenza dei pagamenti. Questo argomento deve essere <c>DueDate.EndOfPeriod</c> se i pagamenti sono dovuti alla fine del periodo di pagamento o <c>DueDate.BegOfPeriod</c> se i pagamenti sono dovuti all'inizio del periodo di pagamento. Se omesso, viene usato <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il pagamento di capitale per un dato periodo di una annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il pagamento di capitale per un dato periodo di una annualità in base a pagamenti periodici fissi e a un tasso di interesse fisso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una rendita è una serie di pagamenti fissi eseguite in un periodo di tempo. Una rendita può essere un prestito (ad esempio un calcolo del mutuo domestica) o un investimento (ad esempio, un piano di risparmio mensile).  
  
 Il `Rate` e `NPer` argomenti devono essere calcolati usando i periodi di pagamento espressi nelle stesse unità. Ad esempio, se `Rate` è espresso in mesi, `NPer` deve anche essere espresso in mesi.  
  
 Per tutti gli argomenti, contanti a pagamento (ad esempio versamenti risparmi) sono rappresentato da numeri negativi. cassa ricevuto (ad esempio dividendo i controlli) è rappresentato da numeri positivi.  
  
   
  
## Examples  
 Questo esempio viene usato il `PPmt` funzione per calcolare la quota di un pagamento per un periodo specifico dell'entità quando tutti i pagamenti sono di uguale al valore. Vengono specificati il tasso di interesse per periodo (`APR / 12`), il periodo di pagamento per il quale si desidera la parte dell'entità (`Period`), il numero totale dei pagamenti (`TotPmts`), il valore attuale o l'entità del prestito (`PVal`), il valore futuro di cancellazione dei prestiti (`FVal`) e un numero che indica se il pagamento è dovuto all'inizio o alla fine del periodo di pagamento (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;=0 o <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Obbligatorio. Valore <see langword="Double" /> che specifica il tasso di interesse per periodo. Ad esempio, nel caso di un prestito per l'acquisto di un'auto con tasso di interesse annuo del 10% da restituire con pagamenti mensili, il tasso per periodo sarà pari a 0,1/12 ovvero 0,0083.</param>
        <param name="NPer">Obbligatorio. Valore <see langword="Double" /> che specifica il numero totale di periodi di pagamento nell'annualità. Se, ad esempio, si effettuano pagamenti mensili per restituire un prestito quadriennale, i periodi di pagamento saranno 48, cioè 4 x 12.</param>
        <param name="Pmt">Obbligatorio. Valore <see langword="Double" /> che specifica il pagamento da effettuare per ogni periodo. In genere i pagamenti contengono una quota di capitale e una quota di interessi che non cambiano nel corso dell'annualità.</param>
        <param name="FV">Opzionale. Valore <see langword="Double" /> che specifica il valore futuro o il saldo cassa desiderato dopo il pagamento finale. Ad esempio, il valore futuro di un prestito è $0, perché questo è il valore dopo il pagamento finale. Se, invece, si desidera risparmiare $50.000 nell'arco di 18 anni, il valore futuro è pari a $50.000. Se omesso, viene utilizzato il valore 0.</param>
        <param name="Due">Opzionale. Oggetto di tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> che specifica la scadenza dei pagamenti. Questo argomento deve essere <c>DueDate.EndOfPeriod</c> se i pagamenti sono dovuti alla fine del periodo di pagamento o <c>DueDate.BegOfPeriod</c> se i pagamenti sono dovuti all'inizio del periodo di pagamento. Se omesso, viene usato <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il valore attuale di una annualità in base a pagamenti periodici fissi da corrispondere in futuro e a un tasso di interesse fisso.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il valore attuale di una annualità in base a pagamenti periodici fissi da corrispondere in futuro e a un tasso di interesse fisso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una rendita è una serie di pagamenti fissi eseguite in un periodo di tempo. Una rendita può essere un prestito (ad esempio un calcolo del mutuo domestica) o un investimento (ad esempio, un piano di risparmio mensile).  
  
 Il `Rate` e `NPer` argomenti devono essere calcolati usando i periodi di pagamento espressi nelle stesse unità. Ad esempio, se `Rate` è espresso in mesi, `NPer` deve anche essere espresso in mesi.  
  
 Per tutti gli argomenti, le uscite (ad esempio versamenti risparmi) sono rappresentata da numeri negativi. cassa ricevuto (ad esempio dividendo i controlli) è rappresentato da numeri positivi.  
  
   
  
## Examples  
 In questo esempio, il `PV` funzione restituisce il valore attuale di una rendita $1.000.000 che fornirà 50.000 dollari all'anno per i prossimi 20 anni. Vengono forniti il tasso di interesse annuale previsto (`APR`), il numero totale dei pagamenti (`TotPmts`), la quantità di ogni payment (`YrIncome`), il valore futuro complessivo dell'investimento (`FVal`) e un numero che indica se ogni pagamento viene eseguito all'inizio o alla fine del periodo di pagamento (`PayType`). Si noti che `YrIncome` infatti un numero negativo rappresenta le uscite da annualità ogni anno.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Obbligatorio. Valore <see langword="Double" /> che specifica il numero totale di periodi di pagamento nell'annualità. Ad esempio, nel caso di un prestito per un'automobile quadriennale con pagamenti mensili, il numero totale dei periodi di pagamento sarà 4 * 12 (o 48).</param>
        <param name="Pmt">Obbligatorio. Valore <see langword="Double" /> che specifica il pagamento da effettuare per ogni periodo. In genere i pagamenti contengono una quota di capitale e una quota di interessi che non cambiano nel corso dell'annualità.</param>
        <param name="PV">Obbligatorio. Valore <see langword="Double" /> che specifica il valore attuale di una serie di pagamenti o entrate futuri. Ad esempio, quando si richiede un prestito per l'acquisto di un'automobile, l'importo del prestito corrisponde al valore attuale per chi concede il prestito dei pagamenti mensili che verranno effettuati.</param>
        <param name="FV">Opzionale. Valore <see langword="Double" /> che specifica il valore futuro o il saldo cassa desiderato dopo il pagamento finale. Ad esempio, il valore futuro di un prestito è $0, perché questo è il valore dopo il pagamento finale. Se, invece, si desidera risparmiare $50.000 nell'arco di 18 anni, il valore futuro è pari a $50.000. Se omesso, viene utilizzato il valore 0.</param>
        <param name="Due">Opzionale. Oggetto di tipo <see cref="T:Microsoft.VisualBasic.DueDate" /> che specifica la scadenza dei pagamenti. Questo argomento deve essere <c>DueDate.EndOfPeriod</c> se i pagamenti sono dovuti alla fine del periodo di pagamento o <c>DueDate.BegOfPeriod</c> se i pagamenti sono dovuti all'inizio del periodo di pagamento. Se omesso, viene usato <c>DueDate.EndOfPeriod</c>.</param>
        <param name="Guess">Opzionale. Valore <see langword="Double" /> che specifica il valore che si prevede venga restituito da <see langword="Rate" />. Se omesso, <paramref name="Guess" /> è 0,1 (10 percento).</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica il tasso di interesse per periodo per un'annualità.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica il tasso di interesse per periodo per un'annualità.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una rendita è una serie di pagamenti fissi eseguite in un periodo di tempo. Una rendita può essere un prestito (ad esempio un calcolo del mutuo domestica) o un investimento (ad esempio, un piano di risparmio mensile).  
  
 Per tutti gli argomenti, le uscite (ad esempio versamenti risparmi) sono rappresentata da numeri negativi. cassa ricevuto (ad esempio dividendo i controlli) è rappresentato da numeri positivi.  
  
 `Rate` viene calcolata per iterazione. Iniziando dal valore della `Guess`, `Rate` cicli di calcolo fino a quando il risultato è preciso per 0,00001 percento. Se `Rate` non è stato trovato un risultato dopo 20 tentativi, si verifica un errore. Se il valore indicato è il 10% e `Rate` ha esito negativo, provare con un valore diverso per `Guess`.  
  
   
  
## Examples  
 Questo esempio Usa la `Rate` funzione per la quale calcolare il tasso di interesse di un prestito dato il numero totale dei pagamenti (`TotPmts`), l'importo del pagamento del prestito (`Payment`), il valore attuale o l'entità del prestito (`PVal`), il futuro valore del prestito (`FVal`), un numero che indica se il pagamento è dovuto all'inizio o alla fine del periodo di pagamento (`PayType`) e un'approssimazione del tasso di interesse previsto (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obbligatorio. Valore <see langword="Double" /> che specifica il costo iniziale del bene.</param>
        <param name="Salvage">Obbligatorio. Valore <see langword="Double" /> che specifica il valore del bene alla fine della sua vita utile.</param>
        <param name="Life">Obbligatorio. Valore <see langword="Double" /> che specifica la durata della vita utile del bene.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica l'ammortamento costante di un bene per un solo periodo.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica l'ammortamento costante di un bene per un solo periodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il periodo di deprecare deve essere espressa in unità stesso come il `Life` argomento. Tutti gli argomenti devono essere numeri positivi.  
  
   
  
## Examples  
 Questo esempio Usa la `SLN` funzione per restituire l'ammortamento di un asset per un singolo periodo dato costo iniziale del bene (`InitCost`), il valore di recupero alla fine della vita utile del bene (`SalvageVal`) e la durata totale del l'asset negli anni (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Obbligatorio. Valore <see langword="Double" /> che specifica il costo iniziale del bene.</param>
        <param name="Salvage">Obbligatorio. Valore <see langword="Double" /> che specifica il valore del bene alla fine della sua vita utile.</param>
        <param name="Life">Obbligatorio. Valore <see langword="Double" /> che specifica la durata della vita utile del bene.</param>
        <param name="Period">Obbligatorio. Valore <see langword="Double" /> che specifica il periodo per cui viene calcolato l'ammortamento del bene.</param>
        <summary>Restituisce un valore <see langword="Double" /> che specifica l'ammortamento pluriennale di un bene per un periodo specifico.</summary>
        <returns>Restituisce un valore <see langword="Double" /> che specifica l'ammortamento pluriennale di un bene per un periodo specifico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Life` e `Period` argomenti devono essere espressi nelle stesse unità. Ad esempio, se `Life` viene espresso in mesi, `Period` deve anche essere espresso in mesi. Tutti gli argomenti devono essere numeri positivi.  
  
   
  
## Examples  
 Questo esempio Usa la `SYD` funzione per restituire l'ammortamento di un asset per un periodo specificato dato costo iniziale del bene (`InitCost`), il valore di recupero alla fine della vita utile del bene (`SalvageVal`) e la durata totale dell'asset nel anni (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, o <paramref name="Period" /> &lt;=0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Riepilogo degli elementi finanziari</related>
      </Docs>
    </Member>
  </Members>
</Type>