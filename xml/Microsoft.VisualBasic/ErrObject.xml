<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b956e175a057d7318656b9527a06fcf8a634d67a" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34173846" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Il modulo <see langword="ErrObject" /> contiene proprietà e procedure che consentono di identificare e gestire gli errori di run-time mediante l'oggetto <see langword="Err" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `ErrObject` modulo supporta la `Err` oggetto. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 In questo esempio Usa le proprietà del `Err` oggetto per la costruzione di una finestra di dialogo del messaggio di errore. Notare cosa accade quando si utilizza il `Clear` metodo prima: quando si genera un errore di Visual Basic con il `Raise` (metodo), i valori predefiniti di Visual Basic diventano le proprietà del `Err` oggetto.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancella tutte le impostazioni delle proprietà dell'oggetto <see langword="Err" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare `Clear` cancellare in modo esplicito il `Err` oggetto dopo la gestione di un errore, ad esempio quando si usa posticipata gestione degli errori con `On Error Resume Next`. Il `Clear` metodo viene chiamato automaticamente quando si esegue una delle istruzioni seguenti:  
  
-   Qualsiasi tipo di `Resume` istruzione  
  
-   `Exit Sub`, `Exit Function`o `Exit Property`  
  
-   Qualsiasi `On Error` istruzione  
  
-   Qualsiasi `Try...Catch...Finally` istruzione  
  
    > [!NOTE]
    >  Il `On Error Resume Next` costrutto può essere preferibile `On Error GoTo` la gestione degli errori generati durante l'accesso ad altri oggetti. Controllo `Err` dopo ogni interazione con un oggetto, Elimina l'ambiguità sulle oggetto ha effettuato l'accesso di codice: È possibile essere certi che l'oggetto inserito il codice di errore in `Err.Number`, nonché quale oggetto ha generato l'errore (l'oggetto specificato in `Err.Source`).  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `Err` dell'oggetto `Clear` per reimpostare le proprietà numeriche del `Err` oggetto da zero e le relative proprietà di stringa alle stringhe di lunghezza zero. Senza la chiamata a `Clear`, la seconda chiamata a `MsgBox` Visualizza il messaggio di errore stesso.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un'espressione <see langword="String" /> contenente una stringa descrittiva associata a un errore. Lettura/scrittura.</summary>
        <value>Restituisce o imposta un'espressione <see langword="String" /> contenente una stringa descrittiva associata a un errore. Lettura/scrittura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Description` l'impostazione della proprietà è costituito da una breve descrizione dell'errore. Utilizzare questa proprietà per avvisare l'utente di un errore che non è possibile o non si desidera gestire. Quando si genera un errore definito dall'utente, assegnare una breve descrizione del messaggio di errore per il `Description` proprietà. Se il `Description` proprietà non è compilata e il valore della <xref:Microsoft.VisualBasic.ErrObject.Number%2A> proprietà corrisponde a un errore di runtime di Visual Basic, quindi la stringa restituita dal <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> funzione è impostata `Description` proprietà quando viene generato l'errore.  
  
   
  
## Examples  
 Questo esempio viene assegnato un messaggio definito dall'utente di `Description` proprietà del `Err` oggetto.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce un valore intero che indica il numero di riga dell'ultima istruzione eseguita. Sola lettura.</summary>
        <value>Restituisce un valore intero che indica il numero di riga dell'ultima istruzione eseguita. Sola lettura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se Visual Basic rilevati numeri di riga, viene restituito 0.  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `Erl` proprietà per indicare il numero di riga.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce l'eccezione che rappresenta l'errore.</summary>
        <returns>Restituisce l'eccezione che rappresenta l'errore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `GetException` è disponibile solo dalla funzione di `Err` classe dell'oggetto. Funziona con il `Exception` proprietà del `Err` oggetto per visualizzare l'errore che si è verificato.  
  
   
  
## Examples  
 Il codice seguente consente di visualizzare il messaggio assegnato all'eccezione nella `Err` oggetto:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un valore <see langword="Integer" /> contenente l'ID di contesto di un argomento di un file della Guida. Lettura/scrittura.</summary>
        <value>Restituisce o imposta un valore <see langword="Integer" /> contenente l'ID di contesto di un argomento di un file della Guida. Lettura/scrittura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `HelpContext` proprietà viene utilizzata per visualizzare la Guida sensibile al contesto per un'applicazione. Se viene specificato un file della Guida `HelpFile`, `HelpContext` proprietà viene utilizzata per visualizzare automaticamente i file della Guida identificato. Se entrambi i `HelpFile` e `HelpContext` le proprietà sono vuote, il valore della <xref:Microsoft.VisualBasic.ErrObject.Number%2A> proprietà è selezionata. Se il valore di `Number` proprietà corrisponde a un valore di errore di run-time Visual Basic, quindi viene utilizzato l'ID del contesto della Guida di Visual Basic per l'errore. Se il valore di `Number` proprietà non corrisponde a un errore di Visual Basic, viene visualizzata la schermata di contenuto per il file della Guida di Visual Basic.  
  
> [!NOTE]
>  È consigliabile scrivere routine nell'applicazione per gestire gli errori tipici. Durante la programmazione con un oggetto, è possibile utilizzare il relativo file della Guida per migliorare la qualità, la gestione degli errori o per visualizzare un messaggio significativo per l'utente se l'errore non è reversibile.  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `HelpContext` proprietà del `Err` oggetto per visualizzare l'argomento della Guida di Visual Basic il `Overflow` errore.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un'espressione <see langword="String" /> contenente il percorso completo di un file della Guida. Lettura/scrittura.</summary>
        <value>Restituisce o imposta un'espressione <see langword="String" /> contenente il percorso completo di un file della Guida. Lettura/scrittura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se è specificato un file della Guida di `HelpFile` proprietà, viene automaticamente chiamato quando l'utente preme il tasto Guida (o il tasto F1) nella finestra di dialogo del messaggio di errore. Se il `HelpContext` proprietà contiene un contesto valido ID per il file specificato, questo argomento viene visualizzato automaticamente. Se non `HelpFile` viene specificato, viene visualizzato il file della Guida di Visual Basic.  
  
> [!NOTE]
>  È consigliabile scrivere routine nell'applicazione per gestire gli errori tipici. Durante la programmazione con un oggetto, è possibile utilizzare il relativo file della Guida per migliorare la qualità, la gestione degli errori o per visualizzare un messaggio significativo per l'utente se l'errore non è reversibile.  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `HelpFile` proprietà del `Err` oggetto per avviare la Guida in linea. Per impostazione predefinita, il `HelpFile` proprietà contiene il nome del file della Guida di Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce il codice dell'errore di sistema generato da una chiamata a una libreria a collegamento dinamico (DLL). Sola lettura.</summary>
        <value>Restituisce il codice dell'errore di sistema generato da una chiamata a una libreria a collegamento dinamico (DLL). Sola lettura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> proprietà si applica solo alle chiamate a DLL eseguite dal codice Visual Basic. Quando viene effettuata una chiamata di questo tipo, la funzione chiamata restituisce in genere un codice che indica l'esito positivo o negativo e <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> proprietà completata. Consultare la documentazione per le funzioni della DLL determinare i valori restituiti che indicano l'esito positivo o negativo. Ogni volta che viene restituito il codice di errore, l'applicazione Visual Basic deve controllare immediatamente la <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> proprietà. Non viene generata un'eccezione quando il <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> proprietà è impostata.  
  
> [!NOTE]
>  Il <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> proprietà è protetta da <xref:System.Security.Permissions.SecurityAction.LinkDemand>, che consente di impedire l'accesso al codice non attendibile. Tuttavia, <xref:System.Security.Permissions.SecurityAction.LinkDemand> richiede solo il chiamante immediato <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> autorizzazione. Se il codice può essere chiamato da codice parzialmente attendibile, esponendo il valore di <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> senza convalida costituisce un rischio per la sicurezza.  
>   
>  Per le principali limitazioni sull'utilizzo di <xref:System.Security.Permissions.SecurityAction.LinkDemand> membro, vedere [Demand e. LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Per ulteriori informazioni sulle autorizzazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Nota per smart device che questa proprietà restituisce sempre zero.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il `LastDllError` proprietà dopo la chiamata a una funzione nell'API di Windows. Il `PrintWindowCoordinates` stored procedure accetta un handle di una finestra e chiama il `GetWindowRect` (funzione). `GetWindowRect` Compila la struttura dei dati RECT con le lunghezze dei lati del rettangolo che costituiscono la finestra. Se si passa un handle non valido, si verifica un errore e il numero di errore è disponibile tramite il `LastDllError` proprietà.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un valore numerico che specifica un errore. Lettura/scrittura.</summary>
        <value>Restituisce o imposta un valore numerico che specifica un errore. Lettura/scrittura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutti i `Raise` argomenti tranne che `Number` sono facoltativi. Se si omettono gli argomenti facoltativi e le impostazioni delle proprietà di `Err` oggetto contiene i valori che non sono stati cancellati, tali valori verranno utilizzati come valori per l'errore.  
  
 Poiché il `Err` oggetto fornisce informazioni più complete rispetto a quando si generano errori con il `Error` istruzione `Raise` è utile per la generazione di errori durante la scrittura di moduli di classe. Ad esempio, con la `Raise` metodo, l'origine che ha generato l'errore può essere specificato nel `Source` proprietà, la Guida in linea per l'errore è possibile fare riferimento e così via.  
  
 Quando viene restituito un errore definito dall'utente da un oggetto, impostare `Err.Number` aggiungendo il numero selezionato come un codice di errore per il `VbObjectError` costante. Ad esempio, utilizzare il codice seguente per restituire il numero 1051 come codice di errore:  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 Questo esempio viene illustrato un tipico utilizzo del `Number` proprietà in una routine di gestione degli errori.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 Questo esempio viene utilizzato il `Err` dell'oggetto `Raise` metodo per generare un errore originale all'interno di una funzione scritta in Visual Basic. La funzione chiamante può rilevare l'errore e segnalarlo all'utente. Si noti che la routine `CallingProcedure` mette a confronto il tipo di informazioni che è possibile derivare da un `Err` oggetto con le informazioni che è possibile derivare da un `Exception` oggetto.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> è maggiore di 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Valore <see langword="Long" /> integer che identifica la natura dell'errore. Gli errori di Visual Basic rientrano nell'intervallo 0–65535. L'intervallo 0–512 è riservato agli errori di sistema, mentre l'intervallo 513–65535 è disponibile per gli errori definiti dall'utente. Per impostare la proprietà <see langword="Number" /> sul codice di errore in un modulo di classe, è necessario aggiungere il numero del codice di errore alla costante <see langword="vbObjectError" />. Ad esempio, per generare l'errore numero 513, assegnare <c>vbObjectError + 513</c> alla proprietà <see langword="Number" />.</param>
        <param name="Source">Facoltativo. Espressione <see langword="String" /> che denomina l'oggetto o applicazione che ha generato l'errore. Quando si imposta questa proprietà per un oggetto, usare il formato <c>progetto</c>.<c>classe</c>. Se l'oggetto <c>Source</c> non viene specificato, viene usato l'ID di processo del progetto Visual Basic corrente.</param>
        <param name="Description">Facoltativo. Espressione <see langword="String" /> che descrive l'errore. Se omessa, viene esaminato il valore della proprietà <see langword="Number" />. Se può essere associata a un codice di errore di run-time di Visual Basic, la stringa restituita dalla funzione <see langword="Error" /> viene utilizzata come proprietà <see langword="Description" />. Se non è vi alcun errore di Visual Basic che corrisponde alla proprietà <see langword="Number" />, viene utilizzato il messaggio "Errore definito dall'applicazione o dall'oggetto".</param>
        <param name="HelpFile">Facoltativo. Percorso completo del file della Guida in cui sono disponibili informazioni sull'errore. Se omessa, viene utilizzato il nome completo dell'unità, del percorso e del file della Guida di Visual Basic.</param>
        <param name="HelpContext">Facoltativo. ID di contesto che identifica un argomento di <c>HelpFile</c> contenente informazioni sull'errore. Se omessa, viene utilizzato, se esistente, l'ID di contesto del file della Guida di Visual Basic relativo all'errore corrispondente alla proprietà <see langword="Number" />.</param>
        <summary>Genera un errore di run-time. Può essere utilizzata al posto dell'istruzione <see langword="Error" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutti i `Raise` argomenti tranne che `Number` sono facoltativi. Se si omettono gli argomenti facoltativi e le impostazioni delle proprietà di `Err` oggetto contiene i valori che non sono stati cancellati, tali valori verranno utilizzati come valori per l'errore.  
  
 Poiché il `Err` oggetto fornisce informazioni più complete rispetto a quando si generano errori con il `Error` istruzione `Raise` è utile per la generazione di errori durante la scrittura di moduli di classe. Ad esempio, con la `Raise` metodo, l'origine che ha generato l'errore può essere specificato nel `Source` proprietà, la Guida in linea per l'errore è possibile fare riferimento e così via.  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `Err` dell'oggetto `Raise` metodo per generare un errore interno di una funzione scritta in Visual Basic. La funzione chiamante può rilevare l'errore e segnalarlo all'utente con una finestra di messaggio.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un'espressione <see langword="String" /> che specifica il nome dell'oggetto o dell'applicazione che ha generato l'errore. Lettura/scrittura.</summary>
        <value>Restituisce o imposta un'espressione <see langword="String" /> che specifica il nome dell'oggetto o dell'applicazione che ha generato l'errore. Lettura/scrittura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Source` proprietà specifica un `String` espressione che rappresenta l'oggetto che ha generato l'errore; l'espressione è in genere il nome dell'oggetto classe o l'ID del processo. Utilizzare il `Source` proprietà per fornire informazioni quando il codice è in grado di gestire un errore generato in un oggetto a cui si accede. Ad esempio, se si accede a Microsoft Excel e viene generato un `Division by zero` errore, Microsoft Excel imposta `Err.Number` al relativo codice di errore per tale errore e imposta `Source` per "Application".  
  
 Quando l'applicazione genera un errore dal codice, `Source` è l'ID livello di codice. del applicazione All'interno di una classe, `Source` deve contenere un nome con il formato *progetto*.* classe*. Quando si verifica un errore imprevisto nel codice, il `Source` proprietà viene impostato automaticamente. Per gli errori in un modulo, `Source` contiene il nome del progetto.  
  
   
  
## Examples  
 In questo esempio illustra l'uso della `Source` proprietà in una tipica routine di gestione degli errori. Quando viene generato un errore da `Class1`, la stringa `"Class1"` viene assegnato al `Source` proprietà del `Err` oggetto. Questa stringa viene quindi visualizzata un messaggio informativo che indica l'origine e il numero dell'errore.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
  </Members>
</Type>