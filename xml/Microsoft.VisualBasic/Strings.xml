<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6b720a5c53d27944cd3cd053d3b53983622209fc" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32090361" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Il modulo <see langword="Strings" /> contiene procedure che consentono di eseguire operazioni sulle stringhe.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo modulo supporta i membri di librerie di runtime che consentono di modificare le stringhe e parole chiave del linguaggio Visual Basic.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come suddividere una stringa in corrispondenza degli spazi.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Obbligatorio. Qualsiasi espressione <see langword="Char" /> o <see langword="String" /> valida. Se <c>String</c> è un'espressione <see langword="String" />, per l'input viene usato solo il primo carattere della stringa. Se <c>String</c> è <see langword="Nothing" /> o non contiene caratteri, si verifica un errore <see cref="T:System.ArgumentException" />.</param>
        <summary>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</summary>
        <returns>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Restituisce il *punto di codice*, o codice di carattere, per il carattere di input. Può essere 0 e 255 per i valori di carattere a byte singolo SBCS (set) e tra -32768 e 32767 per i valori double byte character set (DBCS).  
  
 `AscW` Restituisce il punto di codice Unicode del carattere di input. Può essere 0 e 65535. Il valore restituito è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente.  
  
> [!NOTE]
>  Il `AscB` funzione delle versioni precedenti di Visual Basic restituisce un codice per un byte, anziché un carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `AscB` non è più supportata.  
  
   
  
## Examples  
 L'esempio seguente usa il `Asc` restituzione della funzione `Integer` codici corrispondente alla prima lettera di ogni stringa di caratteri.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Obbligatorio. Qualsiasi espressione <see langword="Char" /> o <see langword="String" /> valida. Se <c>String</c> è un'espressione <see langword="String" />, per l'input viene usato solo il primo carattere della stringa. Se <c>String</c> è <see langword="Nothing" /> o non contiene caratteri, si verifica un errore <see cref="T:System.ArgumentException" />.</param>
        <summary>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</summary>
        <returns>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Restituisce il *punto di codice*, o codice di carattere, per il carattere di input. Può essere 0 e 255 per i valori di carattere a byte singolo SBCS (set) e tra -32768 e 32767 per i valori double byte character set (DBCS).  
  
 `AscW` Restituisce il punto di codice Unicode del carattere di input. Può essere 0 e 65535. Il valore restituito è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente.  
  
> [!NOTE]
>  Il `AscB` funzione delle versioni precedenti di Visual Basic restituisce un codice per un byte, anziché un carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `AscB` non è più supportata.  
  
   
  
## Examples  
 L'esempio seguente usa il `Asc` restituzione della funzione `Integer` codici corrispondente alla prima lettera di ogni stringa di caratteri.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Obbligatorio. Qualsiasi espressione <see langword="Char" /> o <see langword="String" /> valida. Se <c>String</c> è un'espressione <see langword="String" />, per l'input viene usato solo il primo carattere della stringa. Se <c>String</c> è <see langword="Nothing" /> o non contiene caratteri, si verifica un errore <see cref="T:System.ArgumentException" />.</param>
        <summary>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</summary>
        <returns>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Restituisce il *punto di codice*, o codice di carattere, per il carattere di input. Può essere 0 e 255 per i valori di carattere a byte singolo SBCS (set) e tra -32768 e 32767 per i valori double byte character set (DBCS).  
  
 `AscW` Restituisce il punto di codice Unicode del carattere di input. Può essere 0 e 65535. Il valore restituito è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente.  
  
> [!NOTE]
>  Il `AscB` funzione delle versioni precedenti di Visual Basic restituisce un codice per un byte, anziché un carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `AscB` non è più supportata.  
  
   
  
## Examples  
 L'esempio seguente usa il `Asc` restituzione della funzione `Integer` codici corrispondente alla prima lettera di ogni stringa di caratteri.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Obbligatorio. Qualsiasi espressione <see langword="Char" /> o <see langword="String" /> valida. Se <c>String</c> è un'espressione <see langword="String" />, per l'input viene usato solo il primo carattere della stringa. Se <c>String</c> è <see langword="Nothing" /> o non contiene caratteri, si verifica un errore <see cref="T:System.ArgumentException" />.</param>
        <summary>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</summary>
        <returns>Restituisce un <see langword="Integer" /> che rappresenta il codice carattere corrispondente a un carattere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Restituisce il *punto di codice*, o codice di carattere, per il carattere di input. Può essere 0 e 255 per i valori di carattere a byte singolo SBCS (set) e tra -32768 e 32767 per i valori double byte character set (DBCS).  
  
 `AscW` Restituisce il punto di codice Unicode del carattere di input. Può essere 0 e 65535. Il valore restituito è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente.  
  
> [!NOTE]
>  Il `AscB` funzione delle versioni precedenti di Visual Basic restituisce un codice per un byte, anziché un carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `AscB` non è più supportata.  
  
   
  
## Examples  
 L'esempio seguente usa il `Asc` restituzione della funzione `Integer` codici corrispondente alla prima lettera di ogni stringa di caratteri.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Obbligatorio. Espressione <see langword="Integer" /> che rappresenta il <c>punto di codice</c> o il codice carattere del carattere.</param>
        <summary>Restituisce il carattere associato al codice carattere specificato.</summary>
        <returns>Restituisce il carattere associato al codice carattere specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intervallo asimmetrica accettato per `CharCode` consente di compensare le differenze di memorizzazione tra il `Short` e `Integer`. Ad esempio, -29183 è un `Short` ma 36353 è un `Integer`. Questo facilita inoltre la compatibilità con Visual Basic 6.0.  
  
 `Chr` Usa il <xref:System.Text.Encoding> classe il <xref:System.Text?displayProperty=nameWithType> dello spazio dei nomi per determinare se il thread corrente sta utilizzando un set di caratteri a byte singolo (SBCS) o un double byte character set (DBCS). Accetta quindi `CharCode` come punto di codice del set appropriato. L'intervallo può essere 0 e 255 caratteri SBCS e tra -32768 e 65535 per i caratteri DBCS.  
  
 Il valore restituito dipende dalla tabella codici per il thread corrente, contenute nel <xref:System.Globalization.TextInfo.ANSICodePage%2A> proprietà del <xref:System.Globalization.TextInfo> classe il <xref:System.Globalization> dello spazio dei nomi. È possibile ottenere <xref:System.Globalization.TextInfo.ANSICodePage%2A> specificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` accetta `CharCode` come Unicode punto di codice. L'intervallo è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente. I valori compresi tra -32768 e-1 vengono trattati come valori nell'intervallo + 32768 e + 65535.  
  
 I numeri da 0 a 31 sono le stesse codici ASCII non stampabili standard. Ad esempio, `Chr(10)` restituisce avanzamento riga.  
  
> [!NOTE]
>  Il `ChrB` funzione nelle versioni precedenti di Visual Basic restituisce un singolo byte. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe in Visual Basic e .NET Framework sono in formato Unicode, e `ChrB` non è più supportata.  
  
   
  
## Examples  
 L'esempio seguente usa il `Chr` funzione per restituire il carattere associato al codice di carattere specificato.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 o &gt; 255 per <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Obbligatorio. Espressione <see langword="Integer" /> che rappresenta il <c>punto di codice</c> o il codice carattere del carattere.</param>
        <summary>Restituisce il carattere associato al codice carattere specificato.</summary>
        <returns>Restituisce il carattere associato al codice carattere specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intervallo asimmetrica accettato per `CharCode` consente di compensare le differenze di memorizzazione tra il `Short` e `Integer`. Ad esempio, -29183 è un `Short` ma 36353 è un `Integer`. Questo facilita inoltre la compatibilità con Visual Basic 6.0.  
  
 `Chr` Usa il <xref:System.Text.Encoding> classe il <xref:System.Text?displayProperty=nameWithType> dello spazio dei nomi per determinare se il thread corrente sta utilizzando un set di caratteri a byte singolo (SBCS) o un double byte character set (DBCS). Accetta quindi `CharCode` come punto di codice del set appropriato. L'intervallo può essere 0 e 255 caratteri SBCS e tra -32768 e 65535 per i caratteri DBCS.  
  
 Il valore restituito dipende dalla tabella codici per il thread corrente, contenute nel <xref:System.Globalization.TextInfo.ANSICodePage%2A> proprietà del <xref:System.Globalization.TextInfo> classe il <xref:System.Globalization> dello spazio dei nomi. È possibile ottenere <xref:System.Globalization.TextInfo.ANSICodePage%2A> specificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` accetta `CharCode` come Unicode punto di codice. L'intervallo è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente. I valori compresi tra -32768 e-1 vengono trattati come valori nell'intervallo + 32768 e + 65535.  
  
 I numeri da 0 a 31 sono le stesse codici ASCII non stampabili standard. Ad esempio, `Chr(10)` restituisce avanzamento riga.  
  
> [!NOTE]
>  Il `ChrB` funzione nelle versioni precedenti di Visual Basic restituisce un singolo byte. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe in Visual Basic e .NET Framework sono in formato Unicode, e `ChrB` non è più supportata.  
  
   
  
## Examples  
 L'esempio seguente usa il `Chr` funzione per restituire il carattere associato al codice di carattere specificato.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; -32768 o &gt; 65535 per <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una matrice con indice in base zero che contiene un sottoinsieme di una matrice <see langword="String" /> definito in base ai criteri di filtro specificati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Obbligatorio. Matrice unidimensionale delle stringhe da cercare.</param>
        <param name="Match">Obbligatorio. Stringa da cercare.</param>
        <param name="Include">Facoltativo. Valore <see langword="Boolean" /> che indica se restituire sottostringhe che includono o escludono <c>Match</c>. Se <c>Include</c> è <see langword="True" />, la funzione <see langword="Filter" /> restituisce il sottoinsieme della matrice che contiene <c>Match</c> in formato di sottostringa. Se <c>Include</c> è <see langword="False" />, la funzione <see langword="Filter" /> restituisce il sottoinsieme della matrice che non contiene <c>Match</c> in formato di sottostringa.</param>
        <param name="Compare">Facoltativo. Valore numerico che indica il tipo di confronto da utilizzare per le stringhe. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <summary>Restituisce una matrice con indice in base zero che contiene un sottoinsieme di una matrice <see langword="String" /> definito in base ai criteri di filtro specificati.</summary>
        <returns>Restituisce una matrice con indice in base zero che contiene un sottoinsieme di una matrice <see langword="String" /> definito in base ai criteri di filtro specificati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se nessuna corrispondenza di `Match` si trovano all'interno di `Source`, `Filter` funzione restituisce una matrice vuota. Si verifica un errore se `Source` è impostato su `Nothing` o non è una matrice unidimensionale.  
  
 La matrice restituita dal `Filter` funzione contiene solo il numero di elementi sufficienti per contenere il numero di elementi corrispondenti.  
  
 Il `Compare` argomento può avere i valori seguenti.  
  
|Costante|Descrizione|  
|-|-|  
|Costante|Descrizione|  
|`CompareMethod.Binary`|Esegue un confronto binario|  
|`CompareMethod.Text`|Esegue un confronto testuale|  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `Filter` (funzione).  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> è <see langword="Nothing" /> oppure non è una matrice unidimensionale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Obbligatorio. Matrice unidimensionale delle stringhe da cercare.</param>
        <param name="Match">Obbligatorio. Stringa da cercare.</param>
        <param name="Include">Facoltativo. Valore <see langword="Boolean" /> che indica se restituire sottostringhe che includono o escludono <c>Match</c>. Se <c>Include</c> è <see langword="True" />, la funzione <see langword="Filter" /> restituisce il sottoinsieme della matrice che contiene <c>Match</c> in formato di sottostringa. Se <c>Include</c> è <see langword="False" />, la funzione <see langword="Filter" /> restituisce il sottoinsieme della matrice che non contiene <c>Match</c> in formato di sottostringa.</param>
        <param name="Compare">Facoltativo. Valore numerico che indica il tipo di confronto da utilizzare per le stringhe. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <summary>Restituisce una matrice con indice in base zero che contiene un sottoinsieme di una matrice <see langword="String" /> definito in base ai criteri di filtro specificati.</summary>
        <returns>Restituisce una matrice con indice in base zero che contiene un sottoinsieme di una matrice <see langword="String" /> definito in base ai criteri di filtro specificati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se nessuna corrispondenza di `Match` si trovano all'interno di `Source`, `Filter` funzione restituisce una matrice vuota. Si verifica un errore se `Source` è impostato su `Nothing` o non è una matrice unidimensionale.  
  
 La matrice restituita dal `Filter` funzione contiene solo il numero di elementi sufficienti per contenere il numero di elementi corrispondenti.  
  
 Il `Compare` argomento può avere i valori seguenti.  
  
|Costante|Descrizione|  
|-|-|  
|`CompareMethod.Binary`|Esegue un confronto binario|  
|`CompareMethod.Text`|Esegue un confronto testuale|  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `Filter` (funzione).  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> è <see langword="Nothing" /> oppure non è una matrice unidimensionale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Qualsiasi espressione valida.</param>
        <param name="Style">Facoltativo. Un'espressione <see langword="String" /> di formato denominata o definita dall'utente valida.</param>
        <summary>Restituisce una stringa formattata in base alle istruzioni contenute in un'espressione <see langword="String" /> di formato.</summary>
        <returns>Restituisce una stringa formattata in base alle istruzioni contenute in un'espressione <see langword="String" /> di formato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.String.Format%2A?displayProperty=nameWithType> metodo fornisce una funzionalità simile.  
  
 Se si formatta una stringa numerica non localizzata, utilizzare un formato numerico definito dall'utente per assicurarsi di ottenere il risultato desiderato.  
  
 Se si tenta di formattare un numero senza specificare `Style`, `Format` funzione fornisce funzionalità simili a quelle di `Str` funzione, sebbene non riconoscono le impostazioni internazionali. Tuttavia, i numeri positivi formattato come stringhe usando il `Format` funzione non includere uno spazio iniziale riservato al segno del valore; quelli convertiti utilizzando il `Str` funzione conservare lo spazio iniziale.  
  
## <a name="different-formats-for-different-numeric-values"></a>Formati diversi per diversi valori numerici  
 Un'espressione di formato definito dall'utente per i numeri può includere da una a tre sezioni separate da punti e virgola. Se il `Style` argomento del `Format` funzione contiene uno dei formati numerici predefiniti, è consentita solo una sezione.  
  
|Se si usa|Si tratta del risultato|  
|-|-|  
|Una sola sezione|L'espressione di formato si applica a tutti i valori.|  
|Due|La prima sezione viene applicata ai valori positivi e agli zeri; il secondo si applica ai valori negativi.|  
|Tre|La prima sezione viene applicata ai valori positivi, il secondo si applica ai valori negativi e si applica la terza agli zeri.|  
  
 Nell'esempio seguente include due sezioni: il primo definisce il formato per i valori positivi e agli zeri; la seconda sezione definisce il formato per i valori negativi. Poiché il `Style` argomento del `Format` funzione accetta una stringa, è racchiuso tra virgolette.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Se si include un punto e virgola consecutivi, la sezione mancante viene stampata utilizzando il formato del valore positivo. Ad esempio, il seguente formato Visualizza positivi e negativi utilizzando il formato della prima sezione e di visualizzare `Zero` se il valore è zero.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Formati numerici predefiniti  
 Nella tabella seguente identifica i nomi dei formati numerici predefiniti. Possono essere utilizzati in base al nome di `Style` argomento per il `Format` funzione:  
  
|Nome del formato|Descrizione|  
|-|-|  
|`General Number`, `G`o `g`|Numero viene visualizzato alcun separatore delle migliaia.<br /><br /> Ad esempio, `Format(&H3FA, "g")` restituisce `1018`.|  
|`Currency`, `C`o `c`|Il numero viene visualizzato il separatore delle migliaia, se appropriato; Consente di visualizzare due cifre a destra del separatore decimale. Output dipende dalle impostazioni locali del sistema.<br /><br /> Ad esempio, `Format(1234567, "c")` restituisce `$1,234,567.00`.|  
|`Fixed`, `F`o `f`|Consente di visualizzare almeno una cifra a sinistra e due cifre a destra del separatore decimale.<br /><br /> Ad esempio, `Format(1234567, "f")` restituisce `1234567.00`.|  
|`Standard`, `N`o `n`|Visualizza numero con il separatore delle migliaia, almeno una cifra a sinistra e due cifre a destra del separatore decimale.<br /><br /> Ad esempio, `Format(1234567, "n")` restituisce `1,234,567.00`.|  
|`Percent`|Visualizza numero moltiplicato per 100 con un segno di percentuale (%) aggiunto immediatamente a destra, Visualizza sempre due cifre a destra del separatore decimale.<br /><br /> Ad esempio, `Format(0.4744, "Percent")` restituisce `47.44%`.|  
|`P`, o `p`|Il numero viene visualizzato moltiplicato per 100 con un segno di percentuale (%) aggiunto a destra e separato da uno spazio singolo separatore delle migliaia, Visualizza sempre due cifre a destra del separatore decimale.<br /><br /> Ad esempio, `Format(0.80345, "p")` restituisce `80.35 %`.|  
|`Scientific`|Usa la notazione scientifica standard, con due cifre significative.<br /><br /> Ad esempio, `Format(1234567, "Scientific")` restituisce `1.23E+06`.|  
|`E`, o `e`|Usa la notazione scientifica standard, specificando sei cifre significative.<br /><br /> Ad esempio, `Format(1234567, "e")` restituisce `1.234567e+006`.|  
|`D`, o `d`|Visualizza il numero sotto forma di stringa che contiene il valore del numero in formato decimale (base 10). Questa opzione è supportata per i tipi integrali (`Byte`, `Short`, `Integer`, `Long`) solo.<br /><br /> Ad esempio, `Format(&H7F, "d")` restituisce `127`.|  
|`X`, o `x`|Visualizza il numero sotto forma di stringa che contiene il valore del numero in formato esadecimale (base 16). Questa opzione è supportata per i tipi integrali (`Byte`, `Short`, `Integer`, `Long`) solo.<br /><br /> Ad esempio, `Format(127, "x")` restituisce `7f`.|  
|`Yes/No`|Visualizza `No` se il numero è 0; in caso contrario, viene visualizzato `Yes`.<br /><br /> Ad esempio, `Format(0, "Yes/No")` restituisce `No`.|  
|`True/False`|Visualizza `False` se il numero è 0; in caso contrario, viene visualizzato `True`.<br /><br /> Ad esempio, `Format(1, "True/False")` restituisce `True`.|  
|`On/Off`|Visualizza `Off` se il numero è 0; in caso contrario, viene visualizzato `On`.<br /><br /> Ad esempio, `Format(1, "On/Off")` restituisce `On`.|  
  
### <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Yes/No`, `True/False`, e `On/Off` formati non sono supportati.  
  
## <a name="user-defined-numeric-formats"></a>Formati numerici definiti dall'utente  
 Nella tabella seguente identifica i caratteri che è possibile utilizzare per creare formati numerici definiti dall'utente. Possono essere utilizzati per compilare il `Style` argomento per il `Format` funzione:  
  
|Carattere|Descrizione|  
|-|-|  
|nessuno|Visualizza il numero senza formattazione.|  
|(`0`)|Segnaposto per cifre. Viene visualizzata una cifra o uno zero. Se l'espressione è presente una cifra nella posizione in cui è presente lo zero nella stringa di formato, visualizzare. in caso contrario, viene visualizzato uno zero in tale posizione.<br /><br /> Se il numero include meno cifre di quanti sono gli zeri (su entrambi i lati del separatore decimale) nell'espressione di formato, consente di visualizzare zeri iniziali o finali. Se il numero di cifre a destra del separatore decimale è quanti sono gli zeri a destra del separatore decimale nell'espressione di formato, Arrotonda tante cifre decimali quanti sono gli zeri. Se il numero di cifre a sinistra del separatore decimale è quanti sono gli zeri a sinistra del separatore decimale nell'espressione di formato, consente di visualizzare le cifre aggiuntive senza modifiche.|  
|(`#`)|Segnaposto per cifre. Visualizza una cifra o nulla. Se l'espressione è presente una cifra nella posizione in cui il `#` carattere viene visualizzato nella stringa di formato, viene visualizzato; in caso contrario, verrà visualizzato nulla in tale posizione.<br /><br /> Questo simbolo funziona come il `0` segnaposto, ad eccezione del fatto che zeri iniziali e finali non vengono visualizzati se il numero ha meno cifre rispetto `#` caratteri su entrambi i lati del separatore decimale nell'espressione di formato.|  
|(`.`)|Segnaposto decimale. Il segnaposto decimale determina il numero di cifre visualizzato a sinistra e a destra del separatore decimale. Se l'espressione di formato contiene solo `#` caratteri a sinistra di questo simbolo; i numeri inferiori a 1 inizieranno con un separatore decimale. Per visualizzare uno zero iniziale con i numeri frazionari, utilizzare zero come primo segnaposto di cifra a sinistra del separatore decimale. In alcune impostazioni locali, viene utilizzata una virgola come separatore decimale. Il carattere effettivo utilizzato come segnaposto decimale nell'output formattato dipende dal formato numerico riconosciuto dal sistema in uso. Pertanto, utilizzare il periodo come segnaposto decimale nei formati in uso anche se nelle impostazioni locali che viene utilizzata una virgola come segnaposto decimale. La stringa formattata verrà visualizzato nel formato corretto per le impostazioni locali.|  
|(`%`)|Segnaposto percentuale. Moltiplica l'espressione per 100. Il carattere di percentuale (`%`) viene inserito nella posizione in cui viene visualizzato nella stringa di formato.|  
|(`,`)|Separatore delle migliaia. Il separatore delle migliaia separa le migliaia dalle centinaia all'interno di un numero con quattro o più posizioni a sinistra del separatore decimale. Utilizzo standard del separatore delle migliaia viene specificato se il formato include un separatore delle migliaia racchiuso da segnaposti cifra (`0` o `#`).<br /><br /> Carattere separatore delle migliaia immediatamente a sinistra del separatore decimale (se è specificato un numero decimale) o come più a destra della stringa indica che "scalare il numero di essere diviso per 1000 e arrotondato se necessario." I numeri inferiori a 1000 ma maggiori o uguali a 500 vengono visualizzati come `1`e i numeri inferiori a 500 vengono visualizzati come `0`. Due separatori delle migliaia adiacenti in questa posizione scala per un fattore pari a 1 milione e un fattore aggiuntivo di 1.000 per ogni separatore aggiuntivo.<br /><br /> Più separatori in qualsiasi posizione diversa da quella immediatamente a sinistra del separatore decimale o la posizione più a destra nella stringa vengono trattati come semplici che specificano l'uso di un separatore delle migliaia. In alcune impostazioni locali, viene utilizzato un punto come separatore delle migliaia. Il carattere effettivo utilizzato come separatore delle migliaia nell'output formattato dipende dal formato numerico riconosciuto dal sistema. Pertanto, utilizzare la virgola come separatore delle migliaia nei formati in uso anche se nelle impostazioni locali che viene utilizzato un punto come separatore delle migliaia. La stringa formattata verrà visualizzato nel formato corretto per le impostazioni locali.<br /><br /> Ad esempio, considerare le tre stringhe di formato seguente:<br /><br /> -   `"#,0."`, utilizza il separatore delle migliaia per formattare il numero 100 milioni come stringa "100.000.000".<br />-   `"#0,."`, che utilizza il ridimensionamento di un fattore di mille per formattare il numero 100 milioni come stringa "100000".<br />-   `"#,0,."`, che utilizza il separatore delle migliaia e la riduzione di mille per formattare il numero 100 milioni come stringa "100.000".|  
|(`:`)|Separatore dell'ora. In alcune impostazioni locali, possono essere utilizzati altri caratteri per rappresentare il separatore dell'ora. Il separatore dell'ora separa le ore, minuti e secondi nei valori di ora formattati. Il carattere effettivo utilizzato come separatore dell'ora nell'output formattato è determinato dalle impostazioni del sistema.|  
|(`/`)|Separatore di Data. In alcune impostazioni locali, possono essere utilizzati altri caratteri per rappresentare il separatore della data. Questo carattere separa il giorno, mese e anno nei valori di data formattati. Il carattere effettivo utilizzato come separatore della data nell'output formattato è determinato dalle impostazioni del sistema.|  
|(`E-``E+``e-``e+`)|Formato scientifico. Se l'espressione di formato contiene almeno un segnaposto per cifre (`0` o `#`) a sinistra del `E-`, `E+`, `e-`, o `e+`, il numero viene visualizzato in formato scientifico e `E` o `e` viene inserito tra il numero e l'esponente. Il numero di segnaposti cifra a sinistra determina il numero di cifre nell'esponente. Utilizzare `E-` o `e-` per inserire un segno meno accanto agli esponenti negativi. Utilizzare `E+` o `e+` per inserire un segno meno accanto agli esponenti negativi e un segno più accanto agli esponenti positivi. È necessario includere anche segnaposti cifra a destra di questo simbolo per ottenere una formattazione corretta.|  
|`-` `+` `$` ( )|Caratteri letterali. Questi caratteri vengono visualizzati esattamente come vengono digitati nella stringa di formato. Per visualizzare un carattere diverso da quelli elencati, anteporvi una barra rovesciata (`\`) o racchiuderlo tra virgolette doppie ("").|  
|(`\`)|Visualizza il carattere successivo nella stringa di formato. Per visualizzare un carattere che ha un significato speciale come carattere letterale, anteporvi una barra rovesciata (`\`). Non viene visualizzata la barra rovesciata. Utilizzo di una barra rovesciata è equivale a racchiudere il carattere successivo tra virgolette doppie. Per visualizzare una barra rovesciata, utilizzare due barre rovesciate (`\\`).<br /><br /> Esempi di caratteri che possono essere visualizzati come caratteri letterali sono i caratteri di formattazione della data e dell'ora (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, e `:`), i caratteri di formattazione numerica (`#`, `0`, `%`, `E`, `e`, virgola e punto) e i caratteri di formattazione di stringhe (`@`, `&`, `<`, `>`, e `!`).|  
|(`"``ABC``"`)|Visualizza la stringa racchiusa tra virgolette doppie (""). Per includere una stringa nell'argomento dello stile all'interno di codice, è necessario utilizzare `Chr(34)` per racchiudere il testo (`34` è il codice di carattere per un segno di virgolette (")).|  
  
### <a name="legacy-code-example"></a>Esempio di codice precedente  
 Nella tabella seguente contiene alcuni esempi di espressioni di formato per i numeri. (Tutti gli esempi di impostazioni locali del sistema sono inglese-Stati Uniti) La prima colonna contiene le stringhe di formato per il `Style` argomento del `Format` funzione; le altre colonne contengono l'output risultante se i dati formattati con il valore specificato nelle intestazioni di colonna.  
  
|Formato (`Style`)|"5" nel formato|-"5" nel formato|"0,5" nel formato|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Formati di data/ora predefiniti  
 Nella tabella seguente identifica data predefinito e i nomi di formato di ora. Questi può essere usati in base al nome come argomento dello stile per il `Format` funzione:  
  
|Nome del formato|Descrizione|  
|-|-|  
|`General Date`, o `G`|Consente di visualizzare una data o ora. Ad esempio `3/12/2008 11:07:31 AM`. Visualizzazione della data è determinata dal valore delle impostazioni cultura correnti dell'applicazione.|  
|`Long Date`, `Medium Date`o `D`|Viene visualizzata una data in base al formato di data estesa delle impostazioni di cultura correnti. Ad esempio `Wednesday, March 12, 2008`.|  
|`Short Date`, o `d`|Consente di visualizzare una data utilizzando il formato di data breve delle impostazioni di cultura correnti. Ad esempio `3/12/2008`.<br /><br /> Il `d` carattere consente di visualizzare il giorno in un formato di data definito dall'utente.|  
|`Long Time`, `Medium Time`o `T`|Visualizza l'ora utilizzando il formato di ora estesa delle impostazioni di cultura correnti; in genere comprende ore, minuti e secondi. Ad esempio `11:07:31 AM`.|  
|`Short Time` o `t`|Visualizza l'ora utilizzando il formato di ora breve delle impostazioni di cultura correnti. Ad esempio `11:07 AM`.<br /><br /> Il `t` carattere Visualizza `AM` o `PM` i valori delle impostazioni locali che utilizzano un orologio di 12 ore in un formato ora definito dall'utente.|  
|`f`|Visualizza la data estesa e ora breve in base al formato delle impostazioni di cultura correnti. Ad esempio `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Visualizza la data estesa e il tempo in base al formato delle impostazioni di cultura correnti. Ad esempio `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Visualizza la data breve e ora breve in base al formato delle impostazioni di cultura correnti. Ad esempio `3/12/2008 11:07 AM`.|  
|`M`, `m`|Visualizza il mese e giorno di una data. Ad esempio `March 12`.<br /><br /> Il `M` carattere consente di visualizzare il mese in un formato di data definito dall'utente. Il `m` carattere consente di visualizzare i minuti in un formato ora definito dall'utente.|  
|`R`, `r`|La data in base ai formati di <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> proprietà. Ad esempio `Wed, 12 Mar 2008 11:07:31 GMT`. La data formattata non modificare il valore di data e ora. È necessario modificare il valore di data/ora in GMT prima di chiamare il `Format` (funzione).|  
|`s`|Formati di data e ora come indice ordinabile. Ad esempio `2008-03-12T11:07:31`.<br /><br /> Il `s` carattere consente di visualizzare i secondi in un formato ora definito dall'utente.|  
|`u`|Formati di data e ora come indice ordinabile GMT. Ad esempio `2008-03-12 11:07:31Z`.|  
|`U`|Formatta la data e ora con la data e ora estesa come GMT. Ad esempio `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formatta la data dell'anno e mese. Ad esempio `March, 2008`.<br /><br /> Il `Y` e `y` caratteri visualizzare l'anno in un formato di data definito dall'utente.|  
  
 Per ulteriori informazioni sulle impostazioni cultura correnti dell'applicazione, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Formati di data/ora definiti dall'utente  
 Nella tabella seguente vengono illustrati i caratteri che è possibile utilizzare per creare formati di data/ora definiti dall'utente. A differenza delle versioni precedenti di Visual Basic, questi caratteri di formato sono distinzione maiuscole/minuscole.  
  
|Carattere|Descrizione|  
|-|-|  
|(`:`)|Separatore dell'ora. In alcune impostazioni locali, possono essere utilizzati altri caratteri per rappresentare il separatore dell'ora. Il separatore dell'ora separa le ore, minuti e secondi nei valori di ora formattati. Il carattere effettivo utilizzato come separatore dell'ora nell'output formattato è determinato dal valore delle impostazioni cultura correnti dell'applicazione.|  
|(`/`)|Separatore di Data. In alcune impostazioni locali, possono essere utilizzati altri caratteri per rappresentare il separatore della data. Questo carattere separa il giorno, mese e anno nei valori di data formattati. Il carattere effettivo utilizzato come separatore della data nell'output formattato è determinato dalle impostazioni cultura correnti dell'applicazione.|  
|(`%`)|Utilizzato per indicare che il carattere seguente deve essere letto come un formato a lettera singola indipendentemente dalle lettere finali. Questo campo viene utilizzato anche per indicare che un formato a lettera singola viene letto come un formato definito dall'utente. Vedere di seguito per altri dettagli.|  
|`d`|Visualizza il giorno sotto forma di numero senza zero iniziale (ad esempio, `1`). Utilizzare `%d` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`dd`|Visualizza il giorno sotto forma di numero con uno zero iniziale (ad esempio, `01`).|  
|`ddd`|Visualizza il giorno nella forma abbreviata (ad esempio, `Sun`).|  
|`dddd`|Visualizza il giorno con un nome completo (ad esempio, `Sunday`).|  
|`M`|Visualizza il mese sotto forma di numero senza zero iniziale (ad esempio gennaio viene rappresentato come `1`). Utilizzare `%M` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`MM`|Visualizza il mese sotto forma di numero con uno zero iniziale (ad esempio, `01/12/01`).|  
|`MMM`|Visualizza il mese nella forma abbreviata (ad esempio, `Jan`).|  
|`MMMM`|Visualizza il mese come nome completo del mese (ad esempio, `January`).|  
|`gg`|Visualizza la stringa di periodo/era (ad esempio, `A.D.`).|  
|`h`|Visualizza l'ora sotto forma di numero senza zeri iniziali tramite il formato a 12 ore (ad esempio, `1:15:15 PM`). Utilizzare `%h` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`hh`|Visualizza l'ora sotto forma di numero con zeri iniziali tramite il formato a 12 ore (ad esempio, `01:15:15 PM`).|  
|`H`|Visualizza l'ora sotto forma di numero senza zeri iniziali tramite il formato a 24 ore (ad esempio, `1:15:15`). Utilizzare `%H` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`HH`|Visualizza l'ora sotto forma di numero con zeri iniziali tramite il formato a 24 ore (ad esempio, `01:15:15`).|  
|`m`|Visualizza il minuto sotto forma di numero senza zeri iniziali (ad esempio, `12:1:15`). Utilizzare `%m` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`mm`|Visualizza il minuto sotto forma di numero con zeri iniziali (ad esempio, `12:01:15`).|  
|`s`|Visualizza il secondo sotto forma di numero senza zeri iniziali (ad esempio, `12:15:5`). Utilizzare `%s` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`ss`|Visualizza il secondo sotto forma di numero con zeri iniziali (ad esempio, `12:15:05`).|  
|`f`|Visualizza le frazioni di secondo. Ad esempio `ff` Visualizza centesimi di secondo, mentre `ffff` decimillesimi di secondi. È possibile utilizzare fino a sette `f` simboli nel formato definito dall'utente. Utilizzare `%f` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`t`|Viene utilizzato il formato a 12 ore e maiuscoli `A` per qualsiasi ora prima di mezzogiorno Visualizza maiuscoli `P` per qualsiasi ora tra mezzogiorno e le 11:59 P.M. Utilizzare `%t` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`tt`|Per impostazioni locali che utilizzano un formato a 12 ore, viene visualizzato un maiuscolo `AM` con qualsiasi ora prima di mezzogiorno Visualizza maiuscoli `PM` con qualsiasi ora tra mezzogiorno e le 11:59 P.M.<br /><br /> Per le impostazioni locali che utilizzano un orologio di 24 ore, verrà visualizzato nulla.|  
|`y`|Visualizza il numero dell'anno (0-9) senza zeri iniziali. Utilizzare `%y` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`yy`|Visualizza l'anno in formato numerico a due cifre con uno zero iniziale, se applicabile.|  
|`yyy`|Visualizza l'anno in formato numerico a quattro cifre.|  
|`yyyy`|Visualizza l'anno in formato numerico a quattro cifre.|  
|`z`|Visualizza la differenza di fuso orario senza zero iniziale (ad esempio, `-8`). Utilizzare `%z` se questo è l'unico carattere nel formato numerico definito dall'utente.|  
|`zz`|Visualizza la differenza di fuso orario con uno zero iniziale (ad esempio, `-08`)|  
|`zzz`|Consente di visualizzare la differenza di fuso orario completa (ad esempio, `-08:00`)|  
  
### <a name="legacy-code-example"></a>Esempio di codice precedente  
 Di seguito sono riportati esempi di data definito dall'utente e i formati di ora per `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Formato|Visualizza|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 La risoluzione tempo minimo per un dispositivo è determinata dal produttore del dispositivo. Se la risoluzione tempo per il dispositivo è sufficientemente precisa, il `f` formato carattere restituisce 0 quando viene eseguito sul dispositivo.  
  
   
  
## Examples  
 In questo esempio sono presentati vari utilizzi della funzione `Format` per formattare valori mediante formati sia di tipo `String` che definiti dall'utente. Per quanto riguarda il separatore della data (`/`), dell'ora (`:`) e gli indicatori AM/PM (`t` e `tt`), l'output formattato visualizzato dal sistema dipende dalle impostazioni locali utilizzate per il codice. Nell'ambiente di sviluppo la data e l'ora vengono visualizzate nel formato breve delle impostazioni locali.  
  
> [!NOTE]
>  Per le impostazioni locali che utilizzano il formato 24 ore, gli indicatori AM/PM (`t` e `tt`) non visualizzano alcun output.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione da formattare.</param>
        <param name="NumDigitsAfterDecimal">Facoltativo. Valore numerico che indica quante cifre vengono visualizzate a destra del segno decimale. Il valore predefinito è –1, che indica che vengono utilizzate le impostazioni internazionali del computer.</param>
        <param name="IncludeLeadingDigit">Facoltativo. Enumerazione <see cref="T:Microsoft.VisualBasic.TriState" /> che indica se visualizzare o meno uno zero iniziale per i valori frazionari. Per informazioni sui valori, vedere la sezione "Osservazioni".</param>
        <param name="UseParensForNegativeNumbers">Facoltativo. Enumerazione <see cref="T:Microsoft.VisualBasic.TriState" /> che indica se racchiudere i valori negativi tra parentesi. Per informazioni sui valori, vedere la sezione "Osservazioni".</param>
        <param name="GroupDigits">Facoltativo. Enumerazione <see cref="T:Microsoft.VisualBasic.TriState" /> che indica se raggruppare i numeri utilizzando il delimitatore di gruppo specificato nelle impostazioni internazionali del computer. Per informazioni sui valori, vedere la sezione "Osservazioni".</param>
        <summary>Restituisce un'espressione nel formato valore di valuta utilizzando il simbolo di valuta impostato nel Pannello di controllo del sistema.</summary>
        <returns>Restituisce un'espressione nel formato valore di valuta utilizzando il simbolo di valuta impostato nel Pannello di controllo del sistema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando uno o più argomenti facoltativi vengono omessi, vengono utilizzati invece i corrispondenti valori delle impostazioni internazionali del computer.  
  
 La posizione del simbolo di valuta rispetto al valore di valuta è determinata dalle impostazioni internazionali del sistema.  
  
> [!NOTE]
>  Tutte le informazioni provengono dalle impostazioni locali dell'applicazione. Per impostazione predefinita, sono impostazioni locali configurate nel Pannello di controllo. Tuttavia, può essere modificato a livello di programmazione utilizzando .NET Framework, tranne uno zero iniziale, che deriva dal `Number` scheda.  
  
 Il `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` accettano i seguenti valori di enumerazione TriState.  
  
|Valore|Descrizione|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Impostazioni internazionali del computer|  
  
   
  
## Examples  
 L'esempio seguente illustra l'uso della funzione `FormatCurrency`.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il numero di cifre dopo il separatore decimale è maggiore di 99.</exception>
        <exception cref="T:System.InvalidCastException">Tipo non numerico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione <see langword="Date" /> da formattare.</param>
        <param name="NamedFormat">Facoltativo. Valore numerico che indica il formato di data e ora utilizzato. Se omesso, viene utilizzato <see langword="DateFormat.GeneralDate" />.</param>
        <summary>Restituisce un'espressione stringa che rappresenta un valore data/ora.</summary>
        <returns>Restituisce un'espressione stringa che rappresenta un valore data/ora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Date` tipo di dati contiene sempre le informazioni sia data e ora. Ai fini della conversione del tipo, Visual Basic considera 1/1/1 (1 ° gennaio dell'anno 1) come valore neutro per la data e 00:00:00 (mezzanotte) come valore neutro per l'ora. Se si formatta un `Date` valore come stringa di data/ora, `FormatDateTime` non include valori neutri nella stringa risultante. Ad esempio, se si converte #1/1/0001 9:30:00 # in una stringa, il risultato è "9:30:00 AM". le informazioni sulla data viene eliminate. Tuttavia, le informazioni sulla data è ancora presente nell'originale `Date` valore e possono essere recuperate con funzioni, ad esempio `DatePart`.  
  
> [!NOTE]
>  Se si passa il `Expression` argomento come una `String` letterale, `FormatDateTime` interpreta in base al <xref:System.Globalization.CultureInfo.CurrentCulture%2A> l'impostazione dell'applicazione. Tuttavia, se viene passato come un `Date` letterale, utilizzare il formato #mm/gg/aaaa #, perché `FormatDateTime` interpreta sempre un `Date` letterale in base alle impostazioni cultura inglese (Stati Uniti). Questa operazione è necessaria perché, se un'applicazione viene sviluppata utilizzando `Date` valori letterali da una delle impostazioni cultura, ma viene quindi eseguita su una piattaforma con una lingua diversa, il `Date` valori letterali potrebbero essere analizzati in modo non corretto.  
  
 Il `NamedFormat` presenta le seguenti impostazioni.  
  
|Costante|Descrizione|  
|-|-|  
|`DateFormat.GeneralDate`|Visualizzare una data o ora. Visualizzare una parte della data come data breve. Se è parte dell'ora, è possibile visualizzarlo come molto tempo. Se presente, vengono visualizzate entrambe le parti.|  
|`DateFormat.LongDate`|Visualizzare una data utilizzando il formato di data estesa specificato nelle impostazioni internazionali del computer.|  
|`DateFormat.ShortDate`|Visualizzare una data utilizzando il formato di data breve specificato nelle impostazioni internazionali del computer.|  
|`DateFormat.LongTime`|Visualizza l'ora utilizzando il formato di ora specificato nelle impostazioni internazionali del computer.|  
|`DateFormat.ShortTime`|Visualizza l'ora nel formato 24 ore (hh: mm).|  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `FormatDateTime` (funzione).  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          L'impostazione <paramref name="NamedFormat" /> non è valida.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione da formattare.</param>
        <param name="NumDigitsAfterDecimal">Facoltativo. Valore numerico che indica quante cifre vengono visualizzate a destra del segno decimale. Il valore predefinito è –1, che indica che vengono utilizzate le impostazioni internazionali del computer.</param>
        <param name="IncludeLeadingDigit">Facoltativo. Costante <see cref="T:Microsoft.VisualBasic.TriState" /> che indica se visualizzare uno zero iniziale per i valori frazionari. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <param name="UseParensForNegativeNumbers">Facoltativo. Costante <see cref="T:Microsoft.VisualBasic.TriState" /> che indica se racchiudere i valori negativi tra parentesi. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <param name="GroupDigits">Facoltativo. Costante <see cref="T:Microsoft.VisualBasic.TriState" /> che consente di specificare se raggruppare o meno i numeri usando il carattere di delimitazione di gruppo specificato nelle impostazioni locali. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <summary>Restituisce un'espressione in formato di numero.</summary>
        <returns>Restituisce un'espressione in formato di numero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando uno o più argomenti facoltativi vengono omessi i valori degli argomenti omessi vengono forniti dalle impostazioni locali.  
  
> [!NOTE]
>  Tutte le informazioni provengono dalle impostazioni locali dell'applicazione. Per impostazione predefinita, sono impostazioni locali configurate nel Pannello di controllo. Tuttavia, informazioni possono essere modificate a livello di codice utilizzando .NET Framework.  
  
 Il `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` sono disponibili le seguenti impostazioni.  
  
|Costante|Descrizione|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Impostazioni internazionali del computer|  
  
   
  
## Examples  
 Questo esempio viene illustrato il `FormatNumber` (funzione).  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Tipo non numerico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione da formattare.</param>
        <param name="NumDigitsAfterDecimal">Facoltativo. Valore numerico che indica il numero di cifre da visualizzare a destra del separatore decimale. Il valore predefinito -1 indica che vengono usate le impostazioni locali.</param>
        <param name="IncludeLeadingDigit">Facoltativo. Costante <see cref="T:Microsoft.VisualBasic.TriState" /> che consente di specificare se visualizzare o meno uno zero davanti ai valori frazionari. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <param name="UseParensForNegativeNumbers">Facoltativo. Costante <see cref="T:Microsoft.VisualBasic.TriState" /> che consente di specificare se racchiudere o meno i valori negativi tra parentesi. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <param name="GroupDigits">Facoltativo. Costante <see cref="T:Microsoft.VisualBasic.TriState" /> che consente di specificare se raggruppare o meno i numeri usando il carattere di delimitazione di gruppo specificato nelle impostazioni locali. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <summary>Restituisce un'espressione formattata come percentuale (ovvero moltiplicata per 100) con un carattere % finale.</summary>
        <returns>Restituisce un'espressione formattata come percentuale (ovvero moltiplicata per 100) con un carattere % finale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando uno o più argomenti facoltativi vengono omessi, vengono forniti i valori degli argomenti omessi dalle impostazioni locali.  
  
> [!NOTE]
>  Tutte le informazioni provengono dalle impostazioni locali dell'applicazione. Per impostazione predefinita, sono impostazioni locali configurate nel Pannello di controllo. Tuttavia, informazioni possono essere modificate a livello di codice utilizzando .NET Framework.  
  
 Il `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` sono disponibili le seguenti impostazioni.  
  
|Costante|Descrizione|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|Impostazioni internazionali del computer|  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `FormatPercent` (funzione).  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Tipo non numerico.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Qualsiasi espressione <see langword="String" /> valida.</param>
        <param name="Index">Obbligatorio. Espressione <see langword="Integer" />. L'indice (in base 1) del carattere di <c>str</c> da restituire.</param>
        <summary>Restituisce un valore <see langword="Char" /> che rappresenta il carattere dell'indice specificato nella stringa fornita.</summary>
        <returns>
          Valore <see langword="Char" /> che rappresenta il carattere dell'indice specificato nella stringa fornita.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Index` è minore di 1 o maggiore dell'indice dell'ultimo carattere nel `str`, un `ArgumentException` viene generata un'eccezione.  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare il `GetChar` funzione per restituire un carattere da un indice specificato in un `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> è <see langword="Nothing" />, <paramref name="Index" /> &lt; 1 o <paramref name="Index" /> è maggiore dell'indice dell'ultimo carattere di <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un Integer che specifica la posizione di inizio della prima occorrenza di una stringa in un'altra.  Il numero intero è un indice a base uno se viene individuata una corrispondenza.  Se non viene rilevata alcuna corrispondenza, la funzione restituisce zero.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Obbligatorio. Espressione <see langword="String" /> in cui cercare.</param>
        <param name="String2">Obbligatorio. Espressione <see langword="String" /> cercata.</param>
        <param name="Compare">Facoltativo. Specifica il tipo di confronto delle stringhe. Se <c>Compare</c> viene omesso, il tipo di confronto viene determinato dall'impostazione di <see langword="Option Compare" />.</param>
        <summary>Restituisce un Integer che specifica la posizione di inizio della prima occorrenza di una stringa in un'altra.</summary>
        <returns>
          <list type="table">
            <item>
              <term> Se  
  
 </term>
              <description> InStr restituirà  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> è di lunghezza zero o <see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> è di lunghezza zero o <see langword="Nothing" /></term>
              <description> Posizione iniziale per la ricerca, che viene impostata come predefinita in corrispondenza del primo carattere.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> non trovato.  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> si trova all'interno di <paramref name="String1" />.</term>
              <description> La posizione di inizio della corrispondenza  
  
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, il `InStr` funzione viene utilizzata durante l'analisi di stringhe.  
  
> [!NOTE]
>  Il `InStrB` funzione nelle versioni precedenti di Visual Basic restituisce un numero di byte anziché in una posizione di carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `InStrB` non è più supportata.  
  
 Le impostazioni dell'argomento `Compare` sono le seguenti:  
  
|Costante|Valore|Descrizione|  
|-|-|-|  
|`Binary`|0|Esegue un confronto binario|  
|`Text`|1|Esegue un confronto di testo|  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `InStr` viene utilizzata per restituire la posizione della prima occorrenza di una stringa in un'altra:  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Facoltativo. Espressione numerica che imposta la posizione iniziale di ogni ricerca. Se omesso, la ricerca inizia a partire dalla posizione del primo carattere. L'indice è in base 1.</param>
        <param name="String1">Obbligatorio. Espressione <see langword="String" /> in cui cercare.</param>
        <param name="String2">Obbligatorio. Espressione <see langword="String" /> cercata.</param>
        <param name="Compare">Facoltativo. Specifica il tipo di confronto delle stringhe. Se <c>Compare</c> viene omesso, il tipo di confronto viene determinato dall'impostazione di <see langword="Option Compare" />.</param>
        <summary>Restituisce un Integer che specifica la posizione di inizio della prima occorrenza di una stringa in un'altra.</summary>
        <returns>
          <list type="table">
            <item>
              <term> Se  
  
 </term>
              <description> InStr restituirà  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> è di lunghezza zero o <see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> è di lunghezza zero o <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> non trovato.  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> si trova all'interno di <paramref name="String1" />.</term>
              <description> La posizione di inizio della corrispondenza  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; lunghezza di <paramref name="String1" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, il `InStr` funzione viene utilizzata durante l'analisi di stringhe.  
  
> [!NOTE]
>  Il `InStrB` funzione nelle versioni precedenti di Visual Basic restituisce un numero di byte anziché in una posizione di carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `InStrB` non è più supportata.  
  
 Le impostazioni dell'argomento `Compare` sono le seguenti:  
  
|Costante|Valore|Descrizione|  
|-|-|-|  
|`Binary`|0|Esegue un confronto binario|  
|`Text`|1|Esegue un confronto di testo|  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `InStr` viene utilizzata per restituire la posizione della prima occorrenza di una stringa in un'altra:  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Obbligatorio. Espressione String da cercare.</param>
        <param name="StringMatch">Obbligatorio. Espressione String da cercare.</param>
        <param name="Start">Facoltativo. Espressione numerica che imposta la posizione iniziale in base 1 di ogni ricerca, a partire dal lato sinistro della stringa. Se <c>Start</c> viene omesso, viene usato –1 per indicare che la ricerca inizia dalla posizione dell'ultimo carattere. La ricerca procede quindi da destra a sinistra.</param>
        <param name="Compare">Facoltativo. Valore numerico che indica il tipo di confronto da utilizzare per la valutazione delle sottostringhe. Se omesso, viene eseguito un confronto binario. Per informazioni sui valori, vedere "Impostazioni".</param>
        <summary>Restituisce la posizione della prima occorrenza di una stringa inclusa in un'altra a partire dalla destra della stringa.</summary>
        <returns>
          <list type="table">
            <item>
              <term> Se  
  
 </term>
              <description> InStrRev restituirà  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> è di lunghezza zero  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> è di lunghezza zero  
  
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> non trovato.  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> si trova all'interno di <paramref name="StringCheck" />.</term>
              <description> La posizione della prima corrispondenza, iniziando dalla destra della stringa.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> è maggiore della lunghezza di <paramref name="StringMatch" />.</term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si noti che la sintassi per la `InStrRev` funzione non è uguale alla sintassi per il `InStr` (funzione).  
  
 Il `Compare` argomento può avere i valori seguenti.  
  
|Costante|Descrizione|  
|-|-|  
|`Binary`|Esegue un confronto binario.|  
|`Text`|Esegue un confronto di testo.|  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `InStrRev` (funzione).  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 o <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una stringa creata unendo un certo numero di sottostringhe di una matrice.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Obbligatorio. Matrice unidimensionale di sottostringhe da unire.</param>
        <param name="Delimiter">Facoltativo. Qualsiasi stringa, utilizzata per separare le sottostringhe nella stringa restituita. Se omesso, viene utilizzato il carattere spazio (" "). Se <c>Delimiter</c> è una stringa di lunghezza zero ("") o <see langword="Nothing" />, tutti gli elementi dell'elenco vengono concatenati senza delimitatori.</param>
        <summary>Restituisce una stringa creata unendo un certo numero di sottostringhe di una matrice.</summary>
        <returns>Restituisce una stringa creata unendo un certo numero di sottostringhe di una matrice.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vi è una parità tra il `Join` e `Split` funzioni. Il `Join` funzione accetta una matrice di stringhe e le unisce con una stringa di delimitazione per restituire una singola stringa. Il `Split` funzione accetta una stringa e la separa in corrispondenza del delimitatore per restituire una matrice di stringhe. Tuttavia, una differenza fondamentale è che `Join` può concatenare stringhe con qualsiasi stringa delimitatore, `Split` può separare stringhe utilizzando un delimitatore carattere singolo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il `Join` funzione per creare un elenco di varie stringhe.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> non è unidimensionale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Obbligatorio. Matrice unidimensionale di sottostringhe da unire.</param>
        <param name="Delimiter">Facoltativo. Qualsiasi stringa, utilizzata per separare le sottostringhe nella stringa restituita. Se omesso, viene utilizzato il carattere spazio (" "). Se <c>Delimiter</c> è una stringa di lunghezza zero ("") o <see langword="Nothing" />, tutti gli elementi dell'elenco vengono concatenati senza delimitatori.</param>
        <summary>Restituisce una stringa creata unendo un certo numero di sottostringhe di una matrice.</summary>
        <returns>Restituisce una stringa creata unendo un certo numero di sottostringhe di una matrice.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vi è una parità tra il `Join` e `Split` funzioni. Il `Join` funzione accetta una matrice di stringhe e le unisce con una stringa di delimitazione per restituire una singola stringa. Il `Split` funzione accetta una stringa e la separa in corrispondenza del delimitatore per restituire una matrice di stringhe. Tuttavia, una differenza fondamentale è che `Join` può concatenare stringhe con qualsiasi stringa delimitatore, `Split` può separare stringhe utilizzando un delimitatore carattere singolo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il `Join` funzione per creare un elenco di varie stringhe.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> non è unidimensionale.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una stringa o un carattere convertito in minuscolo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Obbligatorio. Qualsiasi espressione <see langword="String" /> o <see langword="Char" /> valida.</param>
        <summary>Restituisce una stringa o un carattere convertito in minuscolo.</summary>
        <returns>Restituisce una stringa o un carattere convertito in minuscolo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo le lettere maiuscole vengono convertite in minuscolo; le lettere minuscole e i caratteri rimangono invariati.  
  
 Questa funzione utilizza informazioni relative alla lingua dell'applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l'applicazione.  
  
> [!IMPORTANT]
>  Se l'applicazione prende decisioni di sicurezza in base al risultato di un'operazione di modifica di maiuscole o il confronto, quindi l'operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=nameWithType> (metodo) e passare <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> per il `comparisonType` argomento. Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `LCase` funzione per restituire la versione di una stringa in minuscolo.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Obbligatorio. Qualsiasi espressione <see langword="String" /> o <see langword="Char" /> valida.</param>
        <summary>Restituisce una stringa o un carattere convertito in minuscolo.</summary>
        <returns>Restituisce una stringa o un carattere convertito in minuscolo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo le lettere maiuscole vengono convertite in minuscolo; le lettere minuscole e i caratteri rimangono invariati.  
  
 Questa funzione utilizza informazioni relative alla lingua dell'applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l'applicazione.  
  
> [!IMPORTANT]
>  Se l'applicazione prende decisioni di sicurezza in base al risultato di un'operazione di modifica di maiuscole o il confronto, quindi l'operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=nameWithType> (metodo) e passare <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> per il `comparisonType` argomento. Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `LCase` funzione per restituire la versione di una stringa in minuscolo.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Espressione <see langword="String" /> da cui vengono restituiti i primi caratteri a sinistra.</param>
        <param name="Length">Obbligatorio. Espressione <see langword="Integer" />. Espressione numerica che indica quanti caratteri restituire. Se 0, viene restituita una stringa di lunghezza zero (""). Se maggiore o uguale al numero di caratteri di <c>str</c>, viene restituita l'intera stringa.</param>
        <summary>Restituisce una stringa contenente un numero specificato di caratteri a partire dal lato sinistro di una stringa.</summary>
        <returns>Restituisce una stringa contenente un numero specificato di caratteri a partire dal lato sinistro di una stringa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per determinare il numero di caratteri in `str`, utilizzare il `Len` (funzione). Se utilizzata in un'applicazione Windows Forms o qualsiasi altra classe che ha un `Left` proprietà, è necessario qualificare completamente la funzione con `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  Il `LeftB` funzione nelle versioni precedenti di Visual Basic restituisce una stringa in byte anziché in caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LeftB` non è più supportata.  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `Left` funzione per restituire una sottostringa di un determinato `String`. In una classe che ha un `Left` proprietà, potrebbe essere necessario qualificare completamente il `Left` (funzione).  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Qualsiasi espressione <see langword="String" /> o nome di variabile valido. Se <c>Expression</c> è di tipo <see langword="Object" />, la funzione <see langword="Len" /> restituisce la dimensione così come verrà scritta nel file dalla funzione <see langword="FilePut" />.</param>
        <summary>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</summary>
        <returns>Restituisce un valore intero contenente il numero di caratteri di una stringa o il numero nominale di byte richiesti per archiviare una variabile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipi definiti dall'utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell'oggetto come verrà scritto il file dal `FilePut` (funzione).  
  
 Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.  
  
> [!NOTE]
>  Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l'archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall'utente.  
  
> [!NOTE]
>  Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.  
  
## <a name="smart-device-developer-notes"></a>Note per gli sviluppatori di Smart Device  
 Il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito la funzione `Len` viene utilizzata per restituire il numero di caratteri di una stringa.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Obbligatorio. Espressione <see langword="String" />. Nome della variabile String.</param>
        <param name="Length">Obbligatorio. Espressione <see langword="Integer" />. Lunghezza della stringa restituita.</param>
        <summary>Restituisce una stringa allineata a sinistra contenente la stringa specificata adeguata alla lunghezza specificata.</summary>
        <returns>Restituisce una stringa allineata a sinistra contenente la stringa specificata adeguata alla lunghezza specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la stringa specificata è maggiore della lunghezza specificata, la stringa restituita viene accorciata alla lunghezza specificata. Se la stringa specificata è inferiore alla lunghezza specificata, vengono aggiunti spazi all'estremità destra della stringa restituita per ottenere la lunghezza appropriata.  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `LSet` (funzione).  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Qualsiasi espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<see langword="LTrim" />), senza spazi finali (<see langword="RTrim" />) o senza spazi iniziali o finali (<see langword="Trim" />).</summary>
        <returns>Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<see langword="LTrim" />), senza spazi finali (<see langword="RTrim" />) o senza spazi iniziali o finali (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `LTrim`, `RTrim`, e `Trim` funzioni rimuovono gli spazi alla fine delle stringhe.  
  
   
  
## Examples  
 In questo esempio vengono utilizzate la funzione `LTrim` per rimuovere gli spazi iniziali e la funzione `RTrim` per rimuovere gli spazi finali da una variabile String. Viene utilizzata la funzione `Trim` per eliminare entrambi i tipi di spazi.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una stringa contenente caratteri provenienti da una stringa specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Espressione <see langword="String" /> da cui vengono restituiti i caratteri.</param>
        <param name="Start">Obbligatorio. Espressione <see langword="Integer" />. Posizione iniziale dei caratteri da restituire. Se <c>Start</c> è maggiore del numero di caratteri di <c>str</c>, la funzione <see langword="Mid" /> restituisce una stringa di lunghezza zero (""). <c>Start</c> è in base uno.</param>
        <summary>Restituisce una stringa che contiene tutti i caratteri a partire da una posizione specificata in una stringa.</summary>
        <returns>Una stringa che consiste di tutti i caratteri a partire dalla posizione specificata nella stringa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per determinare il numero di caratteri in `str`, utilizzare il `Len` (funzione).  
  
 Visual Basic è disponibile un `Mid` (funzione) e un `Mid` istruzione. Questi elementi entrambi funzionano su un numero specificato di caratteri in una stringa, ma la `Mid` funzione restituisce i caratteri, mentre il `Mid` istruzione sostituisce i caratteri. Per ulteriori informazioni, vedere [Mid (istruzione)](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Il `MidB` funzione nelle versioni precedenti di Visual Basic restituisce una stringa in byte anziché in caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic sono in formato Unicode, e `MidB` non è più supportata.  
  
   
  
## Examples  
 L'ultima riga di questo esempio utilizza questo overload della funzione `Mid` per restituire il quinto carattere e quelli successivi di una stringa.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 o <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Espressione <see langword="String" /> da cui vengono restituiti i caratteri.</param>
        <param name="Start">Obbligatorio. Espressione <see langword="Integer" />. Posizione iniziale dei caratteri da restituire. Se <c>Start</c> è maggiore del numero di caratteri di <c>str</c>, la funzione <see langword="Mid" /> restituisce una stringa di lunghezza zero (""). <c>Start</c> è in base uno.</param>
        <param name="Length">Facoltativo. Espressione <see langword="Integer" />. Numero dei caratteri da restituire. Se omesso o se il numero di caratteri del testo è minore di <c>Length</c> (compreso il carattere nella posizione indicata da <c>Start</c>), vengono restituiti tutti i caratteri dalla posizione iniziale fino alla fine della stringa.</param>
        <summary>Restituisce una stringa che contiene un numero specificato di caratteri a partire da una posizione specificata in una stringa.</summary>
        <returns>Una stringa che consiste del numero specificato di caratteri a partire dalla posizione specificata nella stringa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per determinare il numero di caratteri in `str`, utilizzare il `Len` (funzione).  
  
 Visual Basic è disponibile un `Mid` (funzione) e un `Mid` istruzione. Questi elementi entrambi funzionano su un numero specificato di caratteri in una stringa, ma la `Mid` funzione restituisce i caratteri, mentre il `Mid` istruzione sostituisce i caratteri. Per ulteriori informazioni, vedere [Mid (istruzione)](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Il `MidB` funzione nelle versioni precedenti di Visual Basic restituisce una stringa in byte anziché in caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic sono in formato Unicode, e `MidB` non è più supportata.  
  
   
  
## Examples  
 Le prime due funzioni `Mid` di questo esempio restituiscono il numero di caratteri specificato da una stringa, a partire dalle posizioni specificate. L'ultima funzione illustra l'overload di <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> e specifica solamente il punto iniziale per l'estrazione della stringa.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 o <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione String contenente la sottostringa da sostituire.</param>
        <param name="Find">Obbligatorio. Sottostringa da cercare.</param>
        <param name="Replacement">Obbligatorio. Sottostringa di sostituzione.</param>
        <param name="Start">Facoltativo. Posizione all'interno di <c>Expression</c> in cui inizia una sottostringa usata per la sostituzione. Il valore restituito di <see langword="Replace" /> è una stringa che inizia in corrispondenza di <c>Start</c>, con le sostituzioni appropriate. Se omesso, viene usato il valore 1.</param>
        <param name="Count">Facoltativo. Numero di sostituzioni della sottostringa da eseguire. Se omesso, il valore predefinito è -1, che indica di eseguire tutte le sostituzioni possibili.</param>
        <param name="Compare">Facoltativo. Valore numerico che indica il tipo di confronto da utilizzare per la valutazione delle sottostringhe. Per informazioni sui valori, vedere "Impostazioni".</param>
        <summary>Restituisce una stringa nella quale la sottostringa specificata è stata sostituita con un'altra sottostringa per il numero di volte indicato.</summary>
        <returns>
          <see langword="Replace" /> restituisce i valori seguenti.  
  
 <list type="table"><item><term> Se  
  
 </term><description> Replace restituisce  
  
 </description></item><item><term><paramref name="Find" /> è di lunghezza zero o <see langword="Nothing" /></term><description> Copia di <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> è di lunghezza zero  
  
 </term><description> Copia di <paramref name="Expression" /> senza occorrenze di <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> è di lunghezza zero o <see langword="Nothing" /> oppure <paramref name="Start" /> è maggiore della lunghezza di <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> è 0  
  
 </term><description> Copia di <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito del `Replace` funzione è una stringa che inizia in corrispondenza della posizione specificata da `Start` e termina alla fine del `Expression` stringa, con le sostituzioni effettuate come specificato da di `Find` e `Replace` valori.  
  
 Il `Compare` argomento può avere i valori seguenti.  
  
|Costante|Descrizione|  
|-|-|  
|`Binary`|Esegue un confronto binario|  
|`Text`|Esegue un confronto testuale|  
  
   
  
## Examples  
 Questo esempio viene illustrato il `Replace` (funzione).  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; -1 o <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Espressione <see langword="String" /> da cui vengono restituiti gli ultimi caratteri a destra.</param>
        <param name="Length">Obbligatorio. <see langword="Integer" />. Espressione numerica che indica quanti caratteri restituire. Se 0, viene restituita una stringa di lunghezza zero (""). Se maggiore o uguale al numero di caratteri di <c>str</c>, viene restituita l'intera stringa.</param>
        <summary>Restituisce una stringa contenente un numero di caratteri specificato a partire dalla destra della stringa.</summary>
        <returns>Restituisce una stringa contenente un numero di caratteri specificato a partire dalla destra della stringa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per determinare il numero di caratteri in `str`, utilizzare il `Len` (funzione). Se utilizzata in un Windows Form o qualsiasi altra classe che ha un `Right` proprietà, è necessario qualificare completamente la funzione con `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  Il `RightB` funzione nelle versioni precedenti di Visual Basic restituisce una stringa in byte, anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `RightB` non è più supportata.  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `Right` funzione per restituire una sottostringa di un determinato `String`. In una classe che ha un `Right` proprietà, potrebbe essere necessario qualificare completamente il `Right` (funzione).  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Obbligatorio. Espressione <see langword="String" />. Nome della variabile String.</param>
        <param name="Length">Obbligatorio. Espressione <see langword="Integer" />. Lunghezza della stringa restituita.</param>
        <summary>Restituisce una stringa allineata a destra contenente la stringa specificata adattata alla lunghezza specificata.</summary>
        <returns>Restituisce una stringa allineata a destra contenente la stringa specificata adattata alla lunghezza specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `Source` è più lungo di `Length`, `RSet` inserisce solo i caratteri all'estrema sinistra fino alla lunghezza di `Source`, nella stringa restituita. Se la stringa specificata è inferiore alla lunghezza specificata, vengono aggiunti spazi all'estremità sinistra della stringa per ottenere la lunghezza appropriata. Se la stringa specificata è maggiore della lunghezza specificata, viene accorciata alla lunghezza specificata.  
  
   
  
## Examples  
 In questo esempio viene illustrato l'utilizzo del `RSet` (funzione).  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Qualsiasi espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<see langword="LTrim" />), senza spazi finali (<see langword="RTrim" />) o senza spazi iniziali o finali (<see langword="Trim" />).</summary>
        <returns>Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<see langword="LTrim" />), senza spazi finali (<see langword="RTrim" />) o senza spazi iniziali o finali (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `LTrim`, `RTrim`, e `Trim` funzioni rimuovono gli spazi alla fine delle stringhe.  
  
   
  
## Examples  
 In questo esempio vengono utilizzate la funzione `LTrim` per rimuovere gli spazi iniziali e la funzione `RTrim` per rimuovere gli spazi finali da una variabile String. Viene utilizzata la funzione `Trim` per eliminare entrambi i tipi di spazi.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Espressione <see langword="Integer" />. Numero di spazi desiderati nella stringa.</param>
        <summary>Restituisce una stringa composta dal numero di spazi specificato.</summary>
        <returns>Restituisce una stringa composta dal numero di spazi specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Space` funzione è utile per la formattazione dell'output e cancellare i dati in stringhe a lunghezza fissa.  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `Space` funzione per restituire una stringa composta da un numero specificato di spazi.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione <see langword="String" /> contenente sottostringhe e delimitatori.</param>
        <param name="Delimiter">Facoltativo. Qualsiasi carattere singolo utilizzato per identificare i limiti delle sottostringhe. Se <c>Delimiter</c> viene omesso, come delimitatore viene usato il carattere spazio (" ").</param>
        <param name="Limit">Facoltativo. Numero massimo di sottostringhe in cui suddividere la stringa di input. Il valore predefinito, –1, indica che la stringa di input deve essere suddivisa a ogni occorrenza della stringa <c>Delimiter</c>.</param>
        <param name="Compare">Facoltativo. Valore numerico che indica il tipo di confronto da utilizzare per la valutazione delle sottostringhe. Per un elenco dei valori possibili, vedere "Impostazioni".</param>
        <summary>Restituisce una matrice unidimensionale con indice in base zero che contiene il numero di sottostringhe specificato.</summary>
        <returns>
          Matrice <see langword="String" />. Se <paramref name="Expression" /> è una stringa di lunghezza zero (""), <see langword="Split" /> restituisce una matrice costituita da un solo elemento contenente una stringa di lunghezza zero. Se <paramref name="Delimiter" /> è una stringa di lunghezza zero, oppure se non compare mai nella stringa <paramref name="Expression" />, <see langword="Split" /> restituisce una matrice con un solo elemento contenente l'intera stringa <paramref name="Expression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, oppure quando `Limit` è uguale a -1, il `Split` funzione divide la stringa di input ogni occorrenza della stringa di delimitazione e restituisce le sottostringhe in una matrice. Quando il `Limit` parametro è maggiore di zero, il `Split` funzione divide la stringa del primo `Limit`-1 occorrenze del delimitatore e restituisce una matrice con le sottostringhe risultanti. Ad esempio, `Split("a:b:c", ":")` restituisce la matrice `{"a", "b", "c"}`, mentre `Split("a:b:c", ":", 2)` restituisce la matrice `{"a", "b:c"}`.  
  
 Quando il `Split` funzione rileva due delimitatori in una riga o un delimitatore all'inizio o alla fine della stringa, li interpreta come delimitatori di una stringa vuota (""). Ad esempio, `Split("xx", "x")` restituisce la matrice contenente tre stringhe vuote: uno tra l'inizio della stringa e la prima "x", una tra le due "stringhe x" e uno tra l'ultima "x" e la fine della stringa.  
  
 Questa tabella viene illustrato come facoltativo `Delimiter`, `Limit`, e `Compare` parametri è possono modificare il comportamento del `Split` (funzione).  
  
|Chiamata di Split|Valore restituito|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice e Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"prova", "e"}|  
  
 Il `Compare` argomento può avere i valori seguenti.  
  
|Costante|Descrizione|Valore|  
|-|-|-|  
|`CompareMethod.Binary`|Esegue un confronto binario|0|  
|`CompareMethod.Text`|Esegue un confronto testuale|1|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come suddividere una stringa in corrispondenza degli spazi.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 Nell'esempio seguente viene illustrato come dividere stringhe con più delimitatori in una riga e filtrare le stringhe vuote.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Obbligatorio. Qualsiasi espressione <see langword="String" /> valida.</param>
        <param name="String2">Obbligatorio. Qualsiasi espressione <see langword="String" /> valida.</param>
        <param name="Compare">Facoltativo. Specifica il tipo di confronto delle stringhe. Se <c>Compare</c> viene omesso, il tipo di confronto viene determinato dall'impostazione di <see langword="Option Compare" />.</param>
        <summary>Restituisce -1, 0 o 1 in base al risultato di un confronto tra stringhe.</summary>
        <returns>La funzione <see langword="StrComp" /> restituisce i seguenti valori:  
  
 <list type="table"><item><term> Se  
  
 </term><description> StrComp restituisce  
  
 </description></item><item><term><paramref name="String1" /> si trova nell'ordine prima di <paramref name="String2" /></term><description> -1  
  
 </description></item><item><term><paramref name="String1" /> è uguale a <paramref name="String2" /></term><description> 0  
  
 </description></item><item><term><paramref name="String1" /> si trova nell'ordine dopo <paramref name="String2" /></term><description> 1  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le stringhe vengono confrontate in valori di ordinamento alfanumerici a partire dal primo carattere. Per ulteriori informazioni sui confronti binari e testuali e ordinamento, vedere [istruzione Option Compare](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Le impostazioni dell'argomento `Compare` sono le seguenti:  
  
|Costante|Descrizione|  
|-|-|  
|`Binary`|Esegue un confronto binario, in base a un tipo di ordinamento derivato dalle rappresentazioni binarie interne dei caratteri.|  
|`Text`|Esegue un confronto di testo, in base a un criterio di ordinamento senza distinzione tra maiuscole varia a seconda del sistema `LocaleID` valore.|  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `StrComp` funzione per restituire i risultati di un confronto tra stringhe.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Il valore <paramref name="Compare" /> non è valido.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Espressione <see langword="String" /> da convertire.</param>
        <param name="Conversion">Obbligatorio. Membro <see cref="T:Microsoft.VisualBasic.VbStrConv" />. Valore dell'enumerazione che specifica il tipo di conversione da eseguire.</param>
        <param name="LocaleID">Facoltativo. Valore di <see langword="LocaleID" />, se diverso dal valore di <see langword="LocaleID" /> del sistema. (Il valore predefinito è il valore di <see langword="LocaleID" /> del sistema.)</param>
        <summary>Restituisce una stringa convertita come specificato.</summary>
        <returns>Restituisce una stringa convertita come specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le costanti `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, e `VbStrConv.Hiragana` possono causare errori di runtime quando utilizzato in impostazioni locali in cui non si applicano, ma non sempre: le costanti `VbStrConv.Katakana` e `VbStrConv.Hiragana`può essere utilizzato in un sistema non giapponese con installato il Language Pack giapponese. Inoltre, l'utilizzo delle costanti `VbStrConv.Wide` e `VbStrConv.Narrow` è supportato in qualsiasi sistema con una lingua dell'Asia installata.  
  
 Questa funzione utilizza informazioni relative alla lingua dell'applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l'applicazione.  
  
> [!IMPORTANT]
>  Se l'applicazione prende decisioni di sicurezza in base al risultato di un'operazione di modifica di maiuscole o il confronto, quindi l'operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=nameWithType> (metodo) e passare <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> per il `comparisonType` argomento. Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 Le impostazioni dell'argomento `Conversion` sono le seguenti:  
  
|Membro di enumerazione|Descrizione|  
|-|-|  
|`VbStrConv.None`|Nessuna conversione|  
|`VbStrConv.LinguisticCasing`|Utilizza regole per le maiuscole e minuscole, invece del File System (impostazione predefinita). Valido con `VbStrConv.UpperCase` e `VbStrConv.LowerCase` solo.|  
|`VbStrConv.UpperCase`|Converte la stringa in lettere maiuscole.|  
|`VbStrConv.LowerCase`|Converte la stringa specificata in lettere minuscole.|  
|`VbStrConv.ProperCase`|Converte la prima lettera di ogni parola in maiuscolo.|  
|`VbStrConv.Wide` <sup>*</sup>|Converte i caratteri stretti (metà larghezza) caratteri nella stringa di caratteri wide (larghezza intera). [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Converte i caratteri "wide" (larghezza intera) nella stringa di caratteri stretti (metà larghezza).|  
|`VbStrConv.Katakana` <sup>**</sup>|Converte i caratteri Hiragana della stringa in caratteri Katakana.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Converte i caratteri Katakana della stringa in caratteri Hiragana.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Converte i caratteri in cinese tradizionale in cinese semplificato.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Converte i caratteri in cinese semplificato in cinese tradizionale.|  
  
 <sup>*</sup> Si applica alle lingue dell'Asia.  
  
 <sup>**</sup> Si applica solo a Giappone.  
  
> [!NOTE]
>  Queste costanti vengono specificate in .NET Framework common language runtime. Di conseguenza, possono essere utilizzati in qualsiasi punto nel codice al posto dei valori effettivi. La maggior parte possono essere combinata (ad esempio, `UpperCase + Wide`), tranne quando sono si escludono a vicenda (ad esempio, `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Di seguito sono riportati i separatori di parola valido per la conversione: Null (`Chr$(0)`), tabulazione orizzontale (`Chr$(9)`), avanzamento riga (`Chr$(10)`), tabulazione verticale (`Chr$(11)`), avanzamento modulo (`Chr$(12)`), ritorno a capo (`Chr$(13)`), spazio ( set di caratteri a byte singolo) (`Chr$(32)`). Il valore effettivo di uno spazio, che può essere full o metà larghezza, varia in base al paese/area geografica per le lingue dell'Asia orientale.  
  
   
  
## Examples  
 In questo esempio converte il testo in lettere minuscole.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Oggetto <paramref name="LocaleID" /> non supportato, <paramref name="Conversion" /> &lt; 0 o &gt; 2048 oppure conversione non supportata per le impostazioni locali specificate.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una stringa o un oggetto composto dal carattere specificato ripetuto per il numero di volte specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Espressione <see langword="Integer" />. Lunghezza della stringa da restituire.</param>
        <param name="Character">Obbligatorio. Qualsiasi espressione <see langword="Char" />, <see langword="String" /> o <see langword="Object" /> valida. Verrà utilizzato solo il primo carattere dell'espressione. Se Character è di tipo <see langword="Object" />, deve contenere un oggetto <see langword="Char" /> o un valore <see langword="String" />.</param>
        <summary>Restituisce una stringa o un oggetto composto dal carattere specificato ripetuto per il numero di volte specificato.</summary>
        <returns>Restituisce una stringa o un oggetto composto dal carattere specificato ripetuto per il numero di volte specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa funzione restituisce un `String` costituito da caratteri ripetuti. Il carattere che costituisce la stringa è il primo carattere il `Character` argomento e viene duplicato `Number` numero di volte.  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `StrDup` duplicato di funzione per restituire una stringa di caratteri.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> è minore di 0 o il tipo di <paramref name="Character" /> non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> è <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Espressione <see langword="Integer" />. Lunghezza della stringa da restituire.</param>
        <param name="Character">Obbligatorio. Qualsiasi espressione <see langword="Char" />, <see langword="String" /> o <see langword="Object" /> valida. Verrà utilizzato solo il primo carattere dell'espressione. Se Character è di tipo <see langword="Object" />, deve contenere un oggetto <see langword="Char" /> o un valore <see langword="String" />.</param>
        <summary>Restituisce una stringa o un oggetto composto dal carattere specificato ripetuto per il numero di volte specificato.</summary>
        <returns>Restituisce una stringa o un oggetto composto dal carattere specificato ripetuto per il numero di volte specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa funzione restituisce un `String` costituito da caratteri ripetuti. Il carattere che costituisce la stringa è il primo carattere il `Character` argomento e viene duplicato `Number` numero di volte.  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `StrDup` duplicato di funzione per restituire una stringa di caratteri.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> è minore di 0 o il tipo di <paramref name="Character" /> non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> è <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Obbligatorio. Espressione <see langword="Integer" />. Lunghezza della stringa da restituire.</param>
        <param name="Character">Obbligatorio. Qualsiasi espressione <see langword="Char" />, <see langword="String" /> o <see langword="Object" /> valida. Verrà utilizzato solo il primo carattere dell'espressione. Se Character è di tipo <see langword="Object" />, deve contenere un oggetto <see langword="Char" /> o un valore <see langword="String" />.</param>
        <summary>Restituisce una stringa o un oggetto composto dal carattere specificato ripetuto per il numero di volte specificato.</summary>
        <returns>Restituisce una stringa o un oggetto composto dal carattere specificato ripetuto per il numero di volte specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa funzione restituisce un `String` costituito da caratteri ripetuti. Il carattere che costituisce la stringa è il primo carattere il `Character` argomento e viene duplicato `Number` numero di volte.  
  
   
  
## Examples  
 Questo esempio viene utilizzato il `StrDup` duplicato di funzione per restituire una stringa di caratteri.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> è minore di 0 o il tipo di <paramref name="Character" /> non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> è <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Obbligatorio. Espressione String contenente i caratteri da invertire. Se <c>Expression</c> è una stringa di lunghezza zero (""), viene restituita una stringa di lunghezza zero.</param>
        <summary>Restituisce una stringa nella quale è stato invertito l'ordine dei caratteri della stringa specificata.</summary>
        <returns>Restituisce una stringa nella quale è stato invertito l'ordine dei caratteri della stringa specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `StrReverse` funzione restituisce una stringa che contiene gli stessi caratteri `Expression`, ma in ordine inverso.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Obbligatorio. Qualsiasi espressione <see langword="String" /> valida.</param>
        <summary>Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<see langword="LTrim" />), senza spazi finali (<see langword="RTrim" />) o senza spazi iniziali o finali (<see langword="Trim" />).</summary>
        <returns>Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<see langword="LTrim" />), senza spazi finali (<see langword="RTrim" />) o senza spazi iniziali o finali (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `LTrim`, `RTrim`, e `Trim` funzioni rimuovono gli spazi alla fine delle stringhe.  
  
   
  
## Examples  
 In questo esempio vengono utilizzate la funzione `LTrim` per rimuovere gli spazi iniziali e la funzione `RTrim` per rimuovere gli spazi finali da una variabile String. Viene utilizzata la funzione `Trim` per eliminare entrambi i tipi di spazi.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una stringa o un carattere contenente la stringa specificata convertita in lettere maiuscole.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Obbligatorio. Qualsiasi espressione <see langword="String" /> o <see langword="Char" /> valida.</param>
        <summary>Restituisce una stringa o un carattere contenente la stringa specificata convertita in lettere maiuscole.</summary>
        <returns>Restituisce una stringa o un carattere contenente la stringa specificata convertita in lettere maiuscole.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo le lettere minuscole vengono convertite in maiuscole. le lettere maiuscole e i caratteri rimangono invariati.  
  
 Questa funzione utilizza informazioni relative alla lingua dell'applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l'applicazione.  
  
> [!IMPORTANT]
>  Se l'applicazione prende decisioni di sicurezza in base al risultato di un'operazione di modifica di maiuscole o il confronto, quindi l'operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=nameWithType> (metodo) e passare <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> per il `comparisonType` argomento. Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Nell'esempio seguente la funzione `UCase` viene utilizzata per restituire una versione in lettere maiuscole di una stringa:  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Obbligatorio. Qualsiasi espressione <see langword="String" /> o <see langword="Char" /> valida.</param>
        <summary>Restituisce una stringa o un carattere contenente la stringa specificata convertita in lettere maiuscole.</summary>
        <returns>Restituisce una stringa o un carattere contenente la stringa specificata convertita in lettere maiuscole.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo le lettere minuscole vengono convertite in maiuscole. le lettere maiuscole e i caratteri rimangono invariati.  
  
 Questa funzione utilizza informazioni relative alla lingua dell'applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l'applicazione.  
  
> [!IMPORTANT]
>  Se l'applicazione prende decisioni di sicurezza in base al risultato di un'operazione di modifica di maiuscole o il confronto, quindi l'operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=nameWithType> (metodo) e passare <xref:System.StringComparison.Ordinal> o <xref:System.StringComparison.OrdinalIgnoreCase> per il `comparisonType` argomento. Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Nell'esempio seguente la funzione `UCase` viene utilizzata per restituire una versione in lettere maiuscole di una stringa:  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>