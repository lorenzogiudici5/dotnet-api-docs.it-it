<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f5aab-101">Il modulo <see langword="FileSystem" /> contiene le procedure utilizzate per eseguire operazioni su file, directory o cartelle e sistema.</span><span class="sxs-lookup"><span data-stu-id="f5aab-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="f5aab-102">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto all'utilizzo del modulo <see langword="FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="f5aab-103">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-104">Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri di libreria run-time che accedono ai file e cartelle.</span><span class="sxs-lookup"><span data-stu-id="f5aab-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-105">Questo esempio viene utilizzato il `GetAttr` funzione per determinare gli attributi di un file e directory o una cartella.</span><span class="sxs-lookup"><span data-stu-id="f5aab-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f5aab-106">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-106">Required.</span></span> <span data-ttu-id="f5aab-107">Espressione <see langword="String" /> che identifica la directory o la cartella che diventa la nuova directory o cartella predefinita.</span><span class="sxs-lookup"><span data-stu-id="f5aab-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="f5aab-108">L'elemento <c>Path</c> può includere l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-108"><c>Path</c> may include the drive.</span></span> <span data-ttu-id="f5aab-109">Se non viene specificata alcuna unità, <see langword="ChDir" /> cambia la directory o cartella predefinita dell'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="f5aab-110">Cambia la directory o cartella corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-110">Changes the current directory or folder.</span></span> <span data-ttu-id="f5aab-111">Nelle operazioni di I/O su file la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="ChDir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="f5aab-112">Per altre informazioni, vedere <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-113">Il `ChDir` funzione consente di modificare la directory predefinita, ma non l'unità predefinita.</span><span class="sxs-lookup"><span data-stu-id="f5aab-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="f5aab-114">Ad esempio, se l'unità predefinita è di tipo C, l'istruzione seguente modifica la directory predefinita sull'unità D, ma C rimane l'unità predefinita:</span><span class="sxs-lookup"><span data-stu-id="f5aab-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="f5aab-115">È possibile apportare relativo modifiche alla directory è necessario digitare due punti, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="f5aab-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-116">Il `ChDir` funzione richiede l'autorizzazione di accesso al codice non gestito, che può influenzare l'esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f5aab-117">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e.</span><span class="sxs-lookup"><span data-stu-id="f5aab-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-118">Questo esempio viene utilizzato il `ChDir` funzione per modificare la directory corrente o una cartella.</span><span class="sxs-lookup"><span data-stu-id="f5aab-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-119"><paramref name="Path" /> è vuoto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-119"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f5aab-120">L'unità specificata non è valida o non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-120">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-121">Cambia l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-121">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f5aab-122">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-122">Required.</span></span> <span data-ttu-id="f5aab-123">Espressione String che specifica un'unità esistente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-123">String expression that specifies an existing drive.</span></span> <span data-ttu-id="f5aab-124">Se viene fornita una stringa di lunghezza zero (""), l'unità corrente non verrà modificata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-124">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="f5aab-125">Se l'argomento <c>Drive</c> è una stringa a più caratteri, <see langword="ChDrive" /> usa solo la prima lettera.</span><span class="sxs-lookup"><span data-stu-id="f5aab-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="f5aab-126">Cambia l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-126">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-127">Il `ChDrive` funzione richiede l'autorizzazione di accesso al codice non gestito, che può influenzare l'esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f5aab-128">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="f5aab-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-129">Questo esempio viene utilizzato il `ChDrive` funzione per modificare l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f5aab-130">La funzione genera un'eccezione se l'unità non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-131">L'unità specificata non è valida o non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-131">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f5aab-132">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-132">Required.</span></span> <span data-ttu-id="f5aab-133">Espressione String che specifica un'unità esistente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-133">String expression that specifies an existing drive.</span></span> <span data-ttu-id="f5aab-134">Se viene fornita una stringa di lunghezza zero (""), l'unità corrente non verrà modificata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-134">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="f5aab-135">Se l'argomento <c>Drive</c> è una stringa a più caratteri, <see langword="ChDrive" /> usa solo la prima lettera.</span><span class="sxs-lookup"><span data-stu-id="f5aab-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="f5aab-136">Cambia l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-136">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-137">Il `ChDrive` funzione richiede l'autorizzazione di accesso al codice non gestito, che può influenzare l'esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f5aab-138">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="f5aab-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-139">Questo esempio viene utilizzato il `ChDrive` funzione per modificare l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f5aab-140">La funzione genera un'eccezione se l'unità non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-141">L'unità specificata non è valida o non è disponibile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-141">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-142">Restituisce una stringa che rappresenta il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-142">Returns a string representing the current path.</span></span> <span data-ttu-id="f5aab-143">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto a <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f5aab-144">Per ulteriori informazioni, vedere <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5aab-145">Restituisce una stringa che rappresenta il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-145">Returns a string representing the current path.</span></span> <span data-ttu-id="f5aab-146">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto a <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f5aab-147">Per ulteriori informazioni, vedere <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="f5aab-148">Stringa che rappresenta il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-148">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f5aab-149">Questo esempio viene utilizzato il `CurDir` funzione per restituire il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="f5aab-150">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-150">Optional.</span></span> <span data-ttu-id="f5aab-151">Espressione <see langword="Char" /> che specifica un'unità esistente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-151"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="f5aab-152">Se non si specifica alcuna unità, o se l'elemento <c>Drive</c> è una stringa di lunghezza zero (""), <see langword="CurDir" /> restituisce il percorso dell'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="f5aab-153">Restituisce una stringa che rappresenta il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-153">Returns a string representing the current path.</span></span> <span data-ttu-id="f5aab-154">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto a <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="f5aab-155">Per ulteriori informazioni, vedere <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="f5aab-156">Stringa che rappresenta il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f5aab-157">Questo esempio viene utilizzato il `CurDir` funzione per restituire il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-158">Restituisce una stringa che rappresenta il nome di un file, di una directory o di una cartella corrispondente a un criterio o a un attributo di file specificato oppure all'etichetta di volume di un'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f5aab-159">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f5aab-160">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5aab-161">Restituisce una stringa che rappresenta il nome di un file, di una directory o di una cartella corrispondente a un criterio o a un attributo di file specificato oppure all'etichetta di volume di un'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f5aab-162">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f5aab-163">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f5aab-164">Stringa che rappresenta il nome di un file, una directory o una cartella corrispondente a un determinato attributo di file o modello, oppure l'etichetta di volume di un'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-165">Il `Dir` funzione supporta l'utilizzo di più caratteri (`*`) e caratteri a singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f5aab-166">`VbVolume` Restituisce l'etichetta di volume dell'unità anziché un nome file specifico.</span><span class="sxs-lookup"><span data-stu-id="f5aab-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f5aab-167">È necessario fornire un `PathName` la prima volta che si chiama il `Dir` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f5aab-168">Per recuperare l'elemento successivo, è possibile eseguire chiamate successive al `Dir` funzione senza parametri.</span><span class="sxs-lookup"><span data-stu-id="f5aab-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-169">Per eseguire correttamente il `Dir` funzione richiede il <xref:System.Security.Permissions.FileIOPermissionAccess.Read> e <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flag di <xref:System.Security.Permissions.FileIOPermission> per essere concesso al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f5aab-170">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="f5aab-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f5aab-171">Il `Attributes` argomento valori di enumerazione sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="f5aab-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f5aab-172">Valore</span><span class="sxs-lookup"><span data-stu-id="f5aab-172">Value</span></span>|<span data-ttu-id="f5aab-173">Costante</span><span class="sxs-lookup"><span data-stu-id="f5aab-173">Constant</span></span>|<span data-ttu-id="f5aab-174">Descrizione</span><span class="sxs-lookup"><span data-stu-id="f5aab-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f5aab-175">Predefinita.</span><span class="sxs-lookup"><span data-stu-id="f5aab-175">Default.</span></span> <span data-ttu-id="f5aab-176">Specifica i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f5aab-177">Specifica i file di sola lettura e file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f5aab-178">Specifica i file nascosti e i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f5aab-179">Specifica i file di sistema e file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f5aab-180">Specifica l'etichetta di volume. Se qualsiasi altro attributo viene specificato, `vbVolume` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f5aab-181">Specifica le directory o cartelle, nonché i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f5aab-182">Il file è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="f5aab-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f5aab-183">Il file ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-184">Queste enumerazioni vengono specificate il linguaggio Visual Basic e possono essere utilizzate ovunque nel codice anziché i valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-185">Questo esempio viene utilizzato il `Dir` funzione per verificare l'esistenza di determinati file e directory.</span><span class="sxs-lookup"><span data-stu-id="f5aab-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f5aab-186">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-186">Optional.</span></span> <span data-ttu-id="f5aab-187">Espressione <see langword="String" /> che specifica un nome di file, directory o cartella o un'etichetta di volume di un'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-187"><see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="f5aab-188">Viene restituita una stringa di lunghezza zero (<see langword="&quot;&quot;" />) se l'elemento <c>PathName</c> non viene trovato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="f5aab-189">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-189">Optional.</span></span> <span data-ttu-id="f5aab-190">Enumerazione o espressione numerica il cui valore specifica attributi di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-190">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="f5aab-191">Se omesso, <see langword="Dir" /> restituisce file che corrispondono a <c>PathName</c> ma sono privi di attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="f5aab-192">Restituisce una stringa che rappresenta il nome di un file, di una directory o di una cartella corrispondente a un criterio o a un attributo di file specificato oppure all'etichetta di volume di un'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="f5aab-193">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="f5aab-194">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f5aab-195">Stringa che rappresenta il nome di un file, una directory o una cartella corrispondente a un determinato attributo di file o modello, oppure l'etichetta di volume di un'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-196">Il `Dir` funzione supporta l'utilizzo di più caratteri (`*`) e caratteri a singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f5aab-197">`VbVolume` Restituisce l'etichetta di volume dell'unità anziché un nome file specifico.</span><span class="sxs-lookup"><span data-stu-id="f5aab-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f5aab-198">È necessario fornire un `PathName` la prima volta che si chiama il `Dir` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f5aab-199">Per recuperare l'elemento successivo, è possibile eseguire chiamate successive al `Dir` funzione senza parametri.</span><span class="sxs-lookup"><span data-stu-id="f5aab-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-200">Per eseguire correttamente il `Dir` funzione richiede il <xref:System.Security.Permissions.FileIOPermissionAccess.Read> e <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flag di <xref:System.Security.Permissions.FileIOPermission> per essere concesso al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f5aab-201">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="f5aab-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f5aab-202">Il `Attributes` argomento valori di enumerazione sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="f5aab-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f5aab-203">Valore</span><span class="sxs-lookup"><span data-stu-id="f5aab-203">Value</span></span>|<span data-ttu-id="f5aab-204">Costante</span><span class="sxs-lookup"><span data-stu-id="f5aab-204">Constant</span></span>|<span data-ttu-id="f5aab-205">Descrizione</span><span class="sxs-lookup"><span data-stu-id="f5aab-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f5aab-206">Predefinita.</span><span class="sxs-lookup"><span data-stu-id="f5aab-206">Default.</span></span> <span data-ttu-id="f5aab-207">Specifica i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f5aab-208">Specifica i file di sola lettura, oltre ai file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f5aab-209">Specifica i file nascosti, oltre ai file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f5aab-210">Specifica il file di sistema, oltre ai file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f5aab-211">Specifica l'etichetta di volume. Se qualsiasi altro attributo viene specificato, `vbVolume` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f5aab-212">Specifica una directory o cartelle, oltre ai file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f5aab-213">Il file è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="f5aab-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f5aab-214">Il file ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-215">Queste enumerazioni vengono specificate il linguaggio Visual Basic e possono essere utilizzate ovunque nel codice al posto dei valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-216">Questo esempio viene utilizzato il `Dir` funzione per verificare l'esistenza di determinati file e directory.</span><span class="sxs-lookup"><span data-stu-id="f5aab-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-217">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-217">Required.</span></span> <span data-ttu-id="f5aab-218"><see langword="Integer" /> che contiene qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-218">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="f5aab-219">Restituisce un valore Boolean <see langword="True" /> quando viene raggiunta la fine di un file aperto per <see langword="Random" /> o <see langword="Input" /> sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="f5aab-220">Restituisce un valore Boolean <see langword="True" /> quando viene raggiunta la fine di un file aperto per <see langword="Random" /> o <see langword="Input" /> sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-221">Utilizzare `EOF` per evitare l'errore generato dal tentativo di ottenere l'input oltre la fine di un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="f5aab-222">Il `EOF` risultato della funzione `False` fino a quando non è stata raggiunta la fine del file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="f5aab-223">Con i file aperti per `Random` o `Binary` accesso, `EOF` restituisce `False` fino all'ultima esecuzione `FileGet` funzione in grado di leggere un record completo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="f5aab-224">Con i file aperti per `Binary` accedere, un tentativo di leggere il file utilizzando il `Input` funzione finché `EOF` restituisce `True` genera un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f5aab-225">Utilizzare il `LOF` e `Loc` funzioni anziché `EOF` durante la lettura di file binari con `Input`, oppure utilizzare `Get` quando si utilizza il `EOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="f5aab-226">Con i file aperti per `Output`, `EOF` restituisce sempre `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-227">Questo esempio viene utilizzato il `EOF` (funzione) per individuare la fine di un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="f5aab-228">In questo esempio si presuppone che `Testfile` è un file di testo che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-229">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-229">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-230">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-230">Required.</span></span> <span data-ttu-id="f5aab-231"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-231"><see langword="Integer" />.</span></span> <span data-ttu-id="f5aab-232">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-232">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f5aab-233">Restituisce un'enumerazione che rappresenta la modalità di file per i file aperti utilizzando la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f5aab-234">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="FileAttr" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="f5aab-235">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="f5aab-236">La modalità di accesso al file è indicata dai seguenti valori di enumerazione:</span><span class="sxs-lookup"><span data-stu-id="f5aab-236">The following enumeration values indicate the file access mode:</span></span>  
  
 <span data-ttu-id="f5aab-237"><list type="table"><item><term> Valore</span><span class="sxs-lookup"><span data-stu-id="f5aab-237"><list type="table"><item><term> Value</span></span>  
  
 <span data-ttu-id="f5aab-238"></term><description> Modalità</span><span class="sxs-lookup"><span data-stu-id="f5aab-238"></term><description> Mode</span></span>  
  
 <span data-ttu-id="f5aab-239"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="f5aab-239"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="f5aab-240"></term><description><see langword="OpenMode.Input" /></description></item><item><term> 2</span><span class="sxs-lookup"><span data-stu-id="f5aab-240"></term><description><see langword="OpenMode.Input" /></description></item><item><term> 2</span></span>  
  
 <span data-ttu-id="f5aab-241"></term><description><see langword="OpenMode.Output" /></description></item><item><term> 4</span><span class="sxs-lookup"><span data-stu-id="f5aab-241"></term><description><see langword="OpenMode.Output" /></description></item><item><term> 4</span></span>  
  
 <span data-ttu-id="f5aab-242"></term><description><see langword="OpenMode.Random" /></description></item><item><term> 8</span><span class="sxs-lookup"><span data-stu-id="f5aab-242"></term><description><see langword="OpenMode.Random" /></description></item><item><term> 8</span></span>  
  
 <span data-ttu-id="f5aab-243"></term><description><see langword="OpenMode.Append" /></description></item><item><term> 32</span><span class="sxs-lookup"><span data-stu-id="f5aab-243"></term><description><see langword="OpenMode.Append" /></description></item><item><term> 32</span></span>  
  
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-244">Questa funzione restituisce un'enumerazione che rappresenta la modalità di file per i file aperti mediante il `FileOpen` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-244">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-245">Questo esempio viene utilizzato il `FileAttr` funzione per restituire la modalità file di un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-245">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="f5aab-246">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-246">Optional.</span></span> <span data-ttu-id="f5aab-247">Matrice di parametri di 0 o più canali da chiudere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-247">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="f5aab-248">Conclude le operazioni di input/output (I/O) in un file aperto con la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-248">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f5aab-249">Nelle operazioni di I/O di file <see langword="My" /> garantisce produttività e prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-249"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="f5aab-250">Per altre informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-250">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-251">Il `FileClose` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-251">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-252">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-253">Per ulteriori informazioni, vedere [come: Leggi testo da file con un oggetto StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[procedura: scrivere testo in file con un oggetto StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), e [procedura dettagliata: modifica dei file e directory in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-253">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="f5aab-254">Se si omette `FileNumbers`, tutti i file attivi aperti con la `FileOpen` funzione vengono chiusi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-254">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="f5aab-255">Quando si chiudono i file che sono state aperte per `Output` o `Append`, il buffer finale dell'output viene scritto nel buffer del sistema operativo per tale file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-255">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="f5aab-256">Tutti i buffer associato chiuso spazio file viene rilasciato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-256">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="f5aab-257">Quando il `FileClose` funzione viene eseguita, l'associazione di un file con il relativo file di numero.</span><span class="sxs-lookup"><span data-stu-id="f5aab-257">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-258">Questo esempio viene utilizzato il `FileClose` funzione per chiudere un file aperto per `Input`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-258">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f5aab-259"><paramref name="FileNumber" /> non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-259"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="f5aab-260">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-260">Required.</span></span> <span data-ttu-id="f5aab-261">Espressione <see langword="String" /> che specifica il nome del file da copiare.</span><span class="sxs-lookup"><span data-stu-id="f5aab-261"><see langword="String" /> expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="f5aab-262">Il parametro <c>Source</c> può includere la directory o la cartella e l'unità del file di origine.</span><span class="sxs-lookup"><span data-stu-id="f5aab-262"><c>Source</c> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="f5aab-263">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-263">Required.</span></span> <span data-ttu-id="f5aab-264">Espressione <see langword="String" /> che specifica il nome file di destinazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-264"><see langword="String" /> expression that specifies the destination file name.</span></span> <span data-ttu-id="f5aab-265">Il parametro <c>Destination</c> può includere la directory o la cartella e l'unità del file di destinazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-265"><c>Destination</c> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="f5aab-266">Copia un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-266">Copies a file.</span></span> <span data-ttu-id="f5aab-267">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto a <see langword="FileCopy" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-267">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="f5aab-268">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-268">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-269">Se si tenta di utilizzare il `FileCopy` funzione su un file attualmente aperto, si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-269">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="f5aab-270">`FileCopy` richiede l'attendibilità totale per funzionare nell'unità locale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-270">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-271">Questo esempio viene utilizzato il `FileCopy` funzione per copiare un file a un altro.</span><span class="sxs-lookup"><span data-stu-id="f5aab-271">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="f5aab-272">Ai fini di questo esempio, si supponga che `SrcFile` è un file che contiene dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-272">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-273"><paramref name="Source" /> o <paramref name="Destination" /> non è valido o non è specificato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-273"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-274">Il file è già aperto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-274">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f5aab-275">Il file non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-275">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f5aab-276">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-276">Required.</span></span> <span data-ttu-id="f5aab-277">Espressione <see langword="String" /> che specifica un nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-277"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="f5aab-278">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-278"><c>PathName</c> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f5aab-279">Restituisce un valore <see langword="Date" /> che indica la data e l'ora della scrittura in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-279">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="f5aab-280">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileDateTime" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-280">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="f5aab-281">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-281">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns>
          <span data-ttu-id="f5aab-282">Valore <see langword="Date" /> che indica la data e l'ora di creazione o dell'ultima modifica di un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-282"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f5aab-283">Questo esempio viene utilizzato il `FileDateTime` funzione per determinare la data e un'ora di un file è stato creato o dell'ultima modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-283">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="f5aab-284">Il formato della data e ora visualizzata è basato sulle impostazioni locali del sistema.</span><span class="sxs-lookup"><span data-stu-id="f5aab-284">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-285"><paramref name="PathName" /> non è valido o contiene caratteri jolly.</span><span class="sxs-lookup"><span data-stu-id="f5aab-285"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f5aab-286">Il file di destinazione non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-286">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-287">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-287">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-288">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-288">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-289">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-289">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-290">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-290">Required.</span></span> <span data-ttu-id="f5aab-291">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-291">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-292">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-292">Required.</span></span> <span data-ttu-id="f5aab-293">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-293">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-294">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-294">Optional.</span></span> <span data-ttu-id="f5aab-295">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-295">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-296">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-296">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-297">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-297">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-298">Per altre informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-298">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-299">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-299">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-300">I dati letti con `FileGet` vengono generalmente scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-300">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-301">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-301">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-302">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-302">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-303">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-303">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-304">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-304">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-305">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-305">Random Mode</span></span>  
 <span data-ttu-id="f5aab-306">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-307">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-307">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-308">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-309">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-310">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-310">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-311">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-311">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-312">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-312">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-313">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-313">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-314">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-314">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-315">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-315">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-316">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-316">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-317">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-317">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-318">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-318">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-319">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-319">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-320">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-320">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-321">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-322">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-322">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-323">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-323">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-324">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-324">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-325">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-325">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-326">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-326">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-327">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-327">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-328">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-328">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-329">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-329">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-330">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-331">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-331">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-332">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-332">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-333">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-333">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-334">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-335">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-336">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-337">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-337">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-338">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-338">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-339">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-339">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-340">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-340">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-341">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-341">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-342">La lettura da un file utilizzando il`FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-342">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-343"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-343"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-344">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-344">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-345">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-345">Required.</span></span> <span data-ttu-id="f5aab-346">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-346">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-347">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-347">Required.</span></span> <span data-ttu-id="f5aab-348">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-348">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-349">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-349">Optional.</span></span> <span data-ttu-id="f5aab-350">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-350">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-351">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-351">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-352">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-352">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-353">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-353">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-354">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-354">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-355">I dati letti con `FileGet` vengono generalmente scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-355">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-356">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-356">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-357">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-357">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-358">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-358">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-359">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-359">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-360">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-360">Random Mode</span></span>  
 <span data-ttu-id="f5aab-361">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-361">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-362">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-362">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-363">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-363">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-364">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-364">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-365">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-365">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-366">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-366">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-367">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-367">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-368">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-368">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-369">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-369">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-370">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-370">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-371">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-371">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-372">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-372">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-373">Se non viene utilizzato il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-373">If the descriptor is not used.</span></span> <span data-ttu-id="f5aab-374">Le dimensioni e i limiti della matrice passata in `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-374">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-375">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-375">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-376">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-376">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-377">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-378">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-378">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-379">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-379">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-380">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-380">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-381">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-381">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-382">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-382">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-383">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-383">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-384">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-384">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-385">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-385">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-386">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-387">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-387">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-388">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-388">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-389">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-389">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-390">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-390">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-391">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-391">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-392">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-392">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-393">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-393">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-394">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-394">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-395">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-395">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-396">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-396">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-397">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-397">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-398">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-398">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-399"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-399"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-400">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-400">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-401">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-401">Required.</span></span> <span data-ttu-id="f5aab-402">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-402">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-403">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-403">Required.</span></span> <span data-ttu-id="f5aab-404">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-404">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-405">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-405">Optional.</span></span> <span data-ttu-id="f5aab-406">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-406">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-407">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-407">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-408">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-408">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-409">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-409">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-410">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-410">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-411">I dati letti con `FileGet` vengono generalmente scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-411">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-412">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-412">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-413">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-413">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-414">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-414">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-415">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-415">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-416">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-416">Random Mode</span></span>  
 <span data-ttu-id="f5aab-417">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-417">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-418">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-418">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-419">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-419">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-420">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-420">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-421">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-421">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-422">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-422">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-423">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-423">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-424">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-424">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-425">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-425">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-426">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-426">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-427">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-427">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-428">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-428">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-429">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-429">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-430">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-430">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-431">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-431">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-432">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-432">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-433">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-433">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-434">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-434">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-435">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-435">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-436">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-436">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-437">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-437">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-438">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-438">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-439">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-439">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-440">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-440">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-441">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-441">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-442">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-442">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-443">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-443">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-444">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-444">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-445">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-445">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-446">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-446">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-447">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-447">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-448">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-448">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-449">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-449">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-450">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-450">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-451">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-451">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-452">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-452">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-453">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-453">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-454"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-454"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-455">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-455">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-456">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-456">Required.</span></span> <span data-ttu-id="f5aab-457">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-457">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-458">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-458">Required.</span></span> <span data-ttu-id="f5aab-459">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-459">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-460">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-460">Optional.</span></span> <span data-ttu-id="f5aab-461">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-461">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-462">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-462">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-463">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-463">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-464">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-464">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-465">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-465">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-466">I dati letti con `FileGet` vengono generalmente scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-466">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-467">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-467">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-468">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-468">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-469">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-469">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-470">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-470">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-471">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-471">Random Mode</span></span>  
 <span data-ttu-id="f5aab-472">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-472">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-473">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione`FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-473">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-474">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-474">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-475">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-475">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-476">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-476">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-477">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-477">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-478">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-478">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-479">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-479">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-480">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-480">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-481">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-481">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-482">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-482">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-483">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-483">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-484">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-484">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-485">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-485">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-486">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-486">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-487">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-487">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-488">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-488">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-489">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-489">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-490">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-490">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-491">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-491">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-492">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-492">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-493">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-493">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-494">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-494">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-495">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-495">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-496">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-496">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-497">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-497">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-498">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-498">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-499">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-499">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-500">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-500">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-501">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-501">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-502">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-502">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-503">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-503">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-504">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-504">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-505">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-505">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-506">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-506">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-507">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-507">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-508">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-508">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-509"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-509"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-510">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-510">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-511">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-511">Required.</span></span> <span data-ttu-id="f5aab-512">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-512">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-513">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-513">Required.</span></span> <span data-ttu-id="f5aab-514">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-514">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-515">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-515">Optional.</span></span> <span data-ttu-id="f5aab-516">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-516">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-517">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-517">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-518">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-519">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-520">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-520">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-521">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-521">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-522">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-522">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-523">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-523">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-524">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-524">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-525">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-525">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-526">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-526">Random Mode</span></span>  
 <span data-ttu-id="f5aab-527">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-527">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-528">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-528">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-529">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-529">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-530">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-530">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-531">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-531">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-532">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-532">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-533">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-533">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-534">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-534">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-535">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-535">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-536">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-536">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-537">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-537">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-538">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-538">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-539">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-539">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-540">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-540">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-541">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-541">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-542">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-542">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-543">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-543">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-544">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-544">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-545">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-545">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-546">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-546">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-547">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-547">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-548">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-548">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-549">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-549">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-550">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-550">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-551">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-551">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-552">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-552">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-553">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-553">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-554">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-554">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-555">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-555">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-556">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-556">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-557">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-557">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-558">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-558">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-559">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-559">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-560">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-560">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-561">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-561">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-562">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-562">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-563">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-563">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-564"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-564"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-565">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-565">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-566">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-566">Required.</span></span> <span data-ttu-id="f5aab-567">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-567">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-568">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-568">Required.</span></span> <span data-ttu-id="f5aab-569">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-569">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-570">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-570">Optional.</span></span> <span data-ttu-id="f5aab-571">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-571">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-572">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-572">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-573">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-573">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-574">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-574">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-575">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-575">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-576">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-576">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-577">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-577">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-578">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-578">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-579">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-579">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-580">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-580">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-581">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-581">Random Mode</span></span>  
 <span data-ttu-id="f5aab-582">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-582">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-583">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-583">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-584">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-584">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-585">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-585">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-586">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-586">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-587">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-587">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-588">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-588">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-589">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-589">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-590">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-590">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-591">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-591">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-592">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-592">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-593">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-593">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-594">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-594">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-595">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-595">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-596">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-596">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-597">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-597">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-598">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-598">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-599">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-599">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-600">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-600">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-601">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-601">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-602">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-602">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-603">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-603">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-604">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-604">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-605">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-605">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-606">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-606">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-607">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-607">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-608">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-608">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-609">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-609">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-610">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-610">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-611">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-611">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-612">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-612">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-613">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-613">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-614">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-614">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-615">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-615">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-616">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-616">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-617">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-617">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-618">La lettura da un file utilizzando il`FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-618">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-619"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-619"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-620">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-620">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-621">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-621">Required.</span></span> <span data-ttu-id="f5aab-622">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-622">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-623">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-623">Required.</span></span> <span data-ttu-id="f5aab-624">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-624">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-625">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-625">Optional.</span></span> <span data-ttu-id="f5aab-626">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-626">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-627">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-627">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-628">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-629">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-630">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-630">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-631">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-631">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-632">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-632">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-633">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-633">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-634">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-634">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-635">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-635">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-636">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-636">Random Mode</span></span>  
 <span data-ttu-id="f5aab-637">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-637">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-638">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-638">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-639">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-639">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-640">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-640">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-641">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-641">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-642">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-642">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-643">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-643">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-644">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-644">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-645">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-645">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-646">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-646">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-647">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-647">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-648">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-648">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-649">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-649">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-650">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-650">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-651">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-651">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-652">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-652">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-653">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-653">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-654">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-654">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-655">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-655">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-656">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-656">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-657">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-657">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-658">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-658">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-659">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-659">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-660">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-660">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-661">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-661">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-662">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-662">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-663">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-663">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-664">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-664">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-665">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-665">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-666">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-666">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-667">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-667">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-668">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-668">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-669">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-669">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-670">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-670">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-671">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-671">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-672">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-672">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-673">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-673">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-674"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-674"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-675">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-675">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-676">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-676">Required.</span></span> <span data-ttu-id="f5aab-677">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-677">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-678">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-678">Required.</span></span> <span data-ttu-id="f5aab-679">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-679">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-680">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-680">Optional.</span></span> <span data-ttu-id="f5aab-681">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-681">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-682">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-682">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-683">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-683">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-684">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-684">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-685">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-685">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-686">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-686">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-687">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-687">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-688">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-688">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-689">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-689">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-690">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-690">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-691">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-691">Random Mode</span></span>  
 <span data-ttu-id="f5aab-692">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-692">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-693">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-693">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-694">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-694">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-695">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-695">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-696">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-696">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-697">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-697">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-698">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-698">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-699">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-699">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-700">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-700">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-701">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-701">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-702">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-702">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-703">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-703">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-704">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-704">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-705">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-705">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-706">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-706">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-707">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-707">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-708">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-708">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-709">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-709">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-710">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-710">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-711">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-711">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-712">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-712">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-713">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-713">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-714">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-714">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-715">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-715">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-716">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-716">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-717">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-717">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-718">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-718">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-719">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-719">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-720">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-720">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-721">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-721">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-722">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-722">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-723">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-723">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-724">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-724">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-725">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-725">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-726">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-726">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-727">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-727">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-728">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-728">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-729"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-729"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-730">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-730">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-731">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-731">Required.</span></span> <span data-ttu-id="f5aab-732">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-732">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-733">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-733">Required.</span></span> <span data-ttu-id="f5aab-734">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-734">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-735">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-735">Optional.</span></span> <span data-ttu-id="f5aab-736">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-736">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-737">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-737">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-738">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-738">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-739">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-739">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-740">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-740">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-741">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-741">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-742">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-742">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-743">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-743">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-744">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-744">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-745">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-745">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-746">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-746">Random Mode</span></span>  
 <span data-ttu-id="f5aab-747">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-747">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-748">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-748">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-749">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-749">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-750">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-750">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-751">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-751">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-752">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-752">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-753">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-753">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-754">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-754">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-755">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-755">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-756">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-756">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-757">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-757">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-758">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-758">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-759">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-759">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-760">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-760">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-761">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-761">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-762">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-762">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-763">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-763">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-764">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-764">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-765">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-765">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-766">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-766">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-767">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-767">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-768">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-768">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-769">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-769">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-770">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-770">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-771">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-771">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-772">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-772">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-773">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-773">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-774">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-774">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-775">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-775">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-776">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-776">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-777">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-777">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-778">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-778">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-779">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-779">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-780">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-780">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-781">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-781">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-782">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-782">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-783">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-783">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-784"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-784"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-785">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-785">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-786">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-786">Required.</span></span> <span data-ttu-id="f5aab-787">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-787">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-788">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-788">Required.</span></span> <span data-ttu-id="f5aab-789">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-789">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-790">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-790">Optional.</span></span> <span data-ttu-id="f5aab-791">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-791">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-792">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-792">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-793">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-794">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-795">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-795">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-796">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-796">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-797">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-797">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-798">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-798">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-799">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-799">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-800">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-800">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-801">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-801">Random Mode</span></span>  
 <span data-ttu-id="f5aab-802">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-802">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-803">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-803">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-804">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-804">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-805">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-805">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-806">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-806">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-807">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-807">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-808">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-808">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-809">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-809">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-810">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-810">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-811">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-811">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-812">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-812">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-813">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-813">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-814">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-814">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-815">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-815">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-816">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-816">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-817">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-817">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-818">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-818">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-819">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-819">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-820">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-820">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-821">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-821">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-822">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-822">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-823">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-823">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-824">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-824">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-825">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-825">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-826">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-826">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-827">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-827">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-828">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-828">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-829">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-829">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-830">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-830">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-831">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-831">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-832">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-832">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-833">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-833">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-834">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-834">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-835">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-835">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-836">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-836">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-837">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-837">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-838">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-838">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-839"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-839"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-840">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-840">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-841">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-841">Required.</span></span> <span data-ttu-id="f5aab-842">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-842">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-843">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-843">Required.</span></span> <span data-ttu-id="f5aab-844">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-844">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-845">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-845">Optional.</span></span> <span data-ttu-id="f5aab-846">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-846">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-847">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-847">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-848">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-848">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-849">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-849">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-850">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-850">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-851">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-851">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-852">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-852">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-853">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-853">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-854">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-854">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-855">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-855">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-856">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-856">Random Mode</span></span>  
 <span data-ttu-id="f5aab-857">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-857">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-858">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-858">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-859">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-859">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-860">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-860">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-861">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-861">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-862">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-862">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-863">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-863">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-864">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-864">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-865">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-865">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-866">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-866">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-867">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-867">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-868">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-868">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-869">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-869">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-870">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-870">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-871">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-871">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-872">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-872">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-873">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-873">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-874">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-874">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-875">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-875">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-876">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-876">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-877">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-877">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-878">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-878">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-879">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-879">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-880">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-880">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-881">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-881">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-882">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-882">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-883">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-883">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-884">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-884">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-885">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-885">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-886">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-886">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-887">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-887">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-888">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-888">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-889">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-889">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-890">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-890">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-891">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-891">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-892">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-892">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-893">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-893">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-894"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-894"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-895">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-895">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-896">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-896">Required.</span></span> <span data-ttu-id="f5aab-897">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-897">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-898">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-898">Required.</span></span> <span data-ttu-id="f5aab-899">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-899">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-900">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-900">Optional.</span></span> <span data-ttu-id="f5aab-901">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-901">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f5aab-902">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-902">Optional.</span></span> <span data-ttu-id="f5aab-903">Si applica solo durante la scrittura di una stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-903">Applies only when writing a string.</span></span> <span data-ttu-id="f5aab-904">Specifica se scrivere un descrittore a due byte per la stringa che descrive la lunghezza.</span><span class="sxs-lookup"><span data-stu-id="f5aab-904">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="f5aab-905">Il valore predefinito è <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-905">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f5aab-906">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-906">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-907">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-907">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-908">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-908">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-909">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-909">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-910">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-910">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-911">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-911">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-912">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-912">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-913">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-913">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-914">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-914">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-915">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-915">Random Mode</span></span>  
 <span data-ttu-id="f5aab-916">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-916">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-917">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-917">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-918">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-918">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-919">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-919">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-920">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-920">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-921">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-921">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-922">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-922">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-923">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-923">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-924">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-924">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-925">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-925">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-926">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-926">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-927">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-927">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-928">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-928">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-929">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-930">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-931">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-931">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-932">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-933">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-933">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-934">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-934">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-935">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-935">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-936">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-936">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-937">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-937">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-938">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-938">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-939">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-939">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-940">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-940">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-941">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-941">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-942">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-942">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-943">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-943">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-944">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-944">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-945">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-945">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-946">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-946">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-947">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-947">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-948">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-948">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-949">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-949">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-950">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-950">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-951">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-951">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-952">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-952">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-953"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-954">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-954">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-955">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-955">Required.</span></span> <span data-ttu-id="f5aab-956">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-956">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-957">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-957">Required.</span></span> <span data-ttu-id="f5aab-958">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-958">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-959">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-959">Optional.</span></span> <span data-ttu-id="f5aab-960">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-960">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="f5aab-961">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-961">Optional.</span></span> <span data-ttu-id="f5aab-962">Si applica solo durante la scrittura di una matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-962">Applies only when writing an array.</span></span> <span data-ttu-id="f5aab-963">Specifica se la matrice deve essere considerata una matrice dinamica e se è necessario un descrittore della matrice che descrive le dimensioni e i limiti della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-963">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f5aab-964">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-964">Optional.</span></span> <span data-ttu-id="f5aab-965">Si applica solo durante la scrittura di una stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-965">Applies only when writing a string.</span></span> <span data-ttu-id="f5aab-966">Specifica se scrivere un descrittore a due byte per la stringa che descrive la lunghezza.</span><span class="sxs-lookup"><span data-stu-id="f5aab-966">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="f5aab-967">Il valore predefinito è <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-967">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f5aab-968">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-968">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="f5aab-969">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-969">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="f5aab-970">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-970">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-971">`FileGet` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-971">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-972">I dati letti con `FileGet` vengono generalmente scritti in un file utilizzando `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-972">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f5aab-973">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-973">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-974">Se si omette `RecordNumber`, il record o dopo l'ultimo byte `FileGet` o `FilePut` funzione (o a cui fa riferimento l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-974">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-975">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-975">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-976">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-976">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-977">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-977">Random Mode</span></span>  
 <span data-ttu-id="f5aab-978">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-978">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-979">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-979">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-980">Lo spazio tra la fine di un record e l'avvio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-980">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-981">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-981">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-982">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-982">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-983">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-983">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-984">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando è inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-984">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-985">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-985">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-986">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-986">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f5aab-987">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-987">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-988">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-988">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f5aab-989">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-989">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f5aab-990">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-990">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f5aab-991">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-991">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-992">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-992">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-993">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-993">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-994">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-994">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f5aab-995">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f5aab-995">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f5aab-996">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f5aab-996">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f5aab-997">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-997">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="f5aab-998">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-998">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f5aab-999">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-999">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-1000">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1000">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1001">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1001">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1002">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1002">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f5aab-1003">Ciò include le matrici e i relativi descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1003">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-1004">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1004">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1005">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1005">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1006">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1006">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1007">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1007">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1008">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1008">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1009">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1009">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1010">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1010">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f5aab-1011">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1011">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f5aab-1012">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1012">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1013">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1013">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f5aab-1014">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1014">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1015"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1015"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1016">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1016">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1017">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1017">Required.</span></span> <span data-ttu-id="f5aab-1018">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1018">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1019">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1019">Required.</span></span> <span data-ttu-id="f5aab-1020">Nome valido della variabile in cui vengono letti i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1020">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1021">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1021">Optional.</span></span> <span data-ttu-id="f5aab-1022">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1022">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1023">Legge i dati in una variabile da un file aperto sul disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1023">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="f5aab-1024">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGetObject" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1024">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="f5aab-1025">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1025">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1026">Il `FileGetObject` funzione viene utilizzata al posto di `FileGet` per evitare ambiguità in fase di compilazione se tipo `Object` viene restituito invece un altro tipo, ad esempio `Integer`, `Long`, `Short`e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1026">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f5aab-1027">Se si intende scrivere il `Variant` tipo `FileGetObject` è obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1027">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="f5aab-1028">In caso di dubbi, se si utilizza un oggetto per il secondo parametro, è consigliabile utilizzare `FilePutObject` e `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1028">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f5aab-1029">`FileGetObject` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1029">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1030">I dati letti con `FileGetObject` vengono in genere scritti con `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1030">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="f5aab-1031">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1031">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1032">Se si omette `RecordNumber`, `FileGetObject` legge il record o byte dopo l'ultimo `FileGetObject` o `FilePutObject` funzione (o a cui fa riferimento l'ultima `Seek` funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1032">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1033">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1033">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1034">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1034">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1035">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FileGetObject` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1035">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1036">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1036">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1037">Poiché non è possibile stabilire con precisione la quantità di dati di spaziatura interna, è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1037">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f5aab-1038">Se la variabile in lettura è una stringa, per impostazione predefinita `FileGetObject` legge un descrittore di due byte contenente la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1038">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1039">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1039">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1040">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa e durante la lettura in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1040">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f5aab-1041">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1041">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1042">Se la variabile in cui si legge è una matrice, è necessario che la lunghezza del record specificata dal parametro `RecordLength` della funzione `FileOpen` sia superiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1042">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1043">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1043">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1044">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1044">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="f5aab-1045">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1045">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="f5aab-1046">I byte 218 distribuiti come segue: 18 byte per il descrittore (2 + 8 \* 2) e 100 byte per i dati (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1046">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f5aab-1047">`FileGetObject` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1047">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1048">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePutObject`) è preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1048">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="f5aab-1049">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi, incluse le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1049">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="f5aab-1050">La <xref:Microsoft.VisualBasic.VBFixedStringAttribute> classe può essere applicata ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1050">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1051">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1051">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1052">Per i file aperti `Binary` modalità, tutti i `Random` vengono applicate regole, con le seguenti eccezioni:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1052">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="f5aab-1053">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1053">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1054">`FileGetObject` legge tutte le variabili dal disco in modo contiguo, vale a dire senza spaziatura interna tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1054">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1055">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGetObject` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1055">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="f5aab-1056">Nessun descrittore è di lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1056">No descriptor is read.</span></span>  
  
 <span data-ttu-id="f5aab-1057">`FileGetObject` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1057">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1058">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1058">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-1059">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1059">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-1060">Ad esempio, un file denominato Form1. vb non può essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1060">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1061">Nell'esempio seguente legge un record in un file di test e in seguito viene recuperato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1061">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f5aab-1062">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1062">Required.</span></span> <span data-ttu-id="f5aab-1063">Espressione <see langword="String" /> che specifica un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1063"><see langword="String" /> expression that specifies a file.</span></span> <span data-ttu-id="f5aab-1064">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1064"><c>PathName</c> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f5aab-1065">Restituisce un valore <see langword="Long" /> che specifica la lunghezza di un file in byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1065">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="f5aab-1066">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileLen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="f5aab-1067">Per ulteriori informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1067">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns>
          <span data-ttu-id="f5aab-1068">Valore <see langword="Long" /> che specifica la lunghezza di un file in byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1068"><see langword="Long" /> value that specifies the length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1069">Se il file specificato è aperto quando il `FileLen` funzione viene chiamata, il valore restituito rappresenta le dimensioni del file al momento è stato aperto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1069">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-1070">Per ottenere la lunghezza corrente di un file aperto, usare il `LOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1070">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1071">Questo esempio viene utilizzato il `FileLen` funzione per restituire la lunghezza di un file in byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1071">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="f5aab-1072">Ai fini di questo esempio, si supponga che `TestFile` è un file che contiene alcuni dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1072">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f5aab-1073">Il file non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1073">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1074">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1074">Required.</span></span> <span data-ttu-id="f5aab-1075">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1075">Any valid file number.</span></span> <span data-ttu-id="f5aab-1076">Utilizza la funzione <see langword="FreeFile" /> per ottenere il successivo numero di file disponibile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1076">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="f5aab-1077">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1077">Required.</span></span> <span data-ttu-id="f5aab-1078">Espressione <see langword="String" /> che specifica un nome di file. Può includere la directory o la cartella e l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1078"><see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="f5aab-1079">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1079">Required.</span></span> <span data-ttu-id="f5aab-1080">Enumerazione che specifica la modalità per il file: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> o <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1080">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="f5aab-1081">Per altre informazioni, vedere <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1081">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="f5aab-1082">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1082">Optional.</span></span> <span data-ttu-id="f5aab-1083">Enumerazione che specifica le operazioni autorizzate sul file aperto: <see langword="Read" />, <see langword="Write" /> o <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1083">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="f5aab-1084">Il valore predefinito è <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1084">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="f5aab-1085">Per altre informazioni, vedere <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1085">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="f5aab-1086">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1086">Optional.</span></span> <span data-ttu-id="f5aab-1087">Enumerazione che specifica le operazioni non autorizzate sul file aperto da altri processi: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> e <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1087">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="f5aab-1088">Il valore predefinito è <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1088">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="f5aab-1089">Per altre informazioni, vedere <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1089">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="f5aab-1090">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1090">Optional.</span></span> <span data-ttu-id="f5aab-1091">Numero minore o uguale a 32.767 byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1091">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="f5aab-1092">Per i file aperti per l'accesso Random, questo valore rappresenta la lunghezza del record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1092">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="f5aab-1093">Per i file sequenziali, questo valore rappresenta il numero di caratteri memorizzati nel buffer.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1093">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="f5aab-1094">Apre un file per l'input o l'output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1094">Opens a file for input or output.</span></span> <span data-ttu-id="f5aab-1095">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1095">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="f5aab-1096">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1096">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1097">Il `FileOpen` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1097">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-1098">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1098">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-1099">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1099">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-1100">Prima di poter eseguire qualsiasi operazione dei / o su di esso, è necessario aprire un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1100">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="f5aab-1101">`FileOpen` Alloca un buffer dei / o al file e determina la modalità di accesso da utilizzare con il buffer.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1101">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-1102">Quando si scrive in un file, un'applicazione potrebbe essere necessario creare un file, se il file a cui sta tentando di scrivere non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1102">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="f5aab-1103">A tale scopo, sono necessarie le autorizzazioni per la directory in cui viene creato il file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1103">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="f5aab-1104">Tuttavia, se il file specificato da `FileName` esiste, l'applicazione deve `Write` autorizzazioni solo per il file stesso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1104">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="f5aab-1105">Quando possibile, per migliorare la sicurezza, creare il file durante la distribuzione e concedere `Write` le autorizzazioni per tale file solo, anziché per l'intera directory.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1105">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="f5aab-1106">Per migliorare la sicurezza, scrivere dati nella directory dell'utente anziché nella directory radice o la directory dei file di programma.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1106">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="f5aab-1107">Aprire il canale è reperibile tramite il `FreeFile()` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1107">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-1108">Il `FileOpen` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione, che potrebbe influire sulla relativa esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1108">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="f5aab-1109">Per ulteriori informazioni, vedere l'enumerazione <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1109">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1110">In questo esempio illustra vari usi del `FileOpen` funzione per abilitare l'input e output in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1110">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="f5aab-1111">Il codice seguente consente di aprire il file `TestFile` in `Input` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1111">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="f5aab-1112">Nell'esempio viene aperto il file in `Binary` modalità per operazioni di sola scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1112">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="f5aab-1113">Nell'esempio seguente viene aperto il file in `Random` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1113">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="f5aab-1114">Il file contiene record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1114">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="f5aab-1115">Questo esempio di codice consente di aprire il file in `Output` modalità, le operazioni possono leggere o scrivere nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1115">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="f5aab-1116">Questo esempio di codice consente di aprire il file in `Binary` modalità per la lettura; Impossibile leggere il file ad altri processi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1116">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5aab-1117">Lunghezza del record negativa (e diversa da -1).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1117">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f5aab-1118">Il parametro <paramref name="FileName" /> è già aperto oppure <paramref name="FileName" /> non è valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1118"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-1119">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1119">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1120">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1120">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1121">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1121">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1122">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1122">Required.</span></span> <span data-ttu-id="f5aab-1123">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1123">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1124">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1124">Required.</span></span> <span data-ttu-id="f5aab-1125">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1125">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1126">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1126">Optional.</span></span> <span data-ttu-id="f5aab-1127">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1127">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1128">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1128">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1129">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1129">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1130">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1130">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1131">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1131">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1132">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1132">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1133">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1133">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1134">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1134">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1135">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1135">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1136">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1136">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1137">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1137">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1138">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1138">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1139">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1139">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1140">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1140">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1141">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1141">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1142">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1142">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1143">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1143">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1144">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1144">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1145">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1145">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1146">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1146">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1147">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1147">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1148">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1148">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1149">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1149">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1150">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1150">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1151">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1151">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1152">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1152">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1153">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1153">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1154">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1154">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1155">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1155">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1156">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1156">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1157">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1157">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1158">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1158">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1159">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1159">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1160">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1160">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1161">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1161">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1162">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1162">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1163">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1163">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1164">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1164">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1165">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1165">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1166">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1166">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1167">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1167">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1168">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1168">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1169">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1169">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1170">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1170">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1171">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1171">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1172">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1172">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1173">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1173">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1174">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1174">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1175">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1175">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1176">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1176">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1177">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1177">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1178">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1178">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1179"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1179"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1180">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1180">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1181">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1181">Required.</span></span> <span data-ttu-id="f5aab-1182">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1182">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1183">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1183">Required.</span></span> <span data-ttu-id="f5aab-1184">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1184">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1185">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1185">Optional.</span></span> <span data-ttu-id="f5aab-1186">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1186">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1187">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1187">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1188">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1188">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1189">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1189">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1190">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1190">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1191">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1191">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1192">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1192">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1193">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1193">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1194">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1194">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1195">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1195">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1196">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1196">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1197">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1197">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1198">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1198">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1199">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1199">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1200">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1200">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1201">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1201">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1202">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1202">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1203">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1203">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1204">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1204">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1205">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1205">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1206">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1206">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1207">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1207">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1208">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1208">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1209">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1209">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1210">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1210">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1211">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1211">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1212">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1212">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1213">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1213">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1214">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1214">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1215">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1215">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1216">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1216">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1217">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1217">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1218">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1218">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1219">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1219">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1220">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1220">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1221">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1221">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1222">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1222">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1223">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1223">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1224">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1224">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1225">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1225">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1226">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1226">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1227">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1227">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1228">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1228">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1229">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1229">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1230">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1230">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1231">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1231">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1232">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1232">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1233">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1233">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1234">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1234">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1235">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1235">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1236">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1236">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1237">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1237">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1238"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1238"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1239">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1239">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1240">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1240">Required.</span></span> <span data-ttu-id="f5aab-1241">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1241">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1242">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1242">Required.</span></span> <span data-ttu-id="f5aab-1243">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1243">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1244">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1244">Optional.</span></span> <span data-ttu-id="f5aab-1245">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1245">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1246">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1246">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1247">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1247">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1248">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1248">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1249">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1249">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1250">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1250">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1251">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1251">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1252">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1252">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1253">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1253">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1254">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1254">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1255">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1255">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1256">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1256">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1257">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1257">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1258">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1258">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1259">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1259">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1260">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1260">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1261">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1261">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1262">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1262">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1263">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1263">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1264">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1264">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1265">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1265">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1266">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1266">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1267">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1267">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1268">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1268">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1269">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1269">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1270">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1270">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1271">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1271">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1272">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1272">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1273">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1273">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1274">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1274">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1275">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1275">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1276">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1276">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1277">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1277">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1278">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1278">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1279">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1279">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1280">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1280">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1281">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1281">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1282">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1282">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1283">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1283">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1284">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1284">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1285">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1285">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1286">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1286">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1287">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1287">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1288">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1288">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1289">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1289">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1290">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1290">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1291">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1291">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1292">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1292">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1293">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1293">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1294">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1294">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1295">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1295">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1296">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1296">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1297"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1297"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1298">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1298">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1299">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1299">Required.</span></span> <span data-ttu-id="f5aab-1300">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1300">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1301">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1301">Required.</span></span> <span data-ttu-id="f5aab-1302">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1302">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1303">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1303">Optional.</span></span> <span data-ttu-id="f5aab-1304">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1304">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1305">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1305">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1306">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1306">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1307">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1307">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1308">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1308">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1309">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1309">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1310">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1310">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1311">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1311">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1312">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1312">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1313">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1313">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1314">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1314">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1315">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1315">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1316">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1316">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1317">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1317">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1318">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1318">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1319">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1319">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1320">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1320">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1321">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1321">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1322">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1322">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1323">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1323">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1324">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1324">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1325">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1325">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1326">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1326">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1327">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1327">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1328">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1328">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1329">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1329">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1330">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1330">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1331">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1331">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1332">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1332">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1333">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1333">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1334">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1334">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1335">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1335">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1336">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1336">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1337">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1337">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1338">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1338">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1339">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1339">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1340">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1340">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1341">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1341">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1342">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1342">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1343">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1343">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1344">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1344">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1345">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1345">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1346">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1346">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1347">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1347">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1348">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1348">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1349">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1349">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1350">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1350">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1351">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1351">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1352">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1352">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1353">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1353">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1354">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1354">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1355">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1355">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1356"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1356"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1357">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1357">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1358">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1358">Required.</span></span> <span data-ttu-id="f5aab-1359">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1359">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1360">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1360">Required.</span></span> <span data-ttu-id="f5aab-1361">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1361">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1362">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1362">Optional.</span></span> <span data-ttu-id="f5aab-1363">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1363">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1364">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1364">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1365">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1365">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1366">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1366">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1367">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1367">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1368">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1368">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1369">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1369">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1370">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1370">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1371">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1371">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1372">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1372">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1373">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1373">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1374">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1374">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1375">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1375">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1376">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1376">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1377">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1377">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1378">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1378">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1379">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1379">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1380">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1380">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1381">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1381">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1382">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1382">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1383">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1383">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1384">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1384">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1385">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1385">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1386">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1386">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1387">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1387">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1388">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1388">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1389">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1389">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1390">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1390">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1391">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1392">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1392">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1393">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1394">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1395">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1395">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1396">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1397">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1397">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1398">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1398">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1399">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1399">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1400">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1400">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1401">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1401">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1402">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1402">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1403">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1403">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1404">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1404">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1405">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1405">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1406">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1406">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1407">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1407">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1408">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1408">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1409">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1409">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1410">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1410">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1411">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1411">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1412">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1412">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1413">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1413">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1414">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1414">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1415"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1415"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1416">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1416">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1417">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1417">Required.</span></span> <span data-ttu-id="f5aab-1418">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1418">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1419">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1419">Required.</span></span> <span data-ttu-id="f5aab-1420">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1420">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1421">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1421">Optional.</span></span> <span data-ttu-id="f5aab-1422">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1422">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1423">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1423">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1424">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1424">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1425">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1425">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1426">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1426">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1427">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1427">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1428">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1428">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1429">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1429">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1430">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1430">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1431">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1431">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1432">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1432">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1433">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1433">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1434">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1434">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1435">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1435">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1436">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1436">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1437">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1437">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1438">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1438">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1439">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1439">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1440">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1440">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1441">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1441">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1442">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1442">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1443">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1443">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1444">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1444">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1445">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1445">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1446">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1446">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1447">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1447">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1448">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1448">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1449">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1449">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1450">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1450">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1451">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1451">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1452">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1452">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1453">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1453">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1454">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1454">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1455">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1455">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1456">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1456">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1457">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1457">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1458">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1458">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1459">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1459">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1460">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1460">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1461">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1461">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1462">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1462">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1463">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1463">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1464">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1464">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1465">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1465">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1466">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1466">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1467">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1467">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1468">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1468">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1469">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1469">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1470">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1470">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1471">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1471">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1472">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1472">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1473">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1473">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1474"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1474"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1475">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1475">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1476">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1476">Required.</span></span> <span data-ttu-id="f5aab-1477">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1477">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1478">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1478">Required.</span></span> <span data-ttu-id="f5aab-1479">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1479">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1480">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1480">Optional.</span></span> <span data-ttu-id="f5aab-1481">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1481">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1482">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1482">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1483">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1483">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1484">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1484">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1485">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1485">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1486">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1486">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1487">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1487">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1488">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1488">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1489">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1489">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1490">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1490">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1491">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1491">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1492">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1492">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1493">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1493">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1494">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1494">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1495">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1495">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1496">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1496">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1497">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1497">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1498">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1498">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1499">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1499">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1500">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1500">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1501">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1501">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1502">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1502">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1503">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il`VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1503">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1504">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1504">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1505">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1505">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1506">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1506">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1507">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1507">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1508">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1508">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1509">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1509">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1510">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1510">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1511">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1511">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1512">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1512">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1513">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1513">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1514">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1514">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1515">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1515">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1516">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1516">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1517">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1517">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1518">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1518">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1519">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1519">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1520">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1520">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1521">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1521">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1522">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1522">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1523">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1523">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1524">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1524">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1525">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1525">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1526">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1526">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1527">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1527">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1528">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1528">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1529">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1529">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1530">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1530">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1531">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1531">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1532">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1532">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1533"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1533"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1534">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1534">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1535">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1535">Required.</span></span> <span data-ttu-id="f5aab-1536">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1536">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1537">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1537">Required.</span></span> <span data-ttu-id="f5aab-1538">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1538">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1539">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1539">Optional.</span></span> <span data-ttu-id="f5aab-1540">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1541">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1541">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1542">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1543">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1544">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1544">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1545">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1545">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1546">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1547">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1547">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1548">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1548">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1549">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1549">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1550">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1550">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1551">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1551">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1552">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1552">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1553">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1553">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1554">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1554">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1555">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1555">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1556">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1556">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1557">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1557">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1558">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1558">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1559">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1559">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1560">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1560">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1561">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1561">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1562">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1562">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1563">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1563">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1564">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1564">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1565">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1565">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1566">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1566">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1567">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1567">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1568">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1568">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1569">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1569">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1570">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1570">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1571">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1571">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1572">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1573">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1573">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1574">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1574">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1575">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1576">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1576">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1577">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1578">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1578">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1579">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1579">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1580">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1580">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1581">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1581">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1582">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1582">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1583">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1583">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1584">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1584">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1585">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1585">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1586">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1586">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1587">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1587">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1588">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1588">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1589">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1589">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1590">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1590">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1591">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1591">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1592"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1592"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1593">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1593">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1594">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1594">Required.</span></span> <span data-ttu-id="f5aab-1595">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1595">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1596">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1596">Required.</span></span> <span data-ttu-id="f5aab-1597">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1597">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1598">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1598">Optional.</span></span> <span data-ttu-id="f5aab-1599">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1599">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1600">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1600">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1601">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1601">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1602">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1602">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1603">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1603">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1604">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1604">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1605">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1605">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1606">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1606">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1607">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1607">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1608">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1608">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1609">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1609">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1610">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1610">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1611">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1612">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1612">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1613">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1614">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1615">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1615">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1616">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1616">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1617">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1617">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1618">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1618">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1619">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1619">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1620">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1621">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1621">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1622">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1622">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1623">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1623">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1624">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1624">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1625">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1625">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1626">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1626">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1627">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1627">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1628">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1628">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1629">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1629">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1630">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1630">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1631">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1631">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1632">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1632">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1633">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1633">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1634">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1634">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1635">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1635">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1636">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1636">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1637">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1637">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1638">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1638">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1639">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1640">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1641">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1642">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1642">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1643">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1643">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1644">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1644">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1645">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1645">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1646">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1646">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1647">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1647">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1648">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1648">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1649">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1649">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1650">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1650">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1651"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1651"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1652">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1652">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1653">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1653">Required.</span></span> <span data-ttu-id="f5aab-1654">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1654">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1655">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1655">Required.</span></span> <span data-ttu-id="f5aab-1656">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1656">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1657">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1657">Optional.</span></span> <span data-ttu-id="f5aab-1658">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1658">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1659">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1659">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1660">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1660">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1661">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1661">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1662">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1662">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1663">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1663">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1664">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1664">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1665">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1665">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1666">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1666">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1667">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1667">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1668">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1668">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1669">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1669">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1670">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1670">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1671">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1671">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1672">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1672">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1673">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1673">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1674">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1674">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1675">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1675">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1676">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1676">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1677">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1677">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1678">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1678">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1679">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1679">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1680">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1680">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1681">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1681">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1682">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1682">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1683">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1683">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1684">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1684">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1685">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1685">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1686">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1686">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1687">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1687">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1688">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1688">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1689">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1689">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1690">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1690">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1691">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1691">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1692">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1692">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1693">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1693">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1694">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1694">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1695">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1695">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1696">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1696">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1697">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1697">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1698">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1698">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1699">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1699">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1700">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1700">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1701">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1701">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1702">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1702">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1703">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1703">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1704">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1704">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1705">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1705">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1706">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1706">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1707">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1707">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1708">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1708">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1709">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1709">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1710"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1710"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1711">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1711">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1712">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1712">Required.</span></span> <span data-ttu-id="f5aab-1713">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1714">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1714">Required.</span></span> <span data-ttu-id="f5aab-1715">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1716">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1716">Optional.</span></span> <span data-ttu-id="f5aab-1717">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1718">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1719">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1720">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1721">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1722">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1723">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1724">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1725">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1726">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1727">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1728">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1728">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1729">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1730">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel`RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1730">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1731">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1732">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1733">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1734">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1735">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1736">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1737">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1738">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1739">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1740">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1741">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1742">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1743">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1744">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1745">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1746">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1747">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1748">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1749">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1750">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1751">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1752">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1753">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1754">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1755">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1756">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1756">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1757">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1758">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1759">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1760">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1761">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1762">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1763">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1764">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1765">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1766">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1767">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1768">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1769"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1770">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1771">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1771">Required.</span></span> <span data-ttu-id="f5aab-1772">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1772">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1773">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1773">Required.</span></span> <span data-ttu-id="f5aab-1774">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1774">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1775">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1775">Optional.</span></span> <span data-ttu-id="f5aab-1776">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1776">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1777">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1777">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1778">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1778">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1779">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1779">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1780">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1780">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1781">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1781">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1782">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1782">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1783">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1783">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1784">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1784">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1785">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1785">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1786">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1786">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1787">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1787">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1788">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1788">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1789">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1789">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1790">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1790">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1791">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1791">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1792">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1792">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1793">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1793">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1794">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1794">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1795">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1795">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1796">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1796">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1797">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1798">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1798">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1799">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1799">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1800">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1800">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1801">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1801">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1802">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1802">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1803">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1803">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1804">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1805">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1805">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1806">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1806">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1807">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1807">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1808">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1808">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1809">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1809">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1810">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1810">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1811">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1811">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1812">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1812">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1813">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1813">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1814">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1814">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1815">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1815">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1816">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1816">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1817">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1817">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1818">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1818">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1819">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1819">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1820">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1820">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1821">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1821">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1822">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1822">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1823">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1823">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1824">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1824">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1825">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1825">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1826">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1826">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1827">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1827">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1828"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1828"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1829">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1829">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1830">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1830">Required.</span></span> <span data-ttu-id="f5aab-1831">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1831">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1832">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1832">Required.</span></span> <span data-ttu-id="f5aab-1833">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1833">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1834">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1834">Optional.</span></span> <span data-ttu-id="f5aab-1835">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1835">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f5aab-1836">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1836">Optional.</span></span> <span data-ttu-id="f5aab-1837">Si applica solo durante la scrittura di una stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1837">Applies only when writing a string.</span></span> <span data-ttu-id="f5aab-1838">Specifica se scrivere un descrittore di lunghezza a due byte per la stringa nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1838">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="f5aab-1839">Il valore predefinito è <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1839">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f5aab-1840">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1840">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1841">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1842">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1843">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1843">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1844">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1844">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1845">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1846">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1846">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1847">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1847">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1848">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1848">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1849">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1849">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1850">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1850">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1851">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1852">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1852">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1853">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1854">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1855">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1855">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1856">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1856">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1857">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1857">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1858">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1858">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1859">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1859">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1860">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1861">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1861">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1862">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1862">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1863">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1863">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1864">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1864">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1865">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1865">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1866">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1866">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1867">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1867">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1868">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1868">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1869">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1869">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1870">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1870">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1871">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1872">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1872">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1873">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1873">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1874">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1875">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1875">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1876">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1877">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1877">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1878">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1878">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1879">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1880">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1881">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1882">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1882">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1883">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1883">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1884">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1884">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1885">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1885">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1886">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1886">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1887">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1887">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1888">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1888">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1889">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1889">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1890">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1890">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1891"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1891"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1892">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1892">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1893">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1893">Required.</span></span> <span data-ttu-id="f5aab-1894">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1894">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1895">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1895">Required.</span></span> <span data-ttu-id="f5aab-1896">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1896">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1897">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1897">Optional.</span></span> <span data-ttu-id="f5aab-1898">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1898">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="f5aab-1899">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1899">Optional.</span></span> <span data-ttu-id="f5aab-1900">Si applica solo durante la scrittura di una matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1900">Applies only when writing an array.</span></span> <span data-ttu-id="f5aab-1901">Specifica se la matrice deve essere considerata dinamica e se deve essere scritto un descrittore di matrice per la stringa che descrive la lunghezza.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1901">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="f5aab-1902">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1902">Optional.</span></span> <span data-ttu-id="f5aab-1903">Si applica solo durante la scrittura di una stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1903">Applies only when writing a string.</span></span> <span data-ttu-id="f5aab-1904">Specifica se scrivere un descrittore di lunghezza a due byte per la stringa nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1904">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="f5aab-1905">Il valore predefinito è <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1905">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="f5aab-1906">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1906">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="f5aab-1907">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1907">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="f5aab-1908">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1908">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1909">`FilePut` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1909">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1910">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1910">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f5aab-1911">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1911">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1912">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` o `FilePut` di funzione o a cui fa riferimento l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1912">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f5aab-1913">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1913">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1914">`FilePut` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1914">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1915">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1915">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1916">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1916">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1917">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1917">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1918">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1918">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1919">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1919">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1920">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1920">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1921">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1921">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1922">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1922">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f5aab-1923">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1923">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f5aab-1924">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1924">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1925">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1925">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1926">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1926">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1927">Se la variabile scritta è un oggetto che contiene una stringa, `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1927">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1928">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1928">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1929">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1929">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1930">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1930">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f5aab-1931">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1931">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f5aab-1932">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1932">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f5aab-1933">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1933">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f5aab-1934">Quando si scrive la matrice, è necessario corrispondere al modo in cui che la matrice verrà letta. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1934">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f5aab-1935">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1935">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1936">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1936">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f5aab-1937">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1937">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1938">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1938">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f5aab-1939">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa di lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1939">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f5aab-1940">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1940">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f5aab-1941">`FilePut` scrive gli elementi delle strutture come se fossero scritti individualmente, ad eccezione del fatto non è presente riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1941">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f5aab-1942">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1942">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f5aab-1943">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f5aab-1943">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1944">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1944">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1945">Per i file aperti `Binary` la maggior parte delle modalità di `Random` vengono applicate le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1945">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f5aab-1946">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1946">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f5aab-1947">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1947">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1948">`FilePut` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1948">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f5aab-1949">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1949">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f5aab-1950">Nessun descrittore viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1950">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f5aab-1951">`FilePut` Scrive le stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1951">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f5aab-1952">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1952">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f5aab-1953">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1953">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f5aab-1954">La scrittura in un file mediante il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1954">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1955">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1955">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f5aab-1956">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1956">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-1957"><paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1957"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-1958">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1958">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1959">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1959">Required.</span></span> <span data-ttu-id="f5aab-1960">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1960">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-1961">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1961">Required.</span></span> <span data-ttu-id="f5aab-1962">Nome di variabile valido che contiene i dati scritti su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1962">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="f5aab-1963">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1963">Optional.</span></span> <span data-ttu-id="f5aab-1964">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1964">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="f5aab-1965">Scrive dati da una variabile in un file del disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1965">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="f5aab-1966">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePutObject" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1966">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="f5aab-1967">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1967">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-1968">Il `FilePutObject` funzione viene utilizzata al posto di `FilePut` per evitare ambiguità in fase di compilazione se tipo `Object` invece viene passato un altro tipo, ad esempio `Integer`, `Long`, `Short`e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1968">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f5aab-1969">`FilePutObject` scrive e legge i descrittori che descrivono l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1969">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="f5aab-1970">Se si intende scrivere il `Variant` tipo `FilePutObject` è obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1970">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="f5aab-1971">In caso di dubbi, se si utilizza un oggetto per il secondo parametro, è consigliabile utilizzare sempre `FilePutObject` e `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1971">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f5aab-1972">`FilePutObject` è valido solo in `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1972">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-1973">I dati scritti con `FilePutObject` vengono in genere letti da un file usando `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1973">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f5aab-1974">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f5aab-1975">Se si omette `RecordNumber`, `FilePutObject` scrive un record o il byte successivo dopo l'ultimo `FileGetObject` o `FilePutObject` funzione (o il record o byte a cui fa riferimento l'ultima `Seek` funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1975">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="f5aab-1976">Il `StringIsFixedLength` argomento controlla se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f5aab-1977">`FilePutObject` Scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1977">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f5aab-1978">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePutObject`, è necessario eseguire la stessa operazione con `FileGetObject`, e assicurarsi che la stringa venga inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1978">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f5aab-1979">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f5aab-1979">Random Mode</span></span>  
 <span data-ttu-id="f5aab-1980">Per i file aperti `Random` modalità, le seguenti regole:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f5aab-1981">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione `FilePutObject` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f5aab-1982">Lo spazio tra la fine di un record e l'inizio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f5aab-1983">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1983">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f5aab-1984">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="f5aab-1985">Se la variabile scritta è un oggetto che contiene un tipo numerico, `FilePutObject` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1985">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f5aab-1986">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePutObject` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1986">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f5aab-1987">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f5aab-1988">Se la variabile scritta è un oggetto che contiene una stringa, `FilePutObject` scriverà un descrittore di due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1988">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f5aab-1989">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f5aab-1990">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve avere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1990">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f5aab-1991">Se la variabile scritta è una matrice, è necessario che la lunghezza del record specificata dalla clausola `RecordLength` della funzione `FileOpen` sia superiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1991">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f5aab-1992">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1992">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f5aab-1993">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f5aab-1993">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f5aab-1994">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f5aab-1994">Binary Mode</span></span>  
 <span data-ttu-id="f5aab-1995">Per i file aperti `Binary` modalità, tutti i `Random` si applicano le regole della modalità, ad eccezione di:</span><span class="sxs-lookup"><span data-stu-id="f5aab-1995">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="f5aab-1996">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1996">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f5aab-1997">`FilePutObject` Scrive tutte le variabili su disco in successione, ovvero senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1997">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-1998">Questo esempio viene utilizzato il `FilePutObject` funzione per scrivere una stringa in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1998">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-1999">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-1999">Required.</span></span> <span data-ttu-id="f5aab-2000">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2000">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="f5aab-2001">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2001">Required.</span></span> <span data-ttu-id="f5aab-2002">Espressione numerica compresa nell'intervallo tra 0 e 255 inclusi, che indica quanti caratteri devono comparire in una riga prima che venga iniziata una nuova riga.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2002">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="f5aab-2003">Se <c>RecordWidth</c> è uguale a 0, non esiste alcun limite alla lunghezza della riga.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2003">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="f5aab-2004">Il valore predefinito per <c>RecordWidth</c> è 0.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2004">The default value for <c>RecordWidth</c> is 0.</span></span></param>
        <summary><span data-ttu-id="f5aab-2005">Assegna lo spessore della linea di output per un file aperto mediante la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2005">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f5aab-2006">Questo esempio viene utilizzato il `FileWidth` funzione per impostare la larghezza della riga di output di un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2006">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2007">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5aab-2008">Restituisce un valore <see langword="Integer" /> che rappresenta il successivo numero di file che può essere utilizzato dalla funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2008">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2009">Restituisce un valore <see langword="Integer" /> che rappresenta il successivo numero di file che può essere utilizzato dalla funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2009">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2010">Utilizzare `FreeFile` per fornire un numero di file che non è già in uso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2010">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2011">Questo esempio viene utilizzato il `FreeFile` funzione per restituire il successivo numero di file disponibili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2011">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="f5aab-2012">Cinque file aperti per l'output all'interno del ciclo e in ognuno vengono scritti alcuni dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2012">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2013">Più di 255 file sono in uso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2013">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f5aab-2014">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2014">Required.</span></span> <span data-ttu-id="f5aab-2015">Espressione <see langword="String" /> che specifica un nome di file, directory o cartella.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2015"><see langword="String" /> expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="f5aab-2016">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2016"><c>PathName</c> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f5aab-2017">Restituisce un valore <see langword="FileAttribute" /> che rappresenta gli attributi di un file, di una directory o di una cartella.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2017">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="f5aab-2018">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="f5aab-2019">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2020">Il valore restituito dalla funzione <see langword="GetAttr" /> è la somma dei seguenti valori di enumerazione:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2020">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span>  
  
 <span data-ttu-id="f5aab-2021"><list type="table"><item><term> Valore</span><span class="sxs-lookup"><span data-stu-id="f5aab-2021"><list type="table"><item><term> Value</span></span>  
  
 <span data-ttu-id="f5aab-2022"></term><description> Costante</span><span class="sxs-lookup"><span data-stu-id="f5aab-2022"></term><description> Constant</span></span>  
  
 <span data-ttu-id="f5aab-2023"></description><description> Descrizione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2023"></description><description> Description</span></span>  
  
 <span data-ttu-id="f5aab-2024"></description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2024"></description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.</span></span>  
  
 <span data-ttu-id="f5aab-2025"></description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Sola lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2025"></description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.</span></span>  
  
 <span data-ttu-id="f5aab-2026"></description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Nascosto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2026"></description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.</span></span>  
  
 <span data-ttu-id="f5aab-2027"></description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> File di sistema.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2027"></description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.</span></span>  
  
 <span data-ttu-id="f5aab-2028"></description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory o cartella.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2028"></description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.</span></span>  
  
 <span data-ttu-id="f5aab-2029"></description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> Il file è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2029"></description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.</span></span>  
  
 <span data-ttu-id="f5aab-2030"></description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> Il file ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2030"></description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="f5aab-2031">Queste enumerazioni sono specificate dal linguaggio Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2031">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="f5aab-2032">e possono essere utilizzate in qualsiasi punto del codice in sostituzione dei valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2032">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2033">Per determinare quali attributi sono impostati, utilizzare il `And` operatore per eseguire un confronto bit per bit tra il valore restituito dal `GetAttr` funzione e il valore dell'attributo di file desiderato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2033">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="f5aab-2034">Se il risultato è diverso da zero, tale attributo è impostato per il file denominato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2034">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="f5aab-2035">Ad esempio, il valore restituito i seguenti `And` espressione è zero se la `Archive` attributo non è impostato:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2035">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="f5aab-2036">Viene restituito un valore diverso da zero se la `Archive` attributo è impostato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2036">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2037">Questo esempio viene utilizzato il `GetAttr` funzione per determinare gli attributi di un file e directory o una cartella.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2037">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f5aab-2038"><paramref name="Pathname" /> non è valido o contiene caratteri jolly.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2038"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f5aab-2039">Il file di destinazione non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2039">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-2040">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2040">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2041">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2041">Required.</span></span> <span data-ttu-id="f5aab-2042">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2042">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2043">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2043">Required.</span></span> <span data-ttu-id="f5aab-2044">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2044">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2045">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2045">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2046">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2046">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2047">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2047">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2048">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2048">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2049">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2049">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2050">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2050">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2051">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2051">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2052">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2052">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2053">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2053">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2054">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2054">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2055">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2055">Data</span></span>|<span data-ttu-id="f5aab-2056">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2056">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2057">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2057">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2058">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2058">Empty</span></span>|  
|<span data-ttu-id="f5aab-2059">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2059">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2060"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2060">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2061">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2061">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2062">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2062">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2063">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2063">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2064">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2064">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2065">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2065">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2066">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2066">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2067">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2067">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2068">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2068">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2069">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2069">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2070">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2070">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2071">In questo esempio si presuppone che `TestFile` è un file con poche righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2071">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2072">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2073">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2073">Required.</span></span> <span data-ttu-id="f5aab-2074">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2074">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2075">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2075">Required.</span></span> <span data-ttu-id="f5aab-2076">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2076">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2077">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2077">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2078">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2078">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2079">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2079">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2080">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2080">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2081">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2081">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2082">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2082">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2083">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2083">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2084">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2084">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2085">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2085">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2086">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2086">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2087">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2087">Data</span></span>|<span data-ttu-id="f5aab-2088">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2088">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2089">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2089">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2090">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2090">Empty</span></span>|  
|<span data-ttu-id="f5aab-2091">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2091">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2092"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2092">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2093">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2093">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2094">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2094">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2095">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2095">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2096">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2096">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2097">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2097">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2098">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2098">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2099">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2099">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2100">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2100">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2101">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2101">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2102">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2102">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2103">In questo esempio si presuppone che `TestFile` è un file con poche righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2103">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2104">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2104">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2105">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2105">Required.</span></span> <span data-ttu-id="f5aab-2106">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2106">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2107">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2107">Required.</span></span> <span data-ttu-id="f5aab-2108">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2108">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2109">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2110">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2110">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2111">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2111">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2112">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2112">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2113">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2113">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2114">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2114">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2115">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2115">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2116">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2116">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2117">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2117">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2118">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2118">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2119">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2119">Data</span></span>|<span data-ttu-id="f5aab-2120">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2120">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2121">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2121">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2122">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2122">Empty</span></span>|  
|<span data-ttu-id="f5aab-2123">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2123">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2124"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2124">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2125">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2125">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2126">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2126">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2127">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2127">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2128">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2128">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2129">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2129">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2130">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2130">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2131">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2131">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2132">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2132">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2133">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2133">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2134">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2134">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2135">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2135">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2136">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2136">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2137">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2137">Required.</span></span> <span data-ttu-id="f5aab-2138">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2138">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2139">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2139">Required.</span></span> <span data-ttu-id="f5aab-2140">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2140">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2141">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2141">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2142">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2142">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2143">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2144">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2145">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2145">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2146">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2146">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2147">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2147">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2148">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2148">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2149">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2149">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2150">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2150">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2151">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2151">Data</span></span>|<span data-ttu-id="f5aab-2152">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2152">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2153">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2153">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2154">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2154">Empty</span></span>|  
|<span data-ttu-id="f5aab-2155">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2155">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2156"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2156">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2157">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2157">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2158">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2158">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2159">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2159">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2160">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2160">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2161">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2161">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2162">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2162">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2163">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2163">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2164">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2164">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2165">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2165">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2166">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2166">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2167">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2167">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2168">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2168">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2169">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2169">Required.</span></span> <span data-ttu-id="f5aab-2170">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2170">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2171">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2171">Required.</span></span> <span data-ttu-id="f5aab-2172">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2172">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2173">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2173">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2174">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2174">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2175">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2175">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2176">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2176">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2177">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2177">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2178">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2178">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2179">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2179">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2180">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2180">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2181">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2181">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2182">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2182">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2183">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2183">Data</span></span>|<span data-ttu-id="f5aab-2184">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2184">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2185">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2185">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2186">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2186">Empty</span></span>|  
|<span data-ttu-id="f5aab-2187">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2187">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2188"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2188">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2189">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2189">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2190">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2190">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2191">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2191">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2192">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2192">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2193">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2193">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2194">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2194">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2195">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2195">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2196">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2196">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2197">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2197">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2198">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2198">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2199">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2199">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2200">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2200">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2201">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2201">Required.</span></span> <span data-ttu-id="f5aab-2202">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2202">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2203">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2203">Required.</span></span> <span data-ttu-id="f5aab-2204">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2204">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2205">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2205">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2206">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2206">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2207">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2207">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2208">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2208">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2209">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2209">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2210">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2210">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2211">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2211">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2212">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2212">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2213">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2213">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2214">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2214">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2215">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2215">Data</span></span>|<span data-ttu-id="f5aab-2216">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2216">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2217">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2217">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2218">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2218">Empty</span></span>|  
|<span data-ttu-id="f5aab-2219">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2219">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2220"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2220">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2221">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2221">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2222">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2222">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2223">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2223">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2224">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2224">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2225">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2225">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2226">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2226">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2227">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2227">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2228">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2228">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2229">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2229">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2230">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2230">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2231">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2231">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2232">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2232">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2233">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2233">Required.</span></span> <span data-ttu-id="f5aab-2234">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2234">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2235">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2235">Required.</span></span> <span data-ttu-id="f5aab-2236">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2236">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2237">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2237">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2238">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2238">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2239">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2239">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2240">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2240">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2241">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2241">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2242">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2242">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2243">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2243">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2244">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2244">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2245">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2245">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2246">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2246">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2247">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2247">Data</span></span>|<span data-ttu-id="f5aab-2248">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2248">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2249">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2249">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2250">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2250">Empty</span></span>|  
|<span data-ttu-id="f5aab-2251">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2251">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2252"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2252">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2253">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2253">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2254">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2254">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2255">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2255">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2256">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2256">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2257">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2257">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2258">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2258">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2259">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2259">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2260">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2260">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2261">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2261">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2262">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2262">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2263">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2263">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2264">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2264">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2265">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2265">Required.</span></span> <span data-ttu-id="f5aab-2266">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2266">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2267">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2267">Required.</span></span> <span data-ttu-id="f5aab-2268">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2268">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2269">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2269">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2270">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2270">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2271">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2271">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2272">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2272">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2273">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2273">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2274">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2274">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2275">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2275">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2276">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2276">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2277">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2277">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2278">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2278">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2279">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2279">Data</span></span>|<span data-ttu-id="f5aab-2280">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2280">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2281">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2281">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2282">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2282">Empty</span></span>|  
|<span data-ttu-id="f5aab-2283">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2283">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2284"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2284">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2285">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2285">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2286">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2286">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2287">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2287">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2288">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2288">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2289">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2289">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2290">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2290">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2291">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2291">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2292">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2292">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2293">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2293">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2294">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2294">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2295">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2295">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2296">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2296">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2297">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2297">Required.</span></span> <span data-ttu-id="f5aab-2298">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2298">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2299">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2299">Required.</span></span> <span data-ttu-id="f5aab-2300">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2300">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2301">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2301">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2302">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2302">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2303">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2303">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2304">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2304">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2305">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2305">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2306">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2306">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2307">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2307">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2308">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2308">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2309">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2309">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2310">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2310">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2311">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2311">Data</span></span>|<span data-ttu-id="f5aab-2312">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2312">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2313">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2313">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2314">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2314">Empty</span></span>|  
|<span data-ttu-id="f5aab-2315">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2315">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2316"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2316">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2317">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2317">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2318">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2318">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2319">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2319">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2320">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2320">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2321">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2321">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2322">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2322">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2323">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2323">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2324">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2324">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2325">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2325">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2326">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2326">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2327">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2327">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2328">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2328">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2329">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2329">Required.</span></span> <span data-ttu-id="f5aab-2330">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2330">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2331">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2331">Required.</span></span> <span data-ttu-id="f5aab-2332">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2332">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2333">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2333">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2334">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2334">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2335">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2335">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2336">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2336">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2337">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2337">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2338">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2338">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2339">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2339">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2340">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2340">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2341">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2341">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2342">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2342">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2343">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2343">Data</span></span>|<span data-ttu-id="f5aab-2344">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2344">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2345">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2345">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2346">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2346">Empty</span></span>|  
|<span data-ttu-id="f5aab-2347">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2347">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2348"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2348">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2349">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2349">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2350">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2350">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2351">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2351">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2352">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2352">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2353">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2353">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2354">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2354">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2355">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2355">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2356">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2356">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2357">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2357">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2358">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2358">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2359">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2359">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2360">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2360">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2361">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2361">Required.</span></span> <span data-ttu-id="f5aab-2362">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2362">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2363">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2363">Required.</span></span> <span data-ttu-id="f5aab-2364">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2364">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2365">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2365">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2366">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2366">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2367">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2367">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2368">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2368">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2369">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2369">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2370">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2370">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2371">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2371">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2372">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2372">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2373">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2373">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2374">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2374">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2375">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2375">Data</span></span>|<span data-ttu-id="f5aab-2376">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2376">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2377">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2377">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2378">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2378">Empty</span></span>|  
|<span data-ttu-id="f5aab-2379">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2379">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2380"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2380">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2381">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2381">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2382">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2382">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2383">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2383">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2384">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2384">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2385">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2385">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2386">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2386">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2387">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2387">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2388">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2388">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2389">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2389">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2390">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2390">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2391">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2391">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2392">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2392">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2393">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2393">Required.</span></span> <span data-ttu-id="f5aab-2394">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2394">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="f5aab-2395">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2395">Required.</span></span> <span data-ttu-id="f5aab-2396">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2396">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="f5aab-2397">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2397">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2398">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2398">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2399">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2399">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2400">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2400">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2401">I dati letti con `Input` vengono generalmente scritti in un file utilizzando `Write`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2401">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f5aab-2402">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2402">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2403">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2403">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2404">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2404">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f5aab-2405">Durante la lettura, la stringa standard o dati numerici viene assegnati a variabili senza modifica.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2405">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f5aab-2406">Nella tabella seguente viene illustrato come vengano considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2406">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f5aab-2407">Dati</span><span class="sxs-lookup"><span data-stu-id="f5aab-2407">Data</span></span>|<span data-ttu-id="f5aab-2408">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f5aab-2408">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f5aab-2409">Virgola di delimitazione o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f5aab-2409">Delimiting comma or blank line</span></span>|<span data-ttu-id="f5aab-2410">Empty</span><span class="sxs-lookup"><span data-stu-id="f5aab-2410">Empty</span></span>|  
|<span data-ttu-id="f5aab-2411">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2411">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f5aab-2412"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f5aab-2412">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f5aab-2413">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2413">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f5aab-2414">Data e/o dell'ora rappresentate dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2414">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f5aab-2415">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f5aab-2415">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f5aab-2416">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2416">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f5aab-2417">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2417">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2418">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2418">The `Input` function is not localized.</span></span> <span data-ttu-id="f5aab-2419">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2419">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2420">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2420">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2421">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2421">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2422">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2422">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f5aab-2423">In questo esempio si presuppone che `TestFile` è un file con diverse righe di dati scritti tramite il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2423">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2424">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2424">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2425">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2425">Required.</span></span> <span data-ttu-id="f5aab-2426">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2426">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="f5aab-2427">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2427">Required.</span></span> <span data-ttu-id="f5aab-2428">Qualsiasi espressione numerica valida che specifica il numero di caratteri da leggere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2428">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="f5aab-2429">Restituisce il valore <see langword="String" /> che contiene i caratteri di un file aperto in modalità <see langword="Input" /> o <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2429">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="f5aab-2430">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2430">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="f5aab-2431">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2431">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2432">Restituisce il valore <see langword="String" /> che contiene i caratteri di un file aperto in modalità <see langword="Input" /> o <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2432">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="f5aab-2433">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2433">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2434">Il `InputString` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2434">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2435">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2435">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2436">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2436">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2437">I dati letti con il `InputString` funzione viene in genere scritti in un file mediante `Print` o `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2437">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="f5aab-2438">Utilizzare questa funzione solo con i file aperti `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2438">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="f5aab-2439">A differenza di `Input` funzione, il `InputString` funzione restituisce tutti i caratteri letti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2439">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="f5aab-2440">Ciò include virgole, ritorni a capo, avanzamento riga, tra virgolette e gli spazi iniziali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2440">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="f5aab-2441">Con i file aperti per `Binary` accedere, un tentativo di leggere il file mediante il `InputString` funzione finché `EOF` restituisce `True` genera un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2441">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f5aab-2442">Utilizzare il `LOF` e `Loc` funzioni anziché `EOF` quando si legge i file binari in `InputString`, oppure utilizzare `FileGet` quando si utilizza il `EOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2442">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2443">Durante la lettura da file, non per prendere decisioni di protezione sul contenuto del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2443">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2444">Ad esempio, un file denominato Form1. vb non può essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2444">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2445">Questo esempio viene utilizzato il `InputString` funzione per leggere un carattere alla volta da un file e stampa per il `Output` finestra.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2445">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="f5aab-2446">In questo esempio si presuppone che `MyFile` è un file di testo con più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2446">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f5aab-2447"><paramref name="FileNumber" /> non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2447"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-2448"><paramref name="CharCount" /> &lt; 0 o &gt; 214.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2448"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f5aab-2449">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2449">Required.</span></span> <span data-ttu-id="f5aab-2450">Espressione <see langword="String" /> che specifica uno o più nomi file da eliminare.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2450"><see langword="String" /> expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="f5aab-2451">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2451"><c>PathName</c> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="f5aab-2452">Elimina i file da un disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2452">Deletes files from a disk.</span></span> <span data-ttu-id="f5aab-2453">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Kill" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2453">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="f5aab-2454">Per altre informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2454">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2455">`Kill` supporta l'utilizzo di più caratteri (`*`) e caratteri a singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2455">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f5aab-2456">**Nota sulla sicurezza** per eseguire, il `Kill` funzione richiede `Read` e `PathDiscovery` flag di <xref:System.Security.Permissions.FileIOPermission> per essere concesso al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2456">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f5aab-2457">Per ulteriori informazioni, vedere <xref:System.Security.SecurityException> [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="f5aab-2457">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2458">Questo esempio viene utilizzato il `Kill` funzione per eliminare un file da un disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2458">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2459">File di destinazione aperti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2459">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f5aab-2460">File di destinazione non trovati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2460">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f5aab-2461">Autorizzazione negata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2461">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2462">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2462">Required.</span></span> <span data-ttu-id="f5aab-2463">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2463">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f5aab-2464">Legge una sola riga da un file sequenziale aperto e la assegna a una variabile <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2464">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2465">Legge una sola riga da un file sequenziale aperto e la assegna a una variabile <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2465">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2466">Il `LineInput` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2466">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2467">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2467">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2468">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2468">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2469">I dati letti con `LineInput` vengono generalmente scritti in un file utilizzando `Print`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2469">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2470">Durante la lettura da file, non per prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2470">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f5aab-2471">Ad esempio, un file denominato Form1. vb non sia un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2471">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="f5aab-2472">Il `LineInput` funzione legge da un file di un carattere alla volta finché incontra un ritorno a capo (`Chr(13)`) o un ritorno a capo/avanzamento riga (`Chr(13) + Chr(10)`) sequenza.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2472">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="f5aab-2473">Le sequenze di avanzamento di ritorno a capo/riga vengono ignorate anziché aggiunte alla stringa di caratteri.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2473">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2474">La lettura da un file utilizzando il `LineInput` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2474">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2475">Questo esempio viene utilizzato il `LineInput` funzione per leggere una riga in un file sequenziale e assegnarlo a una variabile.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2475">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="f5aab-2476">In questo esempio si presuppone che `TestFile` è un file di testo con più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2476">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="f5aab-2477">Raggiunta la fine del file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2477">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f5aab-2478"><paramref name="FileNumber" /> non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2478"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2479">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2479">Required.</span></span> <span data-ttu-id="f5aab-2480">Qualsiasi numero di file <see langword="Integer" /> valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2480">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="f5aab-2481">Restituisce un valore <see langword="Long" /> che specifica la posizione corrente di lettura/scrittura in un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2481">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2482">Restituisce un valore <see langword="Long" /> che specifica la posizione corrente di lettura/scrittura in un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2482">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2483">Il `Loc` funzione è in base zero, utilizzarla per recuperare il primo byte in un file, verrà restituito 0.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2483">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="f5aab-2484">Il `Loc` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2484">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2485">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2485">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2486">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2486">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2487">Di seguito viene descritto il valore restituito per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2487">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="f5aab-2488">Modalità</span><span class="sxs-lookup"><span data-stu-id="f5aab-2488">Mode</span></span>|<span data-ttu-id="f5aab-2489">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="f5aab-2489">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f5aab-2490">Numero dell'ultimo record letto o scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2490">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="f5aab-2491">Posizione corrente di byte nel file diviso per 128.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2491">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="f5aab-2492">Tuttavia, le informazioni restituite dalla `Loc` per file sequenziali è necessaria né utilizzato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2492">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="f5aab-2493">Posizione dell'ultimo byte letti o scritti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2493">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2494">Questo esempio viene utilizzato il `Loc` funzione per restituire la posizione di lettura/scrittura corrente in un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2494">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="f5aab-2495">In questo esempio si presuppone che `MyFile` è un file di testo con più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2495">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2496">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2496">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-2497">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2497">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f5aab-2498">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2498">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f5aab-2499">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2499">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2500">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2500">Required.</span></span> <span data-ttu-id="f5aab-2501">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2501">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f5aab-2502">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2502">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f5aab-2503">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2503">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f5aab-2504">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2504">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2505">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso al file stesso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2505">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f5aab-2506">`Lock` e `Unlock` vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2506">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f5aab-2507">Gli argomenti da `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2507">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f5aab-2508">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sia per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2508">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f5aab-2509">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2509">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f5aab-2510">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2510">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2511">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2511">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f5aab-2512">In questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2512">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2513">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2513">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2514">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2514">Required.</span></span> <span data-ttu-id="f5aab-2515">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2515">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="f5aab-2516">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2516">Optional.</span></span> <span data-ttu-id="f5aab-2517">Numero del record o byte da bloccare o sbloccare</span><span class="sxs-lookup"><span data-stu-id="f5aab-2517">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="f5aab-2518">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2518">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f5aab-2519">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2519">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f5aab-2520">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2520">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2521">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso al file stesso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2521">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f5aab-2522">`Lock` e `Unlock` vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2522">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f5aab-2523">Gli argomenti da `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2523">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f5aab-2524">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sia per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2524">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f5aab-2525">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2525">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f5aab-2526">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2526">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2527">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2527">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f5aab-2528">In questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2528">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2529">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2529">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2530">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2530">Required.</span></span> <span data-ttu-id="f5aab-2531">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2531">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="f5aab-2532">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2532">Optional.</span></span> <span data-ttu-id="f5aab-2533">Numero del primo record o byte da bloccare o sbloccare.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2533">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="f5aab-2534">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2534">Optional.</span></span> <span data-ttu-id="f5aab-2535">Numero dell'ultimo record o byte da bloccare o sbloccare.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2535">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="f5aab-2536">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2536">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f5aab-2537">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f5aab-2538">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2538">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2539">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso al file stesso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2539">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f5aab-2540">`Lock` e `Unlock` vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2540">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f5aab-2541">Gli argomenti da `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2541">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f5aab-2542">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sia per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2542">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f5aab-2543">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2543">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f5aab-2544">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2544">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2545">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2545">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f5aab-2546">In questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2546">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2547">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2547">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2548">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2548">Required.</span></span> <span data-ttu-id="f5aab-2549"><see langword="Integer" /> che contiene un numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2549">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="f5aab-2550">Restituisce <see langword="Long" /> che rappresenta le dimensioni, in byte, di un file aperto mediante la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2550">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f5aab-2551">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2551">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="f5aab-2552">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2552">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2553">Restituisce <see langword="Long" /> che rappresenta le dimensioni, in byte, di un file aperto mediante la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2553">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f5aab-2554">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2554">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2555">Utilizzare il `FileLen` funzione per ottenere la lunghezza di un file che non è aperta.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2555">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2556">Questo esempio viene utilizzato il `LOF` funzione per determinare le dimensioni di un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2556">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="f5aab-2557">In questo esempio si presuppone che `TestFile` è un file di testo che contiene i dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2557">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2558">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2558">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f5aab-2559">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2559">Required.</span></span> <span data-ttu-id="f5aab-2560">Espressione <see langword="String" /> che identifica la directory da creare.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2560"><see langword="String" /> expression that identifies the directory to be created.</span></span> <span data-ttu-id="f5aab-2561">Il parametro <c>Path</c> può includere l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2561">The <c>Path</c> may include the drive.</span></span> <span data-ttu-id="f5aab-2562">Se non viene specificata alcuna unità, <see langword="MkDir" /> crea la nuova directory nell'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2562">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="f5aab-2563">Crea una nuova directory.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2563">Creates a new directory.</span></span> <span data-ttu-id="f5aab-2564">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="MkDir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2564">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="f5aab-2565">Per ulteriori informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2565">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2566">Questa funzione crea una nuova directory.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2566">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2567">Questo esempio viene utilizzato il `MkDir` funzione per creare una directory.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2567">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="f5aab-2568">Se l'unità non è specificato, viene creata nella nuova directory dell'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2568">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-2569"><paramref name="Path" /> non è specificato o è vuoto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2569"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="f5aab-2570">Autorizzazione negata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2570">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2571">Directory già esistente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2571">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2572">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2572">Required.</span></span> <span data-ttu-id="f5aab-2573">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2573">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f5aab-2574">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2574">Optional.</span></span> <span data-ttu-id="f5aab-2575">Zero o più espressioni con valori delimitati da virgole da scrivere in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2575">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
 <span data-ttu-id="f5aab-2576">Le impostazioni dell'argomento <c>Output</c> sono le seguenti:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2576">The <c>Output</c> argument settings are:</span></span>  
  
 <span data-ttu-id="f5aab-2577"><see langword="T:System.IO.IOException" />: la modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2577"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="f5aab-2578"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2578"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span></span></param>
        <summary><span data-ttu-id="f5aab-2579">Scrive i dati formattati per la visualizzazione in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2579">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2580">Il `Print` e `PrintLine` funzioni vengono fornite per la compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2580">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2581">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2581">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2582">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2582">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2583">`Print` non include una riga feed alla fine di una linea. Tuttavia, `PrintLine` includono un avanzamento riga.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2583">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f5aab-2584">I dati scritti con `Print` è in genere letti da un file mediante `LineInput` o `Input`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2584">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f5aab-2585">Se si omette `Output` per `PrintLine`, viene visualizzata una riga vuota per il file, ad `Print`, niente è output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2585">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f5aab-2586">Più espressioni separate da una virgola verranno allineate su limiti della scheda, ma la combinazione di virgole e `TAB` può causare risultati incoerenti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2586">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f5aab-2587">Per `Boolean` dati, ovvero `True` o `False` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2587">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f5aab-2588">Il `True` e `False` parole chiave non vengono convertite, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2588">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f5aab-2589">Dati di data vengono scritti nel file utilizzando il formato di data breve standard riconosciuto dal sistema.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2589">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="f5aab-2590">Quando la data o il componente della fase manca o è zero, solo la parte fornito viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2590">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f5aab-2591">Se non verranno scritti nel file `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2591">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f5aab-2592">Tuttavia, se `Output` elenco dati `DBNull`, `Null` viene scritta nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2592">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f5aab-2593">Per `Error` dati, l'output viene visualizzato come `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2593">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f5aab-2594">Il `Error` parola chiave non viene eseguita indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2594">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f5aab-2595">Tutti i dati scritti nel file utilizzando `Print` internazionali; ovvero, i dati sia formattati correttamente utilizzando il separatore decimale appropriato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2595">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f5aab-2596">Se l'utente desidera ottenere dati da utilizzare in più lingue, `Write` deve essere utilizzato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2596">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f5aab-2597">La scrittura in un file mediante il `Print` o `PrintLine` funzioni richiede `Write` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2597">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2598">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2598">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2599">Questo esempio viene utilizzato il `Print` e `PrintLine` funzioni per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2599">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2600">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2600">Required.</span></span> <span data-ttu-id="f5aab-2601">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2601">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f5aab-2602">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2602">Optional.</span></span> <span data-ttu-id="f5aab-2603">Zero o più espressioni con valori delimitati da virgole da scrivere in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2603">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
 <span data-ttu-id="f5aab-2604">Le impostazioni dell'argomento <c>Output</c> sono le seguenti:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2604">The <c>Output</c> argument settings are:</span></span>  
  
 <span data-ttu-id="f5aab-2605"><see langword="T:System.IO.IOException" />: la modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2605"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="f5aab-2606"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2606"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span></span></param>
        <summary><span data-ttu-id="f5aab-2607">Scrive i dati formattati per la visualizzazione in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2607">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2608">Il `Print` e `PrintLine` funzioni vengono fornite per la compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2608">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2609">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2609">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2610">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2610">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2611">`Print` non include una riga feed alla fine di una linea. Tuttavia,`PrintLine` includono un avanzamento riga.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2611">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f5aab-2612">I dati scritti con `Print` è in genere letti da un file mediante `LineInput` o `Input`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2612">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f5aab-2613">Se si omette `Output` per `PrintLine`, viene visualizzata una riga vuota per il file, ad `Print`, niente è output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2613">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f5aab-2614">Più espressioni separate da una virgola verranno allineate su limiti della scheda, ma la combinazione di virgole e `TAB` può causare risultati incoerenti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2614">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f5aab-2615">Per `Boolean` dati, ovvero `True` o `False` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2615">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f5aab-2616">Il `True` e `False` parole chiave non vengono convertite, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2616">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f5aab-2617">Dati di data vengono scritti nel file utilizzando il formato di data breve standard riconosciuto dal sistema.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2617">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="f5aab-2618">Quando la data o il componente della fase manca o è zero, solo la parte fornito viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2618">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f5aab-2619">Se non verranno scritti nel file `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2619">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f5aab-2620">Tuttavia, se `Output` elenco dati `DBNull`, `Null` viene scritta nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2620">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f5aab-2621">Per `Error` dati, l'output viene visualizzato come `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2621">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f5aab-2622">Il `Error` parola chiave non viene eseguita indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2622">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f5aab-2623">Tutti i dati scritti nel file utilizzando `Print` internazionali; ovvero, i dati sia formattati correttamente utilizzando il separatore decimale appropriato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2623">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f5aab-2624">Se l'utente desidera ottenere dati da utilizzare in più lingue, `Write` deve essere utilizzato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2624">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f5aab-2625">La scrittura in un file mediante il `Print` o `PrintLine` funzioni richiede `Write` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2625">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2626">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2626">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2627">Questo esempio viene utilizzato il `Print` e `PrintLine` funzioni per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2627">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="f5aab-2628">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2628">Required.</span></span> <span data-ttu-id="f5aab-2629">Espressione <see langword="String" /> che specifica il nome file esistente e il relativo percorso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2629"><see langword="String" /> expression that specifies the existing file name and location.</span></span> <span data-ttu-id="f5aab-2630">Il parametro <c>OldPath</c> può includere la directory e l'unità del file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2630"><c>OldPath</c> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="f5aab-2631">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2631">Required.</span></span> <span data-ttu-id="f5aab-2632">Espressione <see langword="String" /> che specifica il nuovo nome file e il relativo percorso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2632"><see langword="String" /> expression that specifies the new file name and location.</span></span> <span data-ttu-id="f5aab-2633">Il parametro <c>NewPath</c> può includere la directory e l'unità del percorso di destinazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2633"><c>NewPath</c> may include directory and drive of the destination location.</span></span> <span data-ttu-id="f5aab-2634">Il nome file specificato da <c>NewPath</c> non deve essere già esistente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2634">The file name specified by <c>NewPath</c> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="f5aab-2635">Rinomina un file o una directory su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2635">Renames a disk file or directory.</span></span> <span data-ttu-id="f5aab-2636">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Rename" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2636">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="f5aab-2637">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2637">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2638">Il`Rename` funzione Rinomina un file e lo sposta in una directory diversa, se necessario.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2638">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="f5aab-2639">Il `Rename` funzione è possibile spostare un file in unità, ma è possibile rinominare solo una directory esistente quando entrambi `NewPath` e `OldPath` si trovano nella stessa unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2639">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="f5aab-2640">`Rename` non è possibile creare un nuovo file o directory.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2640">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="f5aab-2641">Utilizzo di `Rename` funzione in un file aperto viene generato un errore.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2641">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="f5aab-2642">Prima di rinominarlo, è necessario chiudere un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2642">You must close an open file before renaming it.</span></span> <span data-ttu-id="f5aab-2643">`Rename` argomenti non possono includere più caratteri (\*) e caratteri jolly (?) con caratteri a singolo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2643">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f5aab-2644">Quando si utilizza `Rename` per copiare un file da un percorso non protetto in un percorso protetto, il file manterrà i diritti meno restrittivi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2644">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="f5aab-2645">Verifica per accertarsi di non introdurre possibili rischi di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2645">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2646">Questo esempio viene utilizzato il `Rename` funzione per rinominare un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2646">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="f5aab-2647">Ai fini di questo esempio, si supponga che esistano le directory che sono già specificate.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2647">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5aab-2648">Il percorso non è valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2648">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f5aab-2649">Il file <paramref name="OldPath" /> non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2649"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2650">Impossibile rinominare con il nome di un'altro dispositivo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2650">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5aab-2651">Chiude tutti i file su disco aperti mediante la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2651">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f5aab-2652">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Reset" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2652">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="f5aab-2653">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2653">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2654">Il `Reset` funzione chiude tutti i file aperti per la `FileOpen` funzione e ha la stessa funzione `FileClose()` senza parametri.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2654">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2655">Questo esempio viene utilizzato il `Reset` funzione per chiudere tutti i file aperti e scrivere il contenuto di tutti i buffer di file su disco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2655">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="f5aab-2656">Si noti l'uso del `Object` variabile `FileNumber` come stringa sia un numero.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2656">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="f5aab-2657">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2657">Required.</span></span> <span data-ttu-id="f5aab-2658">Espressione <see langword="String" /> che identifica la directory o la cartella da rimuovere.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2658"><see langword="String" /> expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="f5aab-2659">Il parametro <c>Path</c> può includere l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2659"><c>Path</c> can include the drive.</span></span> <span data-ttu-id="f5aab-2660">Se non viene specificata alcuna unità, <see langword="RmDir" /> rimuove la directory nell'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2660">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="f5aab-2661">Rimuove una directory esistente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2661">Removes an existing directory.</span></span> <span data-ttu-id="f5aab-2662">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="RmDir" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="f5aab-2663">Per ulteriori informazioni, vedere <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2663">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2664">Si verifica un errore se si tenta di utilizzare `RmDir` in una directory che contiene i file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2664">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="f5aab-2665">Utilizzare il `Kill` funzione eliminare tutti i file prima di tentare di rimuovere una directory.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2665">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2666">Questo esempio viene utilizzato il `RmDir` funzione per rimuovere una directory esistente.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2666">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-2667"><paramref name="Path" /> non è specificato o è vuoto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2667"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2668">La directory di destinazione contiene file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2668">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="f5aab-2669">La directory non esiste.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2669">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-2670">Restituisce <see langword="Long" />, che specifica la posizione corrente di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />, o imposta la posizione per la successiva operazione di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2670">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f5aab-2671">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2671">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f5aab-2672">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2672">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2673">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2673">Required.</span></span> <span data-ttu-id="f5aab-2674"><see langword="Integer" /> che contiene un numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2674">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="f5aab-2675">Restituisce <see langword="Long" />, che specifica la posizione corrente di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />, o imposta la posizione per la successiva operazione di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2675">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f5aab-2676">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f5aab-2677">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2678">Restituisce <see langword="Long" />, che specifica la posizione corrente di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />, o imposta la posizione per la successiva operazione di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2678">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2679">`Seek` Restituisce un valore compreso tra 1 e 2.147.483.647 (equivalente a 2 ^ 31-1), inclusi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2679">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f5aab-2680">Di seguito vengono descritti i valori restituiti per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2680">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f5aab-2681">Modalità</span><span class="sxs-lookup"><span data-stu-id="f5aab-2681">Mode</span></span>|<span data-ttu-id="f5aab-2682">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="f5aab-2682">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f5aab-2683">Numero del record successivo letto o scritto</span><span class="sxs-lookup"><span data-stu-id="f5aab-2683">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f5aab-2684">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2684">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f5aab-2685">Posizione di byte in cui viene eseguita l'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2685">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f5aab-2686">È il primo byte in un file nella posizione 1, il secondo byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2686">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2687">Questo esempio viene utilizzato il `Seek` funzione per restituire la posizione corrente del file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2687">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f5aab-2688">Nell'esempio si presuppone `TestFile` è un file che contiene i record della struttura `Record`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2688">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f5aab-2689">Per i file aperti `Random` modalità `Seek` restituisce il numero di record successivo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2689">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f5aab-2690">Per i file aperti in modalità diversa da `Random` modalità `Seek` restituisce la posizione di byte in cui viene eseguita l'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2690">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f5aab-2691">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2691">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f5aab-2692">Questo esempio viene utilizzato il `Seek` funzione per impostare la posizione per la successiva operazione di lettura o scrittura in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2692">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f5aab-2693">Per i file aperti in modalità diversa da `Random` modalità `Seek` imposta la posizione di byte in cui viene eseguita l'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2693">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f5aab-2694">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2695">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2695">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2696">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2696">Required.</span></span> <span data-ttu-id="f5aab-2697"><see langword="Integer" /> che contiene un numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2697">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="f5aab-2698">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2698">Required.</span></span> <span data-ttu-id="f5aab-2699">Numero compreso nell'intervallo da 1 a 2.147.483.647 inclusi, che indica dove deve aver luogo la successiva operazione di lettura/scrittura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2699">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="f5aab-2700">Restituisce <see langword="Long" />, che specifica la posizione corrente di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />, o imposta la posizione per la successiva operazione di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2700">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="f5aab-2701">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2701">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="f5aab-2702">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2702">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2703">`Seek` Restituisce un valore compreso tra 1 e 2.147.483.647 (equivalente a 2 ^ 31-1), inclusi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2703">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f5aab-2704">Di seguito vengono descritti i valori restituiti per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2704">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f5aab-2705">Modalità</span><span class="sxs-lookup"><span data-stu-id="f5aab-2705">Mode</span></span>|<span data-ttu-id="f5aab-2706">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="f5aab-2706">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f5aab-2707">Numero del record successivo letto o scritto</span><span class="sxs-lookup"><span data-stu-id="f5aab-2707">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f5aab-2708">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f5aab-2708">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f5aab-2709">Posizione di byte in cui viene eseguita l'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2709">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f5aab-2710">È il primo byte in un file nella posizione 1, il secondo byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2710">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2711">Questo esempio viene utilizzato il `Seek` funzione per restituire la posizione corrente del file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2711">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f5aab-2712">Nell'esempio si presuppone `TestFile` è un file che contiene i record della struttura `Record`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2712">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f5aab-2713">Per i file aperti `Random` modalità `Seek` restituisce il numero di record successivo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2713">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f5aab-2714">Per i file aperti in modalità diversa da `Random` modalità `Seek` restituisce la posizione di byte in cui viene eseguita l'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2714">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f5aab-2715">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2715">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f5aab-2716">Questo esempio viene utilizzato il `Seek` funzione per impostare la posizione per la successiva operazione di lettura o scrittura in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2716">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f5aab-2717">Per i file aperti in modalità diversa da `Random` modalità `Seek` imposta la posizione di byte in cui viene eseguita l'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2717">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f5aab-2718">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2718">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2719">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2719">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="f5aab-2720">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2720">Required.</span></span> <span data-ttu-id="f5aab-2721">Espressione <see langword="String" /> che specifica un nome file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2721"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="f5aab-2722">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2722"><c>PathName</c> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="f5aab-2723">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2723">Required.</span></span> <span data-ttu-id="f5aab-2724">Costante o espressione numerica la cui somma specifica attributi di file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2724">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="f5aab-2725">Imposta le informazioni degli attributi per un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2725">Sets attribute information for a file.</span></span> <span data-ttu-id="f5aab-2726">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="SetAttr" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2726">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="f5aab-2727">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2727">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2728">Se si tenta di impostare gli attributi di un file aperto, si verifica un errore di run-time.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2728">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="f5aab-2729">Il `Attributes` argomento valori di enumerazione sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2729">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f5aab-2730">Valore</span><span class="sxs-lookup"><span data-stu-id="f5aab-2730">Value</span></span>|<span data-ttu-id="f5aab-2731">Costante</span><span class="sxs-lookup"><span data-stu-id="f5aab-2731">Constant</span></span>|<span data-ttu-id="f5aab-2732">Descrizione</span><span class="sxs-lookup"><span data-stu-id="f5aab-2732">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="f5aab-2733">Normale (impostazione predefinita).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2733">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f5aab-2734">Sola lettura.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2734">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f5aab-2735">Nascosto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2735">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f5aab-2736">File di sistema.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2736">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f5aab-2737">Etichetta del volume</span><span class="sxs-lookup"><span data-stu-id="f5aab-2737">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f5aab-2738">Directory o cartella.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2738">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f5aab-2739">Il file è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2739">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f5aab-2740">Il file ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2740">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2741">Queste enumerazioni sono specificate dal linguaggio Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2741">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="f5aab-2742">I nomi possono essere utilizzati in qualsiasi punto nel codice anziché i valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2742">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2743">Questo esempio viene utilizzato il `SetAttr` funzione per impostare gli attributi di un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2743">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f5aab-2744">Tipo di <paramref name="Attribute" /> non valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2744"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="f5aab-2745">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2745">Required.</span></span> <span data-ttu-id="f5aab-2746">Numero di spazi da inserire prima di visualizzare o stampare la successiva espressione di un elenco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2746">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="f5aab-2747">Utilizzato con le funzioni <see langword="Print" /> o <see langword="PrintLine" /> per posizionare l'output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2747">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2748">Utilizzato con le funzioni <see langword="Print" /> o <see langword="PrintLine" /> per posizionare l'output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2748">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2749">Se `Count` è minore della larghezza della riga di output, la posizione successiva immediatamente seguirà il numero di spazi stampati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2749">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="f5aab-2750">Se`Count` è maggiore della larghezza della riga di output, `SPC` calcola la posizione successiva utilizzando la formula:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2750">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f5aab-2751">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="f5aab-2751">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="f5aab-2752">Ad esempio, se la posizione di stampa è 24, la larghezza della riga di output è 80 e si specifica `SPC(90)`, la stampa successiva inizierà dalla posizione 34 (posizione di stampa corrente + il resto di 90/80).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2752">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="f5aab-2753">Se la differenza tra la posizione di stampa e la larghezza della riga di output è minore di `Count` (o `Count` `Mod` *larghezza*), il `SPC` funzione passerà all'inizio della riga successiva e genera l'errore spazi uguale a `Count` – (*larghezza* – *currentprintposition*).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2753">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2754">Verificare che le colonne di tabella sono sufficiente a consentire caratteri ampi.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2754">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2755">Questo esempio viene utilizzato il `SPC` funzione per posizionare l'output in un file e nel **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2755">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-2756">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2756">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5aab-2757">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2757">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2758">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2759">Se la posizione di stampa nella riga corrente è maggiore `Column`, `TAB` passerà al valore di colonna è uguale a `Column` nella riga successiva di output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2759">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f5aab-2760">Se `Column` è minore di 1, `TAB` Sposta la posizione di stampa alla colonna 1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2760">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f5aab-2761">Se `Column` è maggiore della larghezza di riga di output, `TAB` calcola la posizione successiva utilizzando la formula:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2761">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f5aab-2762">Larghezza della colonna Mod</span><span class="sxs-lookup"><span data-stu-id="f5aab-2762">Column Mod width</span></span>  
  
 <span data-ttu-id="f5aab-2763">Ad esempio, se *larghezza* è 80 e si specifica `TAB(90)`, la stampa successiva inizierà dalla colonna 10 (il resto di 90/80).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2763">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f5aab-2764">Se `Column` è minore della posizione di stampa corrente, la stampa inizierà nella riga successiva in corrispondenza della posizione di stampa calcolata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2764">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f5aab-2765">Se la posizione di stampa calcolata è maggiore della posizione corrente di stampa, posizione di stampa la stampa inizierà dalla calcolata nella stessa riga.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2765">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f5aab-2766">La posizione più a sinistra di stampa in una riga di output è sempre 1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2766">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f5aab-2767">Quando si utilizza il `Print` o `PrintLine` funzioni per la stampa su file, l'ultima posizione corrisponde alla larghezza corrente del file di output, è possibile impostare utilizzando il `FileWidth` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2767">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f5aab-2768">Il `TAB` funzione può essere utilizzata anche con il `WriteLine` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2768">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f5aab-2769">Non può essere usato con <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2769">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2770">Verificare che le colonne di tabella sono sufficiente a contenere i caratteri "wide".</span><span class="sxs-lookup"><span data-stu-id="f5aab-2770">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2771">Questo esempio viene utilizzato il `TAB` funzione per posizionare l'output in un file e nel **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2771">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="f5aab-2772">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2772">Optional.</span></span> <span data-ttu-id="f5aab-2773">Numero della colonna a cui passare prima di visualizzare o stampare la successiva espressione di un elenco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2773">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="f5aab-2774">In caso di omissione, <see langword="TAB" /> sposterà il punto di inserimento all'inizio della successiva area di stampa.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2774">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="f5aab-2775">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2775">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="f5aab-2776">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2776">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2777">Se la posizione di stampa nella riga corrente è maggiore di `Column`, `TAB` passerà al valore di colonna è uguale a `Column` nella riga successiva di output.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2777">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f5aab-2778">Se `Column` è minore di 1, `TAB` Sposta la posizione di stampa alla colonna 1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2778">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f5aab-2779">Se `Column` è maggiore della larghezza della riga di output, `TAB` calcola la posizione successiva utilizzando la formula:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2779">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f5aab-2780">Larghezza della colonna Mod</span><span class="sxs-lookup"><span data-stu-id="f5aab-2780">Column Mod width</span></span>  
  
 <span data-ttu-id="f5aab-2781">Ad esempio, se *larghezza* è 80 e si specifica `TAB(90)`, la stampa successiva inizierà dalla colonna 10 (il resto di 90/80).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2781">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f5aab-2782">Se `Column` è minore della posizione di stampa corrente, la stampa inizierà nella riga successiva in corrispondenza della posizione di stampa calcolata.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2782">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f5aab-2783">Se la posizione di stampa calcolata è maggiore della posizione corrente di stampa, posizione di stampa la stampa inizierà dalla calcolata nella stessa riga.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2783">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f5aab-2784">La posizione più a sinistra di stampa in una riga di output è sempre 1.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2784">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f5aab-2785">Quando si utilizza il `Print` o `PrintLine` funzioni per la stampa su file, l'ultima posizione corrisponde alla larghezza corrente del file di output, è possibile impostare utilizzando il `FileWidth` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2785">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f5aab-2786">Il `TAB` funzione può essere utilizzata anche con il `WriteLine` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2786">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f5aab-2787">Non può essere usato con <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2787">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f5aab-2788">Verificare che le colonne di tabella sono sufficiente a contenere i caratteri "wide".</span><span class="sxs-lookup"><span data-stu-id="f5aab-2788">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2789">Questo esempio viene utilizzato il `TAB` funzione per posizionare l'output in un file e nel **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2789">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5aab-2790">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f5aab-2791">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f5aab-2792">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2793">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2793">Required.</span></span> <span data-ttu-id="f5aab-2794">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2794">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="f5aab-2795">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2795">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f5aab-2796">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f5aab-2797">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2798">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso al file stesso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2798">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f5aab-2799">`Lock` e `Unlock` vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2799">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f5aab-2800">Gli argomenti da `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2800">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f5aab-2801">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sia per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2801">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f5aab-2802">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2802">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f5aab-2803">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2803">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2804">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2804">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f5aab-2805">In questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2805">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2806">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2806">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2807">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2807">Required.</span></span> <span data-ttu-id="f5aab-2808">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2808">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="f5aab-2809">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2809">Optional.</span></span> <span data-ttu-id="f5aab-2810">Numero del record o byte da bloccare o sbloccare</span><span class="sxs-lookup"><span data-stu-id="f5aab-2810">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="f5aab-2811">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2811">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f5aab-2812">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2812">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f5aab-2813">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2813">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2814">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso al file stesso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2814">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f5aab-2815">`Lock` e `Unlock` vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2815">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f5aab-2816">Gli argomenti da `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2816">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f5aab-2817">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sia per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2817">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f5aab-2818">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2818">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f5aab-2819">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2819">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2820">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2820">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f5aab-2821">In questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2821">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2822">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2822">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2823">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2823">Required.</span></span> <span data-ttu-id="f5aab-2824">Qualsiasi numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2824">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="f5aab-2825">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2825">Optional.</span></span> <span data-ttu-id="f5aab-2826">Numero del primo record o byte da bloccare o sbloccare.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2826">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="f5aab-2827">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2827">Optional.</span></span> <span data-ttu-id="f5aab-2828">Numero dell'ultimo record o byte da bloccare o sbloccare.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2828">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="f5aab-2829">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2829">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="f5aab-2830">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="f5aab-2831">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2832">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso al file stesso.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2832">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f5aab-2833">`Lock` e `Unlock` vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2833">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f5aab-2834">Gli argomenti da `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2834">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f5aab-2835">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sia per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2835">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f5aab-2836">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2836">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f5aab-2837">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2837">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2838">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2838">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f5aab-2839">In questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2839">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2840">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2840">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2841">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2841">Required.</span></span> <span data-ttu-id="f5aab-2842">Espressione <see langword="Integer" /> contenente un numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2842">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f5aab-2843">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2843">Optional.</span></span> <span data-ttu-id="f5aab-2844">Una o più espressioni con valori delimitati da virgole da scrivere in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2844">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="f5aab-2845">Scrive dati in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2845">Writes data to a sequential file.</span></span> <span data-ttu-id="f5aab-2846">I dati scritti con <see langword="Write" /> vengono in genere letti da un file usando <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2846">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2847">Il `Write` e `WriteLine` funzioni vengono fornite per la compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2847">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2848">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2848">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2849">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2849">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2850">Se si omette `Output`, una riga vuota viene stampata il file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2850">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f5aab-2851">Più espressioni possono essere separate da una virgola.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2851">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f5aab-2852">A differenza di `Print` funzione, il `Write` funzione inserisce virgole tra gli elementi e le stringhe tra virgolette quando vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2852">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f5aab-2853">Non è necessario inserire delimitatori espliciti nell'elenco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2853">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f5aab-2854">Quando `Write` viene utilizzato per scrivere dati in un file, solo numerico, `Boolean`, data, null e `Error` sono supportati i formati di dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2854">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f5aab-2855">Le seguenti convenzioni universali in modo che i dati possono sempre essere letti e interpretati correttamente mediante `Input`, indipendentemente dalle impostazioni locali:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2855">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f5aab-2856">Dati numerici vengono sempre scritti utilizzando il punto come separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2856">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f5aab-2857">Per `Boolean` dati, ovvero `#TRUE#` o `#FALSE#` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2857">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f5aab-2858">Il `True` e `False` parole chiave non vengono convertite, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2858">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f5aab-2859">Le date vengono scritte nel file utilizzando il formato di data universale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2859">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f5aab-2860">Quando la data o il componente della fase manca o è zero, solo la parte fornito viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2860">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f5aab-2861">Se non verranno scritti nel file `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2861">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f5aab-2862">Tuttavia, per i dati null, `#NULL#` viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2862">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f5aab-2863">Per `Error` dati, l'output viene visualizzato come `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2863">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f5aab-2864">Il `Error` parola chiave non viene tradotta, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2864">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f5aab-2865">`WriteLine` Inserisce un carattere di nuova riga (vale a dire un ritorno a capo/avanzamento riga, o `Chr(13) + Chr(10)`), dopo l'ultimo carattere scritto `Output` al file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2865">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f5aab-2866">È possibile incorporare in una stringa tra virgolette con virgolette doppie, o "".</span><span class="sxs-lookup"><span data-stu-id="f5aab-2866">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f5aab-2867">Ad esempio,</span><span class="sxs-lookup"><span data-stu-id="f5aab-2867">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f5aab-2868">Restituisce una stringa con il valore di `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2868">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f5aab-2869">La scrittura in un file mediante il `Write` o `WriteLine` funzioni richiede `Append` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2869">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2870">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2870">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2871">Questo esempio viene utilizzato il `Write` funzione per scrivere i dati non elaborati in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2871">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="f5aab-2872">La modalità File non è valida.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2872">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="f5aab-2873">Obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2873">Required.</span></span> <span data-ttu-id="f5aab-2874">Espressione <see langword="Integer" /> contenente un numero di file valido.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2874">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="f5aab-2875">Facoltativo.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2875">Optional.</span></span> <span data-ttu-id="f5aab-2876">Una o più espressioni con valori delimitati da virgole da scrivere in un file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2876">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="f5aab-2877">Scrive dati in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2877">Writes data to a sequential file.</span></span> <span data-ttu-id="f5aab-2878">I dati scritti con <see langword="Write" /> vengono in genere letti da un file usando <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2878">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5aab-2879">Il `Write` e `WriteLine` funzioni vengono fornite per la compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2879">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f5aab-2880">Per le applicazioni non preesistenti di `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2880">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f5aab-2881">Per ulteriori informazioni, vedere [accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f5aab-2881">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f5aab-2882">Se si omette `Output`, una riga vuota viene stampata il file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2882">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f5aab-2883">Più espressioni possono essere separate da una virgola.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2883">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f5aab-2884">A differenza di `Print` funzione, il `Write` funzione inserisce virgole tra gli elementi e le stringhe tra virgolette quando vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2884">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f5aab-2885">Non è necessario inserire delimitatori espliciti nell'elenco.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2885">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f5aab-2886">Quando `Write` viene utilizzato per scrivere dati in un file, solo numerico, `Boolean`, data, null e `Error` sono supportati i formati di dati.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2886">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f5aab-2887">Le seguenti convenzioni universali in modo che i dati possono sempre essere letti e interpretati correttamente mediante `Input`, indipendentemente dalle impostazioni locali:</span><span class="sxs-lookup"><span data-stu-id="f5aab-2887">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f5aab-2888">Dati numerici vengono sempre scritti utilizzando il punto come separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2888">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f5aab-2889">Per `Boolean` dati, ovvero `#TRUE#` o `#FALSE#` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2889">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f5aab-2890">Il `True` e `False` parole chiave non vengono convertite, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2890">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f5aab-2891">Le date vengono scritte nel file utilizzando il formato di data universale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2891">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f5aab-2892">Quando la data o il componente della fase manca o è zero, solo la parte fornito viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2892">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f5aab-2893">Se non verranno scritti nel file `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2893">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f5aab-2894">Tuttavia, per i dati null, `#NULL#` viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2894">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f5aab-2895">Per `Error` dati, l'output viene visualizzato come `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2895">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f5aab-2896">Il `Error` parola chiave non viene tradotta, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2896">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f5aab-2897">`WriteLine` Inserisce un carattere di nuova riga (vale a dire un ritorno a capo/avanzamento riga, o `Chr(13) + Chr(10)`), dopo l'ultimo carattere scritto `Output` al file.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2897">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f5aab-2898">È possibile incorporare in una stringa tra virgolette con virgolette doppie, o "".</span><span class="sxs-lookup"><span data-stu-id="f5aab-2898">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f5aab-2899">Ad esempio,</span><span class="sxs-lookup"><span data-stu-id="f5aab-2899">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f5aab-2900">Restituisce una stringa con il valore di `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2900">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f5aab-2901">La scrittura in un file mediante il `Write` o `WriteLine` funzioni richiede `Append` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2901">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f5aab-2902">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2902">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5aab-2903">Questo esempio viene utilizzato il `Write` funzione per scrivere i dati non elaborati in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f5aab-2903">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>