<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="757b138ad08a57ad8a16b1f7210ead2e45005193" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36728096" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1a57d-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1a57d-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="1a57d-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1a57d-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="1a57d-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1a57d-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-104">Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri libreria run-time che accedono ai file e cartelle.</span><span class="sxs-lookup"><span data-stu-id="1a57d-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-105">Questo esempio viene utilizzato il `GetAttr` funzione per determinare gli attributi di un file e directory o una cartella.</span><span class="sxs-lookup"><span data-stu-id="1a57d-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="1a57d-106">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-106">Required.</span>
          </span>
          <span data-ttu-id="1a57d-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="1a57d-108">
            <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="1a57d-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-110">Changes the current directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="1a57d-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-113">Il `ChDir` funzione consente di modificare la directory predefinita, ma non l'unità predefinita.</span><span class="sxs-lookup"><span data-stu-id="1a57d-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="1a57d-114">Ad esempio, se l'unità predefinita è C, l'istruzione seguente modifica la directory predefinita nell'unità D, mentre C rimane l'unità predefinita:</span><span class="sxs-lookup"><span data-stu-id="1a57d-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="1a57d-115">È possibile apportare relativo modifiche alla directory è necessario digitare due punti, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="1a57d-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-116">Il `ChDir` funzione richiede l'autorizzazione per codice non gestito, che potrebbero influire sulla relativa esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="1a57d-117">Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e.</span><span class="sxs-lookup"><span data-stu-id="1a57d-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-118">Questo esempio viene utilizzato il `ChDir` funzione per modificare la directory corrente o una cartella.</span><span class="sxs-lookup"><span data-stu-id="1a57d-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-119">
            <paramref name="Path" /> is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="1a57d-120">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-121">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="1a57d-122">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-122">Required.</span>
          </span>
          <span data-ttu-id="1a57d-123">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="1a57d-124">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="1a57d-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-126">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-127">Il `ChDrive` funzione richiede l'autorizzazione per codice non gestito, che potrebbero influire sulla relativa esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="1a57d-128">Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="1a57d-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-129">Questo esempio viene utilizzato il `ChDrive` funzione per modificare l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="1a57d-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="1a57d-130">La funzione genera un'eccezione se l'unità non esiste.</span><span class="sxs-lookup"><span data-stu-id="1a57d-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-131">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="1a57d-132">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-132">Required.</span>
          </span>
          <span data-ttu-id="1a57d-133">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="1a57d-134">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="1a57d-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-136">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-137">Il `ChDrive` funzione richiede l'autorizzazione per codice non gestito, che potrebbero influire sulla relativa esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="1a57d-138">Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="1a57d-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-139">Questo esempio viene utilizzato il `ChDrive` funzione per modificare l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="1a57d-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="1a57d-140">La funzione genera un'eccezione se l'unità non esiste.</span><span class="sxs-lookup"><span data-stu-id="1a57d-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-141">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-142">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="1a57d-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="1a57d-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-145">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="1a57d-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="1a57d-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-148">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a57d-149">Questo esempio viene utilizzato il `CurDir` funzione per restituire il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="1a57d-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="1a57d-150">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-150">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-151">
            <see langword="Char" /> expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="1a57d-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-153">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="1a57d-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="1a57d-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-156">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a57d-157">Questo esempio viene utilizzato il `CurDir` funzione per restituire il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="1a57d-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="1a57d-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="1a57d-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-165">Il `Dir` funzione supporta l'utilizzo di più caratteri (`*`) e caratteri a singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="1a57d-166">`VbVolume` Restituisce l'etichetta del volume per l'unità anziché un nome file specifico.</span><span class="sxs-lookup"><span data-stu-id="1a57d-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="1a57d-167">È necessario fornire un `PathName` la prima volta che si chiama il `Dir` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="1a57d-168">Per recuperare l'elemento successivo, è possibile eseguire chiamate successive al `Dir` funzione senza parametri.</span><span class="sxs-lookup"><span data-stu-id="1a57d-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-169">Per eseguire correttamente la `Dir` funzione richiede il <xref:System.Security.Permissions.FileIOPermissionAccess.Read> e <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flag di <xref:System.Security.Permissions.FileIOPermission> per essere concesso al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="1a57d-170">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="1a57d-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="1a57d-171">Il `Attributes` valori di enumerazione degli argomenti sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="1a57d-172">Valore</span><span class="sxs-lookup"><span data-stu-id="1a57d-172">Value</span></span>|<span data-ttu-id="1a57d-173">Costante</span><span class="sxs-lookup"><span data-stu-id="1a57d-173">Constant</span></span>|<span data-ttu-id="1a57d-174">Descrizione</span><span class="sxs-lookup"><span data-stu-id="1a57d-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="1a57d-175">Predefinita.</span><span class="sxs-lookup"><span data-stu-id="1a57d-175">Default.</span></span> <span data-ttu-id="1a57d-176">Specifica i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="1a57d-177">Specifica i file di sola lettura e file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="1a57d-178">Specifica i file nascosti e anche i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="1a57d-179">Specifica i file di sistema e file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="1a57d-180">Specifica l'etichetta di volume. Se qualsiasi altro attributo viene specificato, `vbVolume` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="1a57d-181">Specifica le directory o cartelle, nonché i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="1a57d-182">File è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="1a57d-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="1a57d-183">File ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="1a57d-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-184">Queste enumerazioni sono specificate per il linguaggio Visual Basic e possono essere utilizzate ovunque nel codice anziché i valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-185">Questo esempio viene utilizzato il `Dir` per verificare la presenza di determinati file e directory.</span><span class="sxs-lookup"><span data-stu-id="1a57d-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="1a57d-186">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-186">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-187">
            <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="1a57d-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="1a57d-189">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-189">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="1a57d-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="1a57d-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-196">Il `Dir` funzione supporta l'utilizzo di più caratteri (`*`) e caratteri a singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="1a57d-197">`VbVolume` Restituisce l'etichetta del volume per l'unità anziché un nome file specifico.</span><span class="sxs-lookup"><span data-stu-id="1a57d-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="1a57d-198">È necessario fornire un `PathName` la prima volta che si chiama il `Dir` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="1a57d-199">Per recuperare l'elemento successivo, è possibile eseguire chiamate successive al `Dir` funzione senza parametri.</span><span class="sxs-lookup"><span data-stu-id="1a57d-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-200">Per eseguire correttamente la `Dir` funzione richiede il <xref:System.Security.Permissions.FileIOPermissionAccess.Read> e <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flag di <xref:System.Security.Permissions.FileIOPermission> per essere concesso al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="1a57d-201">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="1a57d-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="1a57d-202">Il `Attributes` valori di enumerazione degli argomenti sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="1a57d-203">Valore</span><span class="sxs-lookup"><span data-stu-id="1a57d-203">Value</span></span>|<span data-ttu-id="1a57d-204">Costante</span><span class="sxs-lookup"><span data-stu-id="1a57d-204">Constant</span></span>|<span data-ttu-id="1a57d-205">Descrizione</span><span class="sxs-lookup"><span data-stu-id="1a57d-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="1a57d-206">Predefinita.</span><span class="sxs-lookup"><span data-stu-id="1a57d-206">Default.</span></span> <span data-ttu-id="1a57d-207">Specifica i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="1a57d-208">Specifica i file di sola lettura, oltre ai file che non hanno attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="1a57d-209">Specifica i file nascosti, oltre ai file che non hanno attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="1a57d-210">Specifica i file di sistema, oltre ai file che non hanno attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="1a57d-211">Specifica l'etichetta di volume. Se qualsiasi altro attributo viene specificato, `vbVolume` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="1a57d-212">Specifica le directory o cartelle, oltre ai file che non hanno attributi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="1a57d-213">File è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="1a57d-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="1a57d-214">File ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="1a57d-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-215">Queste enumerazioni sono specificate per il linguaggio Visual Basic e possono essere utilizzate ovunque nel codice anziché i valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-216">Questo esempio viene utilizzato il `Dir` per verificare la presenza di determinati file e directory.</span><span class="sxs-lookup"><span data-stu-id="1a57d-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-217">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-217">Required.</span>
          </span>
          <span data-ttu-id="1a57d-218">An <see langword="Integer" /> that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-221">Utilizzare `EOF` per evitare l'errore generato dal tentativo di ottenere l'input oltre la fine di un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="1a57d-222">Il `EOF` restituito dalla funzione `False` fino a quando non è stata raggiunta la fine del file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="1a57d-223">Con i file aperti per `Random` o `Binary` access `EOF` restituisce `False` fino all'ultima esecuzione `FileGet` funzione in grado di leggere un record completo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="1a57d-224">Con i file aperti per `Binary` accedere, un tentativo di leggere il file utilizzando il `Input` funzione finché `EOF` restituisce `True` genera un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="1a57d-225">Usare la `LOF` e `Loc` funzioni anziché `EOF` durante la lettura di file binari con `Input`, o utilizzare `Get` quando si utilizza il `EOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="1a57d-226">Con i file aperti per `Output`, `EOF` restituisce sempre `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-227">Questo esempio viene utilizzato il `EOF` funzione per rilevare la fine di un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="1a57d-228">Questo esempio si presuppone che `Testfile` è un file di testo che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-229">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-230">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-230">Required.</span>
          </span>
          <span data-ttu-id="1a57d-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="1a57d-232">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-237">Questa funzione restituisce un'enumerazione che rappresenta la modalità di file per i file aperti mediante il `FileOpen` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-237">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-238">Questo esempio viene utilizzato il `FileAttr` funzione per restituire la modalità file di un file aperto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-238">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="1a57d-239">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-239">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-240">Parameter array of 0 or more channels to be closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-240">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-242">
            <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-242">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="1a57d-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-244">Il `FileClose` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-244">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-245">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-245">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-246">Per altre informazioni, vedere [procedura: Leggi testo da file con un oggetto StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[procedura: scrivere testo in file con un oggetto StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), e [procedura dettagliata: modifica dei file e directory nello spazio Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-246">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="1a57d-247">Se si omette `FileNumbers`, tutti i file attivi aperti dal `FileOpen` funzione vengono chiusi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-247">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="1a57d-248">Quando si chiudono i file che sono state aperte per `Output` o `Append`, il buffer finale dell'output viene scritto nel buffer del sistema operativo per quel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-248">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="1a57d-249">Tutti i buffer spazio associato chiuso file viene rilasciato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-249">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="1a57d-250">Quando il `FileClose` funzione viene eseguita, l'associazione di un file con il relativo file numero termina.</span><span class="sxs-lookup"><span data-stu-id="1a57d-250">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-251">Questo esempio viene utilizzata la `FileClose` funzione per chiudere un file aperto per `Input`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-251">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-252">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-252">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="1a57d-253">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-253">Required.</span>
          </span>
          <span data-ttu-id="1a57d-254">
            <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-254">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="1a57d-255">
            <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-255">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="1a57d-256">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-256">Required.</span>
          </span>
          <span data-ttu-id="1a57d-257">
            <see langword="String" /> expression that specifies the destination file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-257">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="1a57d-258">
            <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-258">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-259">Copies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-259">Copies a file.</span>
          </span>
          <span data-ttu-id="1a57d-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="1a57d-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-262">Se si prova a usare il `FileCopy` funzionino in un file attualmente aperto, si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-262">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="1a57d-263">`FileCopy` è richiesta l'attendibilità a funzionare nell'unità locale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-263">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-264">Questo esempio viene utilizzato il `FileCopy` funzione per copiare un file a un altro.</span><span class="sxs-lookup"><span data-stu-id="1a57d-264">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="1a57d-265">Ai fini di questo esempio, si supponga che `SrcFile` è un file che contiene dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-265">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-266">
            <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-266">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-267">File is already open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-267">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="1a57d-268">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-268">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="1a57d-269">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-269">Required.</span>
          </span>
          <span data-ttu-id="1a57d-270">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-270">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="1a57d-271">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-271">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="1a57d-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="1a57d-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-275">
            <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-275">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a57d-276">Questo esempio viene utilizzato il `FileDateTime` funzione per determinare la data e un'ora di un file è stato creato o dell'ultima modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-276">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="1a57d-277">Il formato della data e ora visualizzata è basato sulle impostazioni locali del sistema.</span><span class="sxs-lookup"><span data-stu-id="1a57d-277">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-278">
            <paramref name="PathName" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-278">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="1a57d-279">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-279">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-280">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-280">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-283">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-283">Required.</span>
          </span>
          <span data-ttu-id="1a57d-284">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-284">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-285">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-285">Required.</span>
          </span>
          <span data-ttu-id="1a57d-286">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-286">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-287">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-287">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-289">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-289">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-292">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-292">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-293">I dati letti con `FileGet` vengono generalmente scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-293">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-294">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-294">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-295">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-295">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-296">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-296">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-297">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-297">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-298">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-298">Random Mode</span></span>  
 <span data-ttu-id="1a57d-299">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-299">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-300">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-300">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-301">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-301">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-302">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-302">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-303">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-303">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-304">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-304">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-305">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-305">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-306">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-306">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-307">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-307">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-308">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-308">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-309">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-309">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-310">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-310">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-311">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-311">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-312">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-312">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-313">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-313">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-314">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-314">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-315">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-315">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-316">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-316">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-317">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-317">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-318">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-318">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-319">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-319">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-320">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-320">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-321">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-321">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-322">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-322">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-323">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-323">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-324">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-324">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-325">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-325">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-326">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-326">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-327">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-327">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-328">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-328">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-329">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-329">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-330">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-330">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-331">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-331">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-332">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-332">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-333">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-333">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-334">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-334">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-335">La lettura da un file utilizzando il`FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-335">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-336">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-336">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-337">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-337">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-338">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-338">Required.</span>
          </span>
          <span data-ttu-id="1a57d-339">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-339">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-340">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-340">Required.</span>
          </span>
          <span data-ttu-id="1a57d-341">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-341">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-342">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-342">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-344">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-344">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-347">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-347">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-348">I dati letti con `FileGet` vengono generalmente scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-348">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-349">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-349">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-350">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-350">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-351">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-351">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-352">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-352">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-353">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-353">Random Mode</span></span>  
 <span data-ttu-id="1a57d-354">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-354">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-355">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-355">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-356">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-356">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-357">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-357">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-358">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-358">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-359">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-359">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-360">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-360">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-361">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-361">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-362">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-362">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-363">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-363">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-364">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-364">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-365">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-365">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-366">Se non viene utilizzato il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-366">If the descriptor is not used.</span></span> <span data-ttu-id="1a57d-367">Quindi le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-367">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-368">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-368">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-369">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-369">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-370">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-370">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-371">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-371">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-372">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-372">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-373">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-373">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-374">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-374">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-375">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-375">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-376">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-376">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-377">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-377">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-378">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-378">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-379">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-379">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-380">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-380">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-381">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-381">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-382">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-382">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-383">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-383">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-384">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-384">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-385">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-385">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-386">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-386">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-387">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-387">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-388">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-388">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-389">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-389">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-390">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-390">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-391">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-391">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-392">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-392">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-393">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-393">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-394">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-394">Required.</span>
          </span>
          <span data-ttu-id="1a57d-395">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-395">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-396">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-396">Required.</span>
          </span>
          <span data-ttu-id="1a57d-397">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-397">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-398">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-398">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-400">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-400">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-403">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-403">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-404">I dati letti con `FileGet` vengono generalmente scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-404">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-405">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-405">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-406">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-406">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-407">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-407">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-408">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-408">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-409">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-409">Random Mode</span></span>  
 <span data-ttu-id="1a57d-410">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-410">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-411">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-411">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-412">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-412">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-413">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-413">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-414">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-414">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-415">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-415">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-416">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-416">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-417">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-417">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-418">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-418">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-419">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-419">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-420">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-420">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-421">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-421">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-422">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-422">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-423">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-423">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-424">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-424">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-425">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-425">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-426">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-426">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-427">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-427">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-428">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-428">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-429">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-429">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-430">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-430">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-431">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-431">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-432">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-432">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-433">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-433">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-434">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-434">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-435">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-435">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-436">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-436">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-437">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-437">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-438">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-438">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-439">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-439">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-440">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-440">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-441">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-441">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-442">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-442">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-443">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-443">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-444">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-444">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-445">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-445">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-446">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-446">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-447">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-447">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-448">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-448">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-449">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-449">Required.</span>
          </span>
          <span data-ttu-id="1a57d-450">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-450">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-451">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-451">Required.</span>
          </span>
          <span data-ttu-id="1a57d-452">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-452">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-453">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-453">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-455">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-455">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-458">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-458">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-459">I dati letti con `FileGet` vengono generalmente scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-459">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-460">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-460">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-461">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-461">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-462">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-462">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-463">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-463">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-464">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-464">Random Mode</span></span>  
 <span data-ttu-id="1a57d-465">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-465">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-466">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione,`FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-466">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-467">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-467">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-468">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-468">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-469">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-469">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-470">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-470">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-471">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-471">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-472">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-472">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-473">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-473">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-474">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-474">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-475">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-475">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-476">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-476">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-477">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-477">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-478">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-478">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-479">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-479">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-480">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-480">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-481">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-481">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-482">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-482">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-483">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-483">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-484">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-484">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-485">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-485">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-486">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-486">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-487">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-487">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-488">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-488">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-489">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-489">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-490">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-490">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-491">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-491">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-492">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-492">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-493">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-493">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-494">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-494">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-495">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-495">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-496">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-496">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-497">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-497">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-498">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-498">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-499">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-499">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-500">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-500">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-501">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-501">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-502">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-502">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-503">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-503">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-504">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-504">Required.</span>
          </span>
          <span data-ttu-id="1a57d-505">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-505">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-506">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-506">Required.</span>
          </span>
          <span data-ttu-id="1a57d-507">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-507">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-508">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-508">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-510">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-510">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-513">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-513">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-514">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-514">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-515">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-515">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-516">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-516">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-517">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-517">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-518">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-518">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-519">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-519">Random Mode</span></span>  
 <span data-ttu-id="1a57d-520">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-520">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-521">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-521">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-522">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-522">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-523">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-523">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-524">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-524">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-525">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-525">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-526">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-526">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-527">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-527">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-528">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-528">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-529">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-529">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-530">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-530">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-531">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-531">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-532">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-532">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-533">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-533">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-534">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-534">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-535">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-535">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-536">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-536">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-537">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-537">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-538">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-538">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-539">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-539">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-540">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-540">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-541">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-541">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-542">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-542">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-543">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-543">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-544">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-544">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-545">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-545">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-546">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-546">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-547">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-547">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-548">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-548">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-549">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-549">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-550">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-550">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-551">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-551">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-552">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-552">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-553">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-553">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-554">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-554">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-555">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-555">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-556">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-556">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-557">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-557">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-558">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-558">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-559">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-559">Required.</span>
          </span>
          <span data-ttu-id="1a57d-560">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-560">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-561">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-561">Required.</span>
          </span>
          <span data-ttu-id="1a57d-562">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-562">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-563">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-563">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-565">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-565">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-568">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-568">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-569">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-569">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-570">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-570">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-571">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-571">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-572">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-572">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-573">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-573">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-574">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-574">Random Mode</span></span>  
 <span data-ttu-id="1a57d-575">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-575">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-576">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-576">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-577">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-577">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-578">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-578">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-579">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-579">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-580">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-580">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-581">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-581">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-582">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-582">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-583">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-583">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-584">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-584">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-585">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-585">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-586">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-586">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-587">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-587">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-588">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-588">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-589">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-589">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-590">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-590">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-591">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-591">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-592">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-592">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-593">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-593">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-594">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-594">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-595">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-595">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-596">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-596">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-597">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-597">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-598">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-598">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-599">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-599">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-600">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-600">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-601">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-601">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-602">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-602">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-603">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-603">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-604">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-604">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-605">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-605">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-606">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-606">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-607">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-607">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-608">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-608">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-609">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-609">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-610">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-610">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-611">La lettura da un file utilizzando il`FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-611">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-612">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-612">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-613">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-613">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-614">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-614">Required.</span>
          </span>
          <span data-ttu-id="1a57d-615">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-615">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-616">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-616">Required.</span>
          </span>
          <span data-ttu-id="1a57d-617">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-617">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-618">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-618">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-620">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-620">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-623">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-623">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-624">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-624">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-625">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-625">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-626">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-626">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-627">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-627">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-628">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-628">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-629">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-629">Random Mode</span></span>  
 <span data-ttu-id="1a57d-630">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-630">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-631">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-631">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-632">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-632">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-633">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-633">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-634">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-634">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-635">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-635">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-636">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-636">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-637">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-637">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-638">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-638">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-639">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-639">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-640">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-640">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-641">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-641">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-642">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-642">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-643">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-643">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-644">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-644">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-645">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-645">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-646">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-646">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-647">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-647">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-648">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-648">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-649">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-649">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-650">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-650">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-651">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-651">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-652">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-652">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-653">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-653">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-654">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-654">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-655">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-655">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-656">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-656">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-657">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-657">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-658">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-658">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-659">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-659">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-660">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-660">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-661">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-661">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-662">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-662">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-663">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-663">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-664">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-664">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-665">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-665">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-666">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-666">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-667">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-667">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-668">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-668">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-669">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-669">Required.</span>
          </span>
          <span data-ttu-id="1a57d-670">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-670">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-671">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-671">Required.</span>
          </span>
          <span data-ttu-id="1a57d-672">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-672">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-673">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-673">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-675">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-675">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-678">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-678">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-679">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-679">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-680">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-680">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-681">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-681">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-682">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-682">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-683">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-683">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-684">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-684">Random Mode</span></span>  
 <span data-ttu-id="1a57d-685">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-685">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-686">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-686">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-687">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-687">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-688">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-688">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-689">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-689">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-690">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-690">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-691">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-691">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-692">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-692">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-693">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-693">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-694">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-694">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-695">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-695">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-696">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-696">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-697">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-697">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-698">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-698">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-699">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-699">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-700">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-700">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-701">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-701">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-702">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-702">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-703">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-703">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-704">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-704">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-705">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-705">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-706">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-706">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-707">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-707">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-708">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-708">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-709">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-709">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-710">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-710">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-711">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-711">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-712">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-712">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-713">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-713">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-714">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-714">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-715">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-715">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-716">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-716">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-717">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-717">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-718">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-718">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-719">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-719">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-720">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-720">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-721">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-721">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-722">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-722">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-723">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-723">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-724">Required.</span>
          </span>
          <span data-ttu-id="1a57d-725">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-725">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-726">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-726">Required.</span>
          </span>
          <span data-ttu-id="1a57d-727">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-727">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-728">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-728">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-730">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-730">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-733">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-733">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-734">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-734">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-735">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-735">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-736">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-736">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-737">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-737">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-738">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-738">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-739">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-739">Random Mode</span></span>  
 <span data-ttu-id="1a57d-740">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-740">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-741">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-741">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-742">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-742">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-743">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-743">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-744">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-744">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-745">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-745">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-746">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-746">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-747">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-747">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-748">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-748">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-749">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-749">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-750">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-750">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-751">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-751">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-752">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-752">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-753">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-753">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-754">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-754">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-755">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-755">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-756">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-756">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-757">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-757">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-758">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-758">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-759">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-759">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-760">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-760">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-761">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-761">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-762">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-762">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-763">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-763">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-764">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-764">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-765">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-765">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-766">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-766">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-767">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-767">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-768">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-768">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-769">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-769">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-770">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-770">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-771">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-771">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-772">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-772">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-773">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-773">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-774">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-774">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-775">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-775">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-776">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-776">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-777">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-777">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-778">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-778">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-779">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-779">Required.</span>
          </span>
          <span data-ttu-id="1a57d-780">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-780">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-781">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-781">Required.</span>
          </span>
          <span data-ttu-id="1a57d-782">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-782">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-783">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-783">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-785">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-785">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-788">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-788">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-789">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-789">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-790">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-790">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-791">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-791">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-792">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-792">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-793">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-793">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-794">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-794">Random Mode</span></span>  
 <span data-ttu-id="1a57d-795">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-795">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-796">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-796">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-797">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-797">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-798">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-798">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-799">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-799">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-800">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-800">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-801">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-801">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-802">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-802">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-803">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-803">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-804">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-805">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-805">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-806">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-806">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-807">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-807">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-808">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-808">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-809">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-809">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-810">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-810">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-811">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-811">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-812">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-812">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-813">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-813">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-814">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-814">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-815">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-815">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-816">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-816">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-817">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-817">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-818">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-818">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-819">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-819">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-820">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-820">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-821">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-821">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-822">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-822">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-823">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-823">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-824">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-824">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-825">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-825">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-826">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-826">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-827">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-827">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-828">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-828">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-829">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-829">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-830">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-830">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-831">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-831">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-832">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-832">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-833">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-833">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-834">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-834">Required.</span>
          </span>
          <span data-ttu-id="1a57d-835">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-835">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-836">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-836">Required.</span>
          </span>
          <span data-ttu-id="1a57d-837">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-837">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-838">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-838">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-840">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-840">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-843">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-843">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-844">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-844">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-845">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-846">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-846">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-847">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-847">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-848">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-848">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-849">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-849">Random Mode</span></span>  
 <span data-ttu-id="1a57d-850">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-850">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-851">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-851">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-852">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-852">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-853">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-853">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-854">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-854">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-855">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-855">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-856">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-856">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-857">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-857">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-858">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-858">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-859">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-859">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-860">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-860">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-861">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-861">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-862">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-862">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-863">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-864">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-865">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-865">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-866">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-867">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-867">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-868">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-868">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-869">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-869">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-870">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-870">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-871">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-872">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-872">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-873">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-873">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-874">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-875">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-875">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-876">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-877">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-877">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-878">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-878">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-879">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-879">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-880">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-880">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-881">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-881">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-882">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-882">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-883">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-883">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-884">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-884">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-885">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-885">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-886">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-886">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-887">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-887">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-888">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-888">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-889">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-889">Required.</span>
          </span>
          <span data-ttu-id="1a57d-890">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-891">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-891">Required.</span>
          </span>
          <span data-ttu-id="1a57d-892">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-892">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-893">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-893">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="1a57d-895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-895">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="1a57d-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="1a57d-898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-899">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-899">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-902">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-902">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-903">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-903">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-904">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-905">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-905">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-906">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-906">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-907">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-907">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-908">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-908">Random Mode</span></span>  
 <span data-ttu-id="1a57d-909">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-909">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-910">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-910">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-911">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-911">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-912">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-912">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-913">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-913">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-914">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-914">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-915">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-915">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-916">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-916">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-917">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-917">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-918">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-918">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-919">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-919">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-920">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-920">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-921">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-921">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-922">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-922">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-923">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-923">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-924">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-925">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-925">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-926">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-926">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-927">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-927">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-928">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-928">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-929">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-929">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-930">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-931">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-931">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-932">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-932">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-933">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-934">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-934">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-935">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-936">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-936">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-937">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-937">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-938">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-938">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-939">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-939">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-940">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-940">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-941">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-941">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-942">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-942">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-943">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-943">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-944">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-944">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-945">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-945">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-946">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-946">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-947">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-947">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-948">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-948">Required.</span>
          </span>
          <span data-ttu-id="1a57d-949">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-949">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-950">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-950">Required.</span>
          </span>
          <span data-ttu-id="1a57d-951">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-951">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-952">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-952">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="1a57d-954">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-954">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-955">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-955">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="1a57d-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="1a57d-957">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-957">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-958">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-958">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="1a57d-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="1a57d-960">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-960">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-961">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-961">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="1a57d-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-964">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-964">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-965">I dati letti con `FileGet` è in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-965">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="1a57d-966">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-966">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-967">Se si omette `RecordNumber`, il record o il byte dopo l'ultima `FileGet` oppure `FilePut` funzione (o a cui punta l'ultima `Seek` (funzione)) è di lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-967">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-968">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-968">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-969">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-969">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-970">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-970">Random Mode</span></span>  
 <span data-ttu-id="1a57d-971">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-971">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-972">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-972">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-973">Lo spazio tra la fine di un record e l'avvio del record successivo viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-973">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-974">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-974">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-975">Per impostazione predefinita, se la variabile in lettura è una stringa, `FileGet` legge un descrittore di due byte che contiene la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-975">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-976">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-976">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-977">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa. Quando viene inserito in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-977">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-978">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-978">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-979">Se la variabile in lettura è una matrice, è possibile scegliere se leggere un descrittore per le dimensioni della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-979">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="1a57d-980">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-980">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-981">Durante la lettura della matrice, è necessario corrispondere al modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-981">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="1a57d-982">Se è stato scritto con il descrittore, è necessario leggere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-982">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="1a57d-983">Se non viene utilizzato il descrittore, le dimensioni e i limiti della matrice passato `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-983">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="1a57d-984">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-984">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-985">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-985">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-986">La lunghezza del record specificata dal `RecordLength` parametro di `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-987">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-987">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="1a57d-988">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="1a57d-988">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="1a57d-989">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="1a57d-989">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="1a57d-990">200 byte per i dati: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-990">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="1a57d-991">Se la variabile in lettura è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-991">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="1a57d-992">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-992">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-993">`FileGet` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-993">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-994">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-994">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-995">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-995">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="1a57d-996">Ciò include le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-996">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-997">Il `VBFixedString` attributo può essere applicato ai campi stringa nelle strutture per indicare la dimensione di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-997">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-998">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-998">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-999">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-999">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1000">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1000">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1001">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1001">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1002">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1002">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1003">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1003">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="1a57d-1004">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1004">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="1a57d-1005">`FileGet` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1005">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1006">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1006">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="1a57d-1007">La lettura da un file utilizzando il `FileGet` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1007">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1008">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1008">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1009">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1009">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1010">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1010">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1011">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1011">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1012">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1012">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1013">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1013">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1014">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1014">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1016">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1016">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="1a57d-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="1a57d-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1019">Il `FileGetObject` funzione viene usata invece di `FileGet` per evitare ambiguità in fase di compilazione se tipo `Object` viene restituito invece un altro tipo, ad esempio `Integer`, `Long`, `Short`e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1019">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="1a57d-1020">Se si intende scrivere il `Variant` tipo, `FileGetObject` è obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1020">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="1a57d-1021">In caso di dubbi, se si utilizza un oggetto per il secondo parametro, è consigliabile utilizzare `FilePutObject` e `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1021">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="1a57d-1022">`FileGetObject` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1022">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1023">I dati letti con `FileGetObject` vengono in genere scritti con `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1023">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="1a57d-1024">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1024">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1025">Se si omette `RecordNumber`, `FileGetObject` legge il record o byte dopo l'ultimo `FileGetObject` o `FilePutObject` funzione (o a cui punta l'ultima `Seek` funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1025">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1026">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1026">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1027">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1027">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1028">Se la lunghezza dei dati letti è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGetObject` legge i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1028">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1029">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1029">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1030">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1030">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="1a57d-1031">Se la variabile in lettura è una stringa, per impostazione predefinita `FileGetObject` legge un descrittore di due byte contenente la lunghezza della stringa e quindi legge i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1031">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1032">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1032">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1033">Visual Basic 6.0 e versioni precedenti supportano stringhe a lunghezza fissa e durante la lettura in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1033">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="1a57d-1034">Se si desidera leggere una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1034">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1035">Se la variabile in cui si legge è una matrice, è necessario che la lunghezza del record specificata dal parametro `RecordLength` della funzione `FileOpen` sia superiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1035">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1036">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1036">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1037">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1037">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="1a57d-1038">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1038">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="1a57d-1039">I byte 218 vengono distribuiti come segue: 18 byte per il descrittore (2 + 8 \* 2) e 100 byte per i dati (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1039">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="1a57d-1040">`FileGetObject` legge gli elementi delle strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1040">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1041">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePutObject`) sono preceduti da un descrittore la cui lunghezza è uguale a 2 + 8 volte il numero di dimensioni: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1041">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="1a57d-1042">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi, incluse le matrici e i descrittori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="1a57d-1043">Il <xref:Microsoft.VisualBasic.VBFixedStringAttribute> classe può essere applicata ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1043">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1044">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1044">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1045">Per i file aperti `Binary` modalità, tutte le `Random` vengono applicate regole, con le seguenti eccezioni:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1045">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="1a57d-1046">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1046">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1047">`FileGetObject` legge tutte le variabili da disco in modo contiguo, vale a dire, senza alcun riempimento tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1047">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1048">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGetObject` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1048">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="1a57d-1049">Nessun descrittore viene letto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1049">No descriptor is read.</span></span>  
  
 <span data-ttu-id="1a57d-1050">`FileGetObject` legge le stringhe a lunghezza variabile non gli elementi delle strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1050">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1051">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1051">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-1052">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1052">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-1053">Ad esempio, un file denominato Form1 potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1053">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1054">Nell'esempio seguente legge un record in un file di test e in seguito viene recuperato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1054">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="1a57d-1055">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1055">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1056">
            <see langword="String" /> expression that specifies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1056">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="1a57d-1057">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1057">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="1a57d-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="1a57d-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-1061">
            <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1061">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1062">Se il file specificato è aperto quando il `FileLen` funzione viene chiamata, il valore restituito rappresenta le dimensioni del file al momento è stato aperto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1062">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-1063">Per ottenere la lunghezza corrente di un file aperto, usare il `LOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1063">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1064">Questo esempio viene utilizzato il `FileLen` funzione per restituire la lunghezza di un file in byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1064">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="1a57d-1065">Ai fini di questo esempio, si supponga che `TestFile` è un file che contiene alcuni dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1065">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="1a57d-1066">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1066">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1067">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1067">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1068">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1068">Any valid file number.</span>
          </span>
          <span data-ttu-id="1a57d-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="1a57d-1070">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1070">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1071">
            <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1071">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="1a57d-1072">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1072">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="1a57d-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="1a57d-1075">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1075">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="1a57d-1077">Defaults to <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1077">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="1a57d-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="1a57d-1079">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1079">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="1a57d-1081">Defaults to <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1081">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="1a57d-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="1a57d-1083">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1083">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1084">Number less than or equal to 32,767 (bytes).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1084">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="1a57d-1085">For files opened for random access, this value is the record length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1085">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="1a57d-1086">For sequential files, this value is the number of characters buffered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1086">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1087">Opens a file for input or output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1087">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="1a57d-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="1a57d-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1090">Il `FileOpen` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1090">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-1091">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1091">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-1092">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1092">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-1093">È necessario aprire un file per poter eseguire qualsiasi operazione dei / o su di esso.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1093">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="1a57d-1094">`FileOpen` Alloca un buffer per il / o il file e determina la modalità di accesso da utilizzare con il buffer.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1094">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-1095">Quando si scrive in un file, un'applicazione potrebbe essere necessario creare un file, se il file a cui il tentativo di scrittura non esiste.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1095">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="1a57d-1096">A tale scopo, sono necessarie le autorizzazioni per la directory in cui viene creato il file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1096">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="1a57d-1097">Tuttavia, se il file specificato da `FileName` esiste già, l'applicazione deve `Write` autorizzazione solo per il file stesso.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1097">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="1a57d-1098">Rilasciarlo possibile, per migliorare la sicurezza, creare il file durante la distribuzione e concedere `Write` delle autorizzazioni necessarie per il file solo, anziché per l'intera directory.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1098">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="1a57d-1099">Scrivere i dati per migliorare la sicurezza, le directory dell'utente anziché per la directory radice o la directory dei file di programma.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1099">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="1a57d-1100">Per aprire il canale è reperibile utilizzando il `FreeFile()` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1100">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-1101">Il `FileOpen` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione, questo potrebbe influire sull'esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1101">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="1a57d-1102">Per ulteriori informazioni, vedere l'enumerazione <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1102">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1103">In questo esempio illustra vari usi del `FileOpen` funzione per abilitare l'input e output in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1103">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="1a57d-1104">Il codice seguente consente di aprire il file `TestFile` in `Input` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1104">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1a57d-1105">In questo esempio consente di aprire il file in `Binary` modalità per operazioni di sola scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1105">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1a57d-1106">Nell'esempio seguente viene aperto il file in `Random` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1106">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="1a57d-1107">Il file contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1107">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="1a57d-1108">Questo esempio di codice consente di aprire il file in `Output` modalità, le operazioni possono leggere o scrivere nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1108">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="1a57d-1109">Questo esempio di codice consente di aprire il file in `Binary` modalità per la lettura; Impossibile leggere il file ad altri processi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1109">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1110">Record length is negative (and not equal to -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1110">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1111">
            <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1111">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-1112">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1112">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1115">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1115">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1116">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1116">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1117">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1117">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1118">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1118">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1119">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1119">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1121">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1121">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1124">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1124">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1125">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1125">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1126">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1126">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1127">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1127">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1128">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1128">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1129">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1129">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1130">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1130">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1131">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1131">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1132">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1132">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1133">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1133">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1134">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1134">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1135">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1135">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1136">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1136">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1137">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1137">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1138">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1138">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1139">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1139">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1140">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1140">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1141">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1141">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1142">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1142">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1143">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1143">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1144">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1144">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1145">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1145">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1146">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1146">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1147">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1147">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1148">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1148">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1149">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1149">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1150">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1150">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1151">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1151">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1152">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1152">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1153">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1153">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1154">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1154">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1155">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1155">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1156">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1156">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1157">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1157">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1158">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1158">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1159">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1159">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1160">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1160">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1161">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1161">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1162">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1162">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1163">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1163">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1164">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1164">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1165">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1165">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1166">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1166">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1167">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1167">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1168">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1168">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1169">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1169">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1170">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1170">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1171">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1171">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1172">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1172">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1173">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1174">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1174">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1175">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1175">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1176">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1176">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1177">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1177">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1178">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1178">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1180">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1180">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1183">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1183">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1184">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1184">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1185">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1185">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1186">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1186">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1187">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1187">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1188">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1188">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1189">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1189">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1190">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1190">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1191">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1191">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1192">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1192">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1193">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1193">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1194">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1194">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1195">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1195">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1196">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1196">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1197">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1197">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1198">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1198">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1199">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1199">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1200">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1201">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1201">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1202">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1202">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1203">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1203">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1204">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1204">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1205">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1205">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1206">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1206">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1207">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1207">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1208">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1208">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1209">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1209">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1210">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1210">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1211">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1211">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1212">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1212">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1213">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1213">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1214">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1214">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1215">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1215">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1216">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1216">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1217">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1217">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1218">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1218">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1219">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1219">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1220">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1220">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1221">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1221">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1222">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1222">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1223">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1223">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1224">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1224">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1225">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1225">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1226">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1226">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1227">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1227">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1228">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1228">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1229">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1229">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1230">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1230">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1231">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1231">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1232">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1232">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1233">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1233">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1234">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1234">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1235">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1235">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1236">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1236">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1237">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1237">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1239">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1239">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1242">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1242">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1243">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1243">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1244">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1244">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1245">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1245">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1246">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1246">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1247">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1247">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1248">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1248">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1249">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1249">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1250">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1250">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1251">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1251">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1252">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1252">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1253">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1253">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1254">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1254">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1255">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1255">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1256">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1256">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1257">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1257">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1258">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1258">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1259">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1259">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1260">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1260">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1261">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1261">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1262">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1262">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1263">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1263">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1264">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1264">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1265">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1265">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1266">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1266">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1267">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1267">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1268">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1268">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1269">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1269">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1270">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1270">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1271">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1271">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1272">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1272">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1273">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1273">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1274">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1274">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1275">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1275">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1276">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1276">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1277">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1277">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1278">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1278">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1279">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1279">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1280">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1280">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1281">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1281">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1282">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1282">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1283">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1283">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1284">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1284">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1285">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1285">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1286">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1286">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1287">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1287">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1288">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1288">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1289">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1289">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1290">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1290">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1291">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1291">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1292">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1292">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1293">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1293">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1294">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1294">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1295">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1295">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1296">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1296">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1298">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1298">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1301">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1302">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1303">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1304">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1305">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1306">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1307">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1308">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1308">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1309">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1310">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1311">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1312">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1313">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1314">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1315">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1316">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1317">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1318">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1319">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1320">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1321">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1322">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1323">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1324">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1325">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1326">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1327">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1328">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1329">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1330">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1331">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1332">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1333">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1334">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1335">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1336">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1336">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1337">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1338">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1339">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1340">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1341">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1342">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1343">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1344">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1345">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1346">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1347">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1348">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1349">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1349">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1350">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1350">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1351">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1351">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1352">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1352">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1353">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1353">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1354">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1354">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1355">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1355">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1357">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1357">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1360">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1360">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1361">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1361">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1362">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1362">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1363">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1363">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1364">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1364">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1365">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1365">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1366">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1366">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1367">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1367">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1368">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1368">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1369">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1369">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1370">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1370">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1371">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1371">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1372">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1372">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1373">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1373">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1374">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1374">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1375">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1375">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1376">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1376">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1377">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1378">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1378">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1379">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1379">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1380">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1380">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1381">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1381">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1382">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1382">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1383">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1383">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1384">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1384">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1385">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1385">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1386">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1386">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1387">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1387">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1388">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1388">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1389">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1389">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1390">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1390">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1391">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1391">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1392">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1392">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1393">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1393">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1394">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1394">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1395">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1395">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1396">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1396">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1397">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1397">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1398">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1398">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1399">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1399">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1400">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1400">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1401">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1401">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1402">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1402">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1403">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1403">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1404">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1404">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1405">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1405">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1406">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1406">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1407">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1407">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1408">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1408">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1409">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1409">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1410">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1410">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1411">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1411">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1412">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1412">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1413">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1413">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1414">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1414">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1416">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1416">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1419">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1419">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1420">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1420">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1421">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1421">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1422">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1422">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1423">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1423">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1424">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1424">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1425">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1425">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1426">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1426">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1427">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1427">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1428">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1428">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1429">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1429">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1430">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1430">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1431">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1431">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1432">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1432">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1433">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1433">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1434">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1434">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1435">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1435">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1436">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1436">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1437">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1437">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1438">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1439">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1439">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1440">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1440">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1441">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1441">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1442">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1442">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1443">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1443">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1444">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1444">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1445">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1445">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1446">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1446">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1447">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1447">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1448">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1448">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1449">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1449">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1450">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1450">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1451">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1451">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1452">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1452">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1453">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1453">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1454">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1454">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1455">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1455">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1456">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1456">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1457">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1457">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1458">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1458">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1459">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1459">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1460">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1460">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1461">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1461">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1462">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1462">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1463">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1463">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1464">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1464">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1465">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1465">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1466">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1466">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1467">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1467">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1468">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1468">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1469">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1469">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1470">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1471">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1471">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1472">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1473">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1473">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1475">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1478">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1479">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1480">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1481">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1482">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1483">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1484">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1485">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1485">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1486">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1487">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1488">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1489">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1490">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1491">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1492">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1493">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1494">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1495">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1496">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il`VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1497">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1498">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1499">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1500">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1501">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1502">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1503">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1504">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1505">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1506">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1507">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1508">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1509">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1510">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1511">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1512">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1513">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1513">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1514">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1515">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1516">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1517">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1518">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1519">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1520">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1521">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1522">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1523">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1524">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1525">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1526">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1527">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1528">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1528">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1529">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1529">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1530">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1530">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1531">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1531">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1532">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1532">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1534">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1534">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1537">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1537">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1538">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1538">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1539">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1539">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1540">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1540">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1541">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1541">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1542">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1542">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1543">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1543">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1544">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1544">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1545">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1545">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1546">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1546">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1547">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1547">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1548">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1548">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1549">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1549">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1550">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1550">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1551">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1551">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1552">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1552">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1553">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1553">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1554">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1554">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1555">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1555">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1556">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1556">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1557">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1557">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1558">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1558">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1559">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1559">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1560">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1560">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1561">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1561">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1562">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1562">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1563">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1563">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1564">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1564">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1565">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1565">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1566">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1566">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1567">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1567">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1568">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1568">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1569">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1569">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1570">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1570">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1571">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1571">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1572">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1572">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1573">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1573">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1574">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1574">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1575">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1575">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1576">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1576">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1577">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1577">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1578">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1578">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1579">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1579">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1580">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1580">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1581">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1581">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1582">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1582">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1583">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1583">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1584">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1584">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1585">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1585">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1586">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1586">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1587">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1587">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1588">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1588">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1589">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1589">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1590">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1590">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1591">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1591">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1593">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1593">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1596">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1596">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1597">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1597">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1598">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1598">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1599">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1599">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1600">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1600">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1601">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1601">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1602">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1602">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1603">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1603">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1604">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1604">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1605">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1605">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1606">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1606">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1607">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1607">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1608">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1608">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1609">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1609">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1610">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1610">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1611">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1611">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1612">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1612">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1613">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1613">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1614">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1614">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1615">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1616">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1616">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1617">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1617">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1618">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1618">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1619">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1619">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1620">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1621">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1621">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1622">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1622">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1623">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1623">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1624">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1624">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1625">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1625">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1626">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1626">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1627">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1627">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1628">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1628">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1629">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1629">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1630">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1630">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1631">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1631">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1632">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1632">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1633">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1633">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1634">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1634">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1635">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1635">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1636">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1636">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1637">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1637">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1638">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1638">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1639">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1639">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1640">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1640">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1641">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1641">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1642">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1642">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1643">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1643">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1644">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1644">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1645">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1645">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1646">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1646">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1647">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1647">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1648">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1648">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1649">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1649">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1650">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1650">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1652">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1652">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1655">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1655">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1656">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1656">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1657">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1657">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1658">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1658">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1659">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1659">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1660">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1660">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1661">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1661">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1662">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1662">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1663">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1663">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1664">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1664">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1665">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1665">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1666">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1666">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1667">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1667">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1668">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1668">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1669">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1669">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1670">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1670">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1671">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1671">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1672">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1672">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1673">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1673">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1674">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1674">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1675">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1675">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1676">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1676">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1677">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1677">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1678">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1678">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1679">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1679">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1680">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1680">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1681">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1682">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1683">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1683">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1684">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1685">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1685">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1686">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1687">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1687">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1688">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1688">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1689">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1689">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1690">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1690">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1691">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1691">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1692">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1692">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1693">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1693">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1694">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1694">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1695">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1695">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1696">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1696">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1697">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1697">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1698">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1698">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1699">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1699">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1700">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1700">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1701">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1701">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1702">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1702">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1703">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1703">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1704">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1704">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1705">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1705">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1706">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1706">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1707">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1707">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1708">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1708">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1709">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1709">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1711">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1711">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1714">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1714">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1715">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1715">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1716">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1716">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1717">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1717">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1718">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1718">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1719">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1719">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1720">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1720">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1721">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1721">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1722">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1723">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel`RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1723">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1724">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1725">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1726">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1726">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1727">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1727">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1728">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1728">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1729">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1729">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1730">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1730">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1731">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1731">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1732">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1732">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1733">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1733">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1734">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1734">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1735">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1735">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1736">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1736">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1737">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1737">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1738">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1738">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1739">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1739">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1740">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1740">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1741">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1741">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1742">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1742">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1743">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1743">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1744">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1744">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1745">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1745">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1746">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1746">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1747">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1747">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1748">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1748">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1749">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1749">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1750">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1751">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1752">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1753">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1753">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1754">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1754">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1755">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1755">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1756">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1756">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1757">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1757">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1758">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1758">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1759">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1759">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1760">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1760">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1761">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1761">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1762">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1762">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1763">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1763">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1764">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1764">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1765">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1765">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1766">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1766">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1767">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1767">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1768">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1768">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1770">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1770">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1773">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1773">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1774">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1774">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1775">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1775">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1776">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1776">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1777">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1777">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1778">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1778">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1779">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1779">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1780">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1780">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1781">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1781">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1782">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1782">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1783">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1783">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1784">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1784">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1785">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1785">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1786">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1786">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1787">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1787">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1788">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1788">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1789">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1789">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1790">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1790">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1791">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1791">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1792">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1792">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1793">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1793">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1794">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1794">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1795">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1795">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1796">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1796">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1797">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1797">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1798">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1798">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1799">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1799">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1800">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1800">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1801">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1801">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1802">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1802">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1803">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1803">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1804">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1804">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1805">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1805">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1806">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1806">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1807">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1807">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1808">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1808">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1809">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1809">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1810">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1810">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1811">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1811">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1812">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1812">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1813">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1813">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1814">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1814">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1815">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1815">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1816">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1816">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1817">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1817">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1818">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1818">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1819">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1819">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1820">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1820">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1821">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1821">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1822">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1822">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1823">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1823">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1824">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1824">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1825">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1825">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1826">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1826">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1827">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1827">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="1a57d-1829">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1829">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1830">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1830">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="1a57d-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="1a57d-1832">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1832">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1833">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1833">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1836">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1836">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1837">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1837">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1838">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1838">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1839">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1839">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1840">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1840">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1841">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1841">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1842">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1842">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1843">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1843">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1844">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1844">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1845">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1845">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1846">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1846">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1847">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1847">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1848">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1848">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1849">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1849">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1850">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1850">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1851">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1851">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1852">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1852">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1853">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1853">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1854">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1854">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1855">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1856">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1856">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1857">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1857">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1858">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1858">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1859">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1859">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1860">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1861">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1861">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1862">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1862">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1863">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1863">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1864">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1864">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1865">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1865">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1866">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1866">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1867">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1867">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1868">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1868">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1869">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1869">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1870">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1870">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1871">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1871">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1872">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1872">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1873">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1873">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1874">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1874">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1875">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1875">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1876">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1876">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1877">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1877">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1878">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1878">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1879">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1879">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1880">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1880">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1881">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1881">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1882">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1882">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1883">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1883">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1884">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1884">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1885">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1885">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1886">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1886">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1887">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1887">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1888">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1888">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1889">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1889">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1890">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1890">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="1a57d-1892">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1892">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1893">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1893">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="1a57d-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="1a57d-1895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1895">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="1a57d-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="1a57d-1898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1899">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="1a57d-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1902">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1903">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="1a57d-1904">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1905">Se si omette `RecordNumber`, il record o il byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultima `Seek` funzione viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="1a57d-1906">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1907">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1908">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1909">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1909">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1910">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1911">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1912">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1913">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1914">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1915">Se la variabile scritta è una stringa, `FilePut` scriverà un descrittore di due byte che contiene la lunghezza della stringa e quindi scrive i dati che va inserito nella variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="1a57d-1916">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="1a57d-1917">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePut` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1918">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1919">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1920">Se la variabile scritta è un oggetto che contiene una stringa `FilePut` scriverà un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1921">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1922">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1923">Se la variabile scritta è una matrice, è possibile scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="1a57d-1924">Visual Basic 6.0 e versioni precedenti di scrivere il descrittore del file per una matrice dinamica, ma non per un array a dimensione fissa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="1a57d-1925">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="1a57d-1926">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="1a57d-1927">Quando si scrive la matrice, devono corrispondere a quello che verrà letta la matrice. Se sarà possibile leggerla con il descrittore, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="1a57d-1928">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1929">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="1a57d-1930">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1931">Ad esempio, la seguente dichiarazione di matrice richiede 218 byte quando la matrice viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="1a57d-1932">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="1a57d-1933">La lunghezza del record specificata dal `RecordLength` clausola il `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati in corso la scrittura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="1a57d-1934">`FilePut` scrive elementi di strutture come se fossero scritti individualmente, ad eccezione del fatto non è Nessun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="1a57d-1935">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare la dimensione della stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="1a57d-1936">Campi che il numero di byte a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="1a57d-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1937">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1937">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1938">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="1a57d-1939">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="1a57d-1940">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1941">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="1a57d-1942">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="1a57d-1943">Nessun descrittore viene scritta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="1a57d-1944">`FilePut` Scrive le stringhe a lunghezza variabile non gli elementi delle strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="1a57d-1945">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="1a57d-1946">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="1a57d-1947">Scrittura in un file utilizzando il `FilePut` funzione richiede `Write` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1948">Questo esempio viene utilizzato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="1a57d-1949">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-1950">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-1951">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1952">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1952">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1953">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1953">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-1954">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1954">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1955">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1955">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="1a57d-1956">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1956">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1958">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1958">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="1a57d-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="1a57d-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-1961">Il `FilePutObject` funzione viene usata invece di `FilePut` per evitare ambiguità in fase di compilazione se tipo `Object` invece viene passato un altro tipo, ad esempio `Integer`, `Long`, `Short`e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1961">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="1a57d-1962">`FilePutObject` scrive e legge i descrittori che descrivono l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1962">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="1a57d-1963">Se si intende scrivere il `Variant` tipo, `FilePutObject` è obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1963">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="1a57d-1964">In caso di dubbi, se si utilizza un oggetto per il secondo parametro, è consigliabile utilizzare sempre `FilePutObject` e `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1964">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="1a57d-1965">`FilePutObject` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1965">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-1966">I dati scritti con `FilePutObject` vengono in genere letti da un file usando `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1966">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="1a57d-1967">Il primo record o byte in un file è nella posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="1a57d-1968">Se si omette `RecordNumber`, `FilePutObject` scriva il record o il byte successivo dopo l'ultimo `FileGetObject` o `FilePutObject` funzione (o il record o byte a cui punta l'ultima `Seek` funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1968">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="1a57d-1969">Il `StringIsFixedLength` argomento controlla se la funzione interpreta stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1969">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="1a57d-1970">`FilePutObject` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1970">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="1a57d-1971">Se si utilizza `StringIsFixedLength`  =  `True` con `FilePutObject`, è necessario eseguire la stessa operazione con `FileGetObject`, e assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1971">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="1a57d-1972">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="1a57d-1972">Random Mode</span></span>  
 <span data-ttu-id="1a57d-1973">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1973">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="1a57d-1974">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePutObject` scrive i record successivi nei limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1974">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="1a57d-1975">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto esistente del buffer di file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1975">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="1a57d-1976">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1976">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="1a57d-1977">Se la lunghezza dei dati scritti è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1977">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="1a57d-1978">Se la variabile scritta è un oggetto che contiene un tipo numerico `FilePutObject` scrive due byte che identificano il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1978">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="1a57d-1979">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePutObject` scrive sei byte: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro byte che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1979">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="1a57d-1980">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1980">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="1a57d-1981">Se la variabile scritta è un oggetto che contiene una stringa `FilePutObject` scriverà un descrittore di due byte che identifica il `VarType(8)` dell'oggetto, un descrittore di due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1981">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="1a57d-1982">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1982">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="1a57d-1983">Se si desidera inserire una stringa senza il descrittore, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1983">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="1a57d-1984">Se la variabile scritta è una matrice, è necessario che la lunghezza del record specificata dalla clausola `RecordLength` della funzione `FileOpen` sia superiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1984">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="1a57d-1985">Il descrittore specifica il numero di dimensioni della matrice, le dimensioni e i limiti inferiori per ogni classificazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="1a57d-1986">La lunghezza è uguale a 2 più 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="1a57d-1986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="1a57d-1987">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="1a57d-1987">Binary Mode</span></span>  
 <span data-ttu-id="1a57d-1988">Per i file aperti `Binary` modalità, tutti i `Random` si applicano le regole della modalità, ad eccezione di:</span><span class="sxs-lookup"><span data-stu-id="1a57d-1988">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="1a57d-1989">Il `RecordLength` clausola il `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1989">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="1a57d-1990">`FilePutObject` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1990">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-1991">Questo esempio viene utilizzato il `FilePutObject` funzione per scrivere una stringa in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1991">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-1992">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1992">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1993">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1993">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="1a57d-1994">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1994">Required.</span>
          </span>
          <span data-ttu-id="1a57d-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="1a57d-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="1a57d-1997">The default value for <c>RecordWidth</c> is 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1997">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="1a57d-1999">Questo esempio viene utilizzato il `FileWidth` funzione per impostare la larghezza della riga di output di un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-1999">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2000">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2000">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2003">Utilizzare `FreeFile` per fornire un numero di file che non è già in uso.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2003">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2004">Questo esempio viene utilizzato il `FreeFile` funzione per restituire il successivo numero di file disponibili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2004">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="1a57d-2005">Cinque file aperti per l'output all'interno del ciclo e alcuni dati di esempio sono scritto per ognuno.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2005">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2006">More than 255 files are in use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2006">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="1a57d-2007">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2007">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2008">
            <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2008">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="1a57d-2009">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2009">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="1a57d-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="1a57d-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2014">Per determinare quali attributi sono impostati, usare il `And` operatore per eseguire un confronto bit per bit del valore restituito dal `GetAttr` (funzione) e il valore del singolo attributo di file desiderato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2014">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="1a57d-2015">Se il risultato non è zero, tale attributo è impostato per il file denominato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2015">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="1a57d-2016">Ad esempio, il valore restituito delle operazioni seguenti `And` espressione è zero se la `Archive` attributo non è impostato:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2016">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="1a57d-2017">Viene restituito un valore diverso da zero se la `Archive` attributo è impostato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2017">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2018">Questo esempio viene utilizzato il `GetAttr` funzione per determinare gli attributi di un file e directory o una cartella.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2018">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2019">
            <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2019">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="1a57d-2020">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2020">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2022">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2022">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2023">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2023">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2024">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2024">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2027">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2027">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2028">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2028">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2029">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2029">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2030">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2030">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2031">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2031">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2032">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2032">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2033">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2033">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2034">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2034">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2035">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2035">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2036">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2036">Data</span></span>|<span data-ttu-id="1a57d-2037">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2037">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2038">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2038">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2039">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2039">Empty</span></span>|  
|<span data-ttu-id="1a57d-2040">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2040">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2041"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2041">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2042">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2042">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2043">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2043">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2044">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2044">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2045">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2045">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2046">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2046">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2047">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2047">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2048">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2048">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2049">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2049">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2050">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2050">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2051">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2051">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2052">Questo esempio si presuppone che `TestFile` è un file con poche righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2052">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2053">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2053">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2054">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2054">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2055">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2055">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2056">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2056">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2059">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2059">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2060">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2060">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2061">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2061">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2062">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2062">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2063">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2063">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2064">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2064">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2065">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2065">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2066">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2066">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2067">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2067">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2068">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2068">Data</span></span>|<span data-ttu-id="1a57d-2069">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2069">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2070">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2070">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2071">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2071">Empty</span></span>|  
|<span data-ttu-id="1a57d-2072">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2072">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2073"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2073">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2074">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2074">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2075">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2075">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2076">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2076">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2077">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2077">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2078">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2078">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2079">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2079">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2080">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2080">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2081">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2081">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2082">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2082">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2083">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2083">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2084">Questo esempio si presuppone che `TestFile` è un file con poche righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2084">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2085">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2085">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2086">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2086">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2087">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2087">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2088">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2088">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2091">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2091">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2092">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2093">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2094">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2094">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2095">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2095">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2096">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2096">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2097">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2097">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2098">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2098">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2099">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2099">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2100">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2100">Data</span></span>|<span data-ttu-id="1a57d-2101">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2101">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2102">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2102">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2103">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2103">Empty</span></span>|  
|<span data-ttu-id="1a57d-2104">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2104">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2105"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2105">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2106">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2106">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2107">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2107">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2108">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2108">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2109">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2109">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2110">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2110">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2111">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2111">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2112">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2112">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2113">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2113">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2114">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2114">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2115">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2115">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2116">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2116">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2117">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2117">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2118">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2118">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2119">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2119">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2120">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2120">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2123">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2123">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2124">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2124">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2125">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2125">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2126">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2126">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2127">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2127">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2128">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2128">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2129">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2129">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2130">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2130">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2131">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2131">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2132">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2132">Data</span></span>|<span data-ttu-id="1a57d-2133">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2133">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2134">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2134">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2135">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2135">Empty</span></span>|  
|<span data-ttu-id="1a57d-2136">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2136">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2137"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2137">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2138">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2138">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2139">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2139">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2140">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2140">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2141">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2141">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2142">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2142">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2143">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2143">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2144">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2144">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2145">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2145">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2146">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2146">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2147">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2147">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2148">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2148">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2149">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2149">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2150">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2150">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2151">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2151">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2152">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2152">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2155">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2155">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2156">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2156">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2157">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2157">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2158">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2158">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2159">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2159">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2160">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2160">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2161">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2161">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2162">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2162">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2163">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2163">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2164">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2164">Data</span></span>|<span data-ttu-id="1a57d-2165">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2165">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2166">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2166">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2167">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2167">Empty</span></span>|  
|<span data-ttu-id="1a57d-2168">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2168">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2169"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2169">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2170">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2170">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2171">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2171">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2172">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2172">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2173">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2173">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2174">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2174">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2175">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2175">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2176">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2176">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2177">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2177">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2178">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2178">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2179">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2179">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2180">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2180">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2181">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2181">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2182">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2182">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2183">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2183">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2184">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2184">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2187">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2187">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2188">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2188">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2189">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2189">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2190">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2190">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2191">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2191">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2192">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2192">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2193">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2193">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2194">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2194">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2195">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2195">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2196">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2196">Data</span></span>|<span data-ttu-id="1a57d-2197">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2197">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2198">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2198">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2199">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2199">Empty</span></span>|  
|<span data-ttu-id="1a57d-2200">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2200">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2201"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2201">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2202">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2202">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2203">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2203">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2204">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2204">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2205">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2205">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2206">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2206">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2207">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2207">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2208">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2208">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2209">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2209">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2210">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2210">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2211">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2211">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2212">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2212">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2213">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2213">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2214">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2214">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2215">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2215">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2216">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2216">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2219">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2219">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2220">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2220">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2221">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2221">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2222">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2222">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2223">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2223">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2224">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2224">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2225">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2225">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2226">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2226">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2227">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2227">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2228">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2228">Data</span></span>|<span data-ttu-id="1a57d-2229">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2229">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2230">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2230">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2231">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2231">Empty</span></span>|  
|<span data-ttu-id="1a57d-2232">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2232">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2233"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2233">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2234">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2234">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2235">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2235">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2236">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2236">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2237">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2237">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2238">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2238">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2239">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2239">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2240">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2240">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2241">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2241">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2242">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2242">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2243">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2243">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2244">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2244">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2245">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2245">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2246">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2246">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2247">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2247">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2248">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2248">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2251">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2251">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2252">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2253">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2253">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2254">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2254">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2255">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2255">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2256">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2256">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2257">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2257">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2258">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2258">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2259">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2259">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2260">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2260">Data</span></span>|<span data-ttu-id="1a57d-2261">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2261">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2262">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2262">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2263">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2263">Empty</span></span>|  
|<span data-ttu-id="1a57d-2264">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2264">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2265"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2265">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2266">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2266">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2267">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2267">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2268">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2268">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2269">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2269">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2270">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2270">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2271">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2271">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2272">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2272">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2273">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2273">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2274">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2274">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2275">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2275">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2276">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2276">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2277">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2277">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2278">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2278">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2279">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2279">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2280">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2280">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2283">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2283">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2284">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2284">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2285">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2285">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2286">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2286">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2287">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2287">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2288">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2288">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2289">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2289">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2290">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2290">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2291">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2291">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2292">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2292">Data</span></span>|<span data-ttu-id="1a57d-2293">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2293">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2294">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2294">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2295">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2295">Empty</span></span>|  
|<span data-ttu-id="1a57d-2296">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2296">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2297"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2297">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2298">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2298">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2299">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2299">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2300">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2300">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2301">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2301">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2302">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2302">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2303">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2303">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2304">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2304">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2305">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2305">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2306">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2306">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2307">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2307">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2308">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2308">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2309">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2309">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2310">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2310">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2311">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2311">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2312">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2312">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2315">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2315">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2316">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2316">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2317">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2317">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2318">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2318">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2319">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2319">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2320">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2320">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2321">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2321">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2322">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2322">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2323">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2323">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2324">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2324">Data</span></span>|<span data-ttu-id="1a57d-2325">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2325">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2326">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2326">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2327">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2327">Empty</span></span>|  
|<span data-ttu-id="1a57d-2328">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2328">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2329"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2329">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2330">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2330">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2331">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2331">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2332">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2332">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2333">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2333">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2334">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2334">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2335">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2335">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2336">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2336">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2337">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2337">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2338">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2338">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2339">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2339">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2340">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2340">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2341">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2341">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2342">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2342">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2343">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2343">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2344">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2344">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2347">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2347">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2348">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2348">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2349">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2349">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2350">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2350">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2351">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2351">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2352">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2352">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2353">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2353">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2354">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2354">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2355">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2355">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2356">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2356">Data</span></span>|<span data-ttu-id="1a57d-2357">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2357">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2358">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2358">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2359">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2359">Empty</span></span>|  
|<span data-ttu-id="1a57d-2360">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2360">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2361"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2361">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2362">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2362">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2363">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2363">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2364">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2364">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2365">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2365">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2366">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2366">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2367">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2367">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2368">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2368">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2369">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2369">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2370">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2370">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2371">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2371">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2372">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2372">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2373">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2373">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2374">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2374">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2375">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2375">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="1a57d-2376">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2376">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2379">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2379">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2380">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2380">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2381">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2381">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2382">I dati letti con `Input` è in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2382">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="1a57d-2383">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2383">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2384">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2384">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2385">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2385">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="1a57d-2386">Durante la lettura, stringa standard o dati numerici viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2386">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="1a57d-2387">Nella tabella seguente viene illustrato come viene considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2387">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="1a57d-2388">Dati</span><span class="sxs-lookup"><span data-stu-id="1a57d-2388">Data</span></span>|<span data-ttu-id="1a57d-2389">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="1a57d-2389">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="1a57d-2390">Delimitati da virgole o riga vuota</span><span class="sxs-lookup"><span data-stu-id="1a57d-2390">Delimiting comma or blank line</span></span>|<span data-ttu-id="1a57d-2391">Empty</span><span class="sxs-lookup"><span data-stu-id="1a57d-2391">Empty</span></span>|  
|<span data-ttu-id="1a57d-2392">#NULL#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2392">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="1a57d-2393"># TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="1a57d-2393">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="1a57d-2394">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2394">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="1a57d-2395">La data e/o l'ora rappresentata dall'espressione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2395">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="1a57d-2396">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="1a57d-2396">#ERROR `errornumber`#</span></span>|<span data-ttu-id="1a57d-2397">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2397">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="1a57d-2398">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestato e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2398">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2399">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2399">The `Input` function is not localized.</span></span> <span data-ttu-id="1a57d-2400">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, perché la virgola viene considerata come un separatore di variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2400">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2401">La lettura da un file utilizzando il `Input` funzione richiede `Read` tramite il `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2401">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2402">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2402">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2403">Questo esempio viene utilizzato il `Input` funzione per leggere dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2403">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="1a57d-2404">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti utilizzando il `Write` funzione, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2404">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2405">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2405">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2406">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2406">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2407">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2407">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="1a57d-2408">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2408">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2409">Any valid numeric expression specifying the number of characters to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2409">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="1a57d-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="1a57d-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="1a57d-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2415">Il `InputString` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2415">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2416">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2416">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2417">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2417">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2418">I dati letti con il `InputString` funzione viene in genere scritti in un file mediante `Print` o `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2418">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="1a57d-2419">Utilizzare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2419">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="1a57d-2420">A differenza di `Input` funzione, il `InputString` funzione restituisce tutti i caratteri letti.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2420">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="1a57d-2421">Ciò include le virgole, ritorni a capo, avanzamenti di riga, tra virgolette e gli spazi iniziali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2421">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="1a57d-2422">Con i file aperti per `Binary` accedere, un tentativo di leggere il file mediante il `InputString` funzione finché `EOF` restituisce `True` genera un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2422">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="1a57d-2423">Usare la `LOF` e `Loc` funzioni anziché `EOF` quando si legge i file binari in `InputString`, o utilizzare `FileGet` quando si usa il `EOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2423">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2424">Durante la lettura da file, non decisioni di protezione sul contenuto del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2424">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2425">Ad esempio, un file denominato Form1 potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2425">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2426">Questo esempio viene utilizzata la `InputString` funzione per leggere un carattere alla volta da un file e stamparlo dal `Output` finestra.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2426">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="1a57d-2427">Questo esempio si presuppone che `MyFile` è un file di testo con più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2427">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2428">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2428">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-2429">
            <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2429">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="1a57d-2430">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2430">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2431">
            <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2431">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="1a57d-2432">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2432">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2433">Deletes files from a disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2433">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="1a57d-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="1a57d-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2436">`Kill` supporta l'utilizzo di più caratteri (`*`) e caratteri a singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2436">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="1a57d-2437">**Nota sulla sicurezza** per eseguire, il `Kill` funzione richiede `Read` e `PathDiscovery` flag di <xref:System.Security.Permissions.FileIOPermission> per essere concesso al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2437">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="1a57d-2438">Per altre informazioni, vedere <xref:System.Security.SecurityException> [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="1a57d-2438">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2439">Questo esempio viene utilizzato il `Kill` (funzione) per eliminare un file da un disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2439">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2440">Target file(s) open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2440">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="1a57d-2441">Target file(s) not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2441">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="1a57d-2442">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2442">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2443">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2443">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2444">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2444">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2447">Il `LineInput` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2447">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2448">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2448">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2449">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2449">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2450">I dati letti con `LineInput` è in genere scritti in un file mediante `Print`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2450">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2451">Durante la lettura da file, non per prendere decisioni in merito al relativo contenuto un file basato sull'estensione del nome file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2451">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="1a57d-2452">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2452">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="1a57d-2453">Il `LineInput` funzione legge da un file di un carattere alla volta finché non incontra un ritorno a capo (`Chr(13)`) o ritorno a capo/avanzamento riga (`Chr(13) + Chr(10)`) sequenza.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2453">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="1a57d-2454">Le sequenze di avanzamento di ritorno a capo/riga vengono ignorate anziché aggiunte alla stringa di caratteri.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2454">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2455">La lettura da un file utilizzando il `LineInput` funzione richiede `Read` tramite il <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2455">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2456">Questo esempio viene utilizzato il `LineInput` funzione per leggere una riga in un file sequenziale e assegnarlo a una variabile.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2456">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="1a57d-2457">Questo esempio si presuppone che `TestFile` è un file di testo con più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2457">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="1a57d-2458">End of file reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2458">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2459">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2459">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2460">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2460">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2461">Any valid <see langword="Integer" /> file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2461">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2464">Il `Loc` funzione è in base zero, utilizzarla per recuperare il primo byte in un file, verrà restituito 0.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2464">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="1a57d-2465">Il `Loc` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2465">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2466">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2467">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2468">Di seguito viene descritto il valore restituito per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2468">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="1a57d-2469">Modalità</span><span class="sxs-lookup"><span data-stu-id="1a57d-2469">Mode</span></span>|<span data-ttu-id="1a57d-2470">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="1a57d-2470">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="1a57d-2471">Numero dell'ultimo record letto o scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2471">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="1a57d-2472">Posizione corrente di byte nel file diviso 128.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2472">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="1a57d-2473">Tuttavia, le informazioni restituite dalla `Loc` per file sequenziali è necessaria né utilizzato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2473">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="1a57d-2474">Posizione dell'ultimo byte letti o scritti.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2474">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2475">Questo esempio viene utilizzato il `Loc` funzione per restituire la posizione di lettura/scrittura corrente in un file aperto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2475">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="1a57d-2476">Questo esempio si presuppone che `MyFile` è un file di testo con più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2476">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2477">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2477">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="1a57d-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2481">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2481">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2482">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2482">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="1a57d-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2486">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2486">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="1a57d-2487">`Lock` e `Unlock` funzioni vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2487">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="1a57d-2488">Gli argomenti per `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2488">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="1a57d-2489">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2489">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="1a57d-2490">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2490">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="1a57d-2491">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2491">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2492">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2492">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="1a57d-2493">Questo esempio si presuppone che `People.txt` è un file contenente i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2493">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2494">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2494">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2495">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2495">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2496">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2496">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="1a57d-2497">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2497">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2498">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2498">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="1a57d-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2502">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2502">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="1a57d-2503">`Lock` e `Unlock` funzioni vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2503">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="1a57d-2504">Gli argomenti per `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2504">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="1a57d-2505">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2505">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="1a57d-2506">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2506">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="1a57d-2507">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2507">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2508">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2508">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="1a57d-2509">Questo esempio si presuppone che `People.txt` è un file contenente i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2509">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2510">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2510">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2511">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2511">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2512">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2512">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="1a57d-2513">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2513">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2514">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2514">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="1a57d-2515">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2515">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2516">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2516">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="1a57d-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2520">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2520">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="1a57d-2521">`Lock` e `Unlock` funzioni vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2521">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="1a57d-2522">Gli argomenti per `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2522">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="1a57d-2523">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2523">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="1a57d-2524">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2524">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="1a57d-2525">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2525">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2526">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2526">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="1a57d-2527">Questo esempio si presuppone che `People.txt` è un file contenente i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2527">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2528">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2529">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2529">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="1a57d-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2536">Utilizzare il `FileLen` funzione per ottenere la lunghezza di un file che non è aperta.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2536">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2537">Questo esempio viene utilizzato il `LOF` funzione per determinare le dimensioni di un file aperto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2537">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="1a57d-2538">Questo esempio si presuppone che `TestFile` è un file di testo che contiene i dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2538">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2539">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2539">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="1a57d-2540">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2540">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2541">
            <see langword="String" /> expression that identifies the directory to be created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2541">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="1a57d-2542">The <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2542">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="1a57d-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2544">Creates a new directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2544">Creates a new directory.</span>
          </span>
          <span data-ttu-id="1a57d-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="1a57d-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2547">Questa funzione crea una nuova directory.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2547">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2548">Questo esempio viene utilizzato il `MkDir` funzione per creare una directory.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2548">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="1a57d-2549">Se l'unità non è specificato, viene creata la nuova directory nell'unità attuale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2549">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-2550">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2550">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="1a57d-2551">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2551">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2552">Directory already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2552">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2553">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2553">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2554">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2554">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="1a57d-2555">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2555">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2556">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2556">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="1a57d-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="1a57d-2558">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2558">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2559">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2559">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2560">Il `Print` e `PrintLine` funzioni vengono fornite per la compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2560">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2561">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2561">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2562">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2562">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2563">`Print` non include un avanzamento riga alla fine di una riga. Tuttavia, `PrintLine` includono un avanzamento riga.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2563">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="1a57d-2564">I dati scritti con `Print` è in genere letti da un file mediante `LineInput` o `Input`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2564">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="1a57d-2565">Se si omette `Output` per `PrintLine`, una riga vuota viene stampata il file; per `Print`, niente è output.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2565">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="1a57d-2566">Più espressioni separate da una virgola verranno allineate su limiti della scheda, ma la combinazione di virgole e `TAB` può causare risultati incoerenti.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2566">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="1a57d-2567">Per `Boolean` dati, ovvero `True` o `False` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2567">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="1a57d-2568">Il `True` e `False` parole chiave non sono tradotte, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2568">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="1a57d-2569">Dati relativi alla data viene scritto nel file utilizzando il formato di data breve standard riconosciuto dal sistema.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2569">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="1a57d-2570">Se la data o il componente della fase manca o è zero, solo la parte fornito è scritta nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2570">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="1a57d-2571">Viene scritta alcuna voce per il file se `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2571">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="1a57d-2572">Tuttavia, se `Output` elenco di dati è `DBNull`, `Null` viene scritta nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2572">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="1a57d-2573">Per `Error` dati, l'output viene visualizzato come `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2573">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="1a57d-2574">Il `Error` parola chiave non viene eseguita indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2574">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="1a57d-2575">Tutti i dati scritti nel file utilizzando `Print` internazionali; vale a dire, i dati sia formattati correttamente utilizzando il separatore decimale appropriato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2575">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="1a57d-2576">Se l'utente desidera ottenere dati da utilizzare in più lingue, `Write` deve essere utilizzato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2576">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="1a57d-2577">Scrittura in un file utilizzando il `Print` o `PrintLine` funzioni richiede `Write` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2577">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2578">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2578">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2579">Questo esempio viene utilizzata la `Print` e `PrintLine` funzioni per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2579">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2580">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2580">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2581">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2581">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="1a57d-2582">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2582">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2583">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2583">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="1a57d-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="1a57d-2585">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2585">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2586">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2586">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2587">Il `Print` e `PrintLine` funzioni vengono fornite per la compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2587">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2588">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2588">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2589">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2589">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2590">`Print` non include un avanzamento riga alla fine di una riga. Tuttavia,`PrintLine` includono un avanzamento riga.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2590">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="1a57d-2591">I dati scritti con `Print` è in genere letti da un file mediante `LineInput` o `Input`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2591">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="1a57d-2592">Se si omette `Output` per `PrintLine`, una riga vuota viene stampata il file; per `Print`, niente è output.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2592">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="1a57d-2593">Più espressioni separate da una virgola verranno allineate su limiti della scheda, ma la combinazione di virgole e `TAB` può causare risultati incoerenti.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2593">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="1a57d-2594">Per `Boolean` dati, ovvero `True` o `False` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2594">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="1a57d-2595">Il `True` e `False` parole chiave non sono tradotte, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2595">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="1a57d-2596">Dati relativi alla data viene scritto nel file utilizzando il formato di data breve standard riconosciuto dal sistema.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2596">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="1a57d-2597">Se la data o il componente della fase manca o è zero, solo la parte fornito è scritta nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2597">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="1a57d-2598">Viene scritta alcuna voce per il file se `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2598">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="1a57d-2599">Tuttavia, se `Output` elenco di dati è `DBNull`, `Null` viene scritta nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2599">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="1a57d-2600">Per `Error` dati, l'output viene visualizzato come `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2600">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="1a57d-2601">Il `Error` parola chiave non viene eseguita indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2601">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="1a57d-2602">Tutti i dati scritti nel file utilizzando `Print` internazionali; vale a dire, i dati sia formattati correttamente utilizzando il separatore decimale appropriato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2602">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="1a57d-2603">Se l'utente desidera ottenere dati da utilizzare in più lingue, `Write` deve essere utilizzato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2603">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="1a57d-2604">Scrittura in un file utilizzando il `Print` o `PrintLine` funzioni richiede `Write` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2604">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2605">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2605">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2606">Questo esempio viene utilizzata la `Print` e `PrintLine` funzioni per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2606">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="1a57d-2607">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2607">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2608">
            <see langword="String" /> expression that specifies the existing file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2608">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="1a57d-2609">
            <c>OldPath</c> may include the directory, and drive, of the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2609">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="1a57d-2610">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2610">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2611">
            <see langword="String" /> expression that specifies the new file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2611">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="1a57d-2612">
            <c>NewPath</c> may include directory and drive of the destination location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2612">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="1a57d-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2614">Renames a disk file or directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2614">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="1a57d-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="1a57d-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2617">Il`Rename` funzione Rinomina un file e spostarlo in una directory diversa, se necessario.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2617">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="1a57d-2618">Il `Rename` funzione è possibile spostare un file in unità, ma è possibile rinominare solo una directory esistente quando entrambi `NewPath` e `OldPath` si trovano nella stessa unità.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2618">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="1a57d-2619">`Rename` non è possibile creare un nuovo file o directory.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2619">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="1a57d-2620">Utilizzando il `Rename` funzione in un file aperto genera un errore.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2620">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="1a57d-2621">È necessario chiudere un file aperto prima di rinominarlo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2621">You must close an open file before renaming it.</span></span> <span data-ttu-id="1a57d-2622">`Rename` argomenti non possono includere più caratteri (\*) e i caratteri jolly (?) con caratteri a singolo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2622">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1a57d-2623">Quando si utilizza `Rename` per copiare un file da un percorso non protetto in un percorso protetto, il file manterrà i diritti meno restrizioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2623">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="1a57d-2624">Verifica per accertarsi che non si stanno introducendo possibili rischi di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2624">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2625">Questo esempio viene utilizzato il `Rename` funzione Rinomina un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2625">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="1a57d-2626">Ai fini di questo esempio, si supponga che esistano le directory che sono già specificate.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2626">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-2627">Path is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2627">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="1a57d-2628">
            <paramref name="OldPath" /> file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2628">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2629">Cannot rename to different device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2629">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="1a57d-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2633">Il `Reset` funzione chiude tutti i file aperti per il `FileOpen` funzione e ha la stessa funzione `FileClose()` senza parametri.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2633">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2634">Questo esempio viene utilizzato il `Reset` funzione per chiudere tutti i file aperti e scrivere il contenuto di tutti i buffer di file su disco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2634">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="1a57d-2635">Si noti l'uso della `Object` variabile `FileNumber` come stringa sia un numero.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2635">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="1a57d-2636">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2636">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2637">
            <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2637">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="1a57d-2638">
            <c>Path</c> can include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2638">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="1a57d-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2640">Removes an existing directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2640">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="1a57d-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="1a57d-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2643">Si verifica un errore se si tenta di utilizzare `RmDir` in una directory che contiene i file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2643">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="1a57d-2644">Utilizzare il `Kill` funzione eliminare tutti i file prima di provare a rimuovere una directory.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2644">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2645">Questo esempio viene utilizzato il `RmDir` funzione per rimuovere una directory esistente.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2645">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-2646">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2646">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2647">Target directory contains files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2647">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="1a57d-2648">Directory does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2648">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="1a57d-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2652">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2652">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="1a57d-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2658">`Seek` Restituisce un valore compreso tra 1 e 2.147.483.647 (equivalente a 2 ^ 31-1), inclusi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2658">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="1a57d-2659">Di seguito vengono descritti i valori restituiti per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2659">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="1a57d-2660">Modalità</span><span class="sxs-lookup"><span data-stu-id="1a57d-2660">Mode</span></span>|<span data-ttu-id="1a57d-2661">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="1a57d-2661">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="1a57d-2662">Numero del record successivo letto o scritto</span><span class="sxs-lookup"><span data-stu-id="1a57d-2662">Number of the next record read or written</span></span>|  
|<span data-ttu-id="1a57d-2663">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2663">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="1a57d-2664">Posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2664">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="1a57d-2665">Il primo byte in un file si trova in posizione 1, il secondo byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2665">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2666">Questo esempio viene utilizzato il `Seek` funzione per restituire la posizione corrente del file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2666">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="1a57d-2667">Nell'esempio si presuppone `TestFile` è un file contenente i record della struttura `Record`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2667">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="1a57d-2668">Per i file aperti `Random` modalità `Seek` restituisce il numero di record successivo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2668">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="1a57d-2669">Per i file aperti in modalità diverso da `Random` modalità `Seek` restituisce la posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2669">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="1a57d-2670">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2670">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="1a57d-2671">Questo esempio viene utilizzato il `Seek` funzione per impostare la posizione per la successiva operazione di lettura o scrittura in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2671">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="1a57d-2672">Per i file aperti in modalità diverso da `Random` modalità `Seek` imposta la posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2672">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="1a57d-2673">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2673">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2674">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2674">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2675">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2675">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="1a57d-2677">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2677">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="1a57d-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2682">`Seek` Restituisce un valore compreso tra 1 e 2.147.483.647 (equivalente a 2 ^ 31-1), inclusi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2682">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="1a57d-2683">Di seguito vengono descritti i valori restituiti per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2683">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="1a57d-2684">Modalità</span><span class="sxs-lookup"><span data-stu-id="1a57d-2684">Mode</span></span>|<span data-ttu-id="1a57d-2685">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="1a57d-2685">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="1a57d-2686">Numero del record successivo letto o scritto</span><span class="sxs-lookup"><span data-stu-id="1a57d-2686">Number of the next record read or written</span></span>|  
|<span data-ttu-id="1a57d-2687">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="1a57d-2687">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="1a57d-2688">Posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2688">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="1a57d-2689">Il primo byte in un file si trova in posizione 1, il secondo byte in posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2689">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2690">Questo esempio viene utilizzato il `Seek` funzione per restituire la posizione corrente del file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2690">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="1a57d-2691">Nell'esempio si presuppone `TestFile` è un file contenente i record della struttura `Record`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2691">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="1a57d-2692">Per i file aperti `Random` modalità `Seek` restituisce il numero di record successivo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2692">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="1a57d-2693">Per i file aperti in modalità diverso da `Random` modalità `Seek` restituisce la posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2693">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="1a57d-2694">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="1a57d-2695">Questo esempio viene utilizzato il `Seek` funzione per impostare la posizione per la successiva operazione di lettura o scrittura in un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2695">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="1a57d-2696">Per i file aperti in modalità diverso da `Random` modalità `Seek` imposta la posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2696">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="1a57d-2697">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2697">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2698">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2698">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="1a57d-2699">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2699">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2700">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2700">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="1a57d-2701">
            <c>PathName</c> can include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2701">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="1a57d-2702">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2702">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2704">Sets attribute information for a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2704">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="1a57d-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="1a57d-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2707">Se si tenta di impostare gli attributi di un file aperto, si verifica un errore di run-time.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2707">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="1a57d-2708">Il `Attributes` valori di enumerazione degli argomenti sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2708">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="1a57d-2709">Valore</span><span class="sxs-lookup"><span data-stu-id="1a57d-2709">Value</span></span>|<span data-ttu-id="1a57d-2710">Costante</span><span class="sxs-lookup"><span data-stu-id="1a57d-2710">Constant</span></span>|<span data-ttu-id="1a57d-2711">Descrizione</span><span class="sxs-lookup"><span data-stu-id="1a57d-2711">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="1a57d-2712">Normale (impostazione predefinita).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2712">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="1a57d-2713">Sola lettura.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2713">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="1a57d-2714">Nascosto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2714">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="1a57d-2715">File di sistema.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2715">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="1a57d-2716">Etichetta del volume</span><span class="sxs-lookup"><span data-stu-id="1a57d-2716">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="1a57d-2717">Directory o una cartella.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2717">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="1a57d-2718">File è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2718">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="1a57d-2719">File ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2719">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2720">Queste enumerazioni vengono specificate tramite il linguaggio Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2720">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="1a57d-2721">I nomi possono essere usati in qualsiasi punto nel codice anziché i valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2721">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2722">Questo esempio viene utilizzato il `SetAttr` funzione per impostare gli attributi per un file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2722">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1a57d-2723">
            <paramref name="Attribute" /> type is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2723">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="1a57d-2724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2724">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2728">Se `Count` è minore della larghezza di riga di output, la posizione successiva immediatamente seguirà il numero di spazi stampati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2728">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="1a57d-2729">Se`Count` è maggiore della larghezza della riga di output, `SPC` calcolerà la posizione successiva utilizzando la formula:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2729">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="1a57d-2730">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="1a57d-2730">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="1a57d-2731">Ad esempio, se la posizione di stampa è 24, la larghezza della riga di output è 80 e si specifica `SPC(90)`, la stampa Avanti inizierà dalla posizione 34 (posizione di stampa corrente + il resto di 90/80).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2731">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="1a57d-2732">Se la differenza tra la posizione di stampa e la larghezza della riga di output è inferiore a `Count` (o `Count` `Mod` *larghezza*), il `SPC` funzione passerà all'inizio della riga successiva e genera l'errore spazi uguale a `Count` – (*larghezza* – *currentprintposition*).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2732">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2733">Verificare che le colonne di tabella sono sufficientemente ampia per consentire le lettere "wide".</span><span class="sxs-lookup"><span data-stu-id="1a57d-2733">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2734">Questo esempio viene utilizzata la `SPC` per posizionare l'output in un file e in funzione la **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2734">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2738">Se la posizione di stampa nella riga corrente è maggiore `Column`, `TAB` ignora il valore di colonna uguale a `Column` nella riga successiva di output.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2738">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="1a57d-2739">Se `Column` è minore di 1 `TAB` Sposta la posizione di stampa per la colonna 1.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2739">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="1a57d-2740">Se `Column` è maggiore della larghezza di riga di output, `TAB` calcolerà la posizione successiva utilizzando la formula:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2740">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="1a57d-2741">Larghezza della colonna Mod</span><span class="sxs-lookup"><span data-stu-id="1a57d-2741">Column Mod width</span></span>  
  
 <span data-ttu-id="1a57d-2742">Ad esempio, se *larghezza* è 80 e si specifica `TAB(90)`, la stampa Avanti inizierà dalla colonna 10 (il resto di 90/80).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2742">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="1a57d-2743">Se `Column` è inferiore alla posizione di stampa, la stampa inizierà nella riga successiva in corrispondenza della posizione di stampa calcolata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2743">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="1a57d-2744">Se la posizione di stampa calcolata è maggiore della posizione di stampa corrente, posizione di stampa la stampa inizierà dalla calcolata nella stessa riga.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2744">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="1a57d-2745">La posizione più a sinistra di stampa in una riga di output è sempre 1.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2745">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="1a57d-2746">Quando si usa il `Print` oppure `PrintLine` funzioni per la stampa su file, l'ultima posizione corrisponde alla larghezza corrente del file di output, è possibile impostare utilizzando il `FileWidth` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2746">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="1a57d-2747">Il `TAB` funzione può essere utilizzata anche con il `WriteLine` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2747">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="1a57d-2748">Non può essere utilizzato con <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2748">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2749">Verificare che le colonne di tabella sono sufficientemente ampia per contenere i caratteri "wide".</span><span class="sxs-lookup"><span data-stu-id="1a57d-2749">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2750">Questo esempio viene utilizzata la `TAB` per posizionare l'output in un file e in funzione la **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2750">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="1a57d-2751">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2751">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="1a57d-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1a57d-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2756">Se la posizione di stampa nella riga corrente è maggiore `Column`, `TAB` ignora il valore di colonna uguale a `Column` nella riga successiva di output.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2756">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="1a57d-2757">Se `Column` è minore di 1 `TAB` Sposta la posizione di stampa per la colonna 1.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2757">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="1a57d-2758">Se `Column` è maggiore della larghezza della riga di output, `TAB` calcolerà la posizione successiva utilizzando la formula:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2758">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="1a57d-2759">Larghezza della colonna Mod</span><span class="sxs-lookup"><span data-stu-id="1a57d-2759">Column Mod width</span></span>  
  
 <span data-ttu-id="1a57d-2760">Ad esempio, se *larghezza* è 80 e si specifica `TAB(90)`, la stampa Avanti inizierà dalla colonna 10 (il resto di 90/80).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2760">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="1a57d-2761">Se `Column` è inferiore alla posizione di stampa, la stampa inizierà nella riga successiva in corrispondenza della posizione di stampa calcolata.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2761">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="1a57d-2762">Se la posizione di stampa calcolata è maggiore della posizione di stampa corrente, posizione di stampa la stampa inizierà dalla calcolata nella stessa riga.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2762">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="1a57d-2763">La posizione più a sinistra di stampa in una riga di output è sempre 1.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2763">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="1a57d-2764">Quando si usa il `Print` oppure `PrintLine` funzioni per la stampa su file, l'ultima posizione corrisponde alla larghezza corrente del file di output, è possibile impostare utilizzando il `FileWidth` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2764">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="1a57d-2765">Il `TAB` funzione può essere utilizzata anche con il `WriteLine` (funzione).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2765">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="1a57d-2766">Non può essere utilizzato con <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2766">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1a57d-2767">Verificare che le colonne di tabella sono sufficientemente ampia per contenere i caratteri "wide".</span><span class="sxs-lookup"><span data-stu-id="1a57d-2767">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2768">Questo esempio viene utilizzata la `TAB` per posizionare l'output in un file e in funzione la **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2768">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1a57d-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="1a57d-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2772">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2772">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2773">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2773">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="1a57d-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2777">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2777">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="1a57d-2778">`Lock` e `Unlock` funzioni vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2778">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="1a57d-2779">Gli argomenti per `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2779">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="1a57d-2780">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2780">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="1a57d-2781">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2781">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="1a57d-2782">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2782">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2783">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2783">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="1a57d-2784">Questo esempio si presuppone che `People.txt` è un file contenente i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2784">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2785">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2785">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2786">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2786">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2787">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2787">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="1a57d-2788">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2788">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2789">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2789">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="1a57d-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2793">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2793">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="1a57d-2794">`Lock` e `Unlock` funzioni vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2794">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="1a57d-2795">Gli argomenti per `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2795">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="1a57d-2796">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2796">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="1a57d-2797">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2797">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="1a57d-2798">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2798">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2799">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2799">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="1a57d-2800">Questo esempio si presuppone che `People.txt` è un file contenente i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2800">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2801">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2801">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2802">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2802">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2803">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2803">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="1a57d-2804">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2804">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2805">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2805">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="1a57d-2806">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2806">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2807">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2807">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="1a57d-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="1a57d-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2811">Il `Lock` e `Unlock` vengono utilizzate in ambienti in cui più processi potrebbero richiedere l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2811">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="1a57d-2812">`Lock` e `Unlock` funzioni vengono sempre utilizzate in coppia.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2812">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="1a57d-2813">Gli argomenti per `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2813">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="1a57d-2814">Se `Record`, o `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2814">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="1a57d-2815">Se `Record` viene specificato solo il record singolo sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2815">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="1a57d-2816">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2816">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2817">In questo esempio viene illustrato l'utilizzo del `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2817">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="1a57d-2818">Questo esempio si presuppone che `People.txt` è un file contenente i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2818">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2819">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2819">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2820">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2820">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="1a57d-2822">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2822">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2823">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2823">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2824">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2824">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="1a57d-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2826">Il `Write` e `WriteLine` funzioni vengono fornite per la compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2826">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2827">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2827">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2828">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2828">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2829">Se si omette `Output`, una riga vuota viene stampata il file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2829">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="1a57d-2830">Più espressioni possono essere separati da una virgola.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2830">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="1a57d-2831">A differenza di `Print` funzione, il `Write` funzione inserisce le virgole tra gli elementi e racchiudere le stringhe tra virgolette quando vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2831">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="1a57d-2832">Non è necessario inserire delimitatori espliciti nell'elenco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2832">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="1a57d-2833">Quando si `Write` consente di scrivere dati in un file, solo alfanumerici `Boolean`, data, null e `Error` sono supportati i formati di dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2833">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="1a57d-2834">Il seguente convenzioni universali in modo che i dati possono sempre essere letti e interpretati correttamente mediante `Input`, indipendentemente dalle impostazioni locali:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2834">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="1a57d-2835">Dati numerici viene sempre scritto utilizzando il punto come separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2835">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="1a57d-2836">Per `Boolean` dati, ovvero `#TRUE#` o `#FALSE#` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2836">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="1a57d-2837">Il `True` e `False` parole chiave non sono tradotte, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2837">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="1a57d-2838">Dati relativi alla data viene scritto nel file utilizzando il formato di data universale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2838">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="1a57d-2839">Se la data o il componente della fase manca o è zero, solo la parte fornito è scritta nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2839">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="1a57d-2840">Viene scritta alcuna voce per il file se `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2840">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="1a57d-2841">Tuttavia, per i dati null, `#NULL#` viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2841">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="1a57d-2842">Per `Error` dati, l'output viene visualizzato come `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2842">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="1a57d-2843">Il `Error` parola chiave non viene convertito, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2843">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="1a57d-2844">`WriteLine` Inserisce un carattere di nuova riga (ovvero, un ritorno a capo/avanzamento riga, o `Chr(13) + Chr(10)`), dopo l'ultimo carattere scritto `Output` al file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2844">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="1a57d-2845">È possibile incorporare in una stringa tra virgolette con virgolette doppie, o "".</span><span class="sxs-lookup"><span data-stu-id="1a57d-2845">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="1a57d-2846">Ad esempio,</span><span class="sxs-lookup"><span data-stu-id="1a57d-2846">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="1a57d-2847">Restituisce una stringa con il valore di `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2847">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="1a57d-2848">Scrittura in un file utilizzando il `Write` o `WriteLine` funzioni richiede `Append` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2848">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2849">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2849">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2850">Questo esempio viene utilizzato il `Write` funzione per scrivere i dati non elaborati in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2850">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="1a57d-2851">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2851">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="1a57d-2852">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2852">Required.</span>
          </span>
          <span data-ttu-id="1a57d-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="1a57d-2854">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2854">Optional.</span>
          </span>
          <span data-ttu-id="1a57d-2855">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2855">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1a57d-2856">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2856">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="1a57d-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1a57d-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a57d-2858">Il `Write` e `WriteLine` funzioni vengono fornite per la compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2858">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="1a57d-2859">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2859">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="1a57d-2860">Per altre informazioni, vedere [l'accesso ai File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="1a57d-2860">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="1a57d-2861">Se si omette `Output`, una riga vuota viene stampata il file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2861">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="1a57d-2862">Più espressioni possono essere separati da una virgola.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2862">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="1a57d-2863">A differenza di `Print` funzione, il `Write` funzione inserisce le virgole tra gli elementi e racchiudere le stringhe tra virgolette quando vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2863">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="1a57d-2864">Non è necessario inserire delimitatori espliciti nell'elenco.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2864">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="1a57d-2865">Quando si `Write` consente di scrivere dati in un file, solo alfanumerici `Boolean`, data, null e `Error` sono supportati i formati di dati.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2865">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="1a57d-2866">Il seguente convenzioni universali in modo che i dati possono sempre essere letti e interpretati correttamente mediante `Input`, indipendentemente dalle impostazioni locali:</span><span class="sxs-lookup"><span data-stu-id="1a57d-2866">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="1a57d-2867">Dati numerici viene sempre scritto utilizzando il punto come separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2867">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="1a57d-2868">Per `Boolean` dati, ovvero `#TRUE#` o `#FALSE#` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2868">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="1a57d-2869">Il `True` e `False` parole chiave non sono tradotte, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2869">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="1a57d-2870">Dati relativi alla data viene scritto nel file utilizzando il formato di data universale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2870">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="1a57d-2871">Se la data o il componente della fase manca o è zero, solo la parte fornito è scritta nel file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2871">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="1a57d-2872">Viene scritta alcuna voce per il file se `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2872">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="1a57d-2873">Tuttavia, per i dati null, `#NULL#` viene scritto.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2873">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="1a57d-2874">Per `Error` dati, l'output viene visualizzato come `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2874">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="1a57d-2875">Il `Error` parola chiave non viene convertito, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2875">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="1a57d-2876">`WriteLine` Inserisce un carattere di nuova riga (ovvero, un ritorno a capo/avanzamento riga, o `Chr(13) + Chr(10)`), dopo l'ultimo carattere scritto `Output` al file.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2876">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="1a57d-2877">È possibile incorporare in una stringa tra virgolette con virgolette doppie, o "".</span><span class="sxs-lookup"><span data-stu-id="1a57d-2877">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="1a57d-2878">Ad esempio,</span><span class="sxs-lookup"><span data-stu-id="1a57d-2878">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="1a57d-2879">Restituisce una stringa con il valore di `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2879">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="1a57d-2880">Scrittura in un file utilizzando il `Write` o `WriteLine` funzioni richiede `Append` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2880">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="1a57d-2881">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2881">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1a57d-2882">Questo esempio viene utilizzato il `Write` funzione per scrivere i dati non elaborati in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="1a57d-2882">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>