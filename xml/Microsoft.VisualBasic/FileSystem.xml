<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb3cbdf16c699365dc1a2fa7cf6e6eb4d128a87b" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51891464" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f50f8-101">Il modulo <see langword="FileSystem" /> contiene le procedure utilizzate per eseguire operazioni su file, directory o cartelle e sistema.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f50f8-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="f50f8-102">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto all'utilizzo del modulo <see langword="FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f50f8-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="f50f8-103">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f50f8-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-104">Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri delle librerie di runtime che accedono a file e cartelle.</span><span class="sxs-lookup"><span data-stu-id="f50f8-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-105">Questo esempio viene usato il `GetAttr` funzione per determinare gli attributi di file e directory o cartella.</span><span class="sxs-lookup"><span data-stu-id="f50f8-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md">
      <span data-ttu-id="f50f8-106">Riepilogo di directory e file</span>
      <span class="sxs-lookup">
        <span data-stu-id="f50f8-106">Directories and Files Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md">
      <span data-ttu-id="f50f8-107">Riepilogo di input e output</span>
      <span class="sxs-lookup">
        <span data-stu-id="f50f8-107">Input and Output Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="f50f8-108">Parole chiave (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="f50f8-108">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="f50f8-109">Membri della libreria Run-Time Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="f50f8-109">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="f50f8-110">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-110">Required.</span>
          </span>
          <span data-ttu-id="f50f8-111">Espressione <see langword="String" /> che identifica la directory o la cartella che diventa la nuova directory o cartella predefinita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-111">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="f50f8-112">L'elemento <c>Path</c> può includere l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-112">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="f50f8-113">Se non viene specificata alcuna unità, <see langword="ChDir" /> cambia la directory o cartella predefinita dell'unità corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-114">Cambia la directory o cartella corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-114">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="f50f8-115">Nelle operazioni di I/O su file la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="ChDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-116">Per ulteriori informazioni, vedi <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-117">Il `ChDir` funzione modifica la directory predefinita, ma non l'unità predefinita.</span><span class="sxs-lookup"><span data-stu-id="f50f8-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="f50f8-118">Ad esempio, se l'unità predefinita è C, l'istruzione seguente modifica la directory predefinita nell'unità D, mentre C rimane l'unità predefinita:</span><span class="sxs-lookup"><span data-stu-id="f50f8-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="f50f8-119">È possibile rendere relativo le modifiche della directory è necessario digitare due punti, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="f50f8-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-120">Il `ChDir` funzione richiede l'autorizzazione per codice non gestito, che possono influire sull'esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f50f8-121">Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e.</span><span class="sxs-lookup"><span data-stu-id="f50f8-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-122">Questo esempio viene usato il `ChDir` funzione per modificare la directory o cartella corrente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-123">
            <paramref name="Path" /> è vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-123">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f50f8-124">L'unità specificata non è valida o non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-124">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">
          <span data-ttu-id="f50f8-125">Procedura: analizzare percorsi di file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-125">How to: Parse File Paths in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">
          <span data-ttu-id="f50f8-126">Creazione, eliminazione e spostamento di file e directory in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-127">Cambia l'unità corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-127">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="f50f8-128">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-128">Required.</span>
          </span>
          <span data-ttu-id="f50f8-129">Espressione String che specifica un'unità esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-129">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="f50f8-130">Se viene fornita una stringa di lunghezza zero (""), l'unità corrente non verrà modificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-130">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="f50f8-131">Se l'argomento <c>Drive</c> è una stringa a più caratteri, <see langword="ChDrive" /> usa solo la prima lettera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-131">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-132">Cambia l'unità corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-132">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-133">Il `ChDrive` funzione richiede l'autorizzazione per codice non gestito, che possono influire sull'esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f50f8-134">Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="f50f8-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-135">Questo esempio viene usato il `ChDrive` funzione per modificare l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f50f8-136">La funzione genera un'eccezione se l'unità non esiste.</span><span class="sxs-lookup"><span data-stu-id="f50f8-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-137">L'unità specificata non è valida o non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-137">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-138">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-138">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="f50f8-139">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-139">Required.</span>
          </span>
          <span data-ttu-id="f50f8-140">Espressione String che specifica un'unità esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-140">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="f50f8-141">Se viene fornita una stringa di lunghezza zero (""), l'unità corrente non verrà modificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-141">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="f50f8-142">Se l'argomento <c>Drive</c> è una stringa a più caratteri, <see langword="ChDrive" /> usa solo la prima lettera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-142">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-143">Cambia l'unità corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-143">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-144">Il `ChDrive` funzione richiede l'autorizzazione per codice non gestito, che possono influire sull'esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="f50f8-145">Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="f50f8-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-146">Questo esempio viene usato il `ChDrive` funzione per modificare l'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="f50f8-147">La funzione genera un'eccezione se l'unità non esiste.</span><span class="sxs-lookup"><span data-stu-id="f50f8-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-148">L'unità specificata non è valida o non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-148">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-149">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-149">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-150">Restituisce una stringa che rappresenta il percorso corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-150">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="f50f8-151">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto a <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="f50f8-152">Per ulteriori informazioni, vedere <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-153">Restituisce una stringa che rappresenta il percorso corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="f50f8-154">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto a <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="f50f8-155">Per ulteriori informazioni, vedere <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-156">Stringa che rappresenta il percorso corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f50f8-157">Questo esempio viene usato il `CurDir` funzione per restituire il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="f50f8-158">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-158">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-159">Espressione <see langword="Char" /> che specifica un'unità esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-159">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="f50f8-160">Se non si specifica alcuna unità, o se l'elemento <c>Drive</c> è una stringa di lunghezza zero (""), <see langword="CurDir" /> restituisce il percorso dell'unità corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-160">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-161">Restituisce una stringa che rappresenta il percorso corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-161">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="f50f8-162">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto a <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="f50f8-163">Per ulteriori informazioni, vedere <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-164">Stringa che rappresenta il percorso corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-164">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f50f8-165">Questo esempio viene usato il `CurDir` funzione per restituire il percorso corrente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-166">Restituisce una stringa che rappresenta il nome di un file, di una directory o di una cartella corrispondente a un criterio o a un attributo di file specificato oppure all'etichetta di volume di un'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="f50f8-167">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="Dir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-168">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-169">Restituisce una stringa che rappresenta il nome di un file, di una directory o di una cartella corrispondente a un criterio o a un attributo di file specificato oppure all'etichetta di volume di un'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="f50f8-170">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="Dir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-171">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-172">Stringa che rappresenta il nome di un file, una directory o una cartella corrispondente a un determinato attributo di file o modello, oppure l'etichetta di volume di un'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-173">Il `Dir` funzione supporta l'utilizzo di più caratteri (`*`) e carattere singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f50f8-174">`VbVolume` Restituisce l'etichetta di volume per l'unità anziché un nome file specifico.</span><span class="sxs-lookup"><span data-stu-id="f50f8-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f50f8-175">È necessario specificare una `PathName` la prima volta che si chiama il `Dir` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f50f8-176">Per recuperare l'elemento successivo, è possibile eseguire le chiamate successive al `Dir` funzione senza parametri.</span><span class="sxs-lookup"><span data-stu-id="f50f8-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-177">Per eseguire correttamente, il `Dir` funzione richiede la <xref:System.Security.Permissions.FileIOPermissionAccess.Read> e <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flag di <xref:System.Security.Permissions.FileIOPermission> da concedere al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f50f8-178">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, e [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="f50f8-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f50f8-179">Il `Attributes` valori di enumerazione degli argomenti sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f50f8-180">Valore</span><span class="sxs-lookup"><span data-stu-id="f50f8-180">Value</span></span>|<span data-ttu-id="f50f8-181">Costante</span><span class="sxs-lookup"><span data-stu-id="f50f8-181">Constant</span></span>|<span data-ttu-id="f50f8-182">Descrizione</span><span class="sxs-lookup"><span data-stu-id="f50f8-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f50f8-183">Predefinita.</span><span class="sxs-lookup"><span data-stu-id="f50f8-183">Default.</span></span> <span data-ttu-id="f50f8-184">Specifica i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f50f8-185">Specifica i file di sola lettura, nonché i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f50f8-186">Specifica i file nascosti, nonché i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f50f8-187">Specifica i file di sistema, nonché i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f50f8-188">Specifica l'etichetta di volume. Se viene specificato qualsiasi altro attributo, `vbVolume` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f50f8-189">Specifica le directory o cartelle, nonché i file senza attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f50f8-190">Il file è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="f50f8-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f50f8-191">Il file ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="f50f8-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-192">Queste enumerazioni sono specificate dal linguaggio Visual Basic e possono essere utilizzate ovunque nel codice anziché i valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-193">Questo esempio viene usato il `Dir` per verificare la presenza di determinati file e directory.</span><span class="sxs-lookup"><span data-stu-id="f50f8-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f50f8-194">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-194">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-195">Espressione <see langword="String" /> che specifica un nome di file, directory o cartella o un'etichetta di volume di un'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-195">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="f50f8-196">Viene restituita una stringa di lunghezza zero (<see langword="&quot;&quot;" />) se l'elemento <c>PathName</c> non viene trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="f50f8-197">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-197">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-198">Enumerazione o espressione numerica il cui valore specifica attributi di file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-198">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="f50f8-199">Se omesso, <see langword="Dir" /> restituisce file che corrispondono a <c>PathName</c> ma sono privi di attributi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-199">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-200">Restituisce una stringa che rappresenta il nome di un file, di una directory o di una cartella corrispondente a un criterio o a un attributo di file specificato oppure all'etichetta di volume di un'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-200">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="f50f8-201">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="Dir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-201">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-202">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-202">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-203">Stringa che rappresenta il nome di un file, una directory o una cartella corrispondente a un determinato attributo di file o modello, oppure l'etichetta di volume di un'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-203">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-204">Il `Dir` funzione supporta l'utilizzo di più caratteri (`*`) e carattere singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-204">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f50f8-205">`VbVolume` Restituisce l'etichetta di volume per l'unità anziché un nome file specifico.</span><span class="sxs-lookup"><span data-stu-id="f50f8-205">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="f50f8-206">È necessario specificare una `PathName` la prima volta che si chiama il `Dir` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-206">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="f50f8-207">Per recuperare l'elemento successivo, è possibile eseguire le chiamate successive al `Dir` funzione senza parametri.</span><span class="sxs-lookup"><span data-stu-id="f50f8-207">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-208">Per eseguire correttamente, il `Dir` funzione richiede la <xref:System.Security.Permissions.FileIOPermissionAccess.Read> e <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flag di <xref:System.Security.Permissions.FileIOPermission> da concedere al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-208">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f50f8-209">Per altre informazioni, vedere <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, e [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="f50f8-209">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="f50f8-210">Il `Attributes` valori di enumerazione degli argomenti sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-210">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f50f8-211">Valore</span><span class="sxs-lookup"><span data-stu-id="f50f8-211">Value</span></span>|<span data-ttu-id="f50f8-212">Costante</span><span class="sxs-lookup"><span data-stu-id="f50f8-212">Constant</span></span>|<span data-ttu-id="f50f8-213">Descrizione</span><span class="sxs-lookup"><span data-stu-id="f50f8-213">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="f50f8-214">Predefinita.</span><span class="sxs-lookup"><span data-stu-id="f50f8-214">Default.</span></span> <span data-ttu-id="f50f8-215">Specifica i file che sono privi di attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-215">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f50f8-216">Specifica i file di sola lettura, oltre ai file che sono privi di attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-216">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f50f8-217">Specifica i file nascosti, oltre ai file che sono privi di attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-217">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f50f8-218">Specifica i file di sistema, oltre ai file che sono privi di attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-218">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f50f8-219">Specifica l'etichetta di volume. Se viene specificato qualsiasi altro attributo, `vbVolume` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-219">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f50f8-220">Specifica le directory o cartelle, oltre ai file che sono privi di attributi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-220">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f50f8-221">Il file è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="f50f8-221">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f50f8-222">Il file ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="f50f8-222">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-223">Queste enumerazioni sono specificate dal linguaggio Visual Basic e possono essere utilizzate ovunque nel codice al posto dei valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-223">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-224">Questo esempio viene usato il `Dir` per verificare la presenza di determinati file e directory.</span><span class="sxs-lookup"><span data-stu-id="f50f8-224">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-225">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-225">Required.</span>
          </span>
          <span data-ttu-id="f50f8-226">
            <see langword="Integer" /> che contiene qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-226">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-227">Restituisce un valore Boolean <see langword="True" /> quando viene raggiunta la fine di un file aperto per <see langword="Random" /> o <see langword="Input" /> sequenziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-227">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-228">Restituisce un valore Boolean <see langword="True" /> quando viene raggiunta la fine di un file aperto per <see langword="Random" /> o <see langword="Input" /> sequenziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-228">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-229">Usare `EOF` per evitare l'errore generato dal tentativo di ottenere l'input oltre la fine di un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-229">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="f50f8-230">Il `EOF` funzione restituisce `False` fino a quando non è stata raggiunta la fine del file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-230">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="f50f8-231">Con i file aperti per `Random` o `Binary` access `EOF` restituisce `False` fino all'ultima esecuzione `FileGet` funzione è in grado di leggere un intero record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-231">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="f50f8-232">Con i file aperti per `Binary` accedere, un tentativo di leggere il file usando il `Input` funzionare fino all'avviso `EOF` restituisce `True` genera un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-232">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f50f8-233">Usare la `LOF` e `Loc` funzioni anziché `EOF` durante la lettura di file binari con `Input`, o usare `Get` quando si usa il `EOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-233">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="f50f8-234">Con i file aperti per `Output`, `EOF` restituisce sempre `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-234">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-235">Questo esempio viene usato il `EOF` funzione per rilevare la fine di un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-235">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="f50f8-236">Questo esempio si presuppone che `Testfile` è un file di testo che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-236">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-237">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-237">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-238">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-238">Required.</span>
          </span>
          <span data-ttu-id="f50f8-239">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-239">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="f50f8-240">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-240">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-241">Restituisce un'enumerazione che rappresenta la modalità di file per i file aperti utilizzando la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-241">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-242">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto alla funzione <see langword="FileAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-242">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-243">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-243">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-244">La modalità di accesso al file è indicata dai seguenti valori di enumerazione:</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-244">The following enumeration values indicate the file access mode:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="f50f8-245">Valore</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-245">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="f50f8-246">Modalità</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-246">Mode</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="f50f8-247">1</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-247">1</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Input" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="f50f8-248">2</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-248">2</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Output" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="f50f8-249">4</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-249">4</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Random" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="f50f8-250">8</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-250">8</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Append" />
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="f50f8-251">32</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-251">32</span>
                </span>
              </term>
              <description>
                <see langword="OpenMode.Binary" />
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-252">Questa funzione restituisce un'enumerazione che rappresenta la modalità di file per i file aperti utilizzando la `FileOpen` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-252">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-253">Questo esempio viene usato il `FileAttr` funzione per restituire la modalità file di un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-253">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-254">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-254">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="f50f8-255">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-255">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-256">Matrice di parametri di 0 o più canali da chiudere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-256">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-257">Conclude le operazioni di input/output (I/O) in un file aperto con la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-257">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-258">Nelle operazioni di I/O di file <see langword="My" /> garantisce produttività e prestazioni migliori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-258">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="f50f8-259">Per altre informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-259">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-260">Il `FileClose` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-260">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-261">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-261">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-262">Per altre informazioni, vedere [come: Leggi testo da file con un oggetto StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [procedura: scrivere testo in file con un oggetto StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), e [procedura dettagliata: modifica dei file e directory in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-262">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="f50f8-263">Se si omette `FileNumbers`, tutti i file attivi aperti dal `FileOpen` funzione vengono chiusi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-263">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="f50f8-264">Quando si chiudono i file che sono stati aperti per `Output` o `Append`, il buffer finale dell'output viene scritto nel buffer del sistema operativo per il file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-264">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="f50f8-265">Spazio associato chiuso tutti i buffer file viene rilasciato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-265">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="f50f8-266">Quando il `FileClose` funzione viene eseguita, l'associazione di un file con il relativo file numero termina.</span><span class="sxs-lookup"><span data-stu-id="f50f8-266">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-267">Questo esempio Usa la `FileClose` funzione per chiudere un file aperto per `Input`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-267">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-268">
            <paramref name="FileNumber" /> non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-268">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="f50f8-269">Istruzione End</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-269">End Statement</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md">
          <span data-ttu-id="f50f8-270">Istruzione Stop (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-270">Stop Statement (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-271">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-271">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="f50f8-272">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-272">Required.</span>
          </span>
          <span data-ttu-id="f50f8-273">Espressione <see langword="String" /> che specifica il nome del file da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-273">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="f50f8-274">Il parametro <c>Source</c> può includere la directory o la cartella e l'unità del file di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-274">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="f50f8-275">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-275">Required.</span>
          </span>
          <span data-ttu-id="f50f8-276">Espressione <see langword="String" /> che specifica il nome file di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-276">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="f50f8-277">Il parametro <c>Destination</c> può includere la directory o la cartella e l'unità del file di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-277">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-278">Copia un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-278">Copies a file.</span>
          </span>
          <span data-ttu-id="f50f8-279">Nelle operazioni di I/O su file, <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> garantisce produttività e prestazioni migliori rispetto a <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-279">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="f50f8-280">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-280">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-281">Se si prova a usare il `FileCopy` funzionano in un file attualmente aperto, si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-281">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="f50f8-282">`FileCopy` richiede l'attendibilità a funzionare nell'unità locale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-282">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-283">Questo esempio viene usato il `FileCopy` per copiare un file a un'altra funzione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-283">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="f50f8-284">Ai fini di questo esempio, si supponga che `SrcFile` è un file che contiene i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-284">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-285">
            <paramref name="Source" /> o <paramref name="Destination" /> non è valido o non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-285">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-286">Il file è già aperto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-286">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f50f8-287">Il file non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-287">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md">
          <span data-ttu-id="f50f8-288">Procedura: creare una copia di un file in una directory diversa in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-288">How to: Create a Copy of a File in a Different Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">
          <span data-ttu-id="f50f8-289">Procedura: creare una copia di un file nella stessa directory in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-289">How to: Create a Copy of a File in the Same Directory in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">
          <span data-ttu-id="f50f8-290">Procedura: copiare una directory in un'altra directory di Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-290">How to: Copy a Directory to Another Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f50f8-291">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-291">Required.</span>
          </span>
          <span data-ttu-id="f50f8-292">Espressione <see langword="String" /> che specifica un nome file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-292">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="f50f8-293">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-293">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-294">Restituisce un valore <see langword="Date" /> che indica la data e l'ora della scrittura in un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-294">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="f50f8-295">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-295">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="f50f8-296">Per altre informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-296">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-297">Valore <see langword="Date" /> che indica la data e l'ora di creazione o dell'ultima modifica di un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-297">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f50f8-298">Questo esempio viene usato il `FileDateTime` funzione per determinare la data e ora di un file è stato creato o modificato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-298">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="f50f8-299">Il formato della data e ora visualizzata è basato sulle impostazioni locali del sistema.</span><span class="sxs-lookup"><span data-stu-id="f50f8-299">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-300">
            <paramref name="PathName" /> non è valido o contiene caratteri jolly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-300">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f50f8-301">Il file di destinazione non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-301">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-302">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-302">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-303">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-303">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-304">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-304">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-305">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-305">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-306">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-306">Required.</span>
          </span>
          <span data-ttu-id="f50f8-307">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-307">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-308">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-308">Required.</span>
          </span>
          <span data-ttu-id="f50f8-309">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-309">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-310">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-310">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-311">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-311">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-312">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-312">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-313">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-313">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-314">Per altre informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-314">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-315">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-315">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-316">I dati letti tramite `FileGet` vengono in genere scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-316">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-317">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-317">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-318">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-318">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-319">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-319">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-320">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-320">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-321">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-321">Random Mode</span></span>  
 <span data-ttu-id="f50f8-322">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-322">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-323">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-323">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-324">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-324">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-325">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-325">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-326">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-326">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-327">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-327">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-328">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-328">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-329">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-329">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-330">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-330">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-331">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-331">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-332">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-332">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-333">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-333">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-334">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-334">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-335">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-335">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-336">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-336">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-337">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-337">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-338">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-338">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-339">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-339">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-340">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-340">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-341">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-341">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-342">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-342">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-343">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-343">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-344">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-344">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-345">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-345">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-346">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-347">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-347">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-348">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-348">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-349">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-349">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-350">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-350">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-351">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-351">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-352">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-352">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-353">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-353">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-354">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-354">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-355">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-355">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-356">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-356">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-357">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-357">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-358">Lettura da un file usando il`FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-358">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-359">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-359">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-360">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-360">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-361">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-361">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-362">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-362">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-363">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-363">Required.</span>
          </span>
          <span data-ttu-id="f50f8-364">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-364">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-365">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-365">Required.</span>
          </span>
          <span data-ttu-id="f50f8-366">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-366">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-367">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-367">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-368">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-368">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-369">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-369">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-370">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-370">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-371">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-371">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-372">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-372">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-373">I dati letti tramite `FileGet` vengono in genere scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-373">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-374">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-374">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-375">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-375">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-376">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-376">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-377">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-377">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-378">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-378">Random Mode</span></span>  
 <span data-ttu-id="f50f8-379">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-379">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-380">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-380">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-381">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-381">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-382">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-382">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-383">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-383">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-384">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-384">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-385">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-385">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-386">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-386">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-387">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-387">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-388">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-388">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-389">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-389">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-390">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-390">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-391">Se non viene utilizzato il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-391">If the descriptor is not used.</span></span> <span data-ttu-id="f50f8-392">Le dimensioni e i limiti della matrice passato nella `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-392">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-393">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-394">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-395">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-395">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-396">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-397">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-397">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-398">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-398">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-399">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-399">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-400">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-400">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-401">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-401">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-402">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-402">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-403">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-403">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-404">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-405">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-405">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-406">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-406">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-407">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-407">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-408">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-408">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-409">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-409">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-410">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-410">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-411">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-411">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-412">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-412">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-413">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-413">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-414">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-414">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-415">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-415">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-416">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-416">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-417">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-417">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-418">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-419">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-419">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-420">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-420">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-421">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-421">Required.</span>
          </span>
          <span data-ttu-id="f50f8-422">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-422">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-423">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-423">Required.</span>
          </span>
          <span data-ttu-id="f50f8-424">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-424">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-425">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-425">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-426">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-426">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-427">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-427">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-428">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-428">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-429">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-429">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-430">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-430">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-431">I dati letti tramite `FileGet` vengono in genere scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-431">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-432">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-432">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-433">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-433">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-434">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-434">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-435">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-435">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-436">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-436">Random Mode</span></span>  
 <span data-ttu-id="f50f8-437">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-437">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-438">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-438">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-439">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-439">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-440">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-440">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-441">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-441">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-442">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-442">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-443">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-443">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-444">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-444">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-445">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-445">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-446">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-446">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-447">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-447">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-448">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-448">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-449">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-449">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-450">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-450">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-451">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-451">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-452">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-452">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-453">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-453">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-454">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-454">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-455">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-455">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-456">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-456">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-457">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-457">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-458">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-458">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-459">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-459">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-460">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-460">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-461">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-462">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-462">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-463">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-463">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-464">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-464">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-465">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-465">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-466">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-466">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-467">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-467">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-468">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-468">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-469">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-469">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-470">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-470">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-471">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-471">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-472">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-472">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-473">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-473">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-474">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-474">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-475">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-475">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-476">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-476">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-477">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-477">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-478">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-478">Required.</span>
          </span>
          <span data-ttu-id="f50f8-479">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-479">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-480">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-480">Required.</span>
          </span>
          <span data-ttu-id="f50f8-481">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-481">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-482">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-482">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-483">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-483">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-484">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-484">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-485">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-485">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-486">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-486">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-487">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-487">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-488">I dati letti tramite `FileGet` vengono in genere scritti in un file con `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-488">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-489">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-489">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-490">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-490">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-491">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-491">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-492">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-492">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-493">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-493">Random Mode</span></span>  
 <span data-ttu-id="f50f8-494">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-494">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-495">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione,`FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-495">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-496">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-496">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-497">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-497">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-498">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-498">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-499">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-499">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-500">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-500">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-501">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-501">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-502">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-502">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-503">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-504">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-504">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-505">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-505">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-506">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-506">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-507">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-508">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-509">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-509">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-510">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-511">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-511">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-512">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-512">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-513">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-513">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-514">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-514">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-515">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-515">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-516">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-516">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-517">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-517">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-518">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-519">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-519">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-520">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-520">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-521">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-521">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-522">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-522">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-523">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-523">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-524">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-524">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-525">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-525">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-526">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-526">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-527">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-527">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-528">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-528">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-529">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-529">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-530">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-530">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-531">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-531">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-532">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-532">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-533">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-533">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-534">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-534">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-535">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-535">Required.</span>
          </span>
          <span data-ttu-id="f50f8-536">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-536">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-537">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-537">Required.</span>
          </span>
          <span data-ttu-id="f50f8-538">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-538">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-539">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-539">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-540">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-541">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-541">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-542">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-543">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-544">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-544">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-545">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-545">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-546">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-547">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-547">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-548">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-548">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-549">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-549">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-550">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-550">Random Mode</span></span>  
 <span data-ttu-id="f50f8-551">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-551">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-552">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-552">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-553">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-553">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-554">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-554">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-555">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-555">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-556">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-556">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-557">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-557">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-558">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-558">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-559">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-559">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-560">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-560">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-561">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-561">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-562">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-562">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-563">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-563">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-564">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-565">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-566">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-566">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-567">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-568">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-568">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-569">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-569">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-570">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-570">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-571">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-571">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-572">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-573">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-573">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-574">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-574">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-575">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-576">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-576">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-577">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-578">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-578">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-579">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-579">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-580">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-580">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-581">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-581">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-582">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-582">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-583">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-583">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-584">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-584">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-585">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-585">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-586">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-586">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-587">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-587">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-588">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-588">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-589">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-589">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-590">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-590">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-591">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-591">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-592">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-592">Required.</span>
          </span>
          <span data-ttu-id="f50f8-593">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-593">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-594">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-594">Required.</span>
          </span>
          <span data-ttu-id="f50f8-595">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-595">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-596">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-596">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-597">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-598">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-598">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-599">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-600">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-601">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-601">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-602">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-602">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-603">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-604">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-604">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-605">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-605">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-606">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-606">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-607">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-607">Random Mode</span></span>  
 <span data-ttu-id="f50f8-608">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-608">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-609">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-609">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-610">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-610">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-611">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-611">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-612">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-612">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-613">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-613">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-614">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-614">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-615">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-615">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-616">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-616">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-617">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-617">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-618">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-618">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-619">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-619">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-620">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-620">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-621">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-621">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-622">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-622">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-623">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-623">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-624">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-624">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-625">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-625">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-626">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-626">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-627">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-627">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-628">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-628">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-629">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-630">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-630">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-631">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-631">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-632">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-633">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-633">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-634">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-635">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-635">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-636">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-636">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-637">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-637">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-638">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-638">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-639">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-639">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-640">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-640">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-641">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-641">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-642">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-642">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-643">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-643">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-644">Lettura da un file usando il`FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-644">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-645">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-646">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-647">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-647">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-648">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-649">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-649">Required.</span>
          </span>
          <span data-ttu-id="f50f8-650">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-651">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-651">Required.</span>
          </span>
          <span data-ttu-id="f50f8-652">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-652">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-653">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-653">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-654">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-655">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-655">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-656">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-657">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-658">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-658">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-659">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-659">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-660">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-661">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-661">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-662">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-662">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-663">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-663">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-664">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-664">Random Mode</span></span>  
 <span data-ttu-id="f50f8-665">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-665">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-666">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-666">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-667">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-667">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-668">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-668">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-669">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-669">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-670">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-670">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-671">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-671">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-672">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-672">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-673">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-673">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-674">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-674">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-675">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-675">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-676">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-676">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-677">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-677">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-678">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-678">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-679">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-679">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-680">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-681">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-681">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-682">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-682">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-683">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-683">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-684">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-684">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-685">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-685">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-686">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-687">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-687">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-688">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-688">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-689">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-690">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-690">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-691">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-692">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-692">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-693">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-693">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-694">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-694">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-695">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-695">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-696">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-696">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-697">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-697">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-698">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-698">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-699">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-699">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-700">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-700">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-701">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-701">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-702">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-702">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-703">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-703">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-704">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-704">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-705">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-705">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-706">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-706">Required.</span>
          </span>
          <span data-ttu-id="f50f8-707">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-708">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-708">Required.</span>
          </span>
          <span data-ttu-id="f50f8-709">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-709">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-710">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-710">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-711">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-712">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-712">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-713">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-714">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-715">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-715">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-716">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-716">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-717">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-718">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-718">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-719">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-719">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-720">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-720">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-721">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-721">Random Mode</span></span>  
 <span data-ttu-id="f50f8-722">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-723">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-723">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-724">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-725">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-726">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-726">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-727">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-727">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-728">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-728">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-729">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-729">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-730">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-730">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-731">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-731">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-732">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-732">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-733">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-733">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-734">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-734">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-735">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-735">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-736">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-736">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-737">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-738">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-738">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-739">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-739">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-740">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-740">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-741">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-741">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-742">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-742">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-743">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-744">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-744">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-745">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-745">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-746">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-747">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-747">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-748">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-749">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-749">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-750">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-751">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-752">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-753">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-753">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-754">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-754">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-755">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-755">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-756">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-756">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-757">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-757">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-758">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-758">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-759">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-759">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-760">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-760">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-761">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-761">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-762">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-762">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-763">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-763">Required.</span>
          </span>
          <span data-ttu-id="f50f8-764">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-764">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-765">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-765">Required.</span>
          </span>
          <span data-ttu-id="f50f8-766">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-766">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-767">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-767">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-768">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-768">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-769">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-769">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-770">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-771">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-772">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-772">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-773">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-773">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-774">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-774">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-775">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-775">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-776">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-776">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-777">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-777">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-778">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-778">Random Mode</span></span>  
 <span data-ttu-id="f50f8-779">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-779">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-780">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-780">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-781">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-781">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-782">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-782">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-783">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-783">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-784">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-784">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-785">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-785">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-786">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-786">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-787">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-787">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-788">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-788">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-789">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-789">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-790">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-790">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-791">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-791">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-792">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-792">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-793">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-793">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-794">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-794">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-795">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-795">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-796">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-796">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-797">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-797">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-798">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-798">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-799">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-799">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-800">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-800">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-801">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-801">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-802">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-802">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-803">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-804">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-804">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-805">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-805">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-806">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-806">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-807">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-807">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-808">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-808">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-809">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-809">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-810">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-810">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-811">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-811">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-812">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-812">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-813">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-813">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-814">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-814">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-815">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-815">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-816">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-816">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-817">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-818">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-819">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-820">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-820">Required.</span>
          </span>
          <span data-ttu-id="f50f8-821">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-821">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-822">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-822">Required.</span>
          </span>
          <span data-ttu-id="f50f8-823">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-823">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-824">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-824">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-825">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-825">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-826">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-826">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-827">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-827">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-828">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-828">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-829">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-829">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-830">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-830">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-831">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-831">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-832">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-832">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-833">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-833">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-834">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-834">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-835">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-835">Random Mode</span></span>  
 <span data-ttu-id="f50f8-836">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-836">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-837">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-837">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-838">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-838">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-839">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-839">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-840">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-840">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-841">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-841">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-842">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-842">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-843">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-843">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-844">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-844">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-845">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-845">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-846">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-846">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-847">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-847">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-848">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-848">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-849">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-849">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-850">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-850">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-851">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-851">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-852">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-852">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-853">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-853">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-854">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-854">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-855">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-855">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-856">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-856">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-857">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-857">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-858">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-858">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-859">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-859">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-860">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-861">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-861">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-862">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-862">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-863">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-863">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-864">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-864">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-865">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-865">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-866">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-866">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-867">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-867">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-868">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-868">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-869">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-869">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-870">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-870">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-871">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-871">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-872">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-872">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-873">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-873">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-874">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-874">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-875">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-875">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-876">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-876">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-877">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-877">Required.</span>
          </span>
          <span data-ttu-id="f50f8-878">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-878">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-879">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-879">Required.</span>
          </span>
          <span data-ttu-id="f50f8-880">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-880">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-881">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-881">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-882">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-882">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-883">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-883">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-884">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-884">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-885">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-885">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-886">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-886">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-887">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-887">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-888">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-888">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-889">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-889">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-890">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-890">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-891">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-891">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-892">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-892">Random Mode</span></span>  
 <span data-ttu-id="f50f8-893">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-893">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-894">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-894">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-895">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-895">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-896">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-896">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-897">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-897">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-898">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-898">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-899">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-899">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-900">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-900">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-901">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-901">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-902">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-902">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-903">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-903">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-904">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-904">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-905">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-905">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-906">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-906">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-907">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-907">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-908">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-908">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-909">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-909">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-910">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-910">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-911">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-911">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-912">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-912">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-913">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-913">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-914">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-914">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-915">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-915">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-916">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-916">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-917">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-918">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-918">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-919">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-919">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-920">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-920">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-921">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-921">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-922">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-922">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-923">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-923">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-924">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-924">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-925">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-925">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-926">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-926">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-927">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-927">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-928">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-928">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-929">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-929">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-930">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-930">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-931">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-931">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-932">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-932">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-933">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-933">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-934">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-934">Required.</span>
          </span>
          <span data-ttu-id="f50f8-935">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-935">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-936">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-936">Required.</span>
          </span>
          <span data-ttu-id="f50f8-937">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-937">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-938">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-938">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-939">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-939">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="f50f8-940">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-940">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-941">Si applica solo durante la scrittura di una stringa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-941">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="f50f8-942">Specifica se scrivere un descrittore a due byte per la stringa che descrive la lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-942">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="f50f8-943">Il valore predefinito è <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-943">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-944">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-944">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-945">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-946">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-947">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-947">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-948">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-948">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-949">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-949">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-950">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-950">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-951">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-951">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-952">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-952">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-953">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-953">Random Mode</span></span>  
 <span data-ttu-id="f50f8-954">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-954">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-955">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-955">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-956">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-956">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-957">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-957">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-958">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-958">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-959">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-959">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-960">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-960">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-961">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-961">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-962">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-962">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-963">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-963">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-964">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-964">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-965">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-965">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-966">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-966">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-967">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-967">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-968">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-968">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-969">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-969">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-970">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-970">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-971">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-971">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-972">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-972">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-973">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-973">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-974">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-974">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-975">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-975">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-976">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-976">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-977">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-977">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-978">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-979">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-979">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-980">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-980">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-981">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-981">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-982">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-982">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-983">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-983">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-984">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-984">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-985">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-985">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-986">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-986">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-987">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-987">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-988">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-988">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-989">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-989">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-990">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-990">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-991">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-991">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-992">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-992">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-993">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-993">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-994">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-994">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-995">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-995">Required.</span>
          </span>
          <span data-ttu-id="f50f8-996">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-996">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-997">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-997">Required.</span>
          </span>
          <span data-ttu-id="f50f8-998">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-998">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-999">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-999">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1000">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1000">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="f50f8-1001">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1001">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1002">Si applica solo durante la scrittura di una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1002">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="f50f8-1003">Specifica se la matrice deve essere considerata una matrice dinamica e se è necessario un descrittore della matrice che descrive le dimensioni e i limiti della matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1003">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="f50f8-1004">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1004">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1005">Si applica solo durante la scrittura di una stringa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1005">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="f50f8-1006">Specifica se scrivere un descrittore a due byte per la stringa che descrive la lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1006">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="f50f8-1007">Il valore predefinito è <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1007">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1008">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1008">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-1009">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1009">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="f50f8-1010">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1010">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1011">`FileGet` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1011">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1012">I dati letti tramite `FileGet` viene in genere scritti in un file mediante `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1012">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="f50f8-1013">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1013">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1014">Se si omette `RecordNumber`, il record o byte successivi all'ultimo `FileGet` oppure `FilePut` funzione (o a cui punta l'ultimo `Seek` (funzione)) viene letto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1014">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-1015">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1015">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-1016">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1016">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1017">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1017">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1018">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1018">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1019">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGet` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1019">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1020">Lo spazio tra la fine di un record e il valore iniziale del record successivo viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1020">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1021">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1021">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-1022">Per impostazione predefinita, se la variabile in cui si legge è una stringa, `FileGet` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1022">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1023">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1023">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1024">Visual Basic 6.0 e versioni precedenti supportano stringhe di lunghezza fissa. Quando vengono inserite in un file, il descrittore di lunghezza non viene scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1024">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-1025">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1025">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1026">Se la variabile in cui si legge è una matrice, è possibile scegliere se si desidera leggere un descrittore per le dimensioni e la dimensione della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1026">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="f50f8-1027">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1027">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1028">Durante la lettura della matrice, si devono corrispondere il modo in cui che è stata scritta la matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1028">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="f50f8-1029">Se è stato scritto con il descrittore di, è necessario il descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1029">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="f50f8-1030">Se il descrittore non viene utilizzato, le dimensioni e i limiti della matrice passato nel `FileGet` determinare gli elementi da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1030">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="f50f8-1031">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1031">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1032">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1032">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1033">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1033">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1034">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1034">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="f50f8-1035">I byte 218 vengono distribuiti come segue:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1035">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="f50f8-1036">18 byte per il descrittore: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="f50f8-1036">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="f50f8-1037">200 byte per i dati: (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1037">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-1038">Se la variabile in cui si legge è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FileGet` legge solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1038">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="f50f8-1039">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1039">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-1040">`FileGet` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1040">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1041">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePut`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1041">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1042">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="f50f8-1043">Ciò include le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1043">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-1044">Il `VBFixedString` attributo può essere applicato ai campi stringa in strutture per indicare le dimensioni di una stringa quando viene scritta su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1044">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1045">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1045">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1046">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1046">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1047">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1047">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1048">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1048">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1049">`FileGet` legge in modo contiguo; tutte le variabili da disco vale a dire, senza spaziatura tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1049">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1050">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGet` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1050">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="f50f8-1051">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1051">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="f50f8-1052">`FileGet` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1052">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1053">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1053">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="f50f8-1054">Lettura da un file usando il `FileGet` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1054">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1055">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1055">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1056">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1056">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-1057">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1057">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1058">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1058">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1059">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1059">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1060">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1060">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1061">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1061">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1062">Nome valido della variabile in cui vengono letti i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1062">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1063">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1063">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1064">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale viene avviata la lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1064">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1065">Legge i dati in una variabile da un file aperto sul disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1065">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="f50f8-1066">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="f50f8-1067">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1067">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1068">Il `FileGetObject` funzione viene usata invece di `FileGet` per evitare ambiguità in fase di compilazione se tipo `Object` viene restituito invece un altro tipo, ad esempio `Integer`, `Long`, `Short`e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1068">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f50f8-1069">Se si prevede di scrivere la `Variant` tipo, `FileGetObject` è obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1069">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="f50f8-1070">In caso di dubbi, se si usa un oggetto per il secondo parametro, è consigliabile usare `FilePutObject` e `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1070">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f50f8-1071">`FileGetObject` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1071">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1072">I dati letti tramite `FileGetObject` vengono in genere scritti con `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1072">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="f50f8-1073">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1073">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1074">Se si omette `RecordNumber`, `FileGetObject` legge il record o byte dopo l'ultimo `FileGetObject` oppure `FilePutObject` funzione (o a cui punta l'ultimo `Seek` (funzione)).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1074">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1075">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1075">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1076">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1076">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1077">Se la lunghezza dei dati da leggere è inferiore alla lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FileGetObject` legge i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1077">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1078">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1078">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1079">Poiché la quantità di dati di spaziatura interna non è possibile determinare in modo preciso, è consigliabile avere la lunghezza del record corrisponde alla lunghezza dei dati da leggere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1079">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="f50f8-1080">Se la variabile in cui si legge è una stringa, per impostazione predefinita `FileGetObject` legge un descrittore a due byte che contiene la lunghezza della stringa e quindi legge i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1080">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1081">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola del `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1081">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1082">Visual Basic 6.0 e versioni precedenti supportano le stringhe a lunghezza fissa e durante la lettura in un file, il descrittore di lunghezza non viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1082">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="f50f8-1083">Se si desidera una stringa senza il descrittore di lettura, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1083">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1084">Se la variabile in cui si legge è una matrice, è necessario che la lunghezza del record specificata dal parametro `RecordLength` della funzione `FileOpen` sia superiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1084">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1085">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1085">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1086">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1086">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="f50f8-1087">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1087">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="f50f8-1088">I byte 218 vengono distribuiti come segue: 18 byte per il descrittore di (2 + 8 \* 2) e 100 byte per i dati (10 \* 5 \* 4).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1088">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="f50f8-1089">`FileGetObject` legge gli elementi di strutture come se fossero letti singolarmente, ad eccezione del fatto che non vi sia alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1089">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1090">Sul disco, una matrice dinamica di un tipo definito dall'utente (scritto con `FilePutObject`) preceduto da un descrittore di lunghezza uguale a 2 + 8 volte il numero di dimensioni: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1090">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="f50f8-1091">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per la lettura dei singoli elementi, incluse le matrici e i loro descrittori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1091">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="f50f8-1092">Il <xref:Microsoft.VisualBasic.VBFixedStringAttribute> classe può essere applicata ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1092">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1093">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1093">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1094">Per i file aperti `Binary` modalità, tutti i `Random` si applicano le regole, con le seguenti eccezioni:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1094">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="f50f8-1095">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1095">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1096">`FileGetObject` legge tutte le variabili da disco in modo contiguo, vale a dire, senza alcun riempimento tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1096">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1097">Per qualsiasi matrice diverso da una matrice in una struttura, `FileGetObject` legge solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1097">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="f50f8-1098">Nessun descrittore di lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1098">No descriptor is read.</span></span>  
  
 <span data-ttu-id="f50f8-1099">`FileGetObject` legge le stringhe a lunghezza variabile che non sono elementi di strutture senza attendere il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1099">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1100">Il numero di byte letti è uguale al numero di caratteri già nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1100">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-1101">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1101">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-1102">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1102">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1103">Nell'esempio seguente legge un record in un file di test e quindi li recupera.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1103">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-1104">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1104">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1105">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1105">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f50f8-1106">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1106">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1107">Espressione <see langword="String" /> che specifica un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1107">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="f50f8-1108">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1108">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1109">Restituisce un valore <see langword="Long" /> che specifica la lunghezza di un file in byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1109">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="f50f8-1110">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1110">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="f50f8-1111">Per ulteriori informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1111">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-1112">Valore <see langword="Long" /> che specifica la lunghezza di un file in byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1112">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1113">Se il file specificato è aperto quando il `FileLen` funzione viene chiamata, il valore restituito rappresenta le dimensioni del file al momento è stato aperto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1113">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-1114">Per ottenere la lunghezza corrente di un file aperto, usare il `LOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1114">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1115">Questo esempio viene usato il `FileLen` funzione per restituire la lunghezza di un file in byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1115">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="f50f8-1116">Ai fini di questo esempio, si supponga che `TestFile` è un file che contiene alcuni dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1116">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f50f8-1117">Il file non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1117">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-1118">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1118">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1119">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1119">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1120">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1120">Any valid file number.</span>
          </span>
          <span data-ttu-id="f50f8-1121">Utilizza la funzione <see langword="FreeFile" /> per ottenere il successivo numero di file disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1121">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="f50f8-1122">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1122">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1123">Espressione <see langword="String" /> che specifica un nome di file. Può includere la directory o la cartella e l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1123">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="f50f8-1124">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1124">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1125">Enumerazione che specifica la modalità per il file: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> o <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1125">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="f50f8-1126">Per ulteriori informazioni, vedi <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1126">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="f50f8-1127">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1127">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1128">Enumerazione che specifica le operazioni autorizzate sul file aperto: <see langword="Read" />, <see langword="Write" /> o <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1128">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="f50f8-1129">Il valore predefinito è <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1129">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="f50f8-1130">Per ulteriori informazioni, vedi <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1130">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="f50f8-1131">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1131">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1132">Enumerazione che specifica le operazioni non autorizzate sul file aperto da altri processi: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> e <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1132">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="f50f8-1133">Il valore predefinito è <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1133">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="f50f8-1134">Per ulteriori informazioni, vedi <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1134">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="f50f8-1135">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1135">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1136">Numero minore o uguale a 32.767 byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1136">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="f50f8-1137">Per i file aperti per l'accesso Random, questo valore rappresenta la lunghezza del record.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1137">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="f50f8-1138">Per i file sequenziali, questo valore rappresenta il numero di caratteri memorizzati nel buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1138">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1139">Apre un file per l'input o l'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1139">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="f50f8-1140">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1140">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="f50f8-1141">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1141">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1142">Il `FileOpen` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1142">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-1143">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-1144">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-1145">È necessario aprire un file prima di qualsiasi operazione dei / o può essere eseguita su di esso.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1145">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="f50f8-1146">`FileOpen` Alloca un buffer dei / o al file e determina la modalità di accesso da usare con il buffer.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1146">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-1147">Quando si scrive in un file, un'applicazione potrebbe essere necessario creare un file, se il file a cui sta tentando di scrivere non esiste.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1147">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="f50f8-1148">A tale scopo, necessaria l'autorizzazione per la directory in cui il file deve essere creato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1148">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="f50f8-1149">Tuttavia, se il file specificato da `FileName` esiste, l'applicazione deve `Write` l'autorizzazione solo per il file stesso.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1149">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="f50f8-1150">Ovunque possibile, per migliorare la sicurezza, creare il file durante la distribuzione e concedere `Write` le autorizzazioni per tale file unico, anziché per l'intera directory.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1150">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="f50f8-1151">Per contribuire al miglioramento della protezione, scrivere i dati invece di directory degli utenti della directory radice o nella directory programmi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1151">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="f50f8-1152">È reperibile il canale da aprire usando la `FreeFile()` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1152">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-1153">Il `FileOpen` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione, che può influire sull'esecuzione in situazioni di attendibilità parziale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1153">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="f50f8-1154">Per ulteriori informazioni, vedere l'enumerazione <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1154">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1155">In questo esempio illustra i vari utilizzi del `FileOpen` funzione per abilitare l'input e output in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1155">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="f50f8-1156">Il codice seguente apre il file `TestFile` in `Input` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1156">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="f50f8-1157">Questo esempio viene aperto il file in `Binary` modalità per operazioni di sola scrittura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1157">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="f50f8-1158">Nell'esempio seguente viene aperto il file in `Random` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1158">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="f50f8-1159">Il file contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1159">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="f50f8-1160">Questo esempio di codice consente di aprire il file in `Output` modalità, le operazioni possono leggere o scrivere nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1160">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="f50f8-1161">Questo esempio di codice consente di aprire il file in `Binary` modalità per la lettura; gli altri processi non è possibile leggere i file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1161">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1162">Lunghezza del record negativa (e diversa da -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1162">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1163">Il parametro <paramref name="FileName" /> è già aperto oppure <paramref name="FileName" /> non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1163">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-1164">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1164">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1165">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1165">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-1166">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1166">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1167">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1167">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1168">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1168">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1169">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1169">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1170">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1170">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1171">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1171">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1172">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1172">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1173">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1173">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1174">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1174">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1175">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1175">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1176">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1176">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1177">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1177">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1178">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1178">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1179">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1179">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1180">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1180">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1181">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1181">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1182">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1182">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1183">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1183">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1184">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1184">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1185">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1185">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1186">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1186">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1187">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1187">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1188">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1188">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1189">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1189">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1190">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1190">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1191">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1191">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1192">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1192">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1193">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1193">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1194">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1194">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1195">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1195">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1196">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1196">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1197">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1197">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1198">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1198">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1199">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1199">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1200">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1200">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1201">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1201">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1202">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1202">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1203">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1203">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1204">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1204">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1205">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1205">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1206">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1206">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1207">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1207">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1208">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1208">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1209">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1210">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1210">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1211">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1211">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1212">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1212">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1213">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1213">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1214">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1214">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1215">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1215">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1216">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1216">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1217">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1217">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1218">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1218">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1219">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1219">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1220">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1220">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1221">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1221">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1222">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1222">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1223">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1223">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1224">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1224">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1225">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1225">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1226">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1226">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1227">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1227">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1228">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1228">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1229">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1229">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1230">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1230">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1231">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1231">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1232">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1232">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1233">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1233">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1234">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1234">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1235">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1235">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1236">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1236">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1237">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1237">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1238">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1238">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1239">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1239">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1240">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1240">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1241">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1241">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1242">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1242">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1243">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1243">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1244">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1244">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1245">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1245">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1246">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1246">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1247">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1247">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1248">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1248">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1249">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1249">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1250">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1250">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1251">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1251">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1252">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1252">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1253">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1253">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1254">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1254">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1255">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1255">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1256">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1256">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1257">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1257">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1258">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1258">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1259">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1259">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1260">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1260">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1261">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1261">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1262">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1262">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1263">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1263">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1264">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1264">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1265">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1265">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1266">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1266">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1267">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1267">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1268">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1268">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1269">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1270">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1270">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1271">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1271">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1272">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1272">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1273">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1273">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1274">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1274">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1275">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1275">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1276">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1276">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1277">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1277">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1278">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1278">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1279">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1279">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1280">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1280">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1281">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1281">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1282">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1282">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1283">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1283">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1284">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1284">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1285">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1285">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1286">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1286">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1287">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1287">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1288">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1288">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1289">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1289">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1290">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1290">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1291">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1291">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1292">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1292">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1293">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1293">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1294">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1294">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1295">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1295">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1296">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1296">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1297">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1297">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1298">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1298">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1299">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1299">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1300">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1300">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1301">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1301">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1302">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1302">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1303">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1303">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1304">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1304">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1305">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1305">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1306">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1307">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1307">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1308">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1309">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1310">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1310">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1311">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1311">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1312">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1312">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1313">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1313">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1314">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1314">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1315">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1316">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1316">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1317">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1317">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1318">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1318">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1319">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1319">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1320">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1320">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1321">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1321">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1322">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1322">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1323">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1323">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1324">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1324">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1325">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1325">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1326">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1326">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1327">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1327">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1328">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1328">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1329">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1330">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1330">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1331">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1331">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1332">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1332">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1333">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1333">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1334">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1335">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1336">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1337">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1337">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1338">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1338">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1339">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1339">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1340">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1340">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1341">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1341">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1342">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1342">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1343">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1343">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1344">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1344">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1345">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1345">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1346">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1346">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1347">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1347">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1348">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1348">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1349">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1349">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1350">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1350">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1351">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1351">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1352">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1352">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1353">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1353">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1354">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1354">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1355">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1355">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1356">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1356">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1357">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1357">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1358">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1358">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1359">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1359">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1360">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1360">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1361">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1361">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1362">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1362">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1363">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1363">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1364">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1364">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1365">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1365">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1366">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1366">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1367">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1367">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1368">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1368">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1369">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1369">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1370">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1370">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1371">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1371">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1372">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1372">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1373">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1373">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1374">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1374">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1375">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1375">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1376">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1376">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1377">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1378">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1378">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1379">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1379">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1380">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1380">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1381">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1381">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1382">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1382">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1383">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1383">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1384">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1384">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1385">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1385">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1386">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1387">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1387">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1388">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1388">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1389">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1390">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1390">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1391">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1391">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1392">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1392">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1393">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1393">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1394">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1394">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1395">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1395">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1396">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1396">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1397">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1397">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1398">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1398">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1399">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1399">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1400">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1400">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1401">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1401">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1402">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1402">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1403">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1403">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1404">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1404">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1405">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1405">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1406">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1406">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1407">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1408">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1408">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1409">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1409">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1410">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1410">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1411">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1411">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1412">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1412">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1413">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1413">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1414">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1414">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1415">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1415">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1416">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1417">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1417">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1418">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1418">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1419">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1419">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1420">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1420">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1421">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1421">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1422">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1422">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1423">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1423">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1424">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1424">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1425">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1425">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1426">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1426">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1427">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1427">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1428">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1428">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1429">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1429">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1430">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1430">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1431">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1431">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1432">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1432">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1433">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1433">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1434">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1434">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1435">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1435">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1436">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1436">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1437">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1438">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1438">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1439">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1439">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1440">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1440">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1441">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1441">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1442">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1442">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1443">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1443">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1444">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1444">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1445">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1445">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1446">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1446">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1447">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1447">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1448">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1448">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1449">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1450">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1450">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1451">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1451">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1452">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1452">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1453">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1453">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1454">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1454">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1455">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1455">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1456">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1456">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1457">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1457">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1458">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1458">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1459">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1459">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1460">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1460">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1461">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1461">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1462">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1462">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1463">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1463">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1464">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1464">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1465">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1465">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1466">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1466">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1467">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1467">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1468">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1468">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1469">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1469">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1470">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1471">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1471">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1472">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1473">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1473">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1474">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1475">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1476">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1477">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1478">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1479">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1480">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1481">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1482">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1483">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1484">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1485">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1485">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1486">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1487">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1488">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1489">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1490">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1491">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1492">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1493">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1494">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1495">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1496">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1497">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1498">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1499">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1500">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1501">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1502">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1503">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1504">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1505">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1506">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1507">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1508">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1509">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1510">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1511">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1512">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1513">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1513">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1514">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1515">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1516">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1517">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1518">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1519">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1520">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1521">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1522">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1523">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1524">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1525">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1526">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1527">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1528">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1528">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1529">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1529">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1530">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1531">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1531">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1532">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1533">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1533">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1534">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1535">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1536">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1537">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1538">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1539">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1540">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1541">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1542">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1543">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1544">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1545">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1545">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1546">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1547">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1548">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1549">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1550">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1551">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1552">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1553">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1554">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1555">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1556">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il`VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1557">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1558">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1559">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1560">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1561">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1562">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1563">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1564">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1565">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1566">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1567">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1568">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1569">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1570">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1571">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1572">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1573">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1573">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1574">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1575">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1576">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1577">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1578">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1579">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1580">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1581">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1582">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1583">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1584">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1585">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1586">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1587">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1588">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1588">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1589">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1589">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1590">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1590">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1591">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1591">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1592">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1592">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1593">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1593">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1594">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1594">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1595">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1595">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1596">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1596">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1597">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1597">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1598">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1598">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1599">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1599">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1600">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1600">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1601">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1601">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1602">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1602">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1603">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1603">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1604">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1604">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1605">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1605">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1606">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1606">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1607">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1607">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1608">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1608">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1609">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1609">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1610">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1610">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1611">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1611">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1612">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1612">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1613">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1613">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1614">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1614">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1615">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1616">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1616">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1617">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1617">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1618">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1618">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1619">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1619">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1620">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1620">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1621">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1621">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1622">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1622">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1623">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1623">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1624">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1625">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1626">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1626">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1627">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1628">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1628">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1629">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1630">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1630">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1631">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1631">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1632">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1632">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1633">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1633">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1634">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1634">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1635">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1635">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1636">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1636">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1637">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1637">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1638">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1638">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1639">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1639">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1640">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1640">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1641">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1641">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1642">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1642">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1643">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1643">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1644">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1644">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1645">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1645">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1646">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1646">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1647">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1647">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1648">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1648">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1649">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1649">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1650">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1650">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1651">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1651">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1652">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1652">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1653">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1653">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1654">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1655">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1655">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1656">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1657">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1658">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1658">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1659">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1659">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1660">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1661">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1661">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1662">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1662">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1663">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1663">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1664">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1664">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1665">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1665">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1666">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1666">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1667">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1667">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1668">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1668">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1669">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1669">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1670">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1670">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1671">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1671">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1672">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1672">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1673">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1673">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1674">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1674">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1675">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1676">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1676">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1677">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1677">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1678">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1678">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1679">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1679">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1680">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1680">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1681">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1681">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1682">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1682">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1683">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1683">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1684">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1684">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1685">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1685">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1686">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1687">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1687">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1688">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1688">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1689">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1690">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1690">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1691">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1692">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1692">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1693">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1693">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1694">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1694">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1695">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1695">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1696">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1696">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1697">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1697">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1698">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1698">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1699">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1699">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1700">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1700">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1701">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1701">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1702">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1702">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1703">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1703">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1704">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1704">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1705">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1705">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1706">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1706">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1707">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1707">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1708">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1708">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1709">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1709">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1710">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1710">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1711">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1711">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1712">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1712">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1713">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1713">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1714">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1715">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1715">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1716">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1717">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1718">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1718">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1719">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1719">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1720">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1721">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1721">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1722">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1722">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1723">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1723">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1724">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1724">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1725">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1725">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1726">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1726">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1727">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1727">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1728">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1728">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1729">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1729">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1730">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1730">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1731">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1731">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1732">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1732">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1733">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1733">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1734">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1734">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1735">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1735">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1736">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1736">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1737">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1738">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1738">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1739">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1739">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1740">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1740">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1741">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1741">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1742">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1742">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1743">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1743">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1744">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1744">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1745">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1745">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1746">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1747">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1747">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1748">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1748">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1749">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1750">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1750">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1751">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1752">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1752">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1753">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1753">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1754">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1754">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1755">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1755">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1756">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1756">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1757">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1757">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1758">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1758">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1759">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1759">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1760">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1760">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1761">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1761">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1762">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1762">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1763">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1763">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1764">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1764">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1765">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1765">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1766">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1766">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1767">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1767">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1768">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1768">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1769">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1769">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1770">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1770">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1771">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1771">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1772">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1772">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1773">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1773">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1774">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1774">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1775">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1775">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1776">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1777">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1778">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1778">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1779">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1779">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1780">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1780">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1781">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1781">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1782">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1782">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1783">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1783">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1784">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1784">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1785">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1785">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1786">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1786">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1787">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel`RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1787">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1788">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1788">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1789">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1789">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1790">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1790">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1791">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1791">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1792">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1792">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1793">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1793">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1794">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1794">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1795">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1795">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1796">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1796">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1797">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1798">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1798">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1799">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1799">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1800">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1800">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1801">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1801">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1802">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1802">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1803">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1803">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1804">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1804">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1805">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1805">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1806">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1807">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1807">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1808">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1808">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1809">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1810">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1810">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1811">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1811">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1812">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1812">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1813">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1813">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1814">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1814">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1815">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1815">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1816">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1816">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1817">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1817">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1818">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1818">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1819">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1819">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1820">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1820">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1821">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1821">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1822">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1822">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1823">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1823">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1824">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1824">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1825">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1825">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1826">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1826">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1827">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1827">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1828">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1828">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1829">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1829">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1830">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1830">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1831">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1831">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1832">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1832">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1833">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1833">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1834">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1834">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1835">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1835">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1836">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1836">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1837">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1837">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1838">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1838">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1839">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1839">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1840">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1840">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1841">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1841">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1842">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1842">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1843">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1843">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1844">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1844">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1845">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1845">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1846">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1846">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1847">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1847">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1848">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1848">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1849">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1849">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1850">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1850">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1851">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1851">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1852">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1852">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1853">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1853">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1854">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1854">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1855">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1856">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1856">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1857">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1857">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1858">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1858">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1859">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1859">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1860">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1860">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1861">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1861">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1862">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1862">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1863">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1863">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1864">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1865">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1866">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1866">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1867">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1868">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1868">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1869">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1870">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1870">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1871">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1871">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1872">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1872">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1873">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1873">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1874">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1874">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1875">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1875">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1876">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1876">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1877">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1877">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1878">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1878">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1879">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1879">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1880">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1880">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1881">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1881">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1882">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1882">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1883">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1883">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1884">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1884">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1885">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1885">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1886">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1886">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1887">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1887">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1888">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1888">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1889">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1889">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1890">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1891">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1891">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1892">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1892">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1893">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1893">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1894">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="f50f8-1895">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1895">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1896">Si applica solo durante la scrittura di una stringa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="f50f8-1897">Specifica se scrivere un descrittore di lunghezza a due byte per la stringa nel file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="f50f8-1898">Il valore predefinito è <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1899">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1900">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1901">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1902">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1903">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1904">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1905">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1906">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1907">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1908">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1909">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1909">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1910">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1911">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1912">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1913">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1914">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1915">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1916">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1917">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1918">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1919">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1920">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1921">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1922">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1923">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1924">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1925">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1926">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1927">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1928">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1929">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1930">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1931">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1932">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-1933">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-1934">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-1935">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-1936">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-1937">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-1937">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-1938">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-1939">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-1940">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-1941">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-1942">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-1943">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-1944">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-1945">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-1946">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-1947">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-1948">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-1949">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-1950">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-1951">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-1952">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1952">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-1953">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1953">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1954">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-1955">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1955">Required.</span>
          </span>
          <span data-ttu-id="f50f8-1956">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-1957">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1957">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1958">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="f50f8-1959">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1959">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1960">Si applica solo durante la scrittura di una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1960">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="f50f8-1961">Specifica se la matrice deve essere considerata dinamica e se deve essere scritto un descrittore di matrice per la stringa che descrive la lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1961">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="f50f8-1962">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1962">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-1963">Si applica solo durante la scrittura di una stringa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1963">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="f50f8-1964">Specifica se scrivere un descrittore di lunghezza a due byte per la stringa nel file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1964">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="f50f8-1965">Il valore predefinito è <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1965">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-1966">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1966">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-1967">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1967">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="f50f8-1968">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-1968">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-1969">`FilePut` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1969">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-1970">I dati scritti con `FilePut` vengono in genere letti da un file usando `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1970">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="f50f8-1971">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1971">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-1972">Se si omette `RecordNumber`, il record o byte dopo l'ultimo `FileGet` oppure `FilePut` funzione o a cui punta l'ultimo `Seek` funzione è scritta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1972">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="f50f8-1973">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1973">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-1974">`FilePut` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1974">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-1975">Se si usa `StringIsFixedLength`  =  `True` con `FilePut`, è necessario eseguire la stessa operazione con `FileGet`, ed è necessario assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1975">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-1976">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-1976">Random Mode</span></span>  
 <span data-ttu-id="f50f8-1977">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-1977">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-1978">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePut` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1978">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-1979">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1979">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-1980">Poiché la quantità di dati di spaziatura interna non è possibile determinare con precisione, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1980">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-1981">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` (funzione), verrà generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1981">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-1982">Se la variabile scritta è una stringa, `FilePut` scrive un descrittore a due byte che contiene la lunghezza della stringa e quindi scrive i dati nella variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1982">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="f50f8-1983">Pertanto, la lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1983">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="f50f8-1984">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePut` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1984">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-1985">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePut` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1985">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-1986">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-1987">Se un oggetto che contiene una stringa, la variabile scritta `FilePut` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1987">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-1988">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1988">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-1989">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1989">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-1990">Se la variabile scritta è una matrice, è necessario scegliere di scrivere un descrittore per le dimensioni della matrice o meno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1990">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="f50f8-1991">Visual Basic 6.0 e versioni precedenti di scrivono il descrittore del file per una matrice dinamica, ma non per una matrice di dimensioni fisse.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1991">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="f50f8-1992">Visual Basic 2005 per impostazione predefinita non viene scritto il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1992">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="f50f8-1993">Per scrivere il descrittore, impostare il `ArrayIsDynamic` parametro per `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1993">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="f50f8-1994">Quando si scrive la matrice, devono corrispondere il modo in cui che verrà letta la matrice. Se si leggeranno con il descrittore di, è necessario scrivere il descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1994">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="f50f8-1995">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1995">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-1996">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-1996">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="f50f8-1997">La lunghezza del record specificata per il `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla somma di tutti i byte necessari per scrivere i dati della matrice e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1997">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-1998">Ad esempio, la dichiarazione di matrice seguente richiede 218 byte quando la matrice viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1998">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="f50f8-1999">Se la variabile scritta è qualsiasi altro tipo di variabile (non una stringa a lunghezza variabile o oggetto), `FilePut` scrive solo i dati della variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-1999">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="f50f8-2000">La lunghezza del record specificata dal `RecordLength` clausola nel `FileOpen` funzione deve essere maggiore o uguale alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="f50f8-2001">`FilePut` scrive elementi di strutture come se fossero scritti singolarmente, ma non è disponibile alcun riempimento tra gli elementi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2001">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="f50f8-2002">Il `VBFixedString` attributo può essere applicato ai campi di stringhe nelle strutture per indicare la dimensione della stringa quando viene scritto su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2002">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="f50f8-2003">Campi che hanno più byte rispetto a quanto specificato dalla stringa di `VBFixedString` attributo vengono troncati quando scritto su disco,</span><span class="sxs-lookup"><span data-stu-id="f50f8-2003">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-2004">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-2004">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-2005">Per i file aperti `Binary` modalità, la maggior parte del `Random` si applicano le regole della modalità, con alcune eccezioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2005">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="f50f8-2006">Le regole seguenti per i file aperti in `Binary` modalità differiscono dalle regole per `Random` modalità:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2006">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="f50f8-2007">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2007">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-2008">`FilePut` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2008">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="f50f8-2009">Per qualsiasi matrice diverso da una matrice in una struttura, `FilePut` scrive solo i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2009">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="f50f8-2010">Viene scritto alcun descrittore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2010">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="f50f8-2011">`FilePut` Scrive stringhe a lunghezza variabile che non sono elementi di strutture senza il descrittore di lunghezza a due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2011">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="f50f8-2012">Il numero di byte scritti è uguale al numero di caratteri nella stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2012">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="f50f8-2013">Le istruzioni seguenti, ad esempio, scrivere 11 byte nel file numero 1:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2013">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="f50f8-2014">La scrittura in un file usando il `FilePut` funzione richiede `Write` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2014">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2015">Questo esempio viene usato il `FilePut` funzione per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2015">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="f50f8-2016">Cinque record della struttura `Person` vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2016">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-2017">
            <paramref name="RecordNumber" /> &lt; 1 e diverso da -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2017">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2018">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2018">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-2019">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2019">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2020">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2020">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2021">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2021">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2022">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2022">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2023">Nome di variabile valido che contiene i dati scritti su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2023">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="f50f8-2024">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2024">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2025">Numero di record (file in modalità <see langword="Random" />) o numero di byte (file in modalità <see langword="Binary" />) in corrispondenza del quale inizia la scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2025">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2026">Scrive dati da una variabile in un file del disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2026">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="f50f8-2027">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2027">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="f50f8-2028">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2028">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2029">Il `FilePutObject` funzione viene usata invece di `FilePut` per evitare ambiguità in fase di compilazione se tipo `Object` viene passato anziché un altro tipo, ad esempio `Integer`, `Long`, `Short`e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2029">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="f50f8-2030">`FilePutObject` scrive e legge i descrittori che descrivono l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2030">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="f50f8-2031">Se si prevede di scrivere la `Variant` tipo, `FilePutObject` è obbligatorio.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2031">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="f50f8-2032">In caso di dubbi, se si usa un oggetto per il secondo parametro, è consigliabile usare sempre `FilePutObject` e `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2032">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f50f8-2033">`FilePutObject` è valido solo nei `Random` e `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2033">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-2034">I dati scritti con `FilePutObject` vengono in genere letti da un file usando `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2034">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="f50f8-2035">Il primo record o byte in un file corrisponde alla posizione 1, il secondo record o byte corrisponde alla posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2035">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="f50f8-2036">Se si omette `RecordNumber`, `FilePutObject` scriva il record o byte dopo l'ultimo `FileGetObject` oppure `FilePutObject` funzione (o il record o byte a cui punta l'ultimo `Seek` (funzione)).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2036">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="f50f8-2037">Il `StringIsFixedLength` argomento consente di controllare se la funzione interpreta le stringhe a lunghezza fissa o variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2037">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="f50f8-2038">`FilePutObject` non scrive il descrittore di lunghezza quando l'argomento è `True`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2038">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="f50f8-2039">Se si usa `StringIsFixedLength`  =  `True` con `FilePutObject`, è necessario eseguire la stessa operazione con `FileGetObject`, e assicurarsi che la stringa viene inizializzata alla lunghezza prevista.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2039">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="f50f8-2040">Modalità casuale</span><span class="sxs-lookup"><span data-stu-id="f50f8-2040">Random Mode</span></span>  
 <span data-ttu-id="f50f8-2041">Per i file aperti `Random` modalità, applicano le regole seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2041">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="f50f8-2042">Se la lunghezza dei dati da scrivere è minore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, `FilePutObject` scrive i record successivi su limiti di lunghezza di record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2042">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="f50f8-2043">Lo spazio tra l'inizio del record successivo e la fine di un record viene riempito con il contenuto del buffer di file esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2043">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="f50f8-2044">Poiché la quantità di dati di spaziatura interna non è possibile determinare in modo preciso, in genere è una buona idea per avere la lunghezza del record corrisponde alla lunghezza dei dati da scrivere.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2044">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="f50f8-2045">Se la lunghezza dei dati da scrivere è maggiore della lunghezza specificata nel `RecordLength` clausola del `FileOpen` funzione, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2045">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="f50f8-2046">Se un oggetto che contiene un tipo numerico, la variabile scritta `FilePutObject` scrive due byte che identifica il `VarType` dell'oggetto e quindi scrive la variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2046">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="f50f8-2047">Ad esempio, quando si scrive un oggetto che contiene un numero intero, `FilePutObject` scrive byte sei: due byte che identificano l'oggetto come `VarType(3)` (`Integer`) e quattro i byte che contengono i dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2047">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="f50f8-2048">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore del numero effettivo di byte necessari per archiviare la variabile di almeno due byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2048">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="f50f8-2049">Se un oggetto che contiene una stringa, la variabile scritta `FilePutObject` scrive un descrittore a due byte che identifica il `VarType(8)` dell'oggetto, un descrittore a due byte che indica la lunghezza della stringa e quindi i dati della stringa.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2049">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="f50f8-2050">La lunghezza del record specificata dal `RecordLength` parametro il `FileOpen` funzione deve essere maggiore della lunghezza effettiva della stringa di almeno quattro byte.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2050">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="f50f8-2051">Se si desidera inserire una stringa senza il descrittore di, è necessario passare `True` per il `StringIsFixedLength` parametro e la stringa letta deve essere la lunghezza corretta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2051">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="f50f8-2052">Se la variabile scritta è una matrice, è necessario che la lunghezza del record specificata dalla clausola `RecordLength` della funzione `FileOpen` sia superiore o uguale alla somma di tutti i byte necessari per scrivere i dati e il descrittore della matrice.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2052">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="f50f8-2053">Il descrittore specifica il numero di dimensioni di matrice, le dimensioni e i limiti inferiori per ogni priorità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2053">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="f50f8-2054">La lunghezza è uguale a 2 oltre a 8 volte il numero di dimensioni: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2054">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="f50f8-2055">Modalità binaria</span><span class="sxs-lookup"><span data-stu-id="f50f8-2055">Binary Mode</span></span>  
 <span data-ttu-id="f50f8-2056">Per i file aperti `Binary` modalità, tutti la `Random` si applicano le regole della modalità, ad eccezione di:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2056">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="f50f8-2057">Il `RecordLength` clausola nel `FileOpen` funzione non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2057">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="f50f8-2058">`FilePutObject` Scrive tutte le variabili su disco in modo contiguo, vale a dire, senza spazi tra i record.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2058">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2059">Questo esempio viene usato il `FilePutObject` funzione per scrivere una stringa in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2059">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-2060">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2060">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2061">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2061">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2062">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2062">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="f50f8-2063">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2063">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2064">Espressione numerica compresa nell'intervallo tra 0 e 255 inclusi, che indica quanti caratteri devono comparire in una riga prima che venga iniziata una nuova riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2064">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="f50f8-2065">Se <c>RecordWidth</c> è uguale a 0, non esiste alcun limite alla lunghezza della riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2065">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="f50f8-2066">Il valore predefinito per <c>RecordWidth</c> è 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2066">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2067">Assegna lo spessore della linea di output per un file aperto mediante la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2067">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f50f8-2068">Questo esempio viene usato il `FileWidth` funzione per impostare la larghezza della riga di output per un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2068">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2069">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2069">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2070">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2070">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-2071">Restituisce un valore <see langword="Integer" /> che rappresenta il successivo numero di file che può essere utilizzato dalla funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2071">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2072">Restituisce un valore <see langword="Integer" /> che rappresenta il successivo numero di file che può essere utilizzato dalla funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2072">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2073">Usare `FreeFile` per fornire un numero di file che non è già in uso.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2073">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2074">Questo esempio viene usato il `FreeFile` funzione per restituire il successivo numero di file disponibili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2074">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="f50f8-2075">Cinque file aperti per l'output all'interno del ciclo e alcuni dati di esempio sono scritto per ognuno.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2075">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2076">Più di 255 file sono in uso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2076">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-2077">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2077">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f50f8-2078">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2078">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2079">Espressione <see langword="String" /> che specifica un nome di file, directory o cartella.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2079">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="f50f8-2080">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2080">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2081">Restituisce un valore <see langword="FileAttribute" /> che rappresenta gli attributi di un file, di una directory o di una cartella.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2081">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="f50f8-2082">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2082">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="f50f8-2083">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2083">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2084">Il valore restituito dalla funzione <see langword="GetAttr" /> è la somma dei seguenti valori di enumerazione:</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2084">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <list type="table">
            <item>
              <term>
                <span data-ttu-id="f50f8-2085">Valore</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2085">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="f50f8-2086">Costante</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2086">Constant</span>
                </span>
              </description>
              <description>
                <span data-ttu-id="f50f8-2087">Descrizione</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2087">Description</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Normal" />
              </term>
              <description>
                <see langword="vbNormal" />
              </description>
              <description>
                <span data-ttu-id="f50f8-2088">Normale.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2088">Normal.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="ReadOnly" />
              </term>
              <description>
                <see langword="vbReadOnly" />
              </description>
              <description>
                <span data-ttu-id="f50f8-2089">Sola lettura.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2089">Read-only.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Hidden" />
              </term>
              <description>
                <see langword="vbHidden" />
              </description>
              <description>
                <span data-ttu-id="f50f8-2090">Nascosto.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2090">Hidden.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="System" />
              </term>
              <description>
                <see langword="vbSystem" />
              </description>
              <description>
                <span data-ttu-id="f50f8-2091">File di sistema.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2091">System file.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Directory" />
              </term>
              <description>
                <see langword="vbDirectory" />
              </description>
              <description>
                <span data-ttu-id="f50f8-2092">Directory o cartella.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2092">Directory or folder.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Archive" />
              </term>
              <description>
                <see langword="vbArchive" />
              </description>
              <description>
                <span data-ttu-id="f50f8-2093">Il file è stato modificato dopo l'ultimo backup.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2093">File has changed since last backup.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Alias" />
              </term>
              <description>
                <see langword="vbAlias" />
              </description>
              <description>
                <span data-ttu-id="f50f8-2094">Il file ha un nome diverso.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="f50f8-2094">File has a different name.</span>
                </span>
              </description>
            </item>
          </list>
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="f50f8-2095">Queste enumerazioni sono specificate dal linguaggio Visual Basic.</span>
              <span class="sxs-lookup">
                <span data-stu-id="f50f8-2095">These enumerations are specified by the Visual Basic language.</span>
              </span>
              <span data-ttu-id="f50f8-2096">e possono essere utilizzate in qualsiasi punto del codice in sostituzione dei valori effettivi.</span>
              <span class="sxs-lookup">
                <span data-stu-id="f50f8-2096">The names can be used anywhere in your code in place of the actual values.</span>
              </span>
            </para>
          </block>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2097">Per determinare quali attributi sono impostati, usare il `And` operatore per eseguire un confronto bit per bit del valore restituito dal `GetAttr` (funzione) e il valore dell'attributo del file desiderato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2097">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="f50f8-2098">Se il risultato non è zero, tale attributo è impostato per il file specificato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2098">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="f50f8-2099">Ad esempio, il valore restituito di quanto segue `And` espressione è zero se il `Archive` attributo non è impostato:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2099">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="f50f8-2100">Viene restituito un valore diverso da zero se il `Archive` attributo è impostato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2100">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2101">Questo esempio viene usato il `GetAttr` funzione per determinare gli attributi di file e directory o cartella.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2101">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2102">
            <paramref name="Pathname" /> non è valido o contiene caratteri jolly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2102">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f50f8-2103">Il file di destinazione non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2103">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md">
          <span data-ttu-id="f50f8-2104">Operatore And (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2104">And Operator (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2105">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2105">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-2106">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2106">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2107">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2107">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2108">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2108">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2109">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2109">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2110">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2110">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2111">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2111">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2112">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2112">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2113">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2113">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2114">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2114">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2115">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2115">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2116">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2116">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2117">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2117">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2118">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2118">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2119">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2119">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2120">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2120">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2121">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2121">Data</span></span>|<span data-ttu-id="f50f8-2122">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2122">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2123">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2123">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2124">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2124">Empty</span></span>|  
|<span data-ttu-id="f50f8-2125">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2125">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2126">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2126">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2127">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2127">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2128">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2128">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2129">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2129">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2130">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2130">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2131">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2131">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2132">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2132">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2133">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2133">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2134">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2134">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2135">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2135">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2136">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2136">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2137">Questo esempio si presuppone che `TestFile` è un file con poche righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2137">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2138">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2138">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2139">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2139">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2140">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2140">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2141">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2141">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2142">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2142">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2143">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2143">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2144">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2144">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2145">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2145">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2146">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2146">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2147">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2147">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2148">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2148">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2149">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2149">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2150">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2150">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2151">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2151">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2152">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2152">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2153">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2153">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2154">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2154">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2155">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2155">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2156">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2156">Data</span></span>|<span data-ttu-id="f50f8-2157">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2157">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2158">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2158">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2159">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2159">Empty</span></span>|  
|<span data-ttu-id="f50f8-2160">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2160">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2161">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2161">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2162">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2162">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2163">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2163">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2164">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2164">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2165">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2165">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2166">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2166">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2167">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2167">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2168">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2168">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2169">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2169">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2170">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2170">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2171">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2171">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2172">Questo esempio si presuppone che `TestFile` è un file con poche righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2172">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2173">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2174">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2174">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2175">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2175">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2176">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2176">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2177">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2177">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2178">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2178">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2179">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2179">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2180">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2180">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2181">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2181">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2182">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2182">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2183">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2183">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2184">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2184">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2185">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2185">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2186">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2186">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2187">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2187">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2188">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2188">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2189">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2189">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2190">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2190">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2191">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2191">Data</span></span>|<span data-ttu-id="f50f8-2192">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2192">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2193">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2193">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2194">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2194">Empty</span></span>|  
|<span data-ttu-id="f50f8-2195">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2195">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2196">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2196">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2197">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2197">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2198">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2198">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2199">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2199">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2200">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2200">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2201">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2201">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2202">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2202">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2203">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2203">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2204">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2204">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2205">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2205">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2206">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2206">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2207">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2207">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2208">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2208">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2209">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2209">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2210">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2210">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2211">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2211">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2212">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2212">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2213">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2213">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2214">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2214">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2215">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2215">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2216">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2216">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2217">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2217">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2218">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2218">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2219">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2219">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2220">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2220">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2221">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2221">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2222">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2222">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2223">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2223">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2224">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2224">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2225">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2225">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2226">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2226">Data</span></span>|<span data-ttu-id="f50f8-2227">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2227">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2228">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2228">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2229">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2229">Empty</span></span>|  
|<span data-ttu-id="f50f8-2230">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2230">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2231">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2231">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2232">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2232">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2233">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2233">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2234">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2234">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2235">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2235">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2236">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2236">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2237">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2237">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2238">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2238">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2239">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2239">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2240">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2240">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2241">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2241">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2242">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2242">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2243">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2243">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2244">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2244">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2245">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2245">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2246">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2246">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2247">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2247">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2248">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2248">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2249">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2249">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2250">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2250">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2251">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2251">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2252">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2252">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2253">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2253">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2254">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2254">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2255">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2255">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2256">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2256">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2257">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2257">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2258">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2258">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2259">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2259">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2260">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2260">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2261">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2261">Data</span></span>|<span data-ttu-id="f50f8-2262">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2262">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2263">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2263">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2264">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2264">Empty</span></span>|  
|<span data-ttu-id="f50f8-2265">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2265">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2266">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2266">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2267">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2267">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2268">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2268">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2269">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2269">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2270">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2270">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2271">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2271">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2272">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2272">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2273">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2273">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2274">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2274">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2275">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2275">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2276">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2276">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2277">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2277">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2278">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2278">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2279">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2279">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2280">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2280">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2281">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2281">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2282">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2282">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2283">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2283">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2284">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2284">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2285">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2285">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2286">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2286">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2287">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2287">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2288">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2288">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2289">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2289">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2290">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2290">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2291">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2291">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2292">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2292">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2293">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2293">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2294">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2294">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2295">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2295">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2296">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2296">Data</span></span>|<span data-ttu-id="f50f8-2297">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2297">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2298">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2298">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2299">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2299">Empty</span></span>|  
|<span data-ttu-id="f50f8-2300">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2300">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2301">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2301">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2302">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2302">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2303">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2303">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2304">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2304">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2305">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2305">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2306">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2306">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2307">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2307">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2308">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2308">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2309">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2309">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2310">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2310">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2311">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2311">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2312">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2312">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2313">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2313">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2314">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2314">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2315">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2315">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2316">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2316">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2317">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2317">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2318">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2318">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2319">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2319">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2320">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2320">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2321">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2321">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2322">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2322">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2323">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2323">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2324">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2324">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2325">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2325">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2326">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2326">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2327">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2327">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2328">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2328">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2329">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2329">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2330">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2330">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2331">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2331">Data</span></span>|<span data-ttu-id="f50f8-2332">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2332">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2333">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2333">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2334">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2334">Empty</span></span>|  
|<span data-ttu-id="f50f8-2335">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2335">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2336">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2336">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2337">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2337">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2338">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2338">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2339">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2339">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2340">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2340">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2341">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2341">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2342">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2342">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2343">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2343">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2344">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2344">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2345">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2345">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2346">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2346">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2347">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2347">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2348">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2348">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2349">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2349">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2350">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2350">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2351">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2351">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2352">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2352">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2353">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2354">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2354">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2355">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2355">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2356">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2356">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2357">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2357">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2358">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2358">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2359">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2359">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2360">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2360">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2361">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2361">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2362">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2362">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2363">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2363">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2364">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2364">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2365">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2365">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2366">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2366">Data</span></span>|<span data-ttu-id="f50f8-2367">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2367">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2368">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2368">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2369">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2369">Empty</span></span>|  
|<span data-ttu-id="f50f8-2370">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2370">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2371">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2371">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2372">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2372">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2373">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2373">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2374">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2374">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2375">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2375">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2376">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2376">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2377">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2377">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2378">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2378">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2379">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2379">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2380">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2380">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2381">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2381">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2382">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2382">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2383">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2383">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2384">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2384">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2385">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2385">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2386">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2386">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2387">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2387">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2388">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2388">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2389">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2389">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2390">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2390">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2391">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2391">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2392">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2392">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2393">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2393">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2394">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2394">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2395">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2395">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2396">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2396">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2397">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2397">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2398">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2398">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2399">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2399">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2400">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2400">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2401">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2401">Data</span></span>|<span data-ttu-id="f50f8-2402">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2402">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2403">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2403">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2404">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2404">Empty</span></span>|  
|<span data-ttu-id="f50f8-2405">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2405">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2406">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2406">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2407">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2407">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2408">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2408">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2409">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2409">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2410">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2410">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2411">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2411">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2412">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2412">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2413">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2413">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2414">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2414">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2415">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2415">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2416">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2416">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2417">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2417">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2418">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2418">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2419">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2419">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2420">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2420">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2421">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2421">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2422">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2422">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2423">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2423">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2424">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2424">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2425">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2425">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2426">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2426">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2427">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2427">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2428">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2428">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2429">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2429">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2430">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2430">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2431">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2431">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2432">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2432">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2433">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2433">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2434">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2434">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2435">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2435">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2436">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2436">Data</span></span>|<span data-ttu-id="f50f8-2437">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2437">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2438">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2438">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2439">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2439">Empty</span></span>|  
|<span data-ttu-id="f50f8-2440">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2440">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2441">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2441">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2442">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2442">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2443">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2443">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2444">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2444">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2445">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2445">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2446">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2446">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2447">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2447">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2448">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2448">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2449">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2449">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2450">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2450">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2451">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2451">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2452">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2452">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2453">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2453">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2454">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2454">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2455">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2455">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2456">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2456">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2457">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2457">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2458">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2458">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2459">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2459">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2460">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2460">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2461">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2461">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2462">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2462">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2463">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2463">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2464">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2464">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2465">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2465">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2466">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2466">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2467">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2467">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2468">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2468">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2469">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2469">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2470">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2470">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2471">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2471">Data</span></span>|<span data-ttu-id="f50f8-2472">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2472">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2473">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2473">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2474">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2474">Empty</span></span>|  
|<span data-ttu-id="f50f8-2475">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2475">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2476">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2476">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2477">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2477">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2478">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2478">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2479">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2479">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2480">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2480">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2481">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2481">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2482">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2482">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2483">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2483">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2484">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2484">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2485">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2485">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2486">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2486">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2487">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2487">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2488">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2488">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2489">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2489">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2490">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2490">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2491">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2491">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2492">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2492">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2493">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2493">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="f50f8-2494">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2494">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2495">La variabile cui sono assegnati i valori letti dal file non può essere una matrice o una variabile oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2495">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2496">Legge i dati da un file sequenziale aperto e li assegna a variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2496">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2497">Il `Input` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2497">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2498">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2498">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2499">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2499">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2500">I dati letti tramite `Input` viene in genere scritti in un file mediante `Write`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2500">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="f50f8-2501">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2501">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2502">Durante la lettura dai file, non prendere decisioni sui contenuti del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2502">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2503">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2503">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="f50f8-2504">Dopo la lettura, dati numerici o stringa standard viene assegnati a variabili senza alcuna modifica.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2504">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="f50f8-2505">Nella tabella seguente viene illustrato come vengono considerati altri dati di input.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2505">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="f50f8-2506">Dati</span><span class="sxs-lookup"><span data-stu-id="f50f8-2506">Data</span></span>|<span data-ttu-id="f50f8-2507">Valore assegnato alla variabile</span><span class="sxs-lookup"><span data-stu-id="f50f8-2507">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="f50f8-2508">Eliminazione di virgola o riga vuota</span><span class="sxs-lookup"><span data-stu-id="f50f8-2508">Delimiting comma or blank line</span></span>|<span data-ttu-id="f50f8-2509">Empty</span><span class="sxs-lookup"><span data-stu-id="f50f8-2509">Empty</span></span>|  
|<span data-ttu-id="f50f8-2510">#NULL#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2510">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="f50f8-2511">Per la compilazione di TRUE o FALSE # #</span><span class="sxs-lookup"><span data-stu-id="f50f8-2511">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="f50f8-2512">`True` o `False`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2512">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="f50f8-2513">La data o ora rappresentato dall'espressione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2513">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="f50f8-2514">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="f50f8-2514">#ERROR `errornumber`#</span></span>|<span data-ttu-id="f50f8-2515">`errornumber` (la variabile è un oggetto contrassegnato come errore)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2515">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="f50f8-2516">Se si raggiunge la fine del file durante l'immissione di un elemento di dati, l'input viene arrestata e si verifica un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2516">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2517">Il `Input` funzione non è localizzata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2517">The `Input` function is not localized.</span></span> <span data-ttu-id="f50f8-2518">Ad esempio, nella versione tedesca, se si immette 3,14159, verrà restituito solo 3, poiché viene considerata la virgola come separatore variabile anziché come un separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2518">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2519">Lettura da un file usando il `Input` funzione richiede `Read` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2519">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2520">Per ulteriori informazioni, vedere <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2520">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2521">Questo esempio viene usato il `Input` funzione per leggere i dati da un file in due variabili.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2521">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="f50f8-2522">Questo esempio si presuppone che `TestFile` è un file con più righe di dati scritti tramite la `Write` funzioni, ogni riga contiene una stringa tra virgolette e un numero separato da una virgola, ad esempio: ("Hello", 234).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2522">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2523">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2523">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2524">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2524">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2525">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2525">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2526">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2526">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2527">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2527">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2528">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2528">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="f50f8-2529">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2529">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2530">Qualsiasi espressione numerica valida che specifica il numero di caratteri da leggere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2530">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2531">Restituisce il valore <see langword="String" /> che contiene i caratteri di un file aperto in modalità <see langword="Input" /> o <see langword="Binary" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2531">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="f50f8-2532">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="f50f8-2533">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2534">Restituisce il valore <see langword="String" /> che contiene i caratteri di un file aperto in modalità <see langword="Input" /> o <see langword="Binary" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="f50f8-2535">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2536">Il `InputString` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2536">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2537">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2537">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2538">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2538">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2539">Dati letti con il `InputString` funzione viene in genere scritti in un file mediante `Print` o `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2539">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="f50f8-2540">Usare questa funzione solo con i file aperti nel `Input` o `Binary` modalità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2540">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="f50f8-2541">A differenza di `Input` funzione, il `InputString` funzione restituisce tutti i caratteri letti.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2541">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="f50f8-2542">Si tratta di virgole, ritorni a capo, avanzamento riga, racchiusi tra virgolette e spazi iniziali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2542">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="f50f8-2543">Con i file aperti per `Binary` accedere, un tentativo di leggere i file usando il `InputString` funzionare fino al `EOF` restituisce `True` genera un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2543">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="f50f8-2544">Usare la `LOF` e `Loc` funzioni anziché `EOF` quando la lettura di file binari tramite `InputString`, o usare `FileGet` quando si usa il `EOF` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2544">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2545">Durante la lettura dai file, non prendere decisioni di protezione sul contenuto del file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2545">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2546">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2546">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2547">Questo esempio Usa la `InputString` funzione per leggere un carattere alla volta da un file ed eseguire la stampa per il `Output` finestra.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2547">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="f50f8-2548">Questo esempio si presuppone che `MyFile` è un file di testo che presenta più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2548">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2549">
            <paramref name="FileNumber" /> non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2549">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-2550">
            <paramref name="CharCount" /> &lt; 0 o &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2550">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2551">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2551">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2552">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2552">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2553">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2553">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f50f8-2554">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2554">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2555">Espressione <see langword="String" /> che specifica uno o più nomi file da eliminare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2555">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="f50f8-2556">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2556">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2557">Elimina i file da un disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2557">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="f50f8-2558">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2558">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="f50f8-2559">Per ulteriori informazioni, vedi <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2559">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2560">`Kill` supporta l'utilizzo di più caratteri (`*`) e carattere singolo (`?`) i caratteri jolly per specificare più file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2560">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="f50f8-2561">**Nota sulla sicurezza** per eseguire, il `Kill` funzione richiede `Read` e `PathDiscovery` flag di <xref:System.Security.Permissions.FileIOPermission> da concedere al codice in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2561">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="f50f8-2562">Per altre informazioni, vedere <xref:System.Security.SecurityException> [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="f50f8-2562">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2563">Questo esempio viene usato il `Kill` funzione per eliminare un file da un disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2563">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2564">File di destinazione aperti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2564">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f50f8-2565">File di destinazione non trovati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2565">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="f50f8-2566">Autorizzazione negata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2566">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2567">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2567">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2568">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2568">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2569">Legge una sola riga da un file sequenziale aperto e la assegna a una variabile <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2569">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2570">Legge una sola riga da un file sequenziale aperto e la assegna a una variabile <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2570">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2571">Il `LineInput` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2571">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2572">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2572">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2573">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2573">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2574">I dati letti tramite `LineInput` viene in genere scritti in un file mediante `Print`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2574">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2575">Durante la lettura dai file, non prendere decisioni sul contenuto di un file in base all'estensione di nome file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2575">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="f50f8-2576">Ad esempio, un file denominato Form1.vb potrebbe non essere un file di origine Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2576">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="f50f8-2577">Il `LineInput` funzione legge da un file di un carattere alla volta finché non viene rilevato un ritorno a capo (`Chr(13)`) o ritorno a capo/avanzamento riga (`Chr(13) + Chr(10)`) sequenza.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2577">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="f50f8-2578">Le sequenze di feed di ritorno a capo/riga vengono ignorate invece di aggiunto alla stringa di caratteri.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2578">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2579">Lettura da un file usando il `LineInput` funzione richiede `Read` accedere dal <xref:System.Security.Permissions.FileIOPermissionAccess> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2579">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2580">Questo esempio viene usato il `LineInput` funzione per leggere una riga da un file sequenziale e assegnarlo a una variabile.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2580">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="f50f8-2581">Questo esempio si presuppone che `TestFile` è un file di testo che presenta più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2581">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="f50f8-2582">Raggiunta la fine del file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2582">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2583">
            <paramref name="FileNumber" /> non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2583">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2584">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2584">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2585">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2585">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2586">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2586">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2587">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2587">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2588">Qualsiasi numero di file <see langword="Integer" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2588">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2589">Restituisce un valore <see langword="Long" /> che specifica la posizione corrente di lettura/scrittura in un file aperto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2589">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2590">Restituisce un valore <see langword="Long" /> che specifica la posizione corrente di lettura/scrittura in un file aperto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2590">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2591">Il `Loc` funzione è in base zero, usarlo per recuperare il primo byte in un file, verrà restituito 0.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2591">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="f50f8-2592">Il `Loc` funzione viene fornito per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2592">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2593">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2593">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2594">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2594">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2595">Di seguito viene descritto il valore restituito per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2595">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="f50f8-2596">Modalità</span><span class="sxs-lookup"><span data-stu-id="f50f8-2596">Mode</span></span>|<span data-ttu-id="f50f8-2597">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="f50f8-2597">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f50f8-2598">Numero dell'ultimo record di leggere o scrivere nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2598">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="f50f8-2599">Posizione corrente di byte nel file diviso 128.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2599">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="f50f8-2600">Tuttavia, le informazioni restituite dalla `Loc` per file sequenziali non viene utilizzata né necessaria.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2600">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="f50f8-2601">Posizione dell'ultimo byte letti o scritti.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2601">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2602">Questo esempio viene usato il `Loc` funzione per restituire la posizione di lettura/scrittura corrente in un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2602">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="f50f8-2603">Questo esempio si presuppone che `MyFile` è un file di testo che presenta più righe di dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2603">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2604">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2604">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-2605">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2605">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2606">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2606">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f50f8-2607">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2607">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2608">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2608">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2609">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2609">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2610">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2610">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2611">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2611">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f50f8-2612">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2612">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2613">Il `Lock` e `Unlock` funzioni vengono utilizzate in ambienti in cui diversi processi potrebbe essere necessario l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2613">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f50f8-2614">`Lock` e `Unlock` funzioni vengono utilizzate sempre in coppia.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2614">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f50f8-2615">Gli argomenti `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2615">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f50f8-2616">Se `Record`, oppure `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2616">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f50f8-2617">Se `Record` viene specificato solo il singolo record sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2617">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f50f8-2618">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2618">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2619">In questo esempio viene illustrato l'utilizzo dei `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2619">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f50f8-2620">Questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2620">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2621">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2621">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2622">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2622">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2623">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2623">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2624">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2624">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="f50f8-2625">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2625">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2626">Numero del record o byte da bloccare o sbloccare</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2626">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2627">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2627">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2628">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f50f8-2629">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2630">Il `Lock` e `Unlock` funzioni vengono utilizzate in ambienti in cui diversi processi potrebbe essere necessario l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2630">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f50f8-2631">`Lock` e `Unlock` funzioni vengono utilizzate sempre in coppia.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2631">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f50f8-2632">Gli argomenti `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2632">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f50f8-2633">Se `Record`, oppure `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2633">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f50f8-2634">Se `Record` viene specificato solo il singolo record sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2634">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f50f8-2635">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2635">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2636">In questo esempio viene illustrato l'utilizzo dei `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2636">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f50f8-2637">Questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2637">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2638">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2638">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2639">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2639">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2640">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2640">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2641">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2641">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="f50f8-2642">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2642">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2643">Numero del primo record o byte da bloccare o sbloccare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2643">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="f50f8-2644">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2644">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2645">Numero dell'ultimo record o byte da bloccare o sbloccare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2645">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2646">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2646">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2647">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2647">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f50f8-2648">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2648">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2649">Il `Lock` e `Unlock` funzioni vengono utilizzate in ambienti in cui diversi processi potrebbe essere necessario l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2649">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f50f8-2650">`Lock` e `Unlock` funzioni vengono utilizzate sempre in coppia.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2650">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f50f8-2651">Gli argomenti `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2651">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f50f8-2652">Se `Record`, oppure `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2652">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f50f8-2653">Se `Record` viene specificato solo il singolo record sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2653">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f50f8-2654">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2654">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2655">In questo esempio viene illustrato l'utilizzo dei `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2655">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f50f8-2656">Questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2656">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2657">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2657">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2658">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2658">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2659">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2659">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2660">
            <see langword="Integer" /> che contiene un numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2660">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2661">Restituisce <see langword="Long" /> che rappresenta le dimensioni, in byte, di un file aperto mediante la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2661">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2662">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="f50f8-2663">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2663">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2664">Restituisce <see langword="Long" /> che rappresenta le dimensioni, in byte, di un file aperto mediante la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2664">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2665">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2666">Usare il `FileLen` funzione per ottenere la lunghezza di un file che non è aperta.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2666">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2667">Questo esempio viene usato il `LOF` funzione per determinare le dimensioni di un file aperto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2667">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="f50f8-2668">Questo esempio si presuppone che `TestFile` è un file di testo che contiene i dati di esempio.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2668">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2669">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-2670">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2670">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-2671">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2671">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="f50f8-2672">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2672">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2673">Espressione <see langword="String" /> che identifica la directory da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2673">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="f50f8-2674">Il parametro <c>Path</c> può includere l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2674">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="f50f8-2675">Se non viene specificata alcuna unità, <see langword="MkDir" /> crea la nuova directory nell'unità corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2675">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2676">Crea una nuova directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2676">Creates a new directory.</span>
          </span>
          <span data-ttu-id="f50f8-2677">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="f50f8-2678">Per ulteriori informazioni, vedere <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2678">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2679">Questa funzione crea una nuova directory.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2679">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2680">Questo esempio viene usato il `MkDir` funzione per creare una directory.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2680">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="f50f8-2681">Se l'unità non è specificato, viene creata nella nuova directory nell'unità corrente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2681">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-2682">
            <paramref name="Path" /> non è specificato o è vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2682">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="f50f8-2683">Autorizzazione negata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2683">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2684">Directory già esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2684">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md">
          <span data-ttu-id="f50f8-2685">Procedura: creare una directory in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2685">How to: Create a Directory in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2686">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2686">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2687">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2687">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="f50f8-2688">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2688">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2689">Zero o più espressioni con valori delimitati da virgole da scrivere in un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2689">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="f50f8-2690">Le impostazioni dell'argomento <c>Output</c> sono le seguenti:</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2690">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="f50f8-2691">
            <see langword="T:System.IO.IOException" />: la modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2691">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="f50f8-2692">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2692">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2693">Scrive i dati formattati per la visualizzazione in un file sequenziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2693">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2694">Il `Print` e `PrintLine` funzioni sono fornite per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2694">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2695">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2695">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2696">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2696">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2697">`Print` non include una riga alla fine di una riga; del feed Tuttavia, `PrintLine` includono un avanzamento riga.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2697">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f50f8-2698">I dati scritti con `Print` viene in genere letti da un file mediante `LineInput` o `Input`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2698">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f50f8-2699">Se si omette `Output` per `PrintLine`, viene visualizzata una riga vuota al file; per `Print`, nulla è output.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2699">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f50f8-2700">Più espressioni separate da virgola verranno allineate su limiti della scheda, ma la combinazione di virgole e `TAB` può causare risultati incoerenti.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2700">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f50f8-2701">Per la `Boolean` dei dati, ad esempio `True` o `False` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2701">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f50f8-2702">Il `True` e `False` parole chiave non vengono tradotti, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2702">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f50f8-2703">Dati relativi alla data viene scritto nel file usando il formato di data breve standard riconosciuto dal sistema.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2703">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="f50f8-2704">Quando la data o il componente della fase è mancante o zero, solo la parte fornito viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2704">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f50f8-2705">Se non verranno scritti nel file `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2705">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f50f8-2706">Tuttavia, se `Output` i dati elenco viene `DBNull`, `Null` viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2706">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f50f8-2707">Per la `Error` dei dati, l'output viene visualizzato come `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2707">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f50f8-2708">Il `Error` parola chiave non viene eseguita indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2708">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f50f8-2709">Tutti i dati scritti nel file usando `Print` internazionali; vale a dire i dati siano formattati correttamente usando il separatore decimale appropriato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2709">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f50f8-2710">Se l'utente desidera ottenere dati da utilizzare in più lingue, `Write` deve essere utilizzato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2710">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f50f8-2711">La scrittura in un file usando il `Print` o `PrintLine` funzioni richiede `Write` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2711">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2712">Per ulteriori informazioni, vedi <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2712">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2713">Questo esempio Usa la `Print` e `PrintLine` funzioni per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2713">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2714">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2714">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2715">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2715">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2716">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2716">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2717">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2717">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2718">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2718">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="f50f8-2719">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2719">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2720">Zero o più espressioni con valori delimitati da virgole da scrivere in un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2720">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="f50f8-2721">Le impostazioni dell'argomento <c>Output</c> sono le seguenti:</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2721">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="f50f8-2722">
            <see langword="T:System.IO.IOException" />: la modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2722">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="f50f8-2723">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2723">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2724">Scrive i dati formattati per la visualizzazione in un file sequenziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2724">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2725">Il `Print` e `PrintLine` funzioni sono fornite per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2725">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2726">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2726">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2727">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2727">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2728">`Print` non include una riga alla fine di una riga; del feed Tuttavia,`PrintLine` includono un avanzamento riga.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2728">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="f50f8-2729">I dati scritti con `Print` viene in genere letti da un file mediante `LineInput` o `Input`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2729">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="f50f8-2730">Se si omette `Output` per `PrintLine`, viene visualizzata una riga vuota al file; per `Print`, nulla è output.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2730">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="f50f8-2731">Più espressioni separate da virgola verranno allineate su limiti della scheda, ma la combinazione di virgole e `TAB` può causare risultati incoerenti.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2731">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="f50f8-2732">Per la `Boolean` dei dati, ad esempio `True` o `False` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2732">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="f50f8-2733">Il `True` e `False` parole chiave non vengono tradotti, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2733">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="f50f8-2734">Dati relativi alla data viene scritto nel file usando il formato di data breve standard riconosciuto dal sistema.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2734">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="f50f8-2735">Quando la data o il componente della fase è mancante o zero, solo la parte fornito viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2735">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="f50f8-2736">Se non verranno scritti nel file `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2736">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f50f8-2737">Tuttavia, se `Output` i dati elenco viene `DBNull`, `Null` viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2737">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="f50f8-2738">Per la `Error` dei dati, l'output viene visualizzato come `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2738">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="f50f8-2739">Il `Error` parola chiave non viene eseguita indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2739">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="f50f8-2740">Tutti i dati scritti nel file usando `Print` internazionali; vale a dire i dati siano formattati correttamente usando il separatore decimale appropriato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2740">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="f50f8-2741">Se l'utente desidera ottenere dati da utilizzare in più lingue, `Write` deve essere utilizzato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2741">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="f50f8-2742">La scrittura in un file usando il `Print` o `PrintLine` funzioni richiede `Write` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2742">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-2743">Per ulteriori informazioni, vedi <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2743">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2744">Questo esempio Usa la `Print` e `PrintLine` funzioni per scrivere dati in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2744">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2745">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2745">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-2746">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2746">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-2747">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2747">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="f50f8-2748">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2748">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2749">Espressione <see langword="String" /> che specifica il nome file esistente e il relativo percorso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2749">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="f50f8-2750">Il parametro <c>OldPath</c> può includere la directory e l'unità del file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2750">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="f50f8-2751">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2751">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2752">Espressione <see langword="String" /> che specifica il nuovo nome file e il relativo percorso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2752">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="f50f8-2753">Il parametro <c>NewPath</c> può includere la directory e l'unità del percorso di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2753">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="f50f8-2754">Il nome file specificato da <c>NewPath</c> non deve essere già esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2754">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2755">Rinomina un file o una directory su disco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2755">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="f50f8-2756">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2756">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="f50f8-2757">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2757">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2758">Il`Rename` funzione Rinomina un file e spostarlo in una directory diversa, se necessario.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2758">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="f50f8-2759">Il `Rename` funzione può spostare un file in unità, ma è possibile rinominare solo una directory esistente quando entrambe `NewPath` e `OldPath` si trovano nella stessa unità.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2759">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="f50f8-2760">`Rename` non è possibile creare un nuovo file o directory.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2760">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="f50f8-2761">Uso di `Rename` funzione in un file aperto genera un errore.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2761">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="f50f8-2762">È necessario chiudere un file aperto prima di rinominarlo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2762">You must close an open file before renaming it.</span></span> <span data-ttu-id="f50f8-2763">`Rename` argomenti non possono includere più caratteri (\*) e caratteri jolly (?) di caratteri a singolo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2763">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f50f8-2764">Quando si usa `Rename` per copiare un file da un percorso non protetto in un percorso protetto, il file mantiene i diritti meno restrittivi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2764">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="f50f8-2765">Verifica per accertarsi che a non introdurre possibili rischi di sicurezza.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2765">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2766">Questo esempio viene usato il `Rename` funzione per rinominare un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2766">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="f50f8-2767">Ai fini di questo esempio, si supponga che esistano le directory in cui siano già state specificate.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2767">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-2768">Il percorso non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2768">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f50f8-2769">Il file <paramref name="OldPath" /> non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2769">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2770">Impossibile rinominare con il nome di un'altro dispositivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2770">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">
          <span data-ttu-id="f50f8-2771">Procedura: rinominare un file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2771">How to: Rename a File in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-2772">Chiude tutti i file su disco aperti mediante la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2772">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2773">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="f50f8-2774">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2775">Il `Reset` funzione chiude tutti i file aperti per il `FileOpen` funzione e ha la stessa funzione `FileClose()` senza parametri.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2775">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2776">Questo esempio viene usato il `Reset` (funzione) per chiudere tutti i file aperti e scrivere il contenuto di tutti i buffer di file su disco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2776">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="f50f8-2777">Si noti l'uso del `Object` variabile `FileNumber` come una stringa e un numero.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2777">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md">
          <span data-ttu-id="f50f8-2778">Istruzione End</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2778">End Statement</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="f50f8-2779">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2779">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2780">Espressione <see langword="String" /> che identifica la directory o la cartella da rimuovere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2780">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="f50f8-2781">Il parametro <c>Path</c> può includere l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2781">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="f50f8-2782">Se non viene specificata alcuna unità, <see langword="RmDir" /> rimuove la directory nell'unità corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2782">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2783">Rimuove una directory esistente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2783">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="f50f8-2784">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="f50f8-2785">Per ulteriori informazioni, vedere <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2785">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2786">Si verifica un errore se si prova a usare `RmDir` in una directory che contiene i file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2786">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="f50f8-2787">Usare il `Kill` funzione eliminare tutti i file prima di provare a rimuovere una directory.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2787">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2788">Questo esempio viene usato il `RmDir` funzione per rimuovere una directory esistente.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2788">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-2789">
            <paramref name="Path" /> non è specificato o è vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2789">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2790">La directory di destinazione contiene file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2790">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="f50f8-2791">La directory non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2791">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-2792">Restituisce <see langword="Long" />, che specifica la posizione corrente di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />, o imposta la posizione per la successiva operazione di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2792">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2793">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="f50f8-2794">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2795">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2795">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2796">
            <see langword="Integer" /> che contiene un numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2796">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2797">Restituisce <see langword="Long" />, che specifica la posizione corrente di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />, o imposta la posizione per la successiva operazione di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2797">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2798">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2798">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="f50f8-2799">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2799">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2800">Restituisce <see langword="Long" />, che specifica la posizione corrente di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />, o imposta la posizione per la successiva operazione di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2801">`Seek` Restituisce un valore compreso tra 1 e 2.147.483.647 (equivalente a 2 ^ 31-1), inclusi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2801">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f50f8-2802">Di seguito vengono descritti i valori restituiti per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2802">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f50f8-2803">Modalità</span><span class="sxs-lookup"><span data-stu-id="f50f8-2803">Mode</span></span>|<span data-ttu-id="f50f8-2804">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="f50f8-2804">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f50f8-2805">Numero del record successivo letto o scritto</span><span class="sxs-lookup"><span data-stu-id="f50f8-2805">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f50f8-2806">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2806">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f50f8-2807">Posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2807">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f50f8-2808">Il primo byte in un file corrisponde alla posizione 1, il secondo byte è nella posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2808">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2809">Questo esempio viene usato il `Seek` funzione per restituire la posizione corrente del file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2809">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f50f8-2810">Nell'esempio si presuppone `TestFile` è un file che contiene i record della struttura `Record`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2810">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f50f8-2811">Per i file aperti `Random` modalità `Seek` restituisce il numero di record successivo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2811">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f50f8-2812">Per i file aperti in modalità diverso da `Random` modalità `Seek` restituisce la posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2812">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f50f8-2813">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2813">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f50f8-2814">Questo esempio viene usato il `Seek` funzione per impostare la posizione per la successiva operazione di lettura e scrittura in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2814">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f50f8-2815">Per i file aperti in modalità diverso da `Random` modalità `Seek` imposta la posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2815">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f50f8-2816">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2817">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2817">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-2818">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2818">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-2819">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2819">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2820">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2820">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2821">
            <see langword="Integer" /> che contiene un numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2821">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="f50f8-2822">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2822">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2823">Numero compreso nell'intervallo da 1 a 2.147.483.647 inclusi, che indica dove deve aver luogo la successiva operazione di lettura/scrittura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2823">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2824">Restituisce <see langword="Long" />, che specifica la posizione corrente di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />, o imposta la posizione per la successiva operazione di lettura/scrittura in un file aperto mediante la funzione <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2824">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2825">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2825">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="f50f8-2826">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2826">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2827">`Seek` Restituisce un valore compreso tra 1 e 2.147.483.647 (equivalente a 2 ^ 31-1), inclusi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2827">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="f50f8-2828">Di seguito vengono descritti i valori restituiti per ogni modalità di accesso ai file:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2828">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="f50f8-2829">Modalità</span><span class="sxs-lookup"><span data-stu-id="f50f8-2829">Mode</span></span>|<span data-ttu-id="f50f8-2830">Valore restituito</span><span class="sxs-lookup"><span data-stu-id="f50f8-2830">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="f50f8-2831">Numero del record successivo letto o scritto</span><span class="sxs-lookup"><span data-stu-id="f50f8-2831">Number of the next record read or written</span></span>|  
|<span data-ttu-id="f50f8-2832">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="f50f8-2832">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="f50f8-2833">Posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2833">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="f50f8-2834">Il primo byte in un file corrisponde alla posizione 1, il secondo byte è nella posizione 2 e così via.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2834">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2835">Questo esempio viene usato il `Seek` funzione per restituire la posizione corrente del file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2835">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="f50f8-2836">Nell'esempio si presuppone `TestFile` è un file che contiene i record della struttura `Record`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2836">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="f50f8-2837">Per i file aperti `Random` modalità `Seek` restituisce il numero di record successivo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2837">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="f50f8-2838">Per i file aperti in modalità diverso da `Random` modalità `Seek` restituisce la posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2838">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f50f8-2839">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2839">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="f50f8-2840">Questo esempio viene usato il `Seek` funzione per impostare la posizione per la successiva operazione di lettura e scrittura in un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2840">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="f50f8-2841">Per i file aperti in modalità diverso da `Random` modalità `Seek` imposta la posizione di byte in corrispondenza del quale si verifica all'operazione successiva.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2841">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="f50f8-2842">Si supponga `TestFile` è un file che contiene più righe di testo.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2843">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2843">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">
          <span data-ttu-id="f50f8-2844">Lettura da file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2844">Reading from Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">
          <span data-ttu-id="f50f8-2845">Scrittura su file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2845">Writing to Files in Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="f50f8-2846">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2846">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2847">Espressione <see langword="String" /> che specifica un nome file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2847">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="f50f8-2848">Il parametro <c>PathName</c> può includere la directory o la cartella e l'unità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2848">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="f50f8-2849">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2849">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2850">Costante o espressione numerica la cui somma specifica attributi di file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2850">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2851">Imposta le informazioni degli attributi per un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2851">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="f50f8-2852">La funzionalità <see langword="My" /> offre un livello più elevato di produttività e prestazioni nelle operazioni di I/O dei file rispetto a <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2852">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="f50f8-2853">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2853">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2854">Se si prova a impostare gli attributi di un file aperto, si verifica un errore di run-time.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2854">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="f50f8-2855">Il `Attributes` valori di enumerazione degli argomenti sono i seguenti:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2855">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="f50f8-2856">Valore</span><span class="sxs-lookup"><span data-stu-id="f50f8-2856">Value</span></span>|<span data-ttu-id="f50f8-2857">Costante</span><span class="sxs-lookup"><span data-stu-id="f50f8-2857">Constant</span></span>|<span data-ttu-id="f50f8-2858">Descrizione</span><span class="sxs-lookup"><span data-stu-id="f50f8-2858">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="f50f8-2859">Normale (impostazione predefinita).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2859">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="f50f8-2860">Sola lettura.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2860">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="f50f8-2861">Nascosto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2861">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="f50f8-2862">File di sistema.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2862">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="f50f8-2863">Etichetta del volume</span><span class="sxs-lookup"><span data-stu-id="f50f8-2863">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="f50f8-2864">Directory o cartella.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2864">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="f50f8-2865">Il file è stato modificato dopo l'ultimo backup.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2865">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="f50f8-2866">Il file ha un nome diverso.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2866">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2867">Queste enumerazioni sono specificate dal linguaggio Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2867">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="f50f8-2868">I nomi possono essere utilizzati ovunque nel codice anziché i valori effettivi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2868">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2869">Questo esempio viene usato il `SetAttr` funzione per impostare gli attributi per un file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2869">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f50f8-2870">Tipo di <paramref name="Attribute" /> non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2870">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="f50f8-2871">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2871">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2872">Numero di spazi da inserire prima di visualizzare o stampare la successiva espressione di un elenco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2872">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2873">Utilizzato con le funzioni <see langword="Print" /> o <see langword="PrintLine" /> per posizionare l'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2873">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2874">Utilizzato con le funzioni <see langword="Print" /> o <see langword="PrintLine" /> per posizionare l'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2875">Se `Count` è inferiore alla lunghezza della riga di output, la posizione successiva immediatamente segue il numero di spazi stampato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2875">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="f50f8-2876">Se`Count` è maggiore della larghezza della riga di output, `SPC` calcolerà la posizione successiva usando la formula:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2876">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f50f8-2877">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="f50f8-2877">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="f50f8-2878">Ad esempio, se la posizione di stampa è 24, la larghezza della riga di output è 80 e si specifica `SPC(90)`, la stampa Avanti inizierà nella posizione di 34 (posizione di stampa corrente + la parte restante del 90/80).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2878">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="f50f8-2879">Se la differenza tra la posizione di stampa e la larghezza della riga di output è inferiore a `Count` (o `Count` `Mod` *larghezza*), il `SPC` funzione passerà all'inizio della riga successiva e che genera l'errore è uguale a spazi `Count` – (*larghezza* – *currentprintposition*).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2879">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2880">Assicurarsi che le colonne di tabella sono sufficientemente ampia per consentire caratteri ampi.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2880">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2881">Questo esempio Usa il `SPC` per posizionare l'output in un file e in funzione il **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2881">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="f50f8-2882">Operatore Mod (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2882">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-2883">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2883">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-2884">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2884">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2885">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2885">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2886">Se la posizione di stampa corrente nella riga corrente è più grande `Column`, `TAB` passerà al valore di colonna uguale a `Column` nella successiva riga di output.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2886">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f50f8-2887">Se `Column` è minore di 1, `TAB` Sposta la posizione di stampa per la colonna 1.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2887">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f50f8-2888">Se `Column` è maggiore della larghezza di riga di output, `TAB` calcolerà la posizione successiva usando la formula:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2888">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f50f8-2889">Larghezza della colonna Mod</span><span class="sxs-lookup"><span data-stu-id="f50f8-2889">Column Mod width</span></span>  
  
 <span data-ttu-id="f50f8-2890">Ad esempio, se *larghezza* 80 e specificazione `TAB(90)`, la stampa Avanti inizierà dalla colonna 10 (il resto pari a 80 o 90).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2890">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f50f8-2891">Se `Column` è minore della posizione corrente di stampa, la stampa inizierà nella riga successiva in corrispondenza della posizione di stampa calcolata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2891">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f50f8-2892">Se la posizione di stampa calcolata è maggiore della posizione corrente di stampa, stampa inizierà dalla calcolata stampa posizione sulla stessa riga.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2892">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f50f8-2893">La posizione più a sinistra di stampa in una riga di output è sempre 1.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2893">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f50f8-2894">Quando si usa la `Print` oppure `PrintLine` funzioni per la stampa su file, l'ultima posizione corrisponde alla larghezza corrente del file di output, è possibile impostare utilizzando il `FileWidth` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2894">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f50f8-2895">Il `TAB` funzione può essere usata anche con il `WriteLine` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2895">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f50f8-2896">Non può essere usato con <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2896">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2897">Assicurarsi che le colonne di tabella sono sufficientemente ampia per contenere i caratteri wide.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2897">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2898">Questo esempio Usa il `TAB` per posizionare l'output in un file e in funzione il **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2898">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="f50f8-2899">Operatore Mod (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2899">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="f50f8-2900">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2900">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2901">Numero della colonna a cui passare prima di visualizzare o stampare la successiva espressione di un elenco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2901">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="f50f8-2902">In caso di omissione, <see langword="TAB" /> sposterà il punto di inserimento all'inizio della successiva area di stampa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2902">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2903">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2903">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f50f8-2904">Viene utilizzata con la funzione <see langword="Print" /> o <see langword="PrintLine" /> per specificare la posizione dell'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2904">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2905">Se la posizione di stampa nella riga corrente è maggiore `Column`, `TAB` passerà al valore di colonna uguale a `Column` nella successiva riga di output.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2905">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="f50f8-2906">Se `Column` è minore di 1, `TAB` Sposta la posizione di stampa per la colonna 1.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2906">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="f50f8-2907">Se `Column` è maggiore della larghezza della riga di output, `TAB` calcolerà la posizione successiva usando la formula:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2907">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="f50f8-2908">Larghezza della colonna Mod</span><span class="sxs-lookup"><span data-stu-id="f50f8-2908">Column Mod width</span></span>  
  
 <span data-ttu-id="f50f8-2909">Ad esempio, se *larghezza* 80 e specificazione `TAB(90)`, la stampa Avanti inizierà dalla colonna 10 (il resto pari a 80 o 90).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2909">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="f50f8-2910">Se `Column` è minore della posizione corrente di stampa, la stampa inizierà nella riga successiva in corrispondenza della posizione di stampa calcolata.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2910">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="f50f8-2911">Se la posizione di stampa calcolata è maggiore della posizione corrente di stampa, la stampa inizierà a calcolata stampa posizione sulla stessa riga.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2911">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="f50f8-2912">La posizione più a sinistra di stampa in una riga di output è sempre 1.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2912">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="f50f8-2913">Quando si usa la `Print` oppure `PrintLine` funzioni per la stampa su file, l'ultima posizione corrisponde alla larghezza corrente del file di output, è possibile impostare utilizzando il `FileWidth` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2913">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="f50f8-2914">Il `TAB` funzione può essere usata anche con il `WriteLine` (funzione).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2914">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="f50f8-2915">Non può essere usato con <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> o <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2915">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f50f8-2916">Assicurarsi che le colonne di tabella sono sufficientemente ampia per contenere i caratteri wide.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2916">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2917">Questo esempio Usa il `TAB` per posizionare l'output in un file e in funzione il **Output** finestra.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2917">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md">
          <span data-ttu-id="f50f8-2918">Operatore Mod (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2918">Mod Operator (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f50f8-2919">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2919">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2920">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2920">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f50f8-2921">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2921">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2922">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2922">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2923">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2923">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2924">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2924">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2925">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2925">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f50f8-2926">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2926">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2927">Il `Lock` e `Unlock` funzioni vengono utilizzate in ambienti in cui diversi processi potrebbe essere necessario l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2927">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f50f8-2928">`Lock` e `Unlock` funzioni vengono utilizzate sempre in coppia.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2928">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f50f8-2929">Gli argomenti `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2929">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f50f8-2930">Se `Record`, oppure `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2930">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f50f8-2931">Se `Record` viene specificato solo il singolo record sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2931">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f50f8-2932">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2932">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2933">In questo esempio viene illustrato l'utilizzo dei `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2933">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f50f8-2934">Questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2934">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2935">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2935">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2936">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2936">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2937">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2937">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2938">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2938">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="f50f8-2939">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2939">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2940">Numero del record o byte da bloccare o sbloccare</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2940">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2941">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2941">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2942">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2942">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f50f8-2943">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2943">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2944">Il `Lock` e `Unlock` funzioni vengono utilizzate in ambienti in cui diversi processi potrebbe essere necessario l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2944">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f50f8-2945">`Lock` e `Unlock` funzioni vengono utilizzate sempre in coppia.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2945">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f50f8-2946">Gli argomenti `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2946">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f50f8-2947">Se `Record`, oppure `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2947">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f50f8-2948">Se `Record` viene specificato solo il singolo record sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2948">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f50f8-2949">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2949">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2950">In questo esempio viene illustrato l'utilizzo dei `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2950">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f50f8-2951">Questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2951">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2952">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2953">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2953">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2954">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2954">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2955">Qualsiasi numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2955">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="f50f8-2956">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2956">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2957">Numero del primo record o byte da bloccare o sbloccare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2957">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="f50f8-2958">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2958">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2959">Numero dell'ultimo record o byte da bloccare o sbloccare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2959">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2960">Controlla l'accesso da parte di altri processi a una parte o a tutto il file aperto mediante la funzione <see langword="Open" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2960">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="f50f8-2961">Nelle operazioni di I/O su file, la funzionalità <see langword="My" /> garantisce produttività e prestazioni migliori rispetto a <see langword="Lock" /> e <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2961">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="f50f8-2962">Per ulteriori informazioni, vedere <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2962">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2963">Il `Lock` e `Unlock` funzioni vengono utilizzate in ambienti in cui diversi processi potrebbe essere necessario l'accesso allo stesso file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2963">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="f50f8-2964">`Lock` e `Unlock` funzioni vengono utilizzate sempre in coppia.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2964">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="f50f8-2965">Gli argomenti `Lock` e `Unlock` devono essere identici.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2965">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="f50f8-2966">Se `Record`, oppure `FromRecord` e `ToRecord` viene omesso, il blocco sarà per l'intero file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2966">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="f50f8-2967">Se `Record` viene specificato solo il singolo record sia bloccato o sbloccato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2967">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="f50f8-2968">Se il file è stato aperto per input o output, sequenziale `Lock` e `Unlock` interessano l'intero file, indipendentemente dall'intervallo specificato da `FromRecord` e`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2968">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-2969">In questo esempio viene illustrato l'utilizzo dei `Lock` e `Unlock` funzioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2969">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="f50f8-2970">Questo esempio si presuppone che `People.txt` è un file che contiene i record della struttura `Person`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2970">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-2971">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2971">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-2972">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2972">File Access with Visual Basic</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-2973">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2973">Required.</span>
          </span>
          <span data-ttu-id="f50f8-2974">Espressione <see langword="Integer" /> contenente un numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2974">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="f50f8-2975">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2975">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-2976">Una o più espressioni con valori delimitati da virgole da scrivere in un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2976">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-2977">Scrive dati in un file sequenziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2977">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="f50f8-2978">I dati scritti con <see langword="Write" /> vengono in genere letti da un file usando <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-2978">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-2979">Il `Write` e `WriteLine` funzioni sono fornite per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2979">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-2980">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2980">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-2981">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-2981">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-2982">Se si omette `Output`, una riga vuota viene stampata il file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2982">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f50f8-2983">Più espressioni possono essere separati da una virgola.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2983">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f50f8-2984">A differenza di `Print` funzione, il `Write` funzione inserisce le virgole tra gli elementi e le stringhe tra virgolette quando vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2984">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f50f8-2985">Non è necessario inserire delimitatori espliciti nell'elenco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2985">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f50f8-2986">Quando `Write` consente di scrivere dati in un file, solo alfanumerici `Boolean`, data, null e `Error` sono supportati i formati di dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2986">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f50f8-2987">I presupposti seguenti universali vengono seguiti in modo che i dati possono sempre essere letti e interpreta correttamente usando `Input`, indipendentemente dalle impostazioni locali:</span><span class="sxs-lookup"><span data-stu-id="f50f8-2987">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f50f8-2988">Dati numerici vengono sempre scritti usando il punto come separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2988">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f50f8-2989">Per la `Boolean` dei dati, ad esempio `#TRUE#` o `#FALSE#` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2989">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f50f8-2990">Il `True` e `False` parole chiave non vengono tradotti, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2990">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f50f8-2991">Le date vengono scritte nel file usando il formato della data universal.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2991">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f50f8-2992">Quando la data o il componente della fase è mancante o zero, solo la parte fornito viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2992">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f50f8-2993">Se non verranno scritti nel file `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2993">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f50f8-2994">Tuttavia, per i dati null, `#NULL#` viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2994">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f50f8-2995">Per la `Error` dei dati, l'output viene visualizzato come `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2995">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f50f8-2996">Il `Error` parola chiave non viene convertito, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2996">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f50f8-2997">`WriteLine` Inserisce un carattere di nuova riga (vale a dire, un ritorno a capo/avanzamento riga, oppure `Chr(13) + Chr(10)`), dopo l'ultimo carattere scritto `Output` al file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-2997">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f50f8-2998">È possibile incorporare virgolette in una stringa con virgolette doppie, o "".</span><span class="sxs-lookup"><span data-stu-id="f50f8-2998">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f50f8-2999">Ad esempio,</span><span class="sxs-lookup"><span data-stu-id="f50f8-2999">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f50f8-3000">Restituisce una stringa con il valore di `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3000">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f50f8-3001">La scrittura in un file usando il `Write` o `WriteLine` funzioni richiede `Append` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3001">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-3002">Per ulteriori informazioni, vedi <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3002">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-3003">Questo esempio viene usato il `Write` funzione per scrivere i dati non elaborati in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3003">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="f50f8-3004">La modalità File non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3004">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-3005">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3005">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-3006">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3006">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-3007">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3007">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="f50f8-3008">Obbligatorio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3008">Required.</span>
          </span>
          <span data-ttu-id="f50f8-3009">Espressione <see langword="Integer" /> contenente un numero di file valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3009">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="f50f8-3010">Facoltativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3010">Optional.</span>
          </span>
          <span data-ttu-id="f50f8-3011">Una o più espressioni con valori delimitati da virgole da scrivere in un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3011">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f50f8-3012">Scrive dati in un file sequenziale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3012">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="f50f8-3013">I dati scritti con <see langword="Write" /> vengono in genere letti da un file usando <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3013">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f50f8-3014">Il `Write` e `WriteLine` funzioni sono fornite per compatibilità con le versioni precedenti e può influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3014">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="f50f8-3015">Per le applicazioni non legacy, il `My.Computer.FileSystem` oggetto offre prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3015">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="f50f8-3016">Per altre informazioni, vedere [accesso al File con Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="f50f8-3016">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="f50f8-3017">Se si omette `Output`, una riga vuota viene stampata il file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3017">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="f50f8-3018">Più espressioni possono essere separati da una virgola.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3018">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="f50f8-3019">A differenza di `Print` funzione, il `Write` funzione inserisce le virgole tra gli elementi e le stringhe tra virgolette quando vengono scritti nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3019">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="f50f8-3020">Non è necessario inserire delimitatori espliciti nell'elenco.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3020">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="f50f8-3021">Quando `Write` consente di scrivere dati in un file, solo alfanumerici `Boolean`, data, null e `Error` sono supportati i formati di dati.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3021">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="f50f8-3022">I presupposti seguenti universali vengono seguiti in modo che i dati possono sempre essere letti e interpreta correttamente usando `Input`, indipendentemente dalle impostazioni locali:</span><span class="sxs-lookup"><span data-stu-id="f50f8-3022">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="f50f8-3023">Dati numerici vengono sempre scritti usando il punto come separatore decimale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3023">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="f50f8-3024">Per la `Boolean` dei dati, ad esempio `#TRUE#` o `#FALSE#` viene stampato.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3024">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="f50f8-3025">Il `True` e `False` parole chiave non vengono tradotti, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3025">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="f50f8-3026">Le date vengono scritte nel file usando il formato della data universal.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3026">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="f50f8-3027">Quando la data o il componente della fase è mancante o zero, solo la parte fornito viene scritto nel file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3027">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="f50f8-3028">Se non verranno scritti nel file `Output` dati sono vuoti.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3028">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="f50f8-3029">Tuttavia, per i dati null, `#NULL#` viene scritto.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3029">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="f50f8-3030">Per la `Error` dei dati, l'output viene visualizzato come `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3030">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="f50f8-3031">Il `Error` parola chiave non viene convertito, indipendentemente dalle impostazioni locali.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3031">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="f50f8-3032">`WriteLine` Inserisce un carattere di nuova riga (vale a dire, un ritorno a capo/avanzamento riga, oppure `Chr(13) + Chr(10)`), dopo l'ultimo carattere scritto `Output` al file.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3032">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="f50f8-3033">È possibile incorporare virgolette in una stringa con virgolette doppie, o "".</span><span class="sxs-lookup"><span data-stu-id="f50f8-3033">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="f50f8-3034">Ad esempio,</span><span class="sxs-lookup"><span data-stu-id="f50f8-3034">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="f50f8-3035">Restituisce una stringa con il valore di `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3035">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="f50f8-3036">La scrittura in un file usando il `Write` o `WriteLine` funzioni richiede `Append` accedere dal `FileIOPermissionAccess` enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3036">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="f50f8-3037">Per ulteriori informazioni, vedi <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3037">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f50f8-3038">Questo esempio viene usato il `Write` funzione per scrivere i dati non elaborati in un file sequenziale.</span><span class="sxs-lookup"><span data-stu-id="f50f8-3038">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md">
          <span data-ttu-id="f50f8-3039">Accesso ai file con Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3039">File Access with Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md">
          <span data-ttu-id="f50f8-3040">Procedura: scrivere testo in file in Visual Basic</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3040">How to: Write Text to Files in Visual Basic</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">
          <span data-ttu-id="f50f8-3041">Procedura: scrivere testo in un File con un oggetto Streamwriter (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f50f8-3041">How to: Write Text to a File with a Streamwriter (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>