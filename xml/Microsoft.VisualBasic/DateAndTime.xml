<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="80b2353f9d63e4d1e034c200bb00097318a52405" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51912433" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <TypeSignature Language="VB.NET" Value="Public Module DateAndTime" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateAndTime sealed" />
  <TypeSignature Language="F#" Value="type DateAndTime = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Il modulo <see langword="DateAndTime" /> contiene le procedure e le proprietà utilizzate nelle operazioni di data e ora.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri delle librerie di runtime che ottiene la data corrente o l'ora, eseguono calcoli di data, restituiscono una data o ora, impostare la data o ora o calcolare la durata di un processo.  
  
   
  
## Examples  
 Questo esempio viene usato il `Today` proprietà per restituire la data corrente del sistema.  
  
```vb  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/dates-and-times-summary.md">Riepilogo di data e ora</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Parole chiave (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membri della libreria Run-Time Visual Basic</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un valore <see langword="Date" /> contenente un valore di data e ora a cui è stato aggiunto un intervallo di tempo specifico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As DateInterval, Number As Double, DateValue As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(Microsoft::VisualBasic::DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : Microsoft.VisualBasic.DateInterval * double * DateTime -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">Obbligatorio. Valore dell'enumerazione <see langword="DateInterval" /> o espressione <see langword="String" /> che rappresenta l'intervallo di tempo che si desidera aggiungere.</param>
        <param name="Number">Obbligatorio. <see langword="Double" />. Espressione a virgola mobile che rappresenta il numero di intervalli che si desidera aggiungere. <c>Numero</c> può essere positivo (per ottenere valori di data/ora nel futuro) o negativo (per ottenere valori di data/ora nel passato). Può contenere una parte frazionaria se <c>Intervallo</c> specifica ore, minuti o secondi. Per gli altri valori di <c>Intervallo</c>, un'eventuale parte frazionaria del <c>Numero</c> viene ignorata.</param>
        <param name="DateValue">Obbligatorio. <see langword="Date" />. Espressione che rappresenta la data e l'ora a cui aggiungere l'intervallo. L'oggetto <c>dateValue</c> stesso non viene modificato nel programma chiamante.</param>
        <summary>Restituisce un valore <see langword="Date" /> contenente un valore di data e ora a cui è stato aggiunto un intervallo di tempo specifico.</summary>
        <returns>Restituisce un valore <see langword="Date" /> contenente un valore di data e ora a cui è stato aggiunto un intervallo di tempo specifico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il `DateAdd` funzione per aggiungere o sottrarre un intervallo di tempo specificato da una data. Ad esempio, è possibile calcolare una data di 30 giorni da oggi o l'ora 45 minuti prima dell'ora.  
  
 Per aggiungere giorni a `DateValue`, è possibile usare `DateInterval.Day`, `DateInterval.DayOfYear`, o `DateInterval.Weekday`. Questi sono considerati equivalenti in quanto `DayOfYear` e `Weekday` non sono gli intervalli di tempo significativo.  
  
 Il `DateAdd` funzione non restituisce mai una data non valida. Se necessario, la parte del giorno della data risulta viene regolata in base all'ultimo giorno del mese dell'anno risultante. L'esempio seguente aggiunge un mese di 31 gennaio:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 In questo esempio `DateAdd` restituisce `#2/28/1995#`, non `#2/31/1995#`. Se `DateValue` viene `#1/31/1996#`, viene restituito `#2/29/1996#` 1996 trattandosi di un anno bisestile.  
  
> [!NOTE]
>  `DateAdd` Usa l'impostazione del calendario corrente il <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà del <xref:System.Globalization.CultureInfo> classe la <xref:System.Globalization> dello spazio dei nomi. Il valore predefinito <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valori vengono determinati dalle **Pannello di controllo** impostazioni.  
  
 Poiché ogni `Date` valore è supportato da un <xref:System.DateTime> struttura, i relativi metodi offrono ulteriori opzioni per l'aggiunta di intervalli di tempo. Ad esempio, è possibile aggiungere un numero frazionario di giorni, arrotondato al millisecondo più vicino, per un `Date` variabile come indicato di seguito:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 Il `Interval` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Stringa|Unità di intervallo di tempo da aggiungere.|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Giorno; troncato al valore integrale|  
|`DateInterval.DayOfYear`|y|Giorno; troncato al valore integrale|  
|`DateInterval.Hour`|h|Ora; arrotondato al millisecondo più vicino|  
|`DateInterval.Minute`|n|Minuti; arrotondato al millisecondo più vicino|  
|`DateInterval.Month`|m|Mese; troncato al valore integrale|  
|`DateInterval.Quarter`|q|Trimestre; troncato al valore integrale|  
|`DateInterval.Second`|s|Secondo. arrotondato al millisecondo più vicino|  
|`DateInterval.Weekday`|w|Giorno; troncato al valore integrale|  
|`DateInterval.WeekOfYear`|ww|Settimana; troncato al valore integrale|  
|`DateInterval.Year`|aaaa|Anno. troncato al valore integrale|  
  
   
  
## Examples  
 L'esempio seguente accetta una data e, utilizzando il `DateAdd` di funzione, viene visualizzata una data corrispondente un numero specificato di mesi in futuro.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> non può essere assegnato forzatamente a un valore <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> non è valido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La data calcolata è precedente alle 00.00.00 dell'1 gennaio dell'anno 1 o successiva alle 23.59.59 del 31 dicembre 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateAdd (Interval As String, Number As Double, DateValue As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateAdd(System::String ^ Interval, double Number, System::Object ^ DateValue);" />
      <MemberSignature Language="F#" Value="static member DateAdd : string * double * obj -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateAdd (Interval, Number, DateValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">Obbligatorio. Valore dell'enumerazione <see langword="DateInterval" /> o espressione <see langword="String" /> che rappresenta l'intervallo di tempo che si desidera aggiungere.</param>
        <param name="Number">Obbligatorio. <see langword="Double" />. Espressione a virgola mobile che rappresenta il numero di intervalli che si desidera aggiungere. <c>Numero</c> può essere positivo (per ottenere valori di data/ora nel futuro) o negativo (per ottenere valori di data/ora nel passato). Può contenere una parte frazionaria se <c>Intervallo</c> specifica ore, minuti o secondi. Per gli altri valori di <c>Intervallo</c>, un'eventuale parte frazionaria del <c>Numero</c> viene ignorata.</param>
        <param name="DateValue">Obbligatorio. <see langword="Date" />. Espressione che rappresenta la data e l'ora a cui aggiungere l'intervallo. L'oggetto <c>dateValue</c> stesso non viene modificato nel programma chiamante.</param>
        <summary>Restituisce un valore <see langword="Date" /> contenente un valore di data e ora a cui è stato aggiunto un intervallo di tempo specifico.</summary>
        <returns>Restituisce un valore <see langword="Date" /> contenente un valore di data e ora a cui è stato aggiunto un intervallo di tempo specifico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il `DateAdd` funzione per aggiungere o sottrarre un intervallo di tempo specificato da una data. Ad esempio, è possibile calcolare una data di 30 giorni da oggi o l'ora 45 minuti prima dell'ora.  
  
 Per aggiungere giorni a `DateValue`, è possibile usare `DateInterval.Day`, `DateInterval.DayOfYear`, o `DateInterval.Weekday`. Questi sono considerati equivalenti in quanto `DayOfYear` e `Weekday` non sono gli intervalli di tempo significativo.  
  
 Il `DateAdd` funzione non restituisce mai una data non valida. Se necessario, la parte del giorno della data risulta viene regolata in base all'ultimo giorno del mese dell'anno risultante. L'esempio seguente aggiunge un mese di 31 gennaio:  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 In questo esempio `DateAdd` restituisce `#2/28/1995#`, non `#2/31/1995#`. Se `DateValue` viene `#1/31/1996#`, viene restituito `#2/29/1996#` 1996 trattandosi di un anno bisestile.  
  
> [!NOTE]
>  `DateAdd` Usa l'impostazione del calendario corrente il <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà del <xref:System.Globalization.CultureInfo> classe la <xref:System.Globalization> dello spazio dei nomi. Il valore predefinito <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valori vengono determinati dalle **Pannello di controllo** impostazioni.  
  
 Poiché ogni `Date` valore è supportato da un <xref:System.DateTime> struttura, i relativi metodi offrono ulteriori opzioni per l'aggiunta di intervalli di tempo. Ad esempio, è possibile aggiungere un numero frazionario di giorni, arrotondato al millisecondo più vicino, per un `Date` variabile come indicato di seguito:  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 Il `Interval` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Stringa|Unità di intervallo di tempo da aggiungere.|  
|-----------------------|------------|----------------------------------|  
|`DateInterval.Day`|d|Giorno; troncato al valore integrale|  
|`DateInterval.DayOfYear`|y|Giorno; troncato al valore integrale|  
|`DateInterval.Hour`|h|Ora; arrotondato al millisecondo più vicino|  
|`DateInterval.Minute`|n|Minuti; arrotondato al millisecondo più vicino|  
|`DateInterval.Month`|m|Mese; troncato al valore integrale|  
|`DateInterval.Quarter`|q|Trimestre; troncato al valore integrale|  
|`DateInterval.Second`|s|Secondo. arrotondato al millisecondo più vicino|  
|`DateInterval.Weekday`|w|Giorno; troncato al valore integrale|  
|`DateInterval.WeekOfYear`|ww|Settimana; troncato al valore integrale|  
|`DateInterval.Year`|aaaa|Anno. troncato al valore integrale|  
  
   
  
## Examples  
 L'esempio seguente accetta una data e, utilizzando il `DateAdd` di funzione, viene visualizzata una data corrispondente un numero specificato di mesi in futuro.  
  
 [!code-vb[VbVbalrFunctions#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> non può essere assegnato forzatamente a un valore <see langword="Date" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> non è valido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La data calcolata è precedente alle 00.00.00 dell'1 gennaio dell'anno 1 o successiva alle 23.59.59 del 31 dicembre 9999.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un valore <see langword="Long" /> che specifica il numero di intervalli di tempo tra due valori <see langword="Date" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As DateInterval, Date1 As DateTime, Date2 As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : Microsoft.VisualBasic.DateInterval * DateTime * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obbligatorio. Valore dell'enumerazione <see langword="DateInterval" /> o espressione <see langword="String" /> che rappresenta l'intervallo di tempo che si desidera utilizzare come unità di differenza tra <c>Data1</c> e <c>Data2</c>.</param>
        <param name="Date1">Obbligatorio. <see langword="Date" />. Il primo valore di data/ora che si desidera utilizzare nel calcolo.</param>
        <param name="Date2">Obbligatorio. <see langword="Date" />. Il secondo valore di data/ora che si desidera utilizzare nel calcolo.</param>
        <param name="DayOfWeek">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstDayOfWeek" /> che specifica il primo giorno della settimana. Se omesso, viene utilizzato <see langword="FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstWeekOfYear" /> che specifica il primo giorno dell'anno. Se omesso, viene utilizzato <see langword="FirstWeekOfYear.Jan1" />.</param>
        <summary>Restituisce un valore <see langword="Long" /> che specifica il numero di intervalli di tempo tra due valori <see langword="Date" />.</summary>
        <returns>Restituisce un valore <see langword="Long" /> che specifica il numero di intervalli di tempo tra due valori <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il `DateDiff` funzione per determinare il numero di intervalli di tempo specificato esiste tra due valori di data/ora. Ad esempio, potrebbe usare `DateDiff` per calcolare il numero di giorni tra due date o il numero di settimane tra oggi e la fine dell'anno.  
  
## <a name="behavior"></a>Comportamento  
  
-   **Gestione dei parametri.** `DateDiff` Sottrae il valore di `Date1` rispetto a quello di `Date2` per ottenere la differenza. Tali valori non viene modificato nel programma chiamante.  
  
-   **I valori restituiti.** In quanto `Date1` e `Date2` rivestono il `Date` tipo di dati contengono valori data e ora accuratezza di 100 nanosecondi del timer di sistema. Tuttavia `DateDiff` restituisce sempre il numero di intervalli di tempo come un `Long` valore.  
  
     Se `Date1` rappresenta una data e ora rispetto a versioni successive `Date2`, `DateDiff` restituisce un numero negativo.  
  
-   **Intervalli di giorni.** Se `Interval` è impostata su `DateInterval.DayOfYear`, viene considerato identico `DateInterval.Day`, in quanto `DayOfYear` non è un'unità significativa per un intervallo di tempo.  
  
-   **Intervalli di settimane.** Se `Interval` è impostata su `DateInterval.WeekOfYear`, il valore restituito rappresenta il numero di settimane tra il primo giorno della settimana contenente `Date1` e il primo giorno della settimana contenente `Date2`. L'esempio seguente mostra come questo produce risultati diversi dal `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     Nell'esempio precedente, `DateDiff` restituisce 0 per `wD` perché la differenza tra le due date è inferiore a sette giorni, ma restituisce 1 per `wY` poiché non esiste una differenza di sette giorni tra i primi giorni di calendario corrispondente settimane.  
  
-   **Intervalli di dimensioni maggiori.** Se `Interval` è impostata su `DateInterval.Year`, viene calcolato il valore restituito esclusivamente alle parti dell'anno `Date1` e `Date2`. Analogamente, il valore restituito per `DateInterval.Month` viene calcolata esclusivamente dalle parti anno e mese degli argomenti e per `DateInterval.Quarter` in base ai trimestri contenente le due date.  
  
     Ad esempio, quando si confrontano il 31 dicembre sull'1 gennaio dell'anno successivo `DateDiff` restituisce 1 per `DateInterval.Year`, `DateInterval.Quarter`, o `DateInterval.Month`, anche se è trascorso un giorno al massimo solo.  
  
     Per le impostazioni cultura, ad esempio giapponese che dispone di più ere, il `DateDiff` metodo non restituisce una differenza in anni se la differenza si estende su due o più ere. In alternativa, è possibile calcolare la differenza nei valori restituiti dai <xref:System.DateTime.Year%2A> proprietà, come illustrato nell'esempio seguente: `date2.Year - date1.Year`.  
  
-   **Altri intervalli.** Poiché ogni `Date` valore è supportato da un <xref:System.DateTime> struttura, i relativi metodi offrono ulteriori opzioni per l'individuazione di intervalli di tempo. Ad esempio, è possibile usare il `Subtract` metodo in una delle sue forme di overload: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> sottrae un <xref:System.TimeSpan> da una `Date` variabile da restituire un'altra `Date` valore, e <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> sottrae un `Date` valore per restituire un <xref:System.TimeSpan>. È possibile ora un processo per scoprire quanti millisecondi, come illustrato nell'esempio seguente.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 Il `Interval` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore stringa|Unità di differenza di tempo|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|Mese|  
|`DateInterval.Quarter`|"q"|Trimestre|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|Settimana|  
|`DateInterval.WeekOfYear`|"ww"|Settimana del calendario|  
|`DateInterval.Year`|"yyyy"|Anno|  
  
 Il `DayOfWeek` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primo giorno della settimana specificato nelle impostazioni di sistema|  
|`FirstDayOfWeek.Sunday`|1|Domenica (predefinito)|  
|`FirstDayOfWeek.Monday`|2|Lunedì (conforme allo standard ISO 8601, 3.17 sezione)|  
|`FirstDayOfWeek.Tuesday`|3|Martedì|  
|`FirstDayOfWeek.Wednesday`|4|Mercoledì|  
|`FirstDayOfWeek.Thursday`|5|Giovedì|  
|`FirstDayOfWeek.Friday`|6|Venerdì|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
 Il `WeekOfYear` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Prima settimana dell'anno specificato nelle impostazioni di sistema|  
|`FirstWeekOfYear.Jan1`|1|Settimana in cui è presente 1 gennaio (impostazione predefinita)|  
|`FirstWeekOfYear.FirstFourDays`|2|Settimana in cui il nuovo anno (conforme allo standard ISO 8601, sezione 3.17) include almeno quattro giorni|  
|`FirstWeekOfYear.FirstFullWeek`|3|Prima settimana completa nel nuovo anno|  
  
   
  
## Examples  
 Questo esempio viene usato il `DateDiff` funzione per visualizzare il numero di giorni tra una determinata data e la data odierna.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Date1" />, <paramref name="Date2" /> o <paramref name="DayofWeek" /> non è compreso nell'intervallo consentito.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Date1" /> o <paramref name="Date2" /> è di un tipo non valido.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateDiff (Interval As String, Date1 As Object, Date2 As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Long" />
      <MemberSignature Language="F#" Value="static member DateDiff : string * obj * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int64" Usage="Microsoft.VisualBasic.DateAndTime.DateDiff (Interval, Date1, Date2, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obbligatorio. Valore dell'enumerazione <see langword="DateInterval" /> o espressione <see langword="String" /> che rappresenta l'intervallo di tempo che si desidera utilizzare come unità di differenza tra <c>Data1</c> e <c>Data2</c>.</param>
        <param name="Date1">Obbligatorio. <see langword="Date" />. Il primo valore di data/ora che si desidera utilizzare nel calcolo.</param>
        <param name="Date2">Obbligatorio. <see langword="Date" />. Il secondo valore di data/ora che si desidera utilizzare nel calcolo.</param>
        <param name="DayOfWeek">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstDayOfWeek" /> che specifica il primo giorno della settimana. Se omesso, viene utilizzato <see langword="FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstWeekOfYear" /> che specifica il primo giorno dell'anno. Se omesso, viene utilizzato <see langword="FirstWeekOfYear.Jan1" />.</param>
        <summary>Restituisce un valore <see langword="Long" /> che specifica il numero di intervalli di tempo tra due valori <see langword="Date" />.</summary>
        <returns>Restituisce un valore <see langword="Long" /> che specifica il numero di intervalli di tempo tra due valori <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il `DateDiff` funzione per determinare il numero di intervalli di tempo specificato esiste tra due valori di data/ora. Ad esempio, potrebbe usare `DateDiff` per calcolare il numero di giorni tra due date o il numero di settimane tra oggi e la fine dell'anno.  
  
## <a name="behavior"></a>Comportamento  
  
-   **Gestione dei parametri.** `DateDiff` Sottrae il valore di `Date1` rispetto a quello di `Date2` per ottenere la differenza. Tali valori non viene modificato nel programma chiamante.  
  
-   **I valori restituiti.** In quanto `Date1` e `Date2` rivestono il `Date` tipo di dati contengono valori data e ora accuratezza di 100 nanosecondi del timer di sistema. Tuttavia `DateDiff` restituisce sempre il numero di intervalli di tempo come un `Long` valore.  
  
     Se `Date1` rappresenta una data e ora rispetto a versioni successive `Date2`, `DateDiff` restituisce un numero negativo.  
  
-   **Intervalli di giorni.** Se `Interval` è impostata su `DateInterval.DayOfYear`, viene considerato identico `DateInterval.Day`, in quanto `DayOfYear` non è un'unità significativa per un intervallo di tempo.  
  
-   **Intervalli di settimane.** Se `Interval` è impostata su `DateInterval.WeekOfYear`, il valore restituito rappresenta il numero di settimane tra il primo giorno della settimana contenente `Date1` e il primo giorno della settimana contenente `Date2`. L'esempio seguente mostra come questo produce risultati diversi dal `DateInterval.Weekday`.  
  
     [!code-vb[VbVbalrFunctions#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     Nell'esempio precedente, `DateDiff` restituisce 0 per `wD` perché la differenza tra le due date è inferiore a sette giorni, ma restituisce 1 per `wY` poiché non esiste una differenza di sette giorni tra i primi giorni di calendario corrispondente settimane.  
  
-   **Intervalli di dimensioni maggiori.** Se `Interval` è impostata su `DateInterval.Year`, viene calcolato il valore restituito esclusivamente alle parti dell'anno `Date1` e `Date2`. Analogamente, il valore restituito per `DateInterval.Month` viene calcolata esclusivamente dalle parti anno e mese degli argomenti e per `DateInterval.Quarter` in base ai trimestri contenente le due date.  
  
     Ad esempio, quando si confrontano il 31 dicembre sull'1 gennaio dell'anno successivo `DateDiff` restituisce 1 per `DateInterval.Year`, `DateInterval.Quarter`, o `DateInterval.Month`, anche se è trascorso un giorno al massimo solo.  
  
     Per le impostazioni cultura, ad esempio giapponese che dispone di più ere, il `DateDiff` metodo non restituisce una differenza in anni se la differenza si estende su due o più ere. In alternativa, è possibile calcolare la differenza nei valori restituiti dai <xref:System.DateTime.Year%2A> proprietà, come illustrato nell'esempio seguente: `date2.Year - date1.Year`.  
  
-   **Altri intervalli.** Poiché ogni `Date` valore è supportato da un <xref:System.DateTime> struttura, i relativi metodi offrono ulteriori opzioni per l'individuazione di intervalli di tempo. Ad esempio, è possibile usare il `Subtract` metodo in una delle sue forme di overload: <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> sottrae un <xref:System.TimeSpan> da una `Date` variabile da restituire un'altra `Date` valore, e <xref:System.DateTime.Subtract%2A?displayProperty=nameWithType> sottrae un `Date` valore per restituire un <xref:System.TimeSpan>. È possibile ora un processo per scoprire quanti millisecondi, come illustrato nell'esempio seguente.  
  
     [!code-vb[VbVbalrFunctions#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 Il `Interval` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore stringa|Unità di differenza di tempo|  
|-----------------------|------------------|-----------------------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|Mese|  
|`DateInterval.Quarter`|"q"|Trimestre|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|Settimana|  
|`DateInterval.WeekOfYear`|"ww"|Settimana del calendario|  
|`DateInterval.Year`|"yyyy"|Anno|  
  
 Il `DayOfWeek` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primo giorno della settimana specificato nelle impostazioni di sistema|  
|`FirstDayOfWeek.Sunday`|1|Domenica (predefinito)|  
|`FirstDayOfWeek.Monday`|2|Lunedì (conforme allo standard ISO 8601, 3.17 sezione)|  
|`FirstDayOfWeek.Tuesday`|3|Martedì|  
|`FirstDayOfWeek.Wednesday`|4|Mercoledì|  
|`FirstDayOfWeek.Thursday`|5|Giovedì|  
|`FirstDayOfWeek.Friday`|6|Venerdì|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
 Il `WeekOfYear` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Prima settimana dell'anno specificato nelle impostazioni di sistema|  
|`FirstWeekOfYear.Jan1`|1|Settimana in cui è presente 1 gennaio (impostazione predefinita)|  
|`FirstWeekOfYear.FirstFourDays`|2|Settimana in cui il nuovo anno (conforme allo standard ISO 8601, sezione 3.17) include almeno quattro giorni|  
|`FirstWeekOfYear.FirstFullWeek`|3|Prima settimana completa nel nuovo anno|  
  
   
  
## Examples  
 Questo esempio viene usato il `DateDiff` funzione per visualizzare il numero di giorni tra una determinata data e la data odierna.  
  
 [!code-vb[VbVbalrFunctions#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Date1" />, <paramref name="Date2" /> o <paramref name="DayofWeek" /> non è compreso nell'intervallo consentito.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Date1" /> o <paramref name="Date2" /> è di un tipo non valido.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un valore <see langword="Integer" /> contenente il componente specificato di un determinato valore <see langword="Date" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As DateInterval, DateValue As DateTime, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional FirstWeekOfYearValue As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : Microsoft.VisualBasic.DateInterval * DateTime * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, FirstDayOfWeekValue, FirstWeekOfYearValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obbligatorio. Valore dell'enumerazione <see langword="DateInterval" /> o espressione <see langword="String" /> che rappresenta la parte del valore di data/ora che si desidera restituire.</param>
        <param name="DateValue">Obbligatorio. Valore <see langword="Date" /> che si desidera valutare.</param>
        <param name="FirstDayOfWeekValue">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstDayOfWeek" /> che specifica il primo giorno della settimana. Se omesso, viene utilizzato <see langword="FirstDayOfWeek.Sunday" />.</param>
        <param name="FirstWeekOfYearValue">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstWeekOfYear" /> che specifica il primo giorno dell'anno. Se omesso, viene utilizzato <see langword="FirstWeekOfYear.Jan1" />.</param>
        <summary>Restituisce un valore <see langword="Integer" /> contenente il componente specificato di un determinato valore <see langword="Date" />.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> contenente il componente specificato di un determinato valore <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il `DatePart` funzione da valutare un valore data/ora e restituire un componente specifico. Ad esempio, potrebbe usare `DatePart` per calcolare il giorno della settimana o l'ora corrente.  
  
 Se si sceglie `DateInterval.Weekday` per il `Interval` argomento, il valore restituito è coerenza con i valori del `FirstDayOfWeek` enumerazione. Se si sceglie `DateInterval.WeekOfYear`, `DatePart` Usa le <xref:System.Globalization.Calendar> e <xref:System.Globalization.CultureInfo> classi del <xref:System.Globalization> dello spazio dei nomi per determinare le impostazioni correnti.  
  
 Il `FirstDayOfWeekValue` argomento influisce sui calcoli che utilizzano il `DateInterval.Weekday` e `DateInterval.WeekOfYear` `Interval` impostazioni. Il `FirstWeekOfYearValue` argomento influisce sui calcoli che specificano `DateInterval.WeekOfYear` per `Interval`.  
  
 Poiché ogni `Date` valore è supportato da un <xref:System.DateTime> struttura, i relativi metodi offrono ulteriori opzioni per il recupero di parti di data/ora. Ad esempio, è possibile ottenere l'intero valore della data una `Date` variabile, con il valore di ora impostate su mezzanotte, come indicato di seguito:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 Il `Interval` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Stringa|Parte del valore di data/ora da restituire|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Giorno del mese (da 1 a 31).|  
|`DateInterval.DayOfYear`|y|Giorno dell'anno (da 1 a 366).|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Mese|  
|`DateInterval.Quarter`|q|Trimestre|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|w|Giorno della settimana (da 1 a 7).|  
|`DateInterval.WeekOfYear`|ww|Settimana dell'anno (da 1 a 53).|  
|`DateInterval.Year`|aaaa|Anno|  
  
 Il `FirstDayOfWeekValue` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primo giorno della settimana specificato nelle impostazioni di sistema|  
|`FirstDayOfWeek.Sunday`|1|Domenica (predefinito)|  
|`FirstDayOfWeek.Monday`|2|Lunedì (conforme allo standard ISO 8601, 3.17 sezione)|  
|`FirstDayOfWeek.Tuesday`|3|Martedì|  
|`FirstDayOfWeek.Wednesday`|4|Mercoledì|  
|`FirstDayOfWeek.Thursday`|5|Giovedì|  
|`FirstDayOfWeek.Friday`|6|Venerdì|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
 Il `FirstWeekOfYearValue` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Prima settimana dell'anno specificato nelle impostazioni di sistema|  
|`FirstWeekOfYear.Jan1`|1|Settimana in cui è presente 1 gennaio (impostazione predefinita)|  
|`FirstWeekOfYear.FirstFourDays`|2|Settimana in cui il nuovo anno (conforme allo standard ISO 8601, sezione 3.17) include almeno quattro giorni|  
|`FirstWeekOfYear.FirstFullWeek`|3|Prima settimana completa nel nuovo anno|  
  
   
  
## Examples  
 L'esempio seguente accetta una data e, utilizzando il `DatePart` di funzione, viene visualizzato il trimestre dell'anno in cui si verifica.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> non è valido.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> non può essere assegnato forzatamente a un valore <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberSignature Language="VB.NET" Value="Public Function DatePart (Interval As String, DateValue As Object, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Optional WeekOfYear As FirstWeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1) As Integer" />
      <MemberSignature Language="F#" Value="static member DatePart : string * obj * Microsoft.VisualBasic.FirstDayOfWeek * Microsoft.VisualBasic.FirstWeekOfYear -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.DatePart (Interval, DateValue, DayOfWeek, WeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">Obbligatorio. Valore dell'enumerazione <see langword="DateInterval" /> o espressione <see langword="String" /> che rappresenta la parte del valore di data/ora che si desidera restituire.</param>
        <param name="DateValue">Obbligatorio. Valore <see langword="Date" /> che si desidera valutare.</param>
        <param name="DayOfWeek">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstDayOfWeek" /> che specifica il primo giorno della settimana. Se omesso, viene utilizzato <see langword="FirstDayOfWeek.Sunday" />.</param>
        <param name="WeekOfYear">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstWeekOfYear" /> che specifica il primo giorno dell'anno. Se omesso, viene utilizzato <see langword="FirstWeekOfYear.Jan1" />.</param>
        <summary>Restituisce un valore <see langword="Integer" /> contenente il componente specificato di un determinato valore <see langword="Date" />.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> contenente il componente specificato di un determinato valore <see langword="Date" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il `DatePart` funzione da valutare un valore data/ora e restituire un componente specifico. Ad esempio, potrebbe usare `DatePart` per calcolare il giorno della settimana o l'ora corrente.  
  
 Se si sceglie `DateInterval.Weekday` per il `Interval` argomento, il valore restituito è coerenza con i valori del `FirstDayOfWeek` enumerazione. Se si sceglie `DateInterval.WeekOfYear`, `DatePart` Usa le <xref:System.Globalization.Calendar> e <xref:System.Globalization.CultureInfo> classi del <xref:System.Globalization> dello spazio dei nomi per determinare le impostazioni correnti.  
  
 Il `FirstDayOfWeekValue` argomento influisce sui calcoli che utilizzano il `DateInterval.Weekday` e `DateInterval.WeekOfYear` `Interval` impostazioni. Il `FirstWeekOfYearValue` argomento influisce sui calcoli che specificano `DateInterval.WeekOfYear` per `Interval`.  
  
 Poiché ogni `Date` valore è supportato da un <xref:System.DateTime> struttura, i relativi metodi offrono ulteriori opzioni per il recupero di parti di data/ora. Ad esempio, è possibile ottenere l'intero valore della data una `Date` variabile, con il valore di ora impostate su mezzanotte, come indicato di seguito:  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 Il `Interval` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Stringa|Parte del valore di data/ora da restituire|  
|-----------------------|------------|----------------------------------------|  
|`DateInterval.Day`|d|Giorno del mese (da 1 a 31).|  
|`DateInterval.DayOfYear`|y|Giorno dell'anno (da 1 a 366).|  
|`DateInterval.Hour`|h|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|m|Mese|  
|`DateInterval.Quarter`|q|Trimestre|  
|`DateInterval.Second`|s|Second|  
|`DateInterval.Weekday`|w|Giorno della settimana (da 1 a 7).|  
|`DateInterval.WeekOfYear`|ww|Settimana dell'anno (da 1 a 53).|  
|`DateInterval.Year`|aaaa|Anno|  
  
 Il `FirstDayOfWeekValue` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primo giorno della settimana specificato nelle impostazioni di sistema|  
|`FirstDayOfWeek.Sunday`|1|Domenica (predefinito)|  
|`FirstDayOfWeek.Monday`|2|Lunedì (conforme allo standard ISO 8601, 3.17 sezione)|  
|`FirstDayOfWeek.Tuesday`|3|Martedì|  
|`FirstDayOfWeek.Wednesday`|4|Mercoledì|  
|`FirstDayOfWeek.Thursday`|5|Giovedì|  
|`FirstDayOfWeek.Friday`|6|Venerdì|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
 Il `FirstWeekOfYearValue` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstWeekOfYear.System`|0|Prima settimana dell'anno specificato nelle impostazioni di sistema|  
|`FirstWeekOfYear.Jan1`|1|Settimana in cui è presente 1 gennaio (impostazione predefinita)|  
|`FirstWeekOfYear.FirstFourDays`|2|Settimana in cui il nuovo anno (conforme allo standard ISO 8601, sezione 3.17) include almeno quattro giorni|  
|`FirstWeekOfYear.FirstFullWeek`|3|Prima settimana completa nel nuovo anno|  
  
   
  
## Examples  
 L'esempio seguente accetta una data e, utilizzando il `DatePart` di funzione, viene visualizzato il trimestre dell'anno in cui si verifica.  
  
 [!code-vb[VbVbalrFunctions#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> non è valido.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> non può essere assegnato forzatamente a un valore <see langword="Date" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateSerial (Year As Integer, Month As Integer, Day As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateSerial(int Year, int Month, int Day);" />
      <MemberSignature Language="F#" Value="static member DateSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateSerial (Year, Month, Day)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">Obbligatorio. Espressione <see langword="Integer" /> compresa tra 1 e 9999. Vengono tuttavia accettati anche valori minori di quelli compresi in questo intervallo. Se <c>Anno</c> è compreso tra 0 e 99, viene interpretato come appartenente all'intervallo tra 1930 e 2029, come descritto nella sezione "Osservazioni". Se <c>Anno</c> è minore di 1, viene sottratto dall'anno corrente.</param>
        <param name="Month">Obbligatorio. Espressione <see langword="Integer" /> compresa tra 1 e 12. Vengono tuttavia accettati anche valori non compresi in questo intervallo. Il valore di <c>Mese</c> viene diminuito di 1 e applicato a gennaio dell'anno calcolato. In altre parole, (<c>Mese</c> - 1) viene aggiunto a gennaio. Se necessario, l'anno viene ricalcolato. Questo effetto è illustrato nei seguenti risultati: 
Se <c>Mese</c> è uguale a 1, il risultato è gennaio dell'anno calcolato.  
  
Se <c>Mese</c> è uguale a 0, il risultato è dicembre dell'anno precedente.  
  
Se <c>Mese</c> è uguale a -1, il risultato è novembre dell'anno precedente.  
  
Se <c>Mese</c> è uguale a 13, il risultato è gennaio dell'anno successivo.</param>
        <param name="Day">Obbligatorio. Espressione <see langword="Integer" /> compresa tra 1 e 31. Vengono tuttavia accettati anche valori non compresi in questo intervallo. Il valore di <c>Giorno</c> viene diminuito di 1 e applicato al primo giorno del mese calcolato. In altre parole, (<c>Giorno</c> - 1) viene aggiunto al primo giorno del mese. Se necessario, il mese e l'anno vengono ricalcolati. Questo effetto è illustrato nei seguenti risultati: 
Se <c>Giorno</c> è uguale a 1, il risultato è il primo giorno dell'anno calcolato.  
  
Se <c>Giorno</c> è uguale a 0, il risultato è l'ultimo giorno del mese precedente.  
  
Se <c>Giorno</c> è uguale a -1, il risultato è il penultimo giorno del mese precedente.  
  
Se <c>Giorno</c> è successivo alla fine del mese corrente, il risultato è il giorno appropriato del mese successivo. Se, ad esempio <c>Mese</c> è 4 e <c>Giorno</c> è 31, il risultato è 1 maggio.</param>
        <summary>Restituisce un valore <see langword="Date" /> che rappresenta l'anno, il mese e il giorno specificati, con le informazioni sull'ora impostate su mezzanotte (00:00:00).</summary>
        <returns>Restituisce un valore <see langword="Date" /> che rappresenta l'anno, il mese e il giorno specificati, con le informazioni sull'ora impostate su mezzanotte (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In Windows 98 o Windows 2000, anni a due cifre per il `Year` argomento vengono interpretati in base alle impostazioni del computer definite dall'utente. Le impostazioni predefinite sono che i valori da 0 a 29 vengano interpretati come corso degli anni 2000: 2029, e i valori tra 30 e 99 vengono interpretati come gli anni 1930 1999. Per tutti gli altri `Year` argomenti, utilizzare quattro cifre anno, ad esempio 1924.  
  
 Le versioni precedenti di Windows interpretano anni a due cifre in base ai valori predefiniti descritti in precedenza. Per assicurarsi che la funzione restituisce il valore appropriato, utilizzare quattro cifre `Year`.  
  
 Nell'esempio seguente viene illustrato un valore negativo, zero e i valori degli argomenti positivo. In questo caso, il `DateSerial` funzione restituisce un `Date` che rappresenta il giorno prima del primo giorno del mese di marzo nell'anno 10 anni prima l'anno corrente; in altre parole, l'ultimo giorno del mese di febbraio dieci anni fa.  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 Se uno dei due `Month` o `Day` supera l'intervallo normale, viene applicato all'unità più grande successivo come appropriato. Ad esempio, se si specificano 32 giorni, viene valutata come un mese e da una a quattro giorni, a seconda del valore di `Month`. Se `Year` è maggiore di 9999 o se un argomento non compreso nell'intervallo compreso tra -2.147.483.648 e 2.147.483.647, un <xref:System.ArgumentException> errore si verifica. Se la data specificata dagli tre argomenti è precedente rispetto a 00:00:00 il 1 ° gennaio dell'anno 1 o successiva rispetto a 23:59:59 31 dicembre 9999, un <xref:System.ArgumentOutOfRangeException> errore si verifica.  
  
 Il `Date` tipo di dati include i componenti dell'ora. `DateSerial` Imposta tutti i componenti su 0, in modo che il valore restituito rappresenta l'inizio della giornata calcolata.  
  
 Poiché ogni `Date` valore è supportato da un <xref:System.DateTime> struttura, i relativi metodi offrono ulteriori opzioni per la creazione di un `Date` valore. Ad esempio, è possibile usare uno degli overload <xref:System.DateTime.%23ctor%2A> costruttori per popolare un `Date` variabile utilizzando la combinazione desiderata dei componenti. L'esempio seguente imposta `NewDateTime` al 6 maggio 1978 un decimo di secondo prima del mattino 8.30:  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 Questo esempio viene usato il `DateSerial` funzione per restituire la data per l'anno, mese e giorno.  
  
 [!code-vb[VbVbalrFunctions#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberSignature Language="VB.NET" Value="Public Property DateString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DateString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un valore <see langword="String" /> che rappresenta la data corrente del sistema in uso.</summary>
        <value>Restituisce o imposta un valore <see langword="String" /> che rappresenta la data corrente del sistema in uso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DateString` Restituisce la data di sistema nel formato MM-GG-AAAA, che usa il nome del mese abbreviato. I formati accettati per la data vengono M-d-yyyy, M-d-y, g/aaaa e g/y. Questo vale per tutte le impostazioni locali del sistema ad eccezione di quelli che utilizzano un double byte character set (DBCS). Se le impostazioni locali del sistema utilizzano un set di caratteri a byte doppio, `DateString` restituisce la data di sistema nel formato AAAA-MM-GG. Impostazioni locali del sistema viene impostata tramite il **orologio, lingua e area geografica** degli elementi nella **Pannello di controllo**.  
  
 **Nota** il `DateString` proprietà restituisce la data di sistema solo nel formato AAAA-MM-GG per i `zh` (cinese semplificato), `ko` (coreano), e `ja` impostazioni locali del sistema (giapponese) se si utilizza Visual Basic in Silverlight.  
  
 Per ottenere o impostare l'ora di sistema corrente come una `String`, usare il <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> proprietà.  
  
 Per ottenere la data o ora di sistema corrente nel formato delle impostazioni locali o in un formato personalizzato, specificare il <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> proprietà per il <xref:Microsoft.VisualBasic.Strings.Format%2A> funzione, specificando un formato di data/ora predefinito o definito dall'utente. Nell'esempio che segue viene illustrato quanto descritto.  
  
```vb  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 Per accedere alla data di sistema corrente come una `Date`, usare il <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> proprietà.  
  
> [!IMPORTANT]
>  L'impostazione di data o ora di sistema richiede l'autorizzazione di accesso al codice non gestito, che possono influire sull'esecuzione in situazioni di attendibilità parziale. Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 L'esempio seguente usa il `DateString` proprietà per visualizzare la data corrente del sistema.  
  
 [!code-vb[VbVbalrDateProperties#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Formato non valido utilizzato per l'impostazione del valore di <see langword="DateString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DateValue (StringDate As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime DateValue(System::String ^ StringDate);" />
      <MemberSignature Language="F#" Value="static member DateValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.DateValue StringDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">Obbligatorio. Espressione <see langword="String" /> che rappresenta un valore di data/ora compreso tra le ore 00:00:00 del primo gennaio dell'anno 1 e le ore 23:59:59 del 31 dicembre 9999.</param>
        <summary>Restituisce un valore <see langword="Date" /> contenente le informazioni sulla data rappresentate da una stringa e le informazioni sull'ora impostate sulla mezzanotte (00:00:00).</summary>
        <returns>Valore <see langword="Date" /> contenente le informazioni sulla data rappresentate da una stringa, con le informazioni sull'ora impostate sulla mezzanotte (00:00:00).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `StringDate` include solo i numeri da 1 a 12 delimitati da separatori di data valido, `DateValue` riconosce l'ordine per giorno, mese e anno in base al formato data breve specificato per il sistema. `DateValue` Usa l'impostazione del calendario corrente il <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà del <xref:System.Globalization.CultureInfo> classe la <xref:System.Globalization> dello spazio dei nomi. Il valore predefinito <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valori vengono determinati dalle **Pannello di controllo** impostazioni. È possibile eseguire l'override del formato data breve impostando il <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> proprietà del <xref:System.Globalization.DateTimeFormatInfo> classe la <xref:System.Globalization> dello spazio dei nomi.  
  
 `DateValue` riconosce i nomi dei mesi in formato esteso, abbreviato e numerici. Ad esempio, oltre a riconoscere 12/30/1991 e 12/30/91 `DateValue` riconosce anche il 30 dicembre 1991 e il 30 dicembre 1991.  
  
 Se la parte dell'anno `StringDate` viene omesso, `DateValue` viene utilizzato l'anno della data di sistema del computer corrente.  
  
 Se il `StringDate` argomento include informazioni sull'ora, `DateValue` non includerlo nel valore restituito. Tuttavia, se `StringDate` include informazioni sull'ora non valida, ad esempio "89: 98", un <xref:System.InvalidCastException> errore si verifica.  
  
   
  
## Examples  
 Questo esempio viene usato il `DateValue` funzione per convertire una stringa in una data. È possibile utilizzare anche valori letterali di data per assegnare direttamente una data da un `Object` oppure `Date` variabile, ad esempio, `oldDate = #2/12/69#`.  
  
 [!code-vb[VbVbalrFunctions#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="StringDate" /> include informazioni sull'ora non valide.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Riepilogo dei tipi di dati (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Day (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Day(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Day : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Day DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obbligatorio. Valore <see langword="Date" /> da cui estrarre il giorno.</param>
        <summary>Restituisce un valore <see langword="Integer" /> compreso tra 1 e 31 che rappresenta il giorno del mese.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> compreso tra 1 e 31 che rappresenta il giorno del mese.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si usa la `Day` (funzione), potrebbe essere necessario qualificarlo con il `Microsoft.VisualBasic` dello spazio dei nomi, perché il <xref:System.Windows.Forms> dello spazio dei nomi definisce <xref:System.Windows.Forms.Day> sotto forma di enumerazione. L'esempio seguente mostra come qualificazione `Day` risolve questa ambiguità:  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 È anche possibile ottenere il giorno del mese chiamando `DatePart` e specificando `DateInterval.Day` per il *intervallo* argomento.  
  
   
  
## Examples  
 L'esempio seguente usa il `Day` funzione per ottenere il giorno del mese dalla data specificata. Nell'ambiente di sviluppo, viene visualizzato il valore letterale di data nel formato breve standard (ad esempio "02/12/1969)" utilizzando le impostazioni locali del codice.  
  
 [!code-vb[VbVbalrFunctions#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` è qualificato per distinguerlo dal <xref:System.Windows.Forms.Day?displayProperty=nameWithType> enumerazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hour (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Hour(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Hour : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Hour TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obbligatorio. Valore <see langword="Date" /> da cui estrarre l'ora.</param>
        <summary>Restituisce un valore <see langword="Integer" /> compreso tra 0 e 23 che rappresenta l'ora del giorno.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> compreso tra 0 e 23 che rappresenta l'ora del giorno.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È anche possibile ottenere l'ora del giorno chiamando `DatePart` e specificando `DateInterval.Hour` per il `Interval` argomento.  
  
   
  
## Examples  
 Questo esempio viene usato il `Hour` funzione per ottenere l'ora da un'ora specificata. Nell'ambiente di sviluppo, il valore letterale di ora viene visualizzato in formato breve periodo di tempo utilizzando le impostazioni locali del codice.  
  
 [!code-vb[VbVbalrFunctions#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Minute (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Minute(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Minute : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Minute TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obbligatorio. Valore <see langword="Date" /> da cui estrarre il minuto.</param>
        <summary>Restituisce un valore <see langword="Integer" /> compreso tra 0 e 59 che rappresenta il minuto dell'ora.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> compreso tra 0 e 59 che rappresenta il minuto dell'ora.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È anche possibile ottenere il minuto dell'ora chiamando `DatePart` e specificando `DateInterval.Minute` per il `Interval` argomento.  
  
   
  
## Examples  
 Questo esempio viene usato il `Minute` funzione per ottenere il minuto dell'ora da un'ora specificata. Nell'ambiente di sviluppo, il valore letterale di ora viene visualizzato in formato breve periodo di tempo utilizzando le impostazioni locali del codice.  
  
 [!code-vb[VbVbalrFunctions#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Month (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Month(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Month : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Month DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obbligatorio. Valore <see langword="Date" /> da cui estrarre il mese.</param>
        <summary>Restituisce un valore <see langword="Integer" /> compreso tra 1 e 12 che rappresenta il mese dell'anno.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> compreso tra 1 e 12 che rappresenta il mese dell'anno.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È anche possibile ottenere il mese dell'anno chiamando `DatePart` e specificando `DateInterval.Month` per il `Interval` argomento.  
  
   
  
## Examples  
 Questo esempio viene usato il `Month` funzione per ottenere il mese dalla data specificata. Nell'ambiente di sviluppo, la data di valore letterale viene visualizzato in breve formato di data utilizzando le impostazioni locali del codice.  
  
 [!code-vb[VbVbalrFunctions#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MonthName (Month As Integer, Optional Abbreviate As Boolean = false) As String" />
      <MemberSignature Language="F#" Value="static member MonthName : int * bool -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.MonthName (Month, Abbreviate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">Obbligatorio. <see langword="Integer" />. Designazione numerica del mese, da 1 a 13. 1 indica gennaio e 12 indica dicembre. È possibile utilizzare il valore 13 con un calendario di 13 mesi. Se il sistema utilizza il calendario di 12 mesi e il <c>Mese</c> è uguale a 13, <see langword="MonthName" /> restituisce una stringa vuota.</param>
        <param name="Abbreviate">Facoltativo. Valore <see langword="Boolean" /> che indica se il nome del mese deve essere abbreviato. Se omesso, il valore predefinito è <see langword="False" /> e significa che il nome del mese non è abbreviato.</param>
        <summary>Restituisce un valore <see langword="String" /> contenente il nome del mese specificato.</summary>
        <returns>Restituisce un valore <see langword="String" /> contenente il nome del mese specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa restituita da `MonthName` dipende non solo in argomenti di input, ma anche il **opzioni internazionali** le impostazioni specificate nella finestra di Windows **Pannello di controllo**.  
  
> [!NOTE]
>  `MonthName` Usa l'impostazione del calendario corrente il <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà del <xref:System.Globalization.CultureInfo> classe la <xref:System.Globalization> dello spazio dei nomi. Il valore predefinito <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valori vengono determinati dalle **Pannello di controllo** impostazioni.  
  
   
  
## Examples  
 Questo esempio viene usato il `MonthName` funzione per determinare il nome del mese in base al valore integer specificato. Il valore booleano è determineranno se il nome completo (`False`) o il nome abbreviato (`True`) verranno visualizzati.  
  
 [!code-vb[VbVbalrFunctions#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Month" /> è minore di 1 o maggiore di 13.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce un valore <see langword="Date" /> contenente la data e l'ora correnti del sistema in uso.</summary>
        <value>Restituisce un valore <see langword="Date" /> contenente la data e l'ora correnti del sistema in uso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostare la data di sistema, usare il <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> proprietà. Per impostare l'ora di sistema, usare il <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> proprietà.  
  
   
  
## Examples  
 L'esempio seguente usa il `Now` proprietà per restituire la data corrente del sistema e l'ora.  
  
 [!code-vb[VbVbalrDateProperties#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Second (TimeValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Second(DateTime TimeValue);" />
      <MemberSignature Language="F#" Value="static member Second : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Second TimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">Obbligatorio. Valore <see langword="Date" /> da cui estrarre il secondo.</param>
        <summary>Restituisce un valore <see langword="Integer" /> compreso tra 0 e 59 che rappresenta il secondo del minuto.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> compreso tra 0 e 59 che rappresenta il secondo del minuto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È anche possibile ottenere il secondo del minuto chiamando `DatePart` e specificando `DateInterval.Second` per il `Interval` argomento.  
  
   
  
## Examples  
 L'esempio seguente usa il `Second` funzione per ottenere il secondo del minuto da un tempo specificato. Nell'ambiente di sviluppo, il valore letterale di ora viene visualizzato in formato breve periodo di tempo utilizzando le impostazioni locali del codice.  
  
 [!code-vb[VbVbalrFunctions#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeOfDay As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime TimeOfDay { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un valore <see langword="Date" /> contenente l'ora corrente del sistema in uso.</summary>
        <value>Restituisce o imposta un valore <see langword="Date" /> contenente l'ora corrente del sistema in uso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Date` tipo di dati include i componenti di Data. Quando viene restituita l'ora di sistema, `TimeOfDay` impostata su 1, tutti gli elementi in modo che il valore restituito rappresenta il primo giorno dell'anno 1. Quando si imposta l'ora di sistema, `TimeOfDay` ignora i componenti della data.  
  
 Per accedere all'ora di sistema corrente come una `String`, usare il <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> proprietà.  
  
 Per ottenere o impostare la data corrente del sistema, usare il <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> proprietà.  
  
> [!IMPORTANT]
>  L'impostazione di data o ora di sistema richiede l'autorizzazione di accesso al codice non gestito, che possono influire sull'esecuzione in situazioni di attendibilità parziale. Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Questo esempio viene usato il `TimeOfDay` proprietà per restituire l'ora di sistema corrente.  
  
 [!code-vb[VbVbalrDateProperties#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timer As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property double Timer { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Timer : double" Usage="Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce un valore <see langword="Double" /> che rappresenta il numero di secondi trascorsi dalla mezzanotte.</summary>
        <value>Restituisce un valore <see langword="Double" /> che rappresenta il numero di secondi trascorsi dalla mezzanotte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Timer` proprietà restituisce sia i secondi e il numero di millisecondi dopo la mezzanotte. I secondi sono la parte integrale di valore restituito e i millisecondi sono la parte frazionaria.  
  
   
  
## Examples  
 Questo esempio viene usato il `Timer` proprietà per sospendere l'applicazione. È possibile eseguire altre attività di elaborazione durante la sospensione.  
  
 [!code-vb[VbVbalrTimerProperty#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 Si noti che è necessario qualificare il `Timer` proprietà con il <xref:Microsoft.VisualBasic?displayProperty=nameWithType> dello spazio dei nomi, perché `Timer` è anche una classe definita nel <xref:System.Threading?displayProperty=nameWithType>, <xref:System.Timers?displayProperty=nameWithType>, e <xref:System.Windows.Forms?displayProperty=nameWithType> gli spazi dei nomi.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeSerial (Hour As Integer, Minute As Integer, Second As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeSerial(int Hour, int Minute, int Second);" />
      <MemberSignature Language="F#" Value="static member TimeSerial : int * int * int -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeSerial (Hour, Minute, Second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">Obbligatorio. Espressione <see langword="Integer" /> compresa tra 0 e 23. Vengono tuttavia accettati anche valori non compresi in questo intervallo.</param>
        <param name="Minute">Obbligatorio. Espressione <see langword="Integer" /> compresa tra 0 e 59. Vengono tuttavia accettati anche valori non compresi in questo intervallo. Il valore di <c>Minuto</c> viene aggiunto all'ora calcolata, quindi un valore negativo specifica i minuti prima di tale ora.</param>
        <param name="Second">Obbligatorio. Espressione <see langword="Integer" /> compresa tra 0 e 59. Vengono tuttavia accettati anche valori non compresi in questo intervallo. Il valore di <c>Secondo</c> viene aggiunto al minuto calcolato, quindi un valore negativo specifica i secondi prima di tale minuto.</param>
        <summary>Restituisce un valore <see langword="Date" /> che rappresenta l'ora, i minuti e i secondi specificati, con le informazioni sulla data impostate rispetto all'1 gennaio dell'anno 1.</summary>
        <returns>Restituisce un valore <see langword="Date" /> che rappresenta l'ora, i minuti e i secondi specificati, con le informazioni sulla data impostate rispetto all'1 gennaio dell'anno 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nell'esempio seguente viene illustrato un valore negativo, zero e i valori degli argomenti positivo. Il `TimeSerial` funzione restituisce un'ora che rappresenta di 15 minuti prima di tre ore prima di mezzogiorno o 45: ore 8:00.  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 Se uno dei due `Minute` o `Second` supera l'intervallo normale, viene applicato all'unità più grande successivo come appropriato. Ad esempio, se si specificano 75 minuti, viene valutata come un'ora e 15 minuti.  
  
 `TimeSerial` Consente di ridurre i secondi totali modulo 86.400, ovvero il numero di secondi in un giorno. Pertanto, l'ora restituita è sempre compreso tra 00:00:00 e 23:59:59.  
  
 Il `Date` tipo di dati include i componenti di Data. `TimeSerial` Imposta tutti i componenti su 1, in modo che il valore restituito rappresenta il primo giorno dell'anno 1. Tuttavia, se i valori degli argomenti determinano l'ora calcolata a superare le 24 ore, il giorno viene incrementato se necessario. Nell'esempio seguente, i valori della `Hour` e `Minute` comportare un tempo combinato di più di 24 ore.  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 Se i valori degli argomenti generano un tempo calcolato negativo, le informazioni sulla data è impostate su 1/1/0001 e le informazioni sull'ora viene regolate per essere compreso tra 00:00:00 e 23:59:59. Tuttavia, se l'ora calcolata è minore di 24 ore negative, un <xref:System.ArgumentOutOfRangeException> errore si verifica.  
  
 Poiché ogni `Date` valore è supportato da un <xref:System.DateTime?displayProperty=nameWithType> struttura, i relativi metodi offrono ulteriori opzioni per la creazione di un `Date` valore. Ad esempio, è possibile utilizzare uno degli overload <xref:System.DateTime.%23ctor%2A> costruttori per popolare un `Date` variabile utilizzando la combinazione desiderata dei componenti. L'esempio seguente imposta `newDateTime` al 6 maggio 1978 un decimo di secondo prima del mattino 8.30:  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## Examples  
 L'esempio seguente usa il `TimeSerial` funzione per restituire un'ora per l'ora specificata, minuto e secondo.  
  
 [!code-vb[VbVbalrFunctions#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">L'argomento non è compreso nell'intervallo tra -2.147.483.648 e 2.147.483.647.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">L'ora calcolata è minore dei numeri negativi corrispondenti a 24 ore.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TimeString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeString : string with get, set" Usage="Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un valore <see langword="String" /> che rappresenta l'ora corrente del giorno in base al sistema.</summary>
        <value>Restituisce o imposta un valore <see langword="String" /> che rappresenta l'ora corrente del giorno in base al sistema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TimeString` Restituisce sempre l'ora di sistema come "Hh", ovvero un formato di 24 ore. Questo formato è indipendente dalle impostazioni cultura, il che significa non cambiano anche se si modifica il **opzioni internazionali** nelle **Pannello di controllo**.  
  
 Per ottenere o impostare la data di sistema corrente come una `String`, usare il <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> proprietà.  
  
 Per ottenere la data o ora di sistema corrente nel formato delle impostazioni locali o in un formato personalizzato, specificare il <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> proprietà per il <xref:Microsoft.VisualBasic.Strings.Format%2A> funzione, specificando un formato di data/ora predefinito o definito dall'utente. Nell'esempio che segue viene illustrato quanto descritto.  
  
```vb  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 Per accedere all'ora di sistema corrente come una `Date`, usare il <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> proprietà.  
  
> [!IMPORTANT]
>  L'impostazione di data o ora di sistema richiede l'autorizzazione di accesso al codice non gestito, che possono influire sull'esecuzione in situazioni di attendibilità parziale. Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Questo esempio viene usato il `TimeString` proprietà per visualizzare l'ora di sistema corrente.  
  
 [!code-vb[VbVbalrDateProperties#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Formato non valido utilizzato per l'impostazione del valore di <see langword="TimeString" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TimeValue (StringTime As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime TimeValue(System::String ^ StringTime);" />
      <MemberSignature Language="F#" Value="static member TimeValue : string -&gt; DateTime" Usage="Microsoft.VisualBasic.DateAndTime.TimeValue StringTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">Obbligatorio. Espressione <see langword="String" /> che rappresenta un valore di data/ora compreso tra le ore 00:00:00 del primo gennaio dell'anno 1 e le ore 23:59:59 del 31 dicembre 9999.</param>
        <summary>Restituisce un valore <see langword="Date" /> che contiene le informazioni sull'ora rappresentate da una stringa, con le informazioni sulla data impostate sull'1 gennaio dell'anno 1.</summary>
        <returns>Restituisce un valore <see langword="Date" /> che contiene le informazioni sull'ora rappresentate da una stringa, con le informazioni sulla data impostate sull'1 gennaio dell'anno 1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile immettere date valide usando un orario in formato 12 o 24 ore. Ad esempio, `"2:24 P.M."` e `"14:24"` sono entrambi validi `StringTime` argomenti.  
  
 Se il `StringTime` argomento include informazioni sulla data, `TimeValue` non includerlo nel valore restituito. Tuttavia, se `StringTime` include informazioni sulla data non valida, ad esempio "gennaio 32", un <xref:System.InvalidCastException> errore si verifica.  
  
   
  
## Examples  
 L'esempio seguente usa il `TimeValue` funzione per convertire una stringa in un'ora. È anche possibile usare valori letterali data per assegnare direttamente un tempo di un `Date` variabile.  
  
 [!code-vb[VbVbalrFunctions#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="StringTime" /> include informazioni sulla data non valide.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime with get, set" Usage="Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce o imposta un valore <see langword="Date" /> contenente la data corrente del sistema in uso.</summary>
        <value>Restituisce o imposta un valore <see langword="Date" /> contenente la data corrente del sistema in uso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Date` tipo di dati include i componenti dell'ora. Quando viene restituita la data di sistema, `Today` imposta tutti i componenti su 0, in modo che il valore restituito rappresenta la mezzanotte (00: 00:00). Quando si imposta la data di sistema, `Today` ignora i componenti della fase.  
  
 Per accedere alla data di sistema corrente come una `String`, usare il <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> proprietà.  
  
 Per ottenere o impostare l'ora di sistema corrente, usare il <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> proprietà.  
  
> [!IMPORTANT]
>  L'impostazione di data o ora di sistema richiede l'autorizzazione di accesso al codice non gestito, che possono influire sull'esecuzione in situazioni di attendibilità parziale. Per altre informazioni, vedere <xref:System.Security.Permissions.SecurityPermission> e [le autorizzazioni di accesso di codice](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Questo esempio viene usato il `Today` proprietà per restituire la data corrente del sistema.  
  
 [!code-vb[VbVbalrDateProperties#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (DateValue As DateTime, Optional DayOfWeek As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday) As Integer" />
      <MemberSignature Language="F#" Value="static member Weekday : DateTime * Microsoft.VisualBasic.FirstDayOfWeek -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Weekday (DateValue, DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obbligatorio. Valore <see langword="Date" /> per cui si desidera determinare il giorno della settimana.</param>
        <param name="DayOfWeek">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstDayOfWeek" /> che specifica il primo giorno della settimana. Se omesso, viene utilizzato <see langword="FirstDayOfWeek.Sunday" />.</param>
        <summary>Restituisce un valore <see langword="Integer" /> contenente un numero che rappresenta il giorno della settimana.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> contenente un numero che rappresenta il giorno della settimana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito dal `Weekday` funzione corrisponde ai valori del `FirstDayOfWeek` enumerazione; vale a dire, 1 indica domenica e 7 indica il sabato.  
  
> [!NOTE]
>  `Weekday` Usa l'impostazione del calendario corrente il <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà del <xref:System.Globalization.CultureInfo> classe la <xref:System.Globalization> dello spazio dei nomi. Il valore predefinito <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valori vengono determinati dalle **Pannello di controllo** impostazioni.  
  
 Il `DayOfWeek` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primo giorno della settimana specificato nelle impostazioni di sistema|  
|`FirstDayOfWeek.Sunday`|1|Domenica (predefinito)|  
|`FirstDayOfWeek.Monday`|2|Lunedì (conforme allo standard ISO 8601, 3.17 sezione)|  
|`FirstDayOfWeek.Tuesday`|3|Martedì|  
|`FirstDayOfWeek.Wednesday`|4|Mercoledì|  
|`FirstDayOfWeek.Thursday`|5|Giovedì|  
|`FirstDayOfWeek.Friday`|6|Venerdì|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
   
  
## Examples  
 L'esempio seguente usa il `Weekday` funzione per ottenere il giorno della settimana da una data specificata.  
  
 [!code-vb[VbVbalrFunctions#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="DayOfWeek" /> è minore di 0 o maggiore di 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekdayName (Weekday As Integer, Optional Abbreviate As Boolean = false, Optional FirstDayOfWeekValue As FirstDayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.System) As String" />
      <MemberSignature Language="F#" Value="static member WeekdayName : int * bool * Microsoft.VisualBasic.FirstDayOfWeek -&gt; string" Usage="Microsoft.VisualBasic.DateAndTime.WeekdayName (Weekday, Abbreviate, FirstDayOfWeekValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">Obbligatorio. <see langword="Integer" />. Designazione numerica del giorno della settimana, da 1 a 7. 1 indica il primo giorno della settimana e 7 l'ultimo. Le identità del primo e dell'ultimo giorno dipendono dall'impostazione di <c>FirstDayOfWeekValue</c>.</param>
        <param name="Abbreviate">Facoltativo. Valore <see langword="Boolean" /> che indica se il nome del giorno della settimana deve essere abbreviato. Se omesso, il valore predefinito è <see langword="False" /> e significa che il nome del giorno della settimana non è abbreviato.</param>
        <param name="FirstDayOfWeekValue">Facoltativo. Valore scelto dall'enumerazione <see langword="FirstDayOfWeek" /> che specifica il primo giorno della settimana. Se omesso, viene utilizzato <see langword="FirstDayOfWeek.System" />.</param>
        <summary>Restituisce un valore <see langword="String" /> contenente il nome del giorno della settimana specificato.</summary>
        <returns>Restituisce un valore <see langword="String" /> contenente il nome del giorno della settimana specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa restituita da `WeekdayName` dipende non solo in argomenti di input, ma anche il **opzioni internazionali** le impostazioni specificate nella finestra di Windows **Pannello di controllo**.  
  
> [!NOTE]
>  `WeekdayName` Usa l'impostazione del calendario corrente il <xref:System.Globalization.CultureInfo.CurrentCulture%2A> proprietà del <xref:System.Globalization.CultureInfo> classe la <xref:System.Globalization> dello spazio dei nomi. Il valore predefinito <xref:System.Globalization.CultureInfo.CurrentCulture%2A> valori vengono determinati dalle **Pannello di controllo** impostazioni.  
  
 Il `FirstDayOfWeekValue` argomento può avere uno delle seguenti impostazioni.  
  
|Valore di enumerazione|Valore|Descrizione|  
|-----------------------|-----------|-----------------|  
|`FirstDayOfWeek.System`|0|Primo giorno della settimana specificato nel sistema impostazioni (impostazione predefinita)|  
|`FirstDayOfWeek.Sunday`|1|Domenica|  
|`FirstDayOfWeek.Monday`|2|Lunedì (conforme allo standard ISO 8601, 3.17 sezione)|  
|`FirstDayOfWeek.Tuesday`|3|Martedì|  
|`FirstDayOfWeek.Wednesday`|4|Mercoledì|  
|`FirstDayOfWeek.Thursday`|5|Giovedì|  
|`FirstDayOfWeek.Friday`|6|Venerdì|  
|`FirstDayOfWeek.Saturday`|7|Saturday|  
  
   
  
## Examples  
 L'esempio seguente usa il `Weekday` funzione per ottenere il giorno della settimana da una data specificata e quindi il `WeekDayName` funzione per ottenere il nome del giorno della settimana dal relativo numero.  
  
 [!code-vb[VbVbalrFunctions#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Weekday" /> è mino di 1 o maggiore di 7 oppure <paramref name="FirstDayOfWeekValue" /> è minore di 0 o maggiore di 7.</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Year (DateValue As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Year(DateTime DateValue);" />
      <MemberSignature Language="F#" Value="static member Year : DateTime -&gt; int" Usage="Microsoft.VisualBasic.DateAndTime.Year DateValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">Obbligatorio. Valore <see langword="Date" /> da cui estrarre l'anno.</param>
        <summary>Restituisce un valore <see langword="Integer" /> compreso tra 1 e 9999 che rappresenta l'anno.</summary>
        <returns>Restituisce un valore <see langword="Integer" /> compreso tra 1 e 9999 che rappresenta l'anno.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È anche possibile ottenere l'anno chiamando `DatePart` e specificando `DateInterval.Year` per il `Interval` argomento.  
  
   
  
## Examples  
 L'esempio seguente usa il `Year` funzione per ottenere l'anno dalla data specificata. Nell'ambiente di sviluppo, la data di valore letterale viene visualizzato in breve formato di data utilizzando le impostazioni locali del codice.  
  
 [!code-vb[VbVbalrFunctions#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
  </Members>
</Type>