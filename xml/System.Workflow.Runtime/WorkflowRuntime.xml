<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b56222b135353cb74ae07f5080a11e67e2b1dc21" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32695049" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowRuntime" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRuntime&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntime : IDisposable, IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta l'ambiente di esecuzione configurabile fornito dal motore di runtime del flusso di lavoro per i flussi di lavoro.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime> espone la funzionalità richiesta da un'applicazione e dai servizi host per configurare e controllare il motore di runtime del flusso di lavoro e ricevere notifica delle modifiche al motore di runtime del flusso di lavoro e alle relative istanze del flusso di lavoro.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Fornisce esempi di come utilizzare il costruttore <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> e i metodi <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Nel codice viene illustrato inoltre la modalità consigliata per creare un oggetto <xref:System.Workflow.Runtime.WorkflowInstance> in un host del flusso di lavoro utilizzando il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>. Viene anche illustrato come impostare gestori eventi per gli eventi <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> e <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkID=157346) esempio.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Questo tipo è thread-safe.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> viene inizializzato con i valori predefiniti delle proprietà e contiene i servizi di base predefiniti. Per configurare anche il motore di runtime del flusso di lavoro, è possibile aggiungere e rimuovere i servizi utilizzando <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> e <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>, ed è possibile impostare <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>. Dopo aver configurato <xref:System.Workflow.Runtime.WorkflowRuntime>, chiamare <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> per avviare il motore di runtime del flusso di lavoro e i relativi servizi.  
  
 Nella tabella seguente vengono illustrati i valori iniziali delle proprietà di un'istanza della classe <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
|Proprietà|Valore iniziale|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|"WorkflowRuntime"|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 I servizi di base predefiniti sono: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> e <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Fornisce un esempio di come utilizzare il costruttore <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> per creare un'istanza di <xref:System.Workflow.Runtime.WorkflowRuntime> e accedere ai relativi metodi ed eventi.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkID=157346) esempio.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configSectionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::String ^ configSectionName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">Nome di una sezione <see langword="workflowSettings" /> valida nel file di configurazione dell'applicazione.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> tramite la sezione specificata del file di configurazione dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> viene inizializzata in base alle impostazioni nella sezione specificata da `configSectionName` nel file di configurazione dell'applicazione. `configSectionName` deve corrispondere a un oggetto valido `workflowSettings` sezione di un file di configurazione.  
  
 Quando il motore di runtime del flusso di lavoro viene configurato tramite un file di configurazione dell'applicazione, carica e crea istanze di classi dei tipi elencati nel `Services` sezione del file di configurazione. Quando il motore di runtime del flusso di lavoro costruisce queste classi, cerca costruttori di classi con le firme seguenti nell'ordine seguente:  
  
1.  Servizio (runtime di WorkflowRuntime, parametri NameValueCollection)  
  
2.  Servizio (runtime di WorkflowRuntime)  
  
3.  Servizio (parametri NameValueCollection)  
  
4.  Servizio()  
  
 Tutte le classi del servizio caricate da un file di configurazione devono implementare almeno una di queste firme del costruttore.  
  
 Per ulteriori informazioni, vedere <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="configSectionName" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Impossibile trovare una sezione <see langword="workflowSettings" /> valida nel file di configurazione dell'applicazione.</exception>
        <exception cref="T:System.InvalidOperationException">Esiste già una classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> per questo dominio dell'applicazione.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As WorkflowRuntimeSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::Workflow::Runtime::Configuration::WorkflowRuntimeSection ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings">Oggetto <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> utilizzando le impostazioni nella classe <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" /> specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore fornisce un meccanismo per configurare il motore di runtime del flusso di lavoro utilizzando una sola chiamata al metodo per gli host che non utilizzano un file di configurazione dell'applicazione. La scelta di non utilizzare il file di configurazione dell'applicazione può essere dovuta a numerosi fattori. Un host può essere in esecuzione in un ambiente che non consente l'utilizzo dei file di configurazione; ad esempio, in ambienti attendibili che non consentono la lettura dal file di configurazione dell'applicazione per ragioni di sicurezza. In altri casi, è possibile che un host utilizzi un meccanismo di configurazione proprietario; ad esempio, l'host può archiviare le impostazioni di configurazione del motore di runtime del flusso di lavoro in un database SQL.  
  
 Il motore di runtime del flusso di lavoro carica e crea un'istanza delle classi dei tipi contenute in <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=nameWithType>. Quando il motore di runtime del flusso di lavoro costruisce queste classi, cerca costruttori di classi con le firme seguenti nell'ordine seguente:  
  
1.  Servizio (runtime di WorkflowRuntime, parametri NameValueCollection)  
  
2.  Servizio (runtime di WorkflowRuntime)  
  
3.  Servizio (parametri NameValueCollection)  
  
4.  Servizio()  
  
 Tutte le classi di servizi specificate in `settings` devono implementare almeno una delle firme del costruttore seguenti.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settings" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Esiste già una classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> per questo dominio dell'applicazione.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(System::Object ^ service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Un oggetto che rappresenta il servizio da aggiungere.</param>
        <summary>Aggiunge il servizio specificato al motore di runtime del flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile configurare il motore di runtime del flusso di lavoro aggiungendo servizi di base. I servizi di base sono servizi derivati da una delle classi base del servizio seguenti: <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> e <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Servizi di base possono essere aggiunti solo quando il motore di runtime del flusso di lavoro non è in esecuzione. ovvero, quando <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> è `false`. <xref:System.Workflow.Runtime.WorkflowRuntime> può essere utilizzato anche come un contenitore dell'archivio per altri servizi che possono essere utilizzati da altri flussi di lavoro o da applicazioni in esecuzione su un host. Se si aggiunge un servizio non di base derivato dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> dopo l'avvio del motore di runtime del flusso di lavoro, <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> chiama il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> implementato da tale servizio.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> applica una restrizione tale per cui non è possibile aggiungere due servizi dello stesso <xref:System.Type> a <xref:System.Workflow.Runtime.WorkflowRuntime>. Tuttavia, è possibile aggiungere più servizi che derivano dalla stessa classe di base.  Può esistere solo un servizio derivato da ognuna delle classi base del servizio seguenti in <xref:System.Workflow.Runtime.WorkflowRuntime>: <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> e <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>.  Se si aggiungono più servizi derivati da una di queste classi, ad esempio due servizi di persistenza, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> genera un'eccezione <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Viene fornito un esempio di come utilizzare il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> per aggiungere una classe <xref:System.Workflow.Activities.ExternalDataExchangeService> e <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> al motore di runtime del flusso di lavoro.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkId=157346) esempio.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> viene eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="service" /> è già registrato nel motore di runtime del flusso di lavoro.  
  
 oppure  
  
 <paramref name="service" /> è un servizio di base e il motore di runtime del flusso di lavoro è già in esecuzione (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> è <see langword="true" />).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateWorkflow">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un'istanza di flusso di lavoro utilizzando i parametri specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il motore di runtime del flusso di lavoro non è stato avviato, i metodi <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> chiamano <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Per un elenco delle possibili eccezioni, vedere <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Dopo avere creato l'istanza del flusso di lavoro, chiamare <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A?displayProperty=nameWithType> sull'oggetto <xref:System.Workflow.Runtime.WorkflowInstance> restituito dal metodo <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> per iniziare l'esecuzione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType">Oggetto <see cref="T:System.Type" /> del flusso di lavoro da creare.</param>
        <summary>Crea una nuova istanza del flusso di lavoro utilizzando l'oggetto <see cref="T:System.Type" /> del flusso di lavoro specificato.</summary>
        <returns>Istanza del flusso di lavoro creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di essere creato, l'oggetto della classe <xref:System.Workflow.Runtime.WorkflowInstance> viene convalidato. Se si verificano errori di convalida, viene generata la classe <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Questa procedura si rivela adeguata per scenari semplici. Tuttavia, in un ambiente server, la riconvalida di un flusso di lavoro a ogni attivazione può comportare un sovraccarico non necessario.  
  
 Per ulteriori informazioni sulla disabilitazione della convalida, vedere <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata la procedura consigliata per creare un oggetto <xref:System.Workflow.Runtime.WorkflowInstance> in un host del flusso di lavoro utilizzando il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkID=157346) esempio.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Classe <see cref="T:System.Xml.XmlReader" /> contenente la definizione del flusso di lavoro.</param>
        <summary>Crea un'istanza del flusso di lavoro tramite l'elemento <see cref="T:System.Xml.XmlReader" /> specificato.</summary>
        <returns>Istanza del flusso di lavoro creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza del flusso di lavoro viene creata da un file di definizione del flusso di lavoro XAML al quale fa riferimento la classe <xref:System.Xml.XmlReader>.  
  
 Prima di essere creato, l'oggetto della classe <xref:System.Workflow.Runtime.WorkflowInstance> viene convalidato. Se si verificano errori di convalida, viene generata la classe <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Questa procedura si rivela adeguata per scenari semplici. Tuttavia, in un ambiente server, la riconvalida di un flusso di lavoro a ogni attivazione può comportare un sovraccarico non necessario.  
  
 Per ulteriori informazioni sulla disabilitazione della convalida, vedere <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un flusso di lavoro in base a una definizione del flusso di lavoro XAML.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> viene eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType">Oggetto <see cref="T:System.Type" /> del flusso di lavoro da creare.</param>
        <param name="namedArgumentValues">
          <see cref="T:System.Collections.Generic.Dictionary`2" /> di oggetti con chiave impostata da una stringa che rappresenta gli argomenti per il flusso di lavoro.</param>
        <summary>Crea un'istanza del flusso di lavoro utilizzando il flusso di lavoro <see cref="T:System.Type" /> e gli elementi per il flusso di lavoro contenuto nell'oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> specificato.</summary>
        <returns>Istanza del flusso di lavoro creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di essere creato, l'oggetto della classe <xref:System.Workflow.Runtime.WorkflowInstance> viene convalidato. Se si verificano errori di convalida, viene generata la classe <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Questa procedura si rivela adeguata per scenari semplici. Tuttavia, in un ambiente server, la riconvalida di un flusso di lavoro a ogni attivazione può comportare un sovraccarico non necessario.  
  
 Per ulteriori informazioni sulla disabilitazione della convalida, vedere <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Per un esempio di passaggio di parametri per `CreateWorkflow`, vedere [esempio Workflow with Parameters](http://go.microsoft.com/fwlink/?LinkId=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType">Oggetto <see cref="T:System.Type" /> del flusso di lavoro da creare.</param>
        <param name="namedArgumentValues">
          <see cref="T:System.Collections.Generic.Dictionary`2" /> di oggetti con chiave impostata da una stringa che rappresenta gli argomenti per il flusso di lavoro.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> della classe <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> specifica da creare.</param>
        <summary>Crea un'istanza di flusso di lavoro utilizzando i parametri specificati.</summary>
        <returns>Istanza del flusso di lavoro creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di essere creato, l'oggetto della classe <xref:System.Workflow.Runtime.WorkflowInstance> viene convalidato. Se si verificano errori di convalida, viene generata la classe <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Questa procedura si rivela adeguata per scenari semplici. Tuttavia, in un ambiente server, la riconvalida di un flusso di lavoro a ogni attivazione può comportare un sovraccarico non necessario.  
  
 Per ulteriori informazioni sulla disabilitazione della convalida, vedere <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Il flusso di lavoro `instanceId` per qualsiasi flusso di lavoro in esecuzione caricato da <xref:System.Workflow.Runtime.WorkflowRuntime> deve essere univoco. Se si passa un `instanceId` per creare un flusso di lavoro e un flusso di lavoro in esecuzione sta già utilizzando quel `instanceId`, viene generata un'eccezione <xref:System.InvalidOperationException>.  
  
 Per un esempio di passaggio di parametri per `CreateWorkflow`, vedere [esempio Workflow with Parameters](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Classe <see cref="T:System.Xml.XmlReader" /> contenente la definizione del flusso di lavoro.</param>
        <param name="rulesReader">Oggetto <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">
          <see cref="T:System.Collections.Generic.Dictionary`2" /> di oggetti con chiave impostata da una stringa che rappresenta gli argomenti per il flusso di lavoro.</param>
        <summary>Crea un'istanza del flusso di lavoro utilizzando gli oggetti <see cref="T:System.Xml.XmlReader" /> specificati e gli argomenti contenuti nell'oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> specificato.</summary>
        <returns>Istanza del flusso di lavoro creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza del flusso di lavoro viene creata dal file di definizione del flusso di lavoro al quale fa riferimento la classe <xref:System.Xml.XmlReader> e gli argomenti forniti da `namedArgumentValues`.  
  
 Prima di essere creato, l'oggetto della classe <xref:System.Workflow.Runtime.WorkflowInstance> viene convalidato. Se si verificano errori di convalida, viene generata la classe <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Questa procedura si rivela adeguata per scenari semplici. Tuttavia, in un ambiente server, la riconvalida di un flusso di lavoro a ogni attivazione può comportare un sovraccarico non necessario.  
  
 Per ulteriori informazioni sulla disabilitazione della convalida, vedere <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Per un esempio di passaggio di parametri per `CreateWorkflow`, vedere [esempio Workflow with Parameters](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Per un esempio di utilizzo di regole definite in XML, vedere [IfElse con regole di esempio](http://go.microsoft.com/fwlink/?LinkId=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> viene eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">Classe <see cref="T:System.Xml.XmlReader" /> contenente la definizione del flusso di lavoro.</param>
        <param name="rulesReader">Oggetto <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">
          <see cref="T:System.Collections.Generic.Dictionary`2" /> di oggetti con chiave impostata da una stringa che rappresenta gli argomenti per il flusso di lavoro.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> della classe <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> specifica da creare.</param>
        <summary>Crea un'istanza di flusso di lavoro utilizzando i parametri specificati.</summary>
        <returns>Istanza del flusso di lavoro creata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di essere creato, l'oggetto della classe <xref:System.Workflow.Runtime.WorkflowInstance> viene convalidato. Se si verificano errori di convalida, viene generata la classe <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Questa procedura si rivela adeguata per scenari semplici. Tuttavia, in un ambiente server, la riconvalida di un flusso di lavoro a ogni attivazione può comportare un sovraccarico non necessario.  
  
 Per ulteriori informazioni sulla disabilitazione della convalida, vedere <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Il flusso di lavoro `instanceId` per qualsiasi flusso di lavoro in esecuzione caricato da <xref:System.Workflow.Runtime.WorkflowRuntime> deve essere univoco. Se si passa un `instanceId` per creare un flusso di lavoro e un flusso di lavoro in esecuzione sta già utilizzando quel `instanceId`, viene generata un'eccezione <xref:System.InvalidOperationException>.  
  
 Per un esempio di passaggio di parametri per `CreateWorkflow`, vedere [esempio Workflow with Parameters](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Per un esempio di utilizzo di regole definite in XML, vedere [IfElse con regole di esempio](http://go.microsoft.com/fwlink/?LinkID=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia le risorse usate da <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per arrestare normalmente <xref:System.Workflow.Runtime.WorkflowRuntime>, è necessario chiamare <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> solo dopo aver chiamato <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Poiché se si chiama solamente il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> si lascia <xref:System.Workflow.Runtime.WorkflowRuntime> in una condizione di inutilizzabilità, <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>  libera le risorse utilizzate dal runtime chiudendo gli handle di file aperti, le connessioni al database e così via, ma non scarica istanze del flusso di lavoro, non arresta i servizi o non esegue qualsiasi altra azione svolta da <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> deve essere chiamato solo quando l'applicazione host deve liberare le risorse utilizzate da <xref:System.Workflow.Runtime.WorkflowRuntime> prima che vengano liberate automaticamente dal Garbage Collector. Per informazioni generali su <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>, vedere [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come chiamare il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> su un oggetto <xref:System.Workflow.Runtime.WorkflowRuntime>. In questo esempio, il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> viene chiamato dal gestore eventi FormClosing per il form principale dell'applicazione, garantendo in tal modo che gli oggetti creati dal runtime vengano puliti correttamente all'arresto dell'applicazione. Questo esempio è disponibile il [esempio applicazione vocale](http://go.microsoft.com/fwlink/?LinkId=157405).  
  
 [!code-csharp[WF_Samples#108](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices (serviceType As Type) As ReadOnlyCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Object ^&gt; ^ GetAllServices(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <see cref="T:System.Type" /> che i servizi devono implementare per essere restituiti.</param>
        <summary>Recupera tutti i servizi che vengono aggiunti al motore di runtime del flusso di lavoro, implementati o derivati dal <see cref="T:System.Type" /> specificato.</summary>
        <returns>Servizi implementati o derivati dal <see cref="T:System.Type" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> vuoto indica che non sono stati aggiunti servizi al motore di runtime del flusso di lavoro che sono stati implementati o derivati dal <xref:System.Type> specificato.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come recuperare tutti i servizi di un determinato tipo da un oggetto <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#19](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> viene eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices(Of T) () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ GetAllServices();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Tipo di servizio.</typeparam>
        <summary>Recupera tutti i servizi aggiunti al motore di runtime del flusso di lavoro che sono stati implementati o derivati dal tipo generico specificato.</summary>
        <returns>Servizi implementati o derivati dal tipo generico specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> vuoto indica che non sono stati aggiunti servizi al motore di runtime del flusso di lavoro che sono stati implementati o derivati dal tipo generico specificato.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come recuperare tutti i servizi di un determinato tipo da un oggetto <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#6](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#6)]
 [!code-vb[WF_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> viene eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedWorkflows () As ReadOnlyCollection(Of WorkflowInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowInstance ^&gt; ^ GetLoadedWorkflows();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene una raccolta che contiene tutte le istanze del flusso di lavoro attualmente caricate in memoria.</summary>
        <returns>Un oggetto <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> per ogni istanza del flusso di lavoro attualmente caricata in memoria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si noti che, diversamente da <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>, questo metodo non genera un'eccezione <xref:System.InvalidOperationException> se il runtime non è stato avviato.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come recuperare una raccolta di flussi di lavoro caricati da un oggetto <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#18](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> viene eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Oggetto <see cref="T:System.Type" /> del servizio da recuperare.</param>
        <summary>Recupera un servizio del <see cref="T:System.Type" /> specificato dal motore di runtime del flusso di lavoro.</summary>
        <returns>Servizio del <see cref="T:System.Type" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> genera un'eccezione <xref:System.InvalidOperationException> se esiste più di un servizio del <xref:System.Type> specificato. Pertanto, è necessario utilizzare uno dei metodi di overload di <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> se è possibile che più servizi del tipo specificato siano presenti in <xref:System.Workflow.Runtime.WorkflowRuntime>. Ad esempio, è possibile che il motore di runtime del flusso di lavoro disponga di più servizi di rilevamento. Se si richiede un servizio di rilevamento specificando la classe di base <xref:System.Workflow.Runtime.Tracking.TrackingService>, è possibile che venga generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> è già stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">È stato trovato più di un servizio del tipo <paramref name="serviceType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Tipo di servizio.</typeparam>
        <summary>Recupera un servizio del tipo generico specificato dal motore di runtime del flusso di lavoro.</summary>
        <returns>Restituisce un singolo servizio del tipo generico specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> genera un'eccezione <xref:System.InvalidOperationException> se esiste più di un servizio del tipo generico specificato. Pertanto, è necessario utilizzare uno dei metodi di overload di <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> se è possibile che più servizi del tipo generico siano presenti in <xref:System.Workflow.Runtime.WorkflowRuntime>. Ad esempio, è possibile che il motore di runtime del flusso di lavoro disponga di più servizi di rilevamento. Se si richiede un servizio di rilevamento specificando la classe di base <xref:System.Workflow.Runtime.Tracking.TrackingService>, è possibile che venga generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come recuperare un singolo servizio da un oggetto <xref:System.Workflow.Runtime.WorkflowRuntime>; in questo caso, un servizio di tipo <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>. Questo esempio è tratto di [esempio Threading Workflow](http://go.microsoft.com/fwlink/?LinkId=157350).  
  
 [!code-csharp[WF_Samples#28](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> già eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">È stato trovato più di un servizio del tipo generico.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflow (instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ GetWorkflow(Guid instanceId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">
          <see cref="T:System.Guid" /> di un'istanza del flusso di lavoro.</param>
        <summary>Recupera l'istanza del flusso di lavoro che ha specificato <see cref="T:System.Guid" />.</summary>
        <returns>
          <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> con il <see cref="T:System.Guid" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `instanceId` specifica un'istanza del flusso di lavoro che non è attualmente in memoria, l'istanza del flusso di lavoro viene caricata in memoria e pianificata per l'esecuzione. Ad esempio, dopo l'interruzione di un'istanza del flusso di lavoro, è possibile chiamare <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> per caricare di nuovo l'istanza del flusso di lavoro in memoria. In questo caso, l'ultimo stato persistente dell'istanza del flusso di lavoro viene caricato in memoria dal servizio di persistenza.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato un metodo `ReloadWorkflow` che chiama il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>. Il metodo `ReloadWorkflow` fa parte di una classe più grande che dispone di una proprietà `Runtime` per accedere a tutti i metodi, le proprietà e gli eventi della classe <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 Questo esempio di codice fa parte di [esempio servizio di persistenza personalizzato](http://go.microsoft.com/fwlink/?LinkId=157351) esempio.  
  
> [!NOTE]
>  Nell'esempio, la chiamata a <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> è ridondante perché entrambi i metodi <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> e <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> utilizzano lo stesso metodo di supporto interno per caricare l'istanza del flusso di lavoro in memoria.  
  
 [!code-csharp[WF_Samples#265](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il runtime del flusso di lavoro non è stato avviato.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStarted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il motore di runtime del flusso di lavoro è stato avviato.</summary>
        <value>
          <see langword="true" /> se il motore di runtime del flusso di lavoro è stato avviato; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> indica che i servizi del motore di runtime del flusso di lavoro sono in esecuzione. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> è `false` fino a quando l'host chiama <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Rimane `true` fino a quando l'host chiama <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
> [!NOTE]
>  Non è possibile aggiungere servizi di base al motore di runtime del flusso di lavoro mentre è in esecuzione. I servizi di base sono servizi derivati dalle classi <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> e <xref:System.Workflow.Runtime.Tracking.TrackingService>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come accedere alla proprietà <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> di un oggetto <xref:System.Workflow.Runtime.WorkflowRuntime>. In questo esempio, se il runtime è avviato, viene visualizzato un messaggio sulla console.  
  
 [!code-csharp[WF_Samples#21](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome associato a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <value>Nome associato a questo oggetto <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è possibile impostare <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> durante il flusso di lavoro è in esecuzione motore di run-time (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> è `true`).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come accedere alla proprietà <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> di un oggetto <xref:System.Workflow.Runtime.WorkflowRuntime>. In questo esempio, il nome del runtime è impostato su " Main Runtime".  
  
 [!code-csharp[WF_Samples#20](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Si verifica un tentativo di impostare <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> su un <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">Si verifica un tentativo di impostare <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> mentre il motore di runtime del flusso di lavoro è in esecuzione.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveService(System::Object ^ service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Un oggetto che rappresenta il servizio da rimuovere.</param>
        <summary>Rimuove il servizio specificato dal motore di runtime del flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è possibile rimuovere un servizio di base, mentre è in esecuzione il motore di runtime del flusso di lavoro (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> è `true`). I servizi di base sono servizi derivati dalle classi <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> o <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Se `service` deriva dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> chiama il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> implementato da `service`.  
  
   
  
## Examples  
 Nell'esempio seguente <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> viene aggiunto e rimosso da <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#16](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> è già stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro è stato avviato (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> è <see langword="true" />) e <paramref name="service" /> è un servizio di base.  
  
 \- oppure -  
  
 <paramref name="service" /> non è registrato nel motore di runtime del flusso di lavoro.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />
      <MemberSignature Language="VB.NET" Value="Public Event ServicesExceptionNotHandled As EventHandler(Of ServicesExceptionNotHandledEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::ServicesExceptionNotHandledEventArgs ^&gt; ^ ServicesExceptionNotHandled;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un servizio derivato dalla classe <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> chiama il metodo <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un servizio derivato dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> può chiamare il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> per informare i sottoscrittori dell'evento <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> che si è verificata un'eccezione non gestibile durante l'esecuzione. È possibile sottoscrivere questo evento per implementare un meccanismo di ripristino.  
  
 Questo evento viene generato quando un'istanza del flusso di lavoro non è ancora stata creata dal motore di runtime del flusso di lavoro e si verifica un'eccezione. In questo scenario, l'unico modo per informare un'applicazione host che si è verificata un'eccezione è generare questo evento. Tuttavia, il motore di runtime del flusso di lavoro non esegue direttamente questa operazione, bensì recapita un'eccezione all'istanza del flusso di lavoro o, se non sono disponibili istanze, rimanda di nuovo al chiamante che, in questo caso, è il servizio che genera questo evento. Se si crea un servizio di persistenza o Utilità di pianificazione, è necessario implementare questo evento tramite il metodo di base <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  
  
 Per l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled>, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene il <xref:System.Guid> dell'istanza del flusso di lavoro che stava utilizzando il servizio e la <xref:System.Exception> che non è stato possibile gestire.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> a un gestore eventi, un metodo denominato `OnExceptionNotHandled`.  
  
 Questo esempio di codice fa parte di [esempio servizio di persistenza personalizzato](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Started;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il motore di runtime del flusso di lavoro viene avviato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> metodo genera il <xref:System.Workflow.Runtime.WorkflowRuntime.Started> evento dopo la convalida la configurazione del servizio principale del motore di runtime del flusso di lavoro, è stato richiamato il <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> metodo implementato da ognuno dei servizi che derivano dal <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> (classe), e ha impostato <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> a `true`. Non è possibile garantire l'ordine con cui i servizi che derivano dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> vengono avviati dal motore di runtime del flusso di lavoro e alcuni di questi servizi possono dipendere da funzionalità fornite da altri servizi per poter completare le attività di avvio. I servizi del motore di runtime del flusso di lavoro possono eseguire l'override del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=nameWithType> per eseguire eventuali attività di avvio conclusive che richiedono il supporto di altri servizi del motore di runtime del flusso di lavoro quando viene generato l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started>.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio seguente un gestore eventi viene aggiunto all'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started> di <xref:System.Workflow.Runtime.WorkflowRuntime>. In questo esempio, il gestore è un metodo anonimo che visualizza un semplice messaggio sulla console.  
  
 [!code-csharp[WF_Samples#15](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartRuntime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avvia il motore di runtime del flusso di lavoro e i relativi servizi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo verifica che sia disponibile un set valido di servizi di base e quindi avvia qualsiasi servizio che deriva dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Deve essere uno e uno solo di ognuno dei servizi di base seguenti: un flusso di lavoro `CommitWorkBatch` servizio derivato dal <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> classe di base e un servizio dell'utilità di pianificazione derivata dalla <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> classe di base.  Se mancano uno o entrambi questi servizi di base, il motore di runtime del flusso di lavoro fornisce il servizio predefinito appropriato: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> del flusso di lavoro `CommitWorkBatch` servizio e <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> per il servizio Utilità di pianificazione. Un servizio di persistenza è facoltativo, ma può essere presente al massimo un solo servizio di persistenza. Dopo la convalida della configurazione del servizio, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> chiama <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> su tutti i servizi derivati dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Infine, il motore di runtime del flusso di lavoro imposta <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> e genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started>.  
  
 Non è possibile aggiungere o rimuovere servizi di base dopo l'avvio del motore di runtime del flusso di lavoro. I servizi di base sono servizi derivati dalle classi <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> o <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Se si chiama <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> mentre il motore di runtime del flusso di lavoro è in esecuzione, non viene eseguita alcuna azione.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice chiama <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> dopo che <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> crea un'istanza di <xref:System.Workflow.Runtime.WorkflowRuntime> e dopo la chiamata a <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> per aggiungere servizi al runtime. Chiama anche <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> prima che si verifichi qualsiasi altra elaborazione.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkId=157346) esempio.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> viene eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">Più di un servizio <see langword="CommitWorkBatch" /> del flusso di lavoro è registrato in questo <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
 oppure  
  
 Più di un servizio Utilità di pianificazione è registrato in questo <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
 oppure  
  
 Più di un servizio di persistenza è registrato in questo <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />
      <MemberSignature Language="VB.NET" Value="Public Event Stopped As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Stopped;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il motore di runtime del flusso di lavoro viene arrestato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> dopo aver richiamato il metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> implementato da ognuno dei servizi che derivano dalla classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Non è possibile garantire l'ordine con cui questi servizi del motore di runtime del flusso di lavoro vengono arrestati e alcuni di questi servizi possono dover mantenere alcune funzionalità da cui dipendono altri servizi fino a quando anche questi altri servizi verranno arrestati. Tali servizi possono eseguire l'override del metodo <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=nameWithType> per eseguire l'eventuale logica di arresto rimanente quando viene generato l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped>.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio seguente un gestore eventi viene aggiunto all'evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> di <xref:System.Workflow.Runtime.WorkflowRuntime>. In questo esempio, il gestore è un metodo anonimo che visualizza un semplice messaggio sulla console.  
  
 [!code-csharp[WF_Samples#14](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopRuntime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arresta il motore di runtime del flusso di lavoro e i servizi di runtime.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo fa sì che il motore di runtime del flusso di lavoro arrestare tutti i servizi che derivano da scaricare ognuna delle istanze del flusso di lavoro di <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> , impostare <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> a `false`e generare il <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> evento.  
  
 Per arrestare normalmente <xref:System.Workflow.Runtime.WorkflowRuntime>, chiamare <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> prima di chiamare <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
 Per altre informazioni, vedere il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> viene chiamato dopo che l'host ha completato ogni altra elaborazione associata al runtime.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkId=157346) esempio.  
  
 [!code-csharp[WF_Samples#259](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> è già stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowAborted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowAborted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un'istanza del flusso di lavoro viene interrotta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> si verifica dopo che ogni lavoro in sospeso per l'istanza del flusso di lavoro è stato cancellato, ma prima che l'istanza del flusso di lavoro sia invalidata in memoria. È possibile interrompere un'istanza del flusso di lavoro chiamando <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=nameWithType>.  
  
 Per questo evento, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> associata all'evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> a un gestore eventi, un metodo denominato `OnWorkflowAborted`.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkID=157346) esempio.  
  
 [!code-csharp[WF_Samples#141](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCompleted As EventHandler(Of WorkflowCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowCompletedEventArgs ^&gt; ^ WorkflowCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un'istanza del flusso di lavoro viene completata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> viene generato dopo che ogni lavoro in sospeso per l'istanza del flusso di lavoro è stato completato, ma prima che l'istanza del flusso di lavoro sia invalidata in memoria.  
  
 Per l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> e i relativi parametri di output.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> a un gestore eventi, un metodo denominato `OnWorkflowCompleted`.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkId=157346) esempio.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCreated As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowCreated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene creata un'istanza del flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> dopo che l'istanza del flusso di lavoro è stata completamente costruita ma prima che le attività vengano elaborate. Per questo evento, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> associata all'evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> a un gestore eventi, un metodo denominato `OnWorkflowCreated`.  
  
 Questo esempio di codice fa parte di [esempio servizio di persistenza personalizzato](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowIdled As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowIdled;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un'istanza del flusso di lavoro entra nello stato inattivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> quando l'istanza del flusso di lavoro entra in un stato inattivo; ad esempio, quando il flusso di lavoro è in attesa del completamento di un'attività <xref:System.Workflow.Activities.DelayActivity>.  
  
 Per questo evento, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> associata all'evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](https://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67(v=vs.100)).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> a un gestore eventi, un metodo denominato `OnWorkflowIdled`.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkID=157346) esempio.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowLoaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowLoaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'istanza del flusso di lavoro viene caricata in memoria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> si verifica dopo che il servizio di persistenza ha ripristinato l'istanza del flusso di lavoro, ma prima che il motore di runtime del flusso di lavoro cominci a eseguire qualsiasi attività.  
  
 Per l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> associata all'evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> a un gestore eventi, un metodo denominato `OnWorkflowLoad`.  
  
 Questo esempio di codice fa parte di [Custom Persistence Service](http://go.microsoft.com/fwlink/?LinkID=157351) esempio.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowPersisted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowPersisted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato di un'istanza del flusso di lavoro è persistente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza del flusso di lavoro può essere persistente per molte ragioni. Ad esempio, l'host può chiamare <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> su un'istanza del flusso di lavoro o il motore di runtime del flusso di lavoro può rendere persistente un'istanza del flusso di lavoro perché l'istanza è inattiva o perché un ambito atomico è stato completato. Se un servizio di persistenza è presente in <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> è generato dal runtime dopo che lo stato dell'istanza del flusso di lavoro è stato salvato in memoria. Se un servizio di persistenza non è presente, l'evento viene generato ugualmente ma lo stato dell'istanza non viene salvato. Se si verifica l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> perché l'istanza del flusso di lavoro sta per essere scaricata, sarà seguito da un evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
 Per l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> associata all'evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> a un gestore eventi, un metodo denominato `OnWorkflowPersisted`.  
  
 Questo esempio di codice fa parte di [esempio servizio di persistenza personalizzato](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#279](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowResumed As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowResumed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'esecuzione di un'istanza del flusso di lavoro riprende in seguito a una sospensione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> poco prima della pianificazione dell'istanza del flusso di lavoro. L'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> in genere viene generato a causa di una chiamata esplicita a <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>. Comunque il motore di runtime del flusso di lavoro può sospendere temporaneamente un'istanza per eseguire un'operazione, ad esempio per applicare una modifica al flusso di lavoro. In questo caso, l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> viene generato quando il runtime riprende l'esecuzione dell'istanza del flusso di lavoro che segue l'operazione.  
  
 Per l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> associata all'evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> a un gestore eventi, un metodo denominato `OnWorkflowResume`.  
  
 Questo esempio di codice fa parte di [Suspend and Terminate esempio](http://go.microsoft.com/fwlink/?LinkId=157402).  
  
 [!code-csharp[WF_Samples#171](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowStarted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un'istanza del flusso di lavoro viene avviata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> dopo che l'istanza del flusso di lavoro è stata avviata pianificando l'attività radice per l'esecuzione. Per questo evento, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> associata all'evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> a un gestore eventi, un metodo denominato `OnWorkflowStarted`.  
  
 Questo esempio di codice fa parte di [Host comunicazione esempio](http://go.microsoft.com/fwlink/?LinkId=157406).  
  
 [!code-csharp[WF_Samples#297](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowSuspended As EventHandler(Of WorkflowSuspendedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowSuspendedEventArgs ^&gt; ^ WorkflowSuspended;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un'istanza del flusso di lavoro viene sospesa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza del flusso di lavoro può essere sospesa dall'host tramite una chiamata al metodo <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A>, da un'attività <xref:System.Workflow.ComponentModel.SuspendActivity> o implicitamente dal motore di runtime del flusso di lavoro. Ad esempio, il motore di runtime del flusso di lavoro sospende temporaneamente l'istanza quando applica modifiche dinamiche all'istanza.  
  
 Per l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> e una stringa che descrive il motivo della sospensione dell'istanza.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> a un gestore eventi, un metodo denominato `OnWorkflowSuspended`.  
  
 Questo esempio di codice fa parte di [Suspend and Terminate esempio](http://go.microsoft.com/fwlink/?LinkID=157402).  
  
 [!code-csharp[WF_Samples#170](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowTerminated As EventHandler(Of WorkflowTerminatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowTerminatedEventArgs ^&gt; ^ WorkflowTerminated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un'istanza del flusso di lavoro viene terminata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza del flusso di lavoro può essere terminata dall'host tramite una chiamata al metodo <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>, da un'attività <xref:System.Workflow.ComponentModel.TerminateActivity> o dal motore di runtime del flusso di lavoro quando si verifica un'eccezione non gestita. Il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> dopo che l'istanza del flusso di lavoro è stata terminata ma prima che venga invalidata in memoria.  
  
 Per l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> e le informazioni relative al motivo per cui l'istanza è stata terminata nella proprietà <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=nameWithType>.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> a un gestore eventi, un metodo denominato `OnWorkflowCompleted`.  
  
 Questo esempio di codice fa parte di [l'annullamento di un flusso di lavoro](http://go.microsoft.com/fwlink/?LinkID=157346) esempio.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowUnloaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowUnloaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'istanza del flusso di lavoro viene scaricata dalla memoria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'istanza del flusso di lavoro può essere scaricata dalla memoria mediante una chiamata esplicita a <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> o implicitamente dal motore di runtime del flusso di lavoro in base alla relativa semantica. Ad esempio, il motore di runtime del flusso di lavoro viene scaricata un'istanza del flusso di lavoro se l'istanza diventa inattiva e il runtime ha un <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> aggiunto per il quale <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> è `true`.  
  
 Il motore di runtime del flusso di lavoro genera l'evento  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> dopo che lo stato dell'istanza del flusso di lavoro è stato reso persistente ma prima che l'istanza venga invalidata in memoria. Pertanto, un evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> precede l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
 Per l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>, il mittente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> e <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> associata all'evento.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [utilizzo degli eventi](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare una funzionalità <xref:System.Workflow.Runtime.WorkflowRuntime> da un host del flusso di lavoro. Il codice associa <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> a un gestore eventi, un metodo denominato `OnWorkflowUnload`.  
  
 Questo esempio di codice fa parte di [esempio servizio di persistenza personalizzato](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>