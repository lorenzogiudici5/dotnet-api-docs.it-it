<Type Name="WorkflowInstance" FullName="System.Workflow.Runtime.WorkflowInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f6722f462218341de377b996c28536f8dae9901" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="it-IT" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52222295" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowInstance" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInstance sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un'istanza del flusso di lavoro.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 La classe <xref:System.Workflow.Runtime.WorkflowInstance> espone metodi e proprietà che possono essere utilizzati per controllare l'esecuzione di un'istanza del flusso di lavoro; essenzialmente è un proxy dell'istanza del flusso di lavoro effettiva utilizzato dal motore di runtime del flusso di lavoro. Un host o un servizio possono specificare al motore di runtime del flusso di lavoro di eseguire azioni su un'istanza del flusso di lavoro chiamando i metodi adatti contenuti nella classe <xref:System.Workflow.Runtime.WorkflowInstance>.  Se l'azione richiesta non è valida, ad esempio, se l'host chiama il metodo <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> su un'istanza del flusso di lavoro che è già stata completata, il motore di runtime del flusso di lavoro genererà un'eccezione adatta.  
  
> [!NOTE]
>  Se un'istanza del flusso di lavoro non risponde perché una chiamata sull'applicazione host non viene restituita, l'unico modo per recuperare l'istanza è riavviare il runtime. Tuttavia, se l'istanza è stata forzatamente scaricata, interrotta o sospesa, può essere ripresa chiamando il metodo <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come creare e avviare una <xref:System.Workflow.Runtime.WorkflowInstance> in un host del flusso di lavoro. Il codice crea un'istanza di <xref:System.Workflow.Runtime.WorkflowRuntime>, aggiunge servizi al runtime e quindi dimostra la modalità consigliata per creare un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>. Il codice inizializza <xref:System.Workflow.Runtime.WorkflowInstance> chiamando il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> e passando il tipo precedentemente creato a tale metodo. L'oggetto <xref:System.Workflow.Runtime.WorkflowInstance> viene avviato con la chiamata al metodo <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A>.  
  
 Questo esempio di codice fa parte dell'esempio SDK Canceling a Workflow nel file Program.cs. Per altre informazioni, vedere [annullamento di un flusso di lavoro](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Questo tipo è thread-safe.</threadsafe>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">Annullamento di un flusso di lavoro</related>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="workflowInstance.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Interrompe l'istanza del flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza del flusso di lavoro viene interrotta in modo sincrono; ovvero, il metodo viene restituito dopo l'interruzione dell'istanza del flusso di lavoro. Il motore di runtime del flusso di lavoro invalida l'istanza del flusso di lavoro in memoria e cancella la proprietà <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. Se l'istanza del flusso di lavoro ha utilizzato un servizio di persistenza, tutto il lavoro eseguito dall'ultimo punto di persistenza viene eliminato. Dopo l'interruzione dell'istanza del flusso di lavoro, il motore di runtime del flusso di lavoro genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>. È possibile chiamare il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> per ricaricare l'istanza del flusso di lavoro e avviarla dall'ultimo punto di persistenza.  
  
 `Abort` è diverso dal metodo <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> poiché mentre `Abort` cancella l'istanza del flusso di lavoro in memoria e può essere riavviato dall'ultimo punto di persistenza, Terminate cancella l'istanza del flusso di lavoro in memoria e informa il servizio di persistenza che l'istanza è stata cancellata dalla memoria. Per <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, questo vuole dire che ogni informazione sullo stato dell'istanza del flusso di lavoro viene eliminata dal database al momento della chiusura. Non sarà possibile ricaricare l'istanza del flusso di lavoro da un punto di persistenza precedentemente archiviato.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata la chiamata ad Abort su un'istanza del flusso di lavoro di tipo Workflow1.  
  
 [!code-csharp[WF_Samples#13](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#13)]
 [!code-vb[WF_Samples#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyWorkflowChanges">
      <MemberSignature Language="C#" Value="public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyWorkflowChanges(class System.Workflow.ComponentModel.WorkflowChanges workflowChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyWorkflowChanges(System::Workflow::ComponentModel::WorkflowChanges ^ workflowChanges);" />
      <MemberSignature Language="F#" Value="member this.ApplyWorkflowChanges : System.Workflow.ComponentModel.WorkflowChanges -&gt; unit" Usage="workflowInstance.ApplyWorkflowChanges workflowChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowChanges" Type="System.Workflow.ComponentModel.WorkflowChanges" />
      </Parameters>
      <Docs>
        <param name="workflowChanges">Un oggetto <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> che specifica aggiornamenti dinamici per l'istanza del flusso di lavoro.</param>
        <summary>Applica modifiche all'istanza del flusso di lavoro specificata dall'oggetto <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'istanza del flusso di lavoro non è già stata sospesa, il motore di runtime del flusso di lavoro sospende temporaneamente l'istanza prima di applicare le modifiche.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata la chiamata a ApplyWorkflowChanges per un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>.  Questo esempio di codice fa parte dell'esempio SDK Ordering State Machine nel file Mainform.cs.  Per altre informazioni, vedere la [ordinamento esempio di macchina a stati](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).  
  
 [!code-csharp[WF_Samples#89](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#89)]
 [!code-vb[WF_Samples#89](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.</exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItem">
      <MemberSignature Language="C#" Value="public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItem(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItem (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItem(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberSignature Language="F#" Value="member this.EnqueueItem : IComparable * obj * System.Workflow.Runtime.IPendingWork * obj -&gt; unit" Usage="workflowInstance.EnqueueItem (queueName, item, pendingWork, workItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName">Nome di <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
        <param name="item">Oggetto da accodare.</param>
        <param name="pendingWork">Interfaccia <see cref="T:System.Workflow.Runtime.IPendingWork" /> che consente al mittente di ricevere una notifica quando <paramref name="item" /> viene recapitato.</param>
        <param name="workItem">Oggetto da passare ai metodi <see cref="T:System.Workflow.Runtime.IPendingWork" />.</param>
        <summary>Inserisce un messaggio in modo sincrono nella coda del flusso di lavoro specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Invia l'oggetto `item` alla classe <xref:System.Workflow.Runtime.WorkflowQueue> specificata. Se si desidera ricevere una notifica quando il messaggio viene recapitato, è possibile implementare <xref:System.Workflow.Runtime.IPendingWork> nel servizio e passare un `workItem` e un oggetto <xref:System.Workflow.Runtime.IPendingWork> a <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. Se non si desidera tale notifica, è possibile passare un riferimento null (`Nothing` in Visual Basic) per `pendingWork` e `workItem`.  
  
 Quando si usa questo metodo con un lavoro macchina a stati, è possibile ricevere un'eccezione con il messaggio "coda '{0}' non è abilitato." Ciò accade quando lo stato corrente della macchina a stati non sa come gestire un evento specifico. Ad esempio, quando uno stato diverso da quello corrente contiene la classe <xref:System.Workflow.Activities.EventDrivenActivity> che contiene l'oggetto <xref:System.Workflow.Activities.HandleExternalEventActivity> rappresentato dalla coda "{0}".  
  
> [!NOTE]
>  Non è garantito che i messaggi vengano ricevuti dall'istanza del flusso di lavoro nell'ordine in cui sono inviati. Ad esempio, se la ricezione di un messaggio in una coda esistente (Coda A) fa sì che un flusso di lavoro crei un'altra coda (Coda B), che quindi è in ascolto per un altro messaggio inviato dopo il primo messaggio, è possibile che il secondo messaggio arrivi per primo e non venga ricevuto poiché la coda non è ancora stata creata. Per evitare questo problema, il secondo messaggio non deve essere inviato fino a quando la presenza della seconda coda viene verificata (mediante il metodo <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. Quando si verifica l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> viene chiamato il metodo `OnWorkflowIdled` definito in questo esempio. Determina quale flusso di lavoro venga reso inattivo mediante la proprietà <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> e quindi ottiene una raccolta di elementi in coda per l'istanza del flusso di lavoro chiamando il metodo <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>. Il codice scorre la raccolta per determinare quale attività è in attesa dell'evento che ha sospeso il flusso di lavoro. Invia quindi un'eccezione alla coda del flusso di lavoro mediante il metodo <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> insieme al nome dell'elemento in coda dell'evento.  
  
 Questo esempio di codice fa parte dell'esempio SDK Canceling a Workflow nel file Program.cs. Per altre informazioni, vedere [annullamento di un flusso di lavoro](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="queueName" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.  
  
oppure 
La classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specificata da <paramref name="queueName" /> non esiste.  
  
oppure 
La classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specificata da <paramref name="queueName" /> non è abilitata.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">Annullamento di un flusso di lavoro</related>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItemOnIdle">
      <MemberSignature Language="C#" Value="public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItemOnIdle(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItemOnIdle (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItemOnIdle(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberSignature Language="F#" Value="member this.EnqueueItemOnIdle : IComparable * obj * System.Workflow.Runtime.IPendingWork * obj -&gt; unit" Usage="workflowInstance.EnqueueItemOnIdle (queueName, item, pendingWork, workItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName">Nome di <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
        <param name="item">Oggetto da accodare.</param>
        <param name="pendingWork">Interfaccia <see cref="T:System.Workflow.Runtime.IPendingWork" /> che consente al mittente di ricevere una notifica quando <paramref name="item" /> viene recapitato.</param>
        <param name="workItem">Oggetto da passare ai metodi <see cref="T:System.Workflow.Runtime.IPendingWork" />.</param>
        <summary>Inserisce un messaggio in modo sincrono nella coda del flusso di lavoro quando il flusso di lavoro è inattivo. <see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> attende che il flusso di lavoro raggiunga un punto inattivo e lo inserisce in una coda dopo avere verificato che l'Utilità di pianificazione del flusso di lavoro sia inattiva (ovvero, nessuna operazione attiva è in esecuzione).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aspetta che l'istanza del flusso di lavoro diventi inattiva e quindi invia l'oggetto `item` alla classe <xref:System.Workflow.Runtime.WorkflowQueue> specificata. Se si chiama <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> mentre l'istanza del flusso di lavoro è sospesa, il motore di runtime del flusso di lavoro genererà un'eccezione <xref:System.InvalidOperationException>. Se si desidera ricevere una notifica quando il messaggio viene recapitato, è possibile implementare <xref:System.Workflow.Runtime.IPendingWork> nel servizio e passare un `workItem` e un oggetto <xref:System.Workflow.Runtime.IPendingWork> a <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. Se non si desidera tale notifica, è possibile passare un riferimento null (`Nothing` in Visual Basic) per `pendingWork` e `workItem`.  
  
 Quando si usa questo metodo con un lavoro macchina a stati, è possibile ricevere un'eccezione che contiene il messaggio "coda '{0}' non è abilitato." Ciò accade quando lo stato corrente della macchina a stati non sa come gestire un evento specifico. Ad esempio, quando uno stato diverso da quello corrente contiene la classe <xref:System.Workflow.Activities.EventDrivenActivity> che contiene l'oggetto <xref:System.Workflow.Activities.HandleExternalEventActivity> rappresentato dalla coda "{0}".  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'invio di informazioni a un'istanza del flusso di lavoro utilizzando il metodo `EnqueueItemOnIdle`. Prima viene creato e avviato un oggetto WorkflowInstance; quindi viene creato un oggetto che implementa l'interfaccia <xref:System.Workflow.Runtime.IPendingWork>. In seguito viene chiamato `EnqueueItemOnIdle`, passando valori stringa per il nome della coda, l'elemento accodato e l'elemento di lavoro da passare ai metodi dell'oggetto pendingWork.  
  
 [!code-csharp[WF_Samples#12](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#12)]
 [!code-vb[WF_Samples#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="queueName" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.  
  
oppure 
L'istanza del flusso di lavoro è sospesa.  
  
oppure 
La classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specificata da <paramref name="queueName" /> non esiste.  
  
oppure 
La classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specificata da <paramref name="queueName" /> non è abilitata.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="workflowInstance.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da confrontare.</param>
        <summary>Restituisce un valore che indica se l'oggetto specificato è uguale a <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</summary>
        <returns><see langword="true" /> se l'oggetto specificato è uguale a <see cref="T:System.Workflow.Runtime.WorkflowInstance" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'oggetto deve essere un'istanza della classe <xref:System.Workflow.Runtime.WorkflowInstance> ed avere lo stesso <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> di questa classe <xref:System.Workflow.Runtime.WorkflowInstance>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="workflowInstance.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il codice hash per l'istanza del flusso di lavoro.</summary>
        <returns>Codice hash per <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> restituisce un codice hash calcolato in base al valore di <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowDefinition">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity GetWorkflowDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowDefinition () As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Activity ^ GetWorkflowDefinition();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowDefinition : unit -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowInstance.GetWorkflowDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera l'attività radice per questa istanza del flusso di lavoro.</summary>
        <returns>Oggetto <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare l'attività radice per spostarsi nella gerarchia di attività del flusso di lavoro.  
  
 Questo metodo non è thread-safe e pertanto l'host deve sincronizzare le relative chiamate effettuate a questo metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il recupero della definizione del flusso di lavoro da un'istanza del flusso di lavoro.  Questo esempio di codice fa parte dell'esempio SDK Ordering State Machine nel file Mainform.cs.  Per altre informazioni, vedere la [ordinamento esempio di macchina a stati](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c).  
  
 [!code-csharp[WF_Samples#86](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#86)]
 [!code-vb[WF_Samples#86](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#86)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowNextTimerExpiration">
      <MemberSignature Language="C#" Value="public DateTime GetWorkflowNextTimerExpiration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetWorkflowNextTimerExpiration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowNextTimerExpiration () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetWorkflowNextTimerExpiration();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowNextTimerExpiration : unit -&gt; DateTime" Usage="workflowInstance.GetWorkflowNextTimerExpiration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il momento successivo in cui deve essere recapitato un messaggio del timer a questa classe <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</summary>
        <returns>Valore Datetime che rappresenta la successiva ora <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> in cui a <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> verrà recapitato un messaggio del timer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del metodo <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> per determinare se vengono accodati più messaggi del timer del flusso di lavoro. Questo esempio è tratto dall'esempio SDK WorkflowThreading nel file Program.cs. Per altre informazioni, vedere [esempio Workflow Threading](https://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  
  
 [!code-csharp[WF_Samples#284](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#284)]
 [!code-vb[WF_Samples#284](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#284)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Workflow.Runtime.TimerEventSubscription" />
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowQueueData">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowQueueData () As ReadOnlyCollection(Of WorkflowQueueInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowQueueInfo ^&gt; ^ GetWorkflowQueueData();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowQueueData : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;" Usage="workflowInstance.GetWorkflowQueueData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene una raccolta di oggetti <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> che contiene gli elementi in sospeso e le attività sottoscritte per le code del flusso di lavoro associate a questa istanza del flusso di lavoro.</summary>
        <returns>Oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> di oggetti <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> restituisce una raccolta di oggetti <xref:System.Workflow.Runtime.WorkflowQueueInfo>, ognuno dei quali contiene informazioni sullo stato di una delle code del flusso di lavoro associate a questa istanza del flusso di lavoro. <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType> contiene gli elementi in sospeso per un oggetto <xref:System.Workflow.Runtime.WorkflowQueue> e <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> contiene un elenco delle attività sottoscritte per il recapito di elementi su un oggetto <xref:System.Workflow.Runtime.WorkflowQueue>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare il metodo <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> per ottenere informazioni sullo stato di tutte le code del flusso di lavoro associate a un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>. Quando si verifica l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> viene chiamato il metodo `OnWorkflowIdled` definito in questo esempio. Determina quale flusso di lavoro venga reso inattivo mediante la proprietà <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> e quindi ottiene una raccolta di elementi in coda per l'istanza del flusso di lavoro chiamando il metodo <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>. Il codice scorre la raccolta per determinare quale attività è in attesa dell'evento che ha sospeso il flusso di lavoro. Invia quindi un'eccezione alla coda del flusso di lavoro mediante il metodo <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> insieme al nome dell'elemento in coda dell'evento.  
  
 Questo esempio di codice fa parte dell'esempio SDK Canceling a Workflow nel file Program.cs. Per altre informazioni, vedere [annullamento di un flusso di lavoro](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">Annullamento di un flusso di lavoro</related>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public Guid InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid InstanceId { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : Guid" Usage="System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore univoco per l'istanza del flusso di lavoro.</summary>
        <value><see cref="T:System.Guid" /> di istanza del flusso di lavoro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per fare riferimento all'istanza del flusso di lavoro, è possibile utilizzare <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare la proprietà <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> per ottenere informazioni su un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>. Il primo frammento di codice crea una variabile <xref:System.Workflow.Runtime.WorkflowInstance> denominata `instanceId`.  
  
 [!code-csharp[WF_Samples#210](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#210)]
 [!code-vb[WF_Samples#210](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#210)]  
  
 Il secondo frammento utilizza la proprietà <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> come primo oggetto in una chiamata al costruttore `OrderEventArgs` quando viene chiamato il metodo `CallBackForApproval`.  
  
 Questo esempio di codice fa parte dell'esempio SDK Listen del file OrderServiceImple.cs. Per altre informazioni, vedere [esempio di ascolto](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90)).  
  
 [!code-csharp[WF_Samples#211](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#211)]
 [!code-vb[WF_Samples#211](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#211)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90)">Esempio di ascolto</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberSignature Language="F#" Value="member this.Load : unit -&gt; unit" Usage="workflowInstance.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Carica un'istanza del flusso di lavoro precedentemente scaricata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> è sincrono; se l'istanza del flusso di lavoro può essere caricata, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> verrà restituito dopo che l'istanza del flusso di lavoro è stata caricata in memoria e pianificata dal motore di runtime del flusso di lavoro. Il runtime genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> dopo che il servizio di persistenza ha ripristinato l'istanza del flusso di lavoro in memoria, ma prima che il motore di runtime del flusso di lavoro pianifichi l'istanza.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come caricare un oggetto <xref:System.Workflow.Runtime.WorkflowInstance> precedentemente scaricato.  
  
 [!code-csharp[WF_Samples#10](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#10)]
 [!code-vb[WF_Samples#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReloadTrackingProfiles">
      <MemberSignature Language="C#" Value="public void ReloadTrackingProfiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadTrackingProfiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReloadTrackingProfiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReloadTrackingProfiles();" />
      <MemberSignature Language="F#" Value="member this.ReloadTrackingProfiles : unit -&gt; unit" Usage="workflowInstance.ReloadTrackingProfiles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ricarica i profili di rilevamento per l'istanza del flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'infrastruttura di rilevamento di runtime ricaricherà ogni <xref:System.Workflow.Runtime.Tracking.TrackingProfile> per questa istanza del flusso di lavoro associata ai canali di rilevamento. Se non è già in un stato sospeso, il flusso di lavoro viene temporaneamente sospeso dall'infrastruttura di rilevamento di runtime mentre i profili di rilevamento vengono ricaricati.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="workflowInstance.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Riprende l'esecuzione di un'istanza del flusso di lavoro precedentemente sospesa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'host può chiamare <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> per riprendere l'esecuzione di un'istanza del flusso di lavoro precedentemente sospesa. Se l'istanza del flusso di lavoro non è nello stato sospeso, non viene eseguita alcune azione. Il runtime genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> poco prima della ripresa dell'esecuzione dell'istanza del flusso di lavoro.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata la chiamata a Resume su un'istanza del flusso di lavoro precedentemente sospesa.  Questo esempio è tratto dall'esempio SDK Suspend and Terminate.  Per altre informazioni, vedere [Suspend and Terminate esempio](https://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  
  
 [!code-csharp[WF_Samples#172](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#172)]
 [!code-vb[WF_Samples#172](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#172)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="workflowInstance.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avvia l'esecuzione dell'istanza del flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> chiama <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> sull'attività radice di questa istanza del flusso di lavoro. Se <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> rileva un'eccezione, termina l'istanza del flusso di lavoro chiamando <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> con la proprietà <xref:System.Exception.Message%2A> dell'eccezione passata come motivo della chiusura.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare il metodo <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> per avviare una classe <xref:System.Workflow.Runtime.WorkflowInstance> in un host del flusso di lavoro. Il codice crea un'istanza di <xref:System.Workflow.Runtime.WorkflowRuntime>, aggiunge servizi al runtime e quindi dimostra la modalità consigliata per creare un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>. Crea un oggetto <xref:System.Type> e ne esegue il cast a uno degli oggetti del flusso di lavoro al quale l'host è associato. Il codice inizializza quindi <xref:System.Workflow.Runtime.WorkflowInstance> chiamando il metodo <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> e passando il tipo precedentemente creato a tale metodo. L'oggetto <xref:System.Workflow.Runtime.WorkflowInstance> viene avviato con la chiamata al metodo <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A>.  
  
 Questo esempio di codice fa parte dell'esempio SDK Canceling a Workflow nel file Program.cs. Per altre informazioni, vedere [annullamento di un flusso di lavoro](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.  
  
oppure 
L'istanza del flusso di lavoro è già stata avviata.</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">Annullamento di un flusso di lavoro</related>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend(System::String ^ error);" />
      <MemberSignature Language="F#" Value="member this.Suspend : string -&gt; unit" Usage="workflowInstance.Suspend error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error">Descrizione del motivo della sospensione dell'istanza del flusso di lavoro.</param>
        <summary>Sospende l'istanza del flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza del flusso di lavoro viene sospesa in modo sincrono. Se l'istanza del flusso di lavoro è già sospesa, non viene eseguita alcuna azione; in caso contrario, il motore di runtime del flusso di lavoro sospende l'istanza del flusso di lavoro, genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> e passa `reason` in una classe <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> non scarica l'istanza del flusso di lavoro.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata la chiamata a Suspend su un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>.  
  
 [!code-csharp[WF_Samples#9](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#9)]
 [!code-vb[WF_Samples#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.</exception>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Terminate (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Terminate(System::String ^ error);" />
      <MemberSignature Language="F#" Value="member this.Terminate : string -&gt; unit" Usage="workflowInstance.Terminate error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error">Descrizione del motivo della chiusura dell'istanza del flusso di lavoro.</param>
        <summary>Termina l'istanza del flusso di lavoro in modo sincrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza del flusso di lavoro viene chiusa in modo sincrono. L'host chiama il metodo <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> per terminare l'istanza del flusso di lavoro. Il motore di runtime del flusso di lavoro cancella l'istanza del flusso di lavoro in memoria e informa il servizio di persistenza che l'istanza è stata cancellata dalla memoria. Per <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, questo vuole dire che ogni informazione sullo stato dell'istanza del flusso di lavoro viene eliminata dal database al momento della chiusura. Non sarà possibile ricaricare l'istanza del flusso di lavoro da un punto di persistenza precedentemente archiviato.  
  
 Dopo che l'istanza del flusso di lavoro in memoria è stata cancellata e il servizio di persistenza è stato informato della chiusura, il metodo `Terminate` genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> e passa `reason` nella proprietà <xref:System.Exception.Message%2A> di una classe <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> contenuta in <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.  
  
 `Terminate` è diverso dal metodo <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> poiché mentre Terminate cancella l'istanza del flusso di lavoro in memoria e informa il servizio di persistenza della chiusura, `Abort` cancella semplicemente l'istanza del flusso di lavoro in memoria, che può quindi essere riavviata dall'ultimo punto di persistenza.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata la chiamata a Terminate su un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>.  
  
 [!code-csharp[WF_Samples#8](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#8)]
 [!code-vb[WF_Samples#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il motore di runtime del flusso di lavoro non è in esecuzione.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryUnload">
      <MemberSignature Language="C#" Value="public bool TryUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.TryUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryUnload();" />
      <MemberSignature Language="F#" Value="member this.TryUnload : unit -&gt; bool" Usage="workflowInstance.TryUnload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scarica l'istanza del flusso di lavoro dalla memoria all'archivio di persistenza quando l'istanza viene sospesa o è inattiva.</summary>
        <returns><see langword="true" /> se l'istanza del flusso di lavoro è stata scaricata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'istanza del flusso di lavoro è inattiva o sospesa, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> utilizza il servizio di persistenza per rimuovere l'istanza del flusso di lavoro dalla memoria e renderla persistente in un archivio dati. Se nessun servizio di persistenza è registrato con <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> genera un'eccezione <xref:System.InvalidOperationException>. Se l'istanza del flusso di lavoro è stata resa persistente, il runtime genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> e restituisce `true`. <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> restituisce `false` se l'istanza del flusso di lavoro è già stata scaricata, è stata terminata, è stata interrotta o è già stata completata.  
  
 L'host può utilizzare il metodo <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> per recuperare risorse di sistema da un flusso di lavoro inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente è dimostrato l'utilizzo del metodo TryUnload per scaricare un flusso di lavoro quando l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> viene generato. Questo esempio è tratto dall'esempio SDK Using Persistence Services nel file Program.cs. Per altre informazioni, vedere [Using Persistence Services Sample](https://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  
  
 [!code-csharp[WF_Samples#280](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#280)]
 [!code-vb[WF_Samples#280](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#280)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Nessun servizio di persistenza è registrato nel motore di runtime del flusso di lavoro.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unload ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Unload();" />
      <MemberSignature Language="F#" Value="member this.Unload : unit -&gt; unit" Usage="workflowInstance.Unload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scarica l'istanza del flusso di lavoro dalla memoria all'archivio di persistenza. Questa chiamata rimane bloccata fino al termine del lavoro attualmente pianificato o alla fine di un ambito della transazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> è sincrono; ovvero viene restituito dopo il completamento delle azioni eseguite. Se l'istanza del flusso di lavoro non è inattiva, il runtime attende fino a quando l'istanza può essere interrotta. Un'istanza può essere interrotta solo dopo che l'elemento di lavoro attualmente pianificato viene completato. In genere ciò avviene quando l'attività attualmente in esecuzione viene restituita dal metodo <xref:System.Workflow.ComponentModel.Activity.Execute%2A>. Tuttavia, se l'istanza sta eseguendo un oggetto <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, l'esecuzione dell'ambito della transazione deve essere completata prima che l'istanza possa essere interrotta. Unload utilizza quindi il servizio di persistenza per rimuovere l'istanza del flusso di lavoro dalla memoria e lo rende persistente in un archivio dati. Se nessun servizio di persistenza è registrato con <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> genera un'eccezione <xref:System.InvalidOperationException>. Se l'istanza del flusso di lavoro è stata resa persistente, il runtime genera l'evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
 L'host può utilizzare il metodo <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> per recuperare risorse di sistema da un flusso di lavoro inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come chiamare <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> su un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>.  
  
 [!code-csharp[WF_Samples#11](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#11)]
 [!code-vb[WF_Samples#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Nessun servizio di persistenza è registrato nel motore di runtime del flusso di lavoro.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowRuntime">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowRuntime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ WorkflowRuntime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkflowRuntime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> per questa istanza del flusso di lavoro.</summary>
        <value>Una classe <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> che rappresenta l'ambiente di esecuzione nel quale è in esecuzione questa istanza del flusso di lavoro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'accesso e l'esecuzione di una classe <xref:System.Workflow.Runtime.WorkflowRuntime> di un oggetto <xref:System.Workflow.Runtime.WorkflowInstance>.  
  
 [!code-csharp[WF_Samples#7](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#7)]
 [!code-vb[WF_Samples#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>