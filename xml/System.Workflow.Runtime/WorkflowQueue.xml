<Type Name="WorkflowQueue" FullName="System.Workflow.Runtime.WorkflowQueue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ea26eff0c145a80816473f556bcfb314c972bbb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445371" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowQueue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WorkflowQueue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowQueue" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowQueue" />
  <TypeSignature Language="F#" Value="type WorkflowQueue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta una coda del flusso di lavoro.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Le code del flusso di lavoro vengono utilizzate per passare messaggi tra gli host o i servizi host e un attività in un flusso di lavoro. Qualsiasi attività può creare un oggetto <xref:System.Workflow.Runtime.WorkflowQueue> chiamando il metodo <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A?displayProperty=nameWithType> e un host, un servizio o un'altra attività possono chiamare il metodo <xref:System.Workflow.Runtime.WorkflowQueue.Enqueue%2A> per aggiungere un elemento a tale <xref:System.Workflow.Runtime.WorkflowQueue>. È possibile sottoscrivere l'evento <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> per ricevere una notifica quando un elemento arriva in <xref:System.Workflow.Runtime.WorkflowQueue>. È possibile utilizzare <xref:System.Workflow.Runtime.WorkflowQueue.Peek%2A> per esaminare un elemento all'inizio di <xref:System.Workflow.Runtime.WorkflowQueue> e <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> per rimuovere un elemento da <xref:System.Workflow.Runtime.WorkflowQueue>. Ogni <xref:System.Workflow.Runtime.WorkflowQueue> è associato a una classe <xref:System.Workflow.Runtime.WorkflowQueuingService> che è possibile utilizzare per eseguire altre operazioni di gestione su <xref:System.Workflow.Runtime.WorkflowQueue>, ad esempio l'eliminazione della coda. <xref:System.Workflow.Runtime.WorkflowQueue.QueuingService%2A> espone il <xref:System.Workflow.Runtime.WorkflowQueuingService> associato alla <xref:System.Workflow.Runtime.WorkflowQueue>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come creare una classe <xref:System.Workflow.Runtime.WorkflowQueue> chiamando il metodo <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType>. Viene inoltre utilizzata la proprietà <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> per determinare se siano presenti messaggi nella coda corrente. Infine, il codice utilizza il metodo <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> per rimuovere e restituire il primo oggetto contenuto nella coda.  
  
 Questo esempio di codice fa parte dell'esempio SDK File Watcher Activity nel file FileSystemEvent.cs. Per altre informazioni, vedere [attività Watcher del File System](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#227](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#227)]
 [!code-vb[WF_Samples#227](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#227)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowQueue.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Workflow.Runtime.WorkflowQueue.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di elementi contenuti nella classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <value>Numero di elementi nella coda del flusso di lavoro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come creare una classe <xref:System.Workflow.Runtime.WorkflowQueue> chiamando il metodo <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType>. Viene inoltre utilizzata la proprietà <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> per determinare se siano presenti messaggi nella coda corrente. Infine, il codice utilizza il metodo <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> per rimuovere e restituire il primo oggetto contenuto nella coda.  
  
 Questo esempio di codice fa parte dell'esempio SDK File Watcher Activity nel file FileSystemEvent.cs. Per altre informazioni, vedere [attività Watcher del File System](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#227](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#227)]
 [!code-vb[WF_Samples#227](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#227)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dequeue">
      <MemberSignature Language="C#" Value="public object Dequeue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Dequeue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.Dequeue" />
      <MemberSignature Language="VB.NET" Value="Public Function Dequeue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Dequeue();" />
      <MemberSignature Language="F#" Value="member this.Dequeue : unit -&gt; obj" Usage="workflowQueue.Dequeue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Consente di rimuovere e restituire l'oggetto all'inizio della <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <returns>Oggetto rimosso dall'inizio della <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile controllare <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> per determinare se <xref:System.Workflow.Runtime.WorkflowQueue> è vuota prima di chiamare <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> oppure è possibile intercettare <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come creare una classe <xref:System.Workflow.Runtime.WorkflowQueue> chiamando il metodo <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType>. Viene inoltre utilizzata la proprietà <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> per determinare se siano presenti messaggi nella coda corrente. Infine, il codice utilizza il metodo <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> per rimuovere e restituire il primo oggetto contenuto nella coda.  
  
 Questo esempio di codice fa parte dell'esempio SDK File Watcher Activity nel file FileSystemEvent.cs. Per altre informazioni, vedere [attività Watcher del File System](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#227](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#227)]
 [!code-vb[WF_Samples#227](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#227)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> è vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowQueue.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Workflow.Runtime.WorkflowQueue.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica se la classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> è abilitata.</summary>
        <value>
          <see langword="true" /> se la classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> è abilitata; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enqueue(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enqueue (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enqueue(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="member this.Enqueue : obj -&gt; unit" Usage="workflowQueue.Enqueue item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Oggetto da aggiungere all'oggetto <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
        <summary>Aggiunge un oggetto alla fine di <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">La classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> non è abilitata.</exception>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public object Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; obj" Usage="workflowQueue.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce l'oggetto all'inizio della <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> senza rimuoverlo.</summary>
        <returns>Oggetto all'inizio della <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è analogo al metodo <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A>, ma <xref:System.Workflow.Runtime.WorkflowQueue.Peek%2A> non modifica la <xref:System.Workflow.Runtime.WorkflowQueue>. È possibile controllare <xref:System.Workflow.Runtime.WorkflowQueue.Count%2A> per determinare se <xref:System.Workflow.Runtime.WorkflowQueue> è vuota prima di chiamare <xref:System.Workflow.Runtime.WorkflowQueue.Dequeue%2A> oppure è possibile intercettare <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> è vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueItemArrived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; QueueItemArrived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; QueueItemArrived" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueueItemArrived As EventHandler(Of QueueEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ QueueItemArrived;" />
      <MemberSignature Language="F#" Value="member this.QueueItemArrived : EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; " Usage="member this.QueueItemArrived : System.EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un elemento viene recapitato su questa <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene utilizzato solo per l'elaborazione che deve verificarsi in modo sincrono con il recapito dell'evento all'istanza del flusso di lavoro. Il gestore eventi può essere eseguito su un thread non del flusso di lavoro in modo che l'accesso a qualsiasi oggetto del flusso di lavoro condiviso, ad esempio, qualsiasi <xref:System.Workflow.ComponentModel.DependencyObject>, sia protetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueItemAvailable">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; QueueItemAvailable;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; QueueItemAvailable" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueueItemAvailable As EventHandler(Of QueueEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ QueueItemAvailable;" />
      <MemberSignature Language="F#" Value="member this.QueueItemAvailable : EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; " Usage="member this.QueueItemAvailable : System.EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un elemento è disponibile su <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'evento <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> viene generato in modo asincrono. Il mittente dell'evento <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> sarà la classe <xref:System.Workflow.ComponentModel.ActivityExecutionContext> dell'oggetto <xref:System.Workflow.ComponentModel.Activity> di sottoscrizione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueName">
      <MemberSignature Language="C#" Value="public IComparable QueueName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IComparable QueueName" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowQueue.QueueName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueName As IComparable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IComparable ^ QueueName { IComparable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueName : IComparable" Usage="System.Workflow.Runtime.WorkflowQueue.QueueName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IComparable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome della coda del flusso di lavoro.</summary>
        <value>Nome di <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome della coda del flusso di lavoro viene impostato dal metodo <xref:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuingService">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowQueuingService QueuingService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowQueuingService QueuingService" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowQueue.QueuingService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueuingService As WorkflowQueuingService" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::WorkflowQueuingService ^ QueuingService { System::Workflow::Runtime::WorkflowQueuingService ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QueuingService : System.Workflow.Runtime.WorkflowQueuingService" Usage="System.Workflow.Runtime.WorkflowQueue.QueuingService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowQueuingService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il servizio di accodamento associato a questa classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
        <value>Classe <see cref="T:System.Workflow.Runtime.WorkflowQueuingService" /> che rappresenta il servizio di accodamento associato a questa classe <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterForQueueItemArrived">
      <MemberSignature Language="C#" Value="public void RegisterForQueueItemArrived (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForQueueItemArrived(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForQueueItemArrived (eventListener As IActivityEventListener(Of QueueEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForQueueItemArrived(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener);" />
      <MemberSignature Language="F#" Value="member this.RegisterForQueueItemArrived : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; -&gt; unit" Usage="workflowQueue.RegisterForQueueItemArrived eventListener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="eventListener">Sottoscrittore per un elemento <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> che implementa l'interfaccia <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" />.</param>
        <summary>Registra un sottoscrittore per l'evento <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForQueueItemAvailable">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un sottoscrittore per l'evento <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare i metodi <xref:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable%2A> di overload per registrare un sottoscrittore per l'evento <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable>. L'evento <xref:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable> viene utilizzato per notificare ai sottoscrittori che un elemento è stato recapitato (in modo asincrono) a questa <xref:System.Workflow.Runtime.WorkflowQueue>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForQueueItemAvailable">
      <MemberSignature Language="C#" Value="public void RegisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForQueueItemAvailable(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForQueueItemAvailable (eventListener As IActivityEventListener(Of QueueEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForQueueItemAvailable(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener);" />
      <MemberSignature Language="F#" Value="member this.RegisterForQueueItemAvailable : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; -&gt; unit" Usage="workflowQueue.RegisterForQueueItemAvailable eventListener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="eventListener">Sottoscrittore per un elemento <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> che implementa l'interfaccia <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" />.</param>
        <summary>Registra un sottoscrittore per l'evento <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come creare una classe <xref:System.Workflow.Runtime.WorkflowQueue> chiamando il metodo <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType>. Utilizza anche il metodo <xref:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable%2A> per registrare il listener specificato.  
  
 Questo esempio di codice fa parte dell'esempio SDK File Watcher Activity nel file FileSystemEvent.cs. Per altre informazioni, vedere [attività Watcher del File System](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#225](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#225)]
 [!code-vb[WF_Samples#225](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#225)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventListener" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterForQueueItemAvailable">
      <MemberSignature Language="C#" Value="public void RegisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener, string subscriberQualifiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForQueueItemAvailable(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener, string subscriberQualifiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForQueueItemAvailable (eventListener As IActivityEventListener(Of QueueEventArgs), subscriberQualifiedName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForQueueItemAvailable(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener, System::String ^ subscriberQualifiedName);" />
      <MemberSignature Language="F#" Value="member this.RegisterForQueueItemAvailable : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; * string -&gt; unit" Usage="workflowQueue.RegisterForQueueItemAvailable (eventListener, subscriberQualifiedName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
        <Parameter Name="subscriberQualifiedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventListener">Sottoscrittore per un elemento <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> che implementa l'interfaccia <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" />.</param>
        <param name="subscriberQualifiedName">
          <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> dell'attività che sta sottoscrivendo l'evento <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> o un riferimento null (<see langword="Nothing" /> in Visual Basic).</param>
        <summary>Registra un sottoscrittore per l'evento <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il nome completo dell'attività di sottoscrizione è fornito da `subscriberQualifiedName`, viene restituito nella proprietà <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType> della classe <xref:System.Workflow.Runtime.WorkflowQueueInfo> associata a questa coda quando il metodo <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A?displayProperty=nameWithType> viene chiamato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventListener" /> è un riferimento null (<see langword="Nothing" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="UnregisterForQueueItemArrived">
      <MemberSignature Language="C#" Value="public void UnregisterForQueueItemArrived (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterForQueueItemArrived(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterForQueueItemArrived (eventListener As IActivityEventListener(Of QueueEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterForQueueItemArrived(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener);" />
      <MemberSignature Language="F#" Value="member this.UnregisterForQueueItemArrived : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; -&gt; unit" Usage="workflowQueue.UnregisterForQueueItemArrived eventListener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="eventListener">Sottoscrittore per un elemento <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> che implementa l'interfaccia <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" />.</param>
        <summary>Annulla la registrazione di un sottoscrittore per l'evento <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è solo per uso interno.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventListener" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="UnregisterForQueueItemAvailable">
      <MemberSignature Language="C#" Value="public void UnregisterForQueueItemAvailable (System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterForQueueItemAvailable(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.QueueEventArgs&gt; eventListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterForQueueItemAvailable (eventListener As IActivityEventListener(Of QueueEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterForQueueItemAvailable(System::Workflow::ComponentModel::IActivityEventListener&lt;System::Workflow::ComponentModel::QueueEventArgs ^&gt; ^ eventListener);" />
      <MemberSignature Language="F#" Value="member this.UnregisterForQueueItemAvailable : System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt; -&gt; unit" Usage="workflowQueue.UnregisterForQueueItemAvailable eventListener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.QueueEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="eventListener">Sottoscrittore per un elemento <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> che implementa l'interfaccia <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" />.</param>
        <summary>Annulla la registrazione di un sottoscrittore per l'evento <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come creare una classe <xref:System.Workflow.Runtime.WorkflowQueue> chiamando il metodo <xref:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue%2A?displayProperty=nameWithType>. Utilizza anche il metodo <xref:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable%2A> per annullare la registrazione del listener specificato.  
  
 Questo esempio di codice fa parte dell'esempio SDK File Watcher Activity nel file FileSystemEvent.cs. Per altre informazioni, vedere [attività Watcher del File System](http://msdn.microsoft.com/library/5442b63a-bdad-43d0-b7cf-f0b5d8b56a99).  
  
 [!code-csharp[WF_Samples#226](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#226)]
 [!code-vb[WF_Samples#226](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#226)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventListener" /> è un riferimento null (<see langword="Nothing" /> in Visual Basic).</exception>
      </Docs>
    </Member>
  </Members>
</Type>