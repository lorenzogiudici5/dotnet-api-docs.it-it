<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="77bc2e4454c903d6f8a37939bf1e818d61170a9d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39946413" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Consente di definire un oggetto punto di connessione per l'abilitazione di un controllo server che funge da provider per creare una connessione con un consumer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In ogni connessione Web part tra due controlli server, ogni controllo deve avere (tra gli altri requisiti) un oggetto punto di connessione associata che consente di connettersi all'altro controllo e fornire o utilizzare i dati, a seconda che il controllo viene designato come il provider o i consumer per la connessione. Oggetto <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetto in genere contiene i dettagli per la connessione e un altro controllo e il tipo di dati che è possibile condividere un controllo. Per un controllo funge da provider in una connessione, il punto di connessione deve essere un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto. Per informazioni dettagliate sulle connessioni Web part e i punti di connessione, vedere gli argomenti elencati nella sezione Vedere anche seguente.  
  
 Per creare un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dell'oggetto, sono necessari diversi passaggi:  
  
1.  Creare un'interfaccia. Quando un provider condivide dati con un consumer, esegue l'operazione ottenendo un'istanza di un'interfaccia e la restituzione di tale istanza a un consumer.  
  
2.  Implementare l'interfaccia in un provider. Oggetto <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server (qualsiasi tipo di controllo del server in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona può essere usata) che sarà il provider deve implementare l'interfaccia creata nel primo passaggio.  
  
3.  Identificare un metodo di callback. Un metodo del provider deve essere identificato come metodo di callback per stabilire una connessione. Questo metodo restituisce un'istanza dell'interfaccia implementata da un consumer. L'approccio di Web part per l'identificazione di un metodo di callback nel provider consiste nell'aggiungere un `ConnectionProvider` attributo di metadati (definito dal <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> classe) per il metodo che restituisce l'istanza dell'interfaccia. Quando viene aggiunto l'attributo, l'unico parametro obbligatorio è un nome visualizzato da utilizzare per il punto di connessione provider. Parametri facoltativi possono anche essere aggiunto, ad esempio un ID per il punto di connessione.  
  
 Dopo che un controllo sia stato preparato per agire come un provider, il controllo può essere connessa (supponendo che un controllo consumer in modo analogo sia e reso disponibile). Per creare un collegamento statico e dichiarativo nel markup di una pagina Web, gli sviluppatori possono utilizzare il `<asp:webpartconnection>` elemento. Se il `ConnectionProvider` attributo nel codice sorgente del provider che identifica il metodo di callback specifica un ID per il punto di connessione e quindi tale valore deve essere assegnato al `ProviderConnectionPointID` attributo il `<asp:webpartconnection>` elemento in una pagina. Uno dei motivi che uno sviluppatore può specificare un ID per un punto di connessione provider è se sono presenti più punti di connessione nel controllo provider. Se non viene specificato un ID per il punto di connessione del provider del controllo provider, un valore non deve essere assegnato al `ProviderConnectionPointID` attributo nella pagina, in quanto verrà creata la connessione utilizza un valore predefinito ottenuto dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> campo.  
  
 Per creare una connessione nel codice, gli sviluppatori devono creare una nuova <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodo e passando l'ID del controllo provider, insieme all'ID o indice del definita <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> all'oggetto nel controllo provider. Restituito <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , insieme a un riferimento al controllo provider, un riferimento all'oggetto controllo consumer e un corrispondente <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> dell'oggetto, sono tutti passato al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo per creare un nuovo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 Anche se gli sviluppatori possono usare punti di connessione del provider come parte di stabilire le connessioni in modo dichiarativo o a livello di codice, gli utenti possono anche interagire con i punti di connessione del provider per stabilire connessioni tramite l'interfaccia utente (UI). Se gli sviluppatori di dichiarano un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo in una pagina Web, fornisce un'interfaccia utente in fase di esecuzione per gli utenti di creare connessioni. Se gli utenti scelgono il controllo consumer come punto di partenza per stabilire la connessione facendo clic relativo verbo di connessione, possono anche scegliere il provider, ma non c'è alcuna differenza nella connessione risultante, nell'interfaccia utente visualizzerà un controllo elenco a discesa con le visualizzare nome del provider disponibile connessione punto (o punti se sono presenti più sessioni). Gli utenti devono selezionare un punto di connessione per creare una connessione.  
  
 Oggetto <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto viene associato direttamente a un controllo provider specifici e archivia i dettagli relativi a una connessione in proprietà ereditate dalla base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Ad esempio, in ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> proprietà, un punto di connessione provider mantiene il tipo di interfaccia restituito dal provider. Se il provider e consumer in una connessione che sia di lavoro con lo stesso tipo di interfaccia, i controlli sono in grado di creare una connessione diretta e compatibili. Se il provider e l'utente non può funzionare con lo stesso tipo di interfaccia, sono incompatibili e devono usare una <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto da tradurre il punto di connessione provider <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> valore in un tipo che possa essere utilizzato con i consumer. Un'altra proprietà ereditata importante è il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> proprietà che fornisce un nome descrittivo da visualizzare nell'interfaccia utente per gli utenti di scegliere una connessione del provider punto durante la creazione di connessioni. Il nome visualizzato è il parametro obbligatorio quando gli sviluppatori di aggiungere un `ConnectionProvider` attributo al metodo di callback in un controllo provider. Ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> proprietà è anche utile, come indicato in precedenza, perché fornisce un identificatore univoco per un punto di connessione nel caso in cui un provider ha più punti di connessione. Un provider può disporre di più <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> gli oggetti definiti all'interno e in questo caso, quando gli sviluppatori di aggiungere il `ConnectionProvider` attributo a un metodo, è necessario specificare un valore di ID per distinguere ogni punto di connessione. Un'altra proprietà ereditata significativa è la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> proprietà, che indica se un punto di connessione provider può connettersi contemporaneamente a più consumer. Valore di questa proprietà viene `true` per impostazione predefinita per i punti di connessione del provider (mentre l'impostazione predefinita è `false` per i punti di connessione consumer).  
  
 Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe aggiunge diversi metodi univoci per i membri eredita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo recupera un'istanza dell'interfaccia che il metodo di callback restituisce ai consumer. Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> che consente di recuperare le interfacce di altri consumer che fanno parte di una connessione esistente, ma non le interfacce consentono di stabilire la connessione.  
  
   
  
## Examples  
 Esempio di codice seguente illustra modi semplici per creare una connessione in modo dichiarativo, a livello di codice o tramite l'interfaccia utente, in ogni caso usare un punto di connessione provider.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e controlli. Il file di origine contiene una semplice interfaccia denominata `IZipCode`. È inoltre disponibile un' <xref:System.Web.UI.WebControls.WebParts.WebPart> classe denominata `ZipCodeWebPart` che implementa l'interfaccia e funge da controllo provider. Relativo `ProvideIZipCode` metodo è il metodo di callback che implementa unico membro dell'interfaccia. Il metodo restituisce semplicemente un'istanza dell'interfaccia. Si noti che il metodo è contrassegnato con un `ConnectionProvider` attributo nei relativi metadati. Si tratta del meccanismo per identificare il metodo come metodo di callback per il punto di connessione del provider. L'altra <xref:System.Web.UI.WebControls.WebParts.WebPart> classe è denominata `WeatherWebPart`, e funge da consumer per la connessione. Questa classe ha un metodo denominato `GetZipCode` che ottiene un'istanza del `IZipCode` interfaccia dal controllo provider. Si noti che questo metodo è contrassegnato come metodo del punto di connessione del consumer con una `ConnectionConsumer` attributo nei relativi metadati. Si tratta del meccanismo per identificare il metodo del punto di connessione del controllo consumer.  
  
 Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Nella parte superiore sono `Register` direttive per registrare i controlli personalizzati che formano la connessione e il controllo utente che consente agli utenti di modificare le modalità di visualizzazione della pagina. La connessione stessa viene creata in modo dichiarativo all'interno di `<staticconnections>` elemento della pagina. Ciò viene illustrato un modo per creare una connessione, nota il `ProviderConnectionPointID` attributo la `<asp:webpartconnection>` elemento. È anche possibile creare la connessione a livello di codice; il codice per questa operazione è nel `Button1_Click` (metodo). In questo caso, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto viene creato e quindi passato a un metodo che crea la connessione effettiva. Se la connessione viene creata in modo dichiarativo o a livello di codice, i punti di connessione è obbligatorio sempre per il provider e consumer. Il `Button2_Click` metodo accessi il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetti per il consumer sia il provider e scrive alcuni dei valori delle relative proprietà a un'etichetta nella pagina.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, scegliere il **dettagli punto di connessione** pulsante. Informazioni sui punti di connessione provider e consumer stabilita la connessione dichiarativo. Successivamente, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina in modalità di connessione. Nel menu dei verbi del **Consumer CAP** <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (rappresentato da una freccia verso il basso nella barra del titolo), fare clic sul verbo di connect. La connessione viene visualizzata l'interfaccia utente, creato automaticamente dal `<asp:connectionszone>` dichiarato nella pagina del controllo. Si tratta di un altro modo per creare una connessione (tramite l'interfaccia utente), con i metodi dichiarativi e a livello di codice illustrati in precedenza. Scegliere il **Disconnect** pulsante per terminare la connessione statica esistente. Scegliere il **creare una connessione a un Provider** collegamento. L'interfaccia utente ora visualizza un controllo elenco a discesa che elenca il nome visualizzato del punto di connessione di provider. Selezionare il punto di connessione nell'elenco a discesa e quindi fare clic su **Connect** per completare la connessione. Fare quindi clic **Disconnect** nuovamente. Scegliere il **connessione dinamica** pulsante per creare una connessione a livello di codice. Usare la **modalità di visualizzazione** controllo per restituire la pagina modalità di visualizzazione. Scegliere il **dettagli punto di connessione** pulsante anche in questo caso, per indicare una volta più dettagli sull'oggetto punto di connessione provider.  
  
 L'esempio è stata illustrata una connessione e l'utilizzo di un punto di connessione del provider in tre modi: una connessione statica dichiarati nel markup della pagina Web; una connessione creata nel codice che utilizza un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto e una connessione creata da un utente tramite l'interfaccia utente di connessione.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metodo nel controllo provider che restituisce un'istanza di interfaccia ai consumer per stabilire una connessione.</param>
        <param name="interfaceType">Classe <see cref="T:System.Type" /> dell'interfaccia che il provider assegna ai consumer.</param>
        <param name="controlType">Classe <see cref="T:System.Type" /> del controllo provider a cui è associato il punto di connessione.</param>
        <param name="displayName">Nome descrittivo per il punto di connessione provider visualizzato agli utenti nell'interfaccia utente di connessione.</param>
        <param name="id">Identificatore univoco per il punto di connessione provider.</param>
        <param name="allowsMultipleConnections">Valore Boolean indicante se il punto di connessione provider può eseguire più connessioni simultanee con i consumer.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> costruttore per il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe chiama semplicemente il costruttore di base, passando i diversi parametri e inizializzare la classe di base.  
  
 Il costruttore della classe base controlla un numero di parametri per un punto di connessione e può generare eccezioni diverse. Per un elenco delle possibili eccezioni, vedere la sezione eccezioni.  
  
 È possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> costruttore per creare una propria istanza del <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe. Tuttavia, nei casi in cui si desidera semplicemente stabilendo una connessione e non si estende la classe, è necessario chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> per restituire un oggetto punto di connessione esistente da un provider.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come derivare dal <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe per creare un punto di connessione provider personalizzato.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Un file di origine che contiene un provider <xref:System.Web.UI.WebControls.WebParts.WebPart> controllare, un consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto.  
  
-   Una pagina Web che ospita i controlli in una connessione statica.  
  
-   Una spiegazione su come eseguire il codice di esempio.  
  
 La prima parte dell'esempio di codice è l'origine per il provider e consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe, denominata `TableProviderConnectionPoint`. Si noti che il costruttore del `TableProviderConnectionPoint` classe chiama il costruttore base, passando i parametri obbligatori come indicato nella sezione dei parametri. Si noti inoltre che nel `TableProviderWebPart` (classe), il `GetConnectionInterface` metodo viene specificato come metodo di callback per le connessioni e il `ConnectionProvider` attributo dichiara l'oggetto personalizzato `TableProviderConnectionPoint` come parametro. Ciò viene illustrato come creare un punto di connessione provider personalizzato e associarlo a un controllo provider. Questo esempio si presuppone che il codice sorgente viene compilato in modo dinamico, pertanto è necessario inserire il file di codice sorgente in una sottocartella App_Code dell'applicazione Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 La seconda parte dell'esempio di codice è la pagina Web che ospita i controlli personalizzati in una connessione Web part statico. Nella parte superiore della pagina è un `Register` direttiva per dichiarare un prefisso e lo spazio dei nomi per i controlli personalizzati. La connessione viene dichiarata utilizzando un `<asp:webpartconnection>` controlli di elemento e il provider e consumer sono dichiarati all'interno di un `<asp:webpartzone>` elemento.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Caricare la pagina in un browser. La connessione tra i controlli già esiste e il consumer consente di visualizzare i dati dal provider, poiché la connessione è stata dichiarata come statica nella pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="interfaceType" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="controlType" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="displayName" /> è <see langword="null" /> o è una stringa vuota ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> non è lo stesso tipo del controllo provider, né una classe valida da esso derivata.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che funge da provider in una connessione web part.</param>
        <summary>Richiama il metodo di callback in un controllo provider che ottiene un'istanza di interfaccia da restituire ai consumer.</summary>
        <returns>Classe <see cref="T:System.Object" /> che rappresenta un'istanza dell'interfaccia restituita da un provider ai consumer per stabilire una connessione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce un oggetto dal controllo provider che è un'istanza dell'interfaccia utilizzata per stabilire una connessione. Il tipo dell'oggetto sarà il tipo dell'interfaccia implementata. Ad esempio, due interfacce implementate per le connessioni nel set di controlli sono le Web part <xref:System.Web.UI.WebControls.WebParts.IWebPartField> e <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Quando la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo viene chiamato su un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dell'oggetto, se il provider associato implementa una di queste interfacce, l'oggetto restituito sarà dello stesso tipo.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo viene chiamato da <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetti durante l'attivazione di una connessione. Si tratta di un passaggio critico che effettivamente avvia una connessione e avvia il processo che consente a due controlli condividere i dati.  
  
 Il controllo consumer in una connessione deve essere in grado di funzionare con lo stesso tipo dell'interfaccia come provider. In caso contrario, i controlli non sono compatibili e un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto deve essere utilizzato per stabilire una connessione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che funge da provider in una connessione web part.</param>
        <summary>Ottiene in insieme facoltativo di interfacce secondarie che possono essere supportate da un punto di connessione provider.</summary>
        <returns>Classe <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> di interfacce aggiuntive fornite dal controllo che funge da provider.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un oggetto punto di connessione provider ha sempre un'interfaccia predefinita che viene usata per stabilire una connessione con i consumer. Un'istanza dell'interfaccia predefinita viene recuperata chiamando il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo su un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto.  
  
 Tuttavia, alcuni controlli provider implementano più interfacce per fornire agli utenti come parte di una connessione. Queste interfacce, che non sono quelle predefinite utilizzate per stabilire una connessione, vengono chiamate interfacce secondarie. Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> metodo fornisce un modo per restituire una raccolta di riferimenti alle interfacce secondarie, proprio come il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo restituisce un riferimento all'interfaccia predefinita.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> nel metodo il <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> classe non contiene alcuna implementazione; restituisce una raccolta vuota di interfacce secondarie. Per implementare questo metodo, è necessario ereditare il <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> classe ed eseguire l'override di questo metodo, la restituzione da quest'ultimo un set specifico di interfacce secondarie.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>