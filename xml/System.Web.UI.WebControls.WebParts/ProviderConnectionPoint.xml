<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a89f471ebf510f4c98fbb34bac13429460f0b44f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36385725" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Consente di definire un oggetto punto di connessione per l'abilitazione di un controllo server che funge da provider per creare una connessione con un consumer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In ogni connessione Web part tra due controlli server, ogni controllo deve avere (tra gli altri requisiti) un oggetto punto di connessione associata che consente di connettersi a altro controllo e specificare o utilizzare i dati, a seconda che il controllo viene definito come il provider o consumer per la connessione. Oggetto <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetto contiene in genere i dettagli per la connessione e un altro controllo e il tipo di dati che è possibile condividere un controllo. Per un controllo che funge da provider in una connessione, il punto di connessione deve essere un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto. Per informazioni dettagliate sulle connessioni Web part e punti di connessione, vedere gli argomenti elencati nella sezione Vedere anche.  
  
 Per creare un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dell'oggetto, sono necessari diversi passaggi:  
  
1.  Creare un'interfaccia. Quando un provider condividere dati con un consumer, esegue l'operazione ottenendo un'istanza di un'interfaccia e la restituzione di tale istanza a un consumer.  
  
2.  Implementare l'interfaccia in un provider. Un <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server (qualsiasi tipo di controllo del server in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona può essere utilizzata) che sarà il provider deve implementare l'interfaccia creato nel primo passaggio.  
  
3.  Identificare un metodo di callback. Un metodo del provider deve essere identificato come metodo di callback per stabilire una connessione. Questo metodo restituisce un'istanza dell'interfaccia implementata da un consumer. L'approccio di Web part per l'identificazione di un metodo di callback nel provider consiste nell'aggiungere un `ConnectionProvider` attributo dei metadati (definito dal <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> classe) per il metodo che restituisce l'istanza dell'interfaccia. Quando viene aggiunto l'attributo, l'unico parametro obbligatorio è un nome visualizzato da utilizzare per il punto di connessione del provider. Parametro facoltativi è anche possibile aggiungere parametri, ad esempio un ID per il punto di connessione.  
  
 Dopo che un controllo sia stato preparato per agire come un provider, il controllo può partecipare alle connessioni (presupponendo che un controllo consumer sia in modo analogo e reso disponibile). Per creare una connessione statica e dichiarativa nel markup della pagina Web, gli sviluppatori possono utilizzare il `<asp:webpartconnection>` elemento. Se il `ConnectionProvider` attributo nel codice sorgente del provider che identifica il metodo di callback specifica un ID per il punto di connessione, quindi tale valore deve essere assegnato per il `ProviderConnectionPointID` attributo il `<asp:webpartconnection>` elemento in una pagina. Uno dei motivi che uno sviluppatore può specificare un ID per un punto di connessione del provider è se sono presenti più punti di connessione nel controllo del provider. Se non è specificato alcun ID per il punto di connessione del provider nel controllo provider, non è un valore da assegnare ai `ProviderConnectionPointID` attributo nella pagina, in quanto la connessione verrà creata utilizzando il valore predefinito ottenuto dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> campo.  
  
 Per creare una connessione nel codice, gli sviluppatori devono creare un nuovo <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodo e passando l'ID del controllo del provider, con l'ID o indice del definita <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> all'oggetto nel controllo del provider. Restituito <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , insieme a un riferimento al provider di controllo, un riferimento all'oggetto controllo consumer e un oggetto corrispondente <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> dell'oggetto, sono tutti passato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo per creare un nuovo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 Anche se gli sviluppatori possono utilizzare i punti di connessione del provider come parte delle connessioni in modo dichiarativo o a livello di codice, gli utenti possono anche interagire con i punti di connessione del provider per stabilire connessioni tramite l'interfaccia utente (UI). Se gli sviluppatori di dichiarano un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo in una pagina Web, fornisce un'interfaccia utente in fase di esecuzione per gli utenti di creare connessioni. Se si sceglie il controllo consumer come punto di partenza per stabilire la connessione, fare clic sul relativo verbo di connessione (possono anche scegliere il provider, non c'è alcuna differenza nella connessione risultante), nell'interfaccia utente verrà visualizzato un controllo elenco a discesa con il nome del provider disponibile connessione punto (o punti se sono presenti più sessioni). Gli utenti devono selezionare un punto di connessione del provider per creare una connessione.  
  
 Un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto viene associato direttamente a un controllo provider specifico e archivia i dettagli relativi a una connessione nelle proprietà del componente eredita dalla base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Ad esempio, in ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> proprietà, un punto di connessione provider mantiene il tipo di interfaccia restituito dal provider. Se il provider e consumer in una connessione che funzionano con lo stesso tipo di interfaccia, i controlli sono compatibili e in grado di creare una connessione diretta. Se il provider e l'utente non può funzionare con lo stesso tipo di interfaccia, che sono incompatibili e devono usare un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto da tradurre il punto di connessione provider <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> valore in un tipo che il consumer può funzionare con. Un'altra proprietà ereditata importante è il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> proprietà che fornisce un nome descrittivo da visualizzare nell'interfaccia utente per gli utenti di scegliere una connessione del provider punto durante la creazione di connessioni. Il nome visualizzato è il parametro obbligatorio quando gli sviluppatori aggiungono un `ConnectionProvider` attributo al metodo di callback in un controllo di provider. Ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> proprietà risulta utilizzabile anche, come indicato in precedenza, perché fornisce un identificatore univoco per un punto di connessione del provider nel caso in cui un provider include più punti di connessione. Un provider può disporre di più <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> gli oggetti definiti in essa contenuti e in questo caso, quando gli sviluppatori aggiungono il `ConnectionProvider` attributo a un metodo, specifichino un valore di ID per distinguere ogni punto di connessione. Un'altra proprietà ereditata significativa è la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> proprietà, che indica se un punto di connessione del provider possa connettersi contemporaneamente a più consumer. Questo valore della proprietà `true` per impostazione predefinita per i punti di connessione provider (mentre il valore predefinito è `false` per i punti di connessione consumer).  
  
 Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe aggiunge diversi metodi univoci ai membri del componente eredita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> che consente di recuperare un'istanza dell'interfaccia che il metodo di callback restituirà al consumer. Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> che consente di recuperare ulteriori interfacce del consumer che fanno parte di una connessione esistente, ma non le interfacce consentono di stabilire la connessione.  
  
   
  
## Examples  
 Esempio di codice seguente vengono illustrati modi semplici per creare una connessione in modo dichiarativo, a livello di codice o tramite l'interfaccia utente, in ogni caso, utilizzare un provider punto di connessione.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer di una connessione.  
  
-   Una pagina Web per tutti i controlli host ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che viene assegnato ai `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e controlli. Il file di origine contiene una semplice interfaccia denominata `IZipCode`. È inoltre disponibile una <xref:System.Web.UI.WebControls.WebParts.WebPart> classe denominata `ZipCodeWebPart` che implementa l'interfaccia e funge da controllo provider. Relativo `ProvideIZipCode` è il metodo di callback che implementa l'unico membro dell'interfaccia. Il metodo restituisce semplicemente un'istanza dell'interfaccia. Si noti che il metodo è contrassegnato con un `ConnectionProvider` attributo nei relativi metadati. Si tratta del meccanismo per identificare il metodo come metodo di callback per il punto di connessione del provider. L'altro <xref:System.Web.UI.WebControls.WebParts.WebPart> classe è denominata `WeatherWebPart`, e funge da consumer per la connessione. Questa classe ha un metodo denominato `GetZipCode` che ottiene un'istanza di `IZipCode` interfaccia dal controllo del provider. Si noti che questo metodo è contrassegnato come metodo di punto di connessione del consumer con una `ConnectionConsumer` attributo nei relativi metadati. Si tratta del meccanismo per identificare il metodo del punto di connessione nel controllo consumer.  
  
 Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Nella parte superiore sono `Register` direttive per registrare i controlli personalizzati che formano la connessione e il controllo utente che consente agli utenti di modificare le modalità di visualizzazione della pagina. La connessione stessa viene creata in modo dichiarativo all'interno di `<staticconnections>` elemento nella pagina. Ciò viene indicata la modalità di creazione di una connessione-nota il `ProviderConnectionPointID` attributo il `<asp:webpartconnection>` elemento. È inoltre possibile creare la connessione a livello di codice; il codice per questo scopo è presente il `Button1_Click` metodo. In questo caso, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto viene creato e quindi passato a un metodo che crea l'effettiva connessione. Se la connessione viene creata in modo dichiarativo o a livello di codice, i punti di connessione devono sempre specificati per il provider e consumer. Il `Button2_Click` metodo accessi il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> gli oggetti per il provider e consumer e scrive alcuni valori della proprietà a un'etichetta nella pagina.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, fare clic sui **dettagli punto di connessione** pulsante. Informazioni sui punti di connessione provider e consumer stabiliti nella connessione dichiarativa. Successivamente, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina in modalità di connessione. Nel menu dei verbi di **ZIP Code Consumer** <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (rappresentato da una freccia verso il basso nella barra del titolo), fare clic sul verbo di connessione. La connessione viene visualizzata l'interfaccia utente, creato automaticamente dal `<asp:connectionszone>` controllo dichiarato nella pagina. Si tratta di un altro modo per creare una connessione (tramite l'interfaccia utente), insieme ai metodi strumenti dichiarativi e programmatici indicati in precedenza. Fare clic sui **Disconnect** pulsante per terminare la connessione statica esistente. Un ** che è un'istanza dell'interfaccia di un provider restituisce ai consumer per stabilire una connessione. Questo metodo restituisce un oggetto dal controllo del provider che è un'istanza dell'interfaccia utilizzata per stabilire una connessione. Il tipo dell'oggetto sarà il tipo dell'interfaccia implementata. Ad esempio, due interfacce implementate per le connessioni Web part sono set di controlli ** e **. Quando il ** metodo viene chiamato su un ** dell'oggetto, se il provider associato implementa una di queste interfacce, l'oggetto restituito sarà dello stesso tipo. Il ** metodo viene chiamato da ** oggetti durante l'attivazione di una connessione. Si tratta di una fase critica che avvia una connessione e avvia il processo che consente a due controlli condividere i dati effettivamente.  
  
 Il controllo di consumer in una connessione deve essere in grado di funzionare con lo stesso tipo dell'interfaccia come il provider.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metodo nel controllo provider che restituisce un'istanza di interfaccia ai consumer per stabilire una connessione.</param>
        <param name="interfaceType">Classe <see cref="T:System.Type" /> dell'interfaccia che il provider assegna ai consumer.</param>
        <param name="controlType">Classe <see cref="T:System.Type" /> del controllo provider a cui è associato il punto di connessione.</param>
        <param name="displayName">Nome descrittivo per il punto di connessione provider visualizzato agli utenti nell'interfaccia utente di connessione.</param>
        <param name="id">Identificatore univoco per il punto di connessione provider.</param>
        <param name="allowsMultipleConnections">Valore Boolean indicante se il punto di connessione provider può eseguire più connessioni simultanee con i consumer.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Queste interfacce, che non sono quelle predefinite utilizzate per stabilire una connessione, vengono chiamate interfacce secondarie.  
  
 Il  metodo fornisce un modo per restituire una raccolta di riferimenti alle interfacce secondarie, esattamente come il  metodo restituisce un riferimento all'interfaccia predefinita. Il  metodo la  classe non contiene alcuna implementazione; restituisce una raccolta vuota di interfacce secondarie.  
  
 Per implementare questo metodo, è necessario ereditare la  classe ed eseguire l'override di questo metodo, restituendo un set specifico di interfacce secondarie. Tuttavia, nei casi in cui si desidera semplicemente a stabilire una connessione e non si estende la classe, è necessario chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> per restituire un oggetto punto di connessione esistente da un provider.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come derivare il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe per creare un punto di connessione del provider personalizzato.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Un file di origine che contiene un provider <xref:System.Web.UI.WebControls.WebParts.WebPart> controllare, un consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto.  
  
-   Una pagina Web che ospita i controlli in una connessione statica.  
  
-   Una spiegazione su come eseguire il codice di esempio.  
  
 La prima parte dell'esempio di codice è l'origine per il provider e consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> classe, denominata `TableProviderConnectionPoint`. Si noti che il costruttore del `TableProviderConnectionPoint` classe chiama il costruttore basa, passando i parametri obbligatori come indicato nella sezione dei parametri. Si noti inoltre che nel `TableProviderWebPart` (classe), il `GetConnectionInterface` metodo viene specificato come metodo di callback per le connessioni e il `ConnectionProvider` attributo dichiara l'oggetto personalizzato `TableProviderConnectionPoint` come parametro. Ciò dimostra come creare un punto di connessione del provider personalizzato e associarlo a un controllo di provider. Questo esempio si presuppone che il codice sorgente viene compilato in modo dinamico, pertanto è consigliabile inserire il file di codice di origine nella sottocartella App_Code dell'applicazione Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 La seconda parte dell'esempio di codice è la pagina Web che ospita i controlli personalizzati in una connessione Web part statica. Nella parte superiore della pagina è una `Register` direttiva per dichiarare un prefisso e lo spazio dei nomi per i controlli personalizzati. La connessione viene dichiarata utilizzando un `<asp:webpartconnection>` controlli elemento e il provider e consumer sono dichiarati all'interno di un `<asp:webpartzone>` elemento.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Caricare la pagina in un browser. La connessione tra i controlli già esiste e il consumer consente di visualizzare i dati dal provider, perché la connessione è stata dichiarata come statica nella pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> è <see langword="null" />.  \- o -  <paramref name="interfaceType" /> è <see langword="null" />.  \- o -  <paramref name="controlType" /> è <see langword="null" />.  \- oppure -  <paramref name="displayName" /> è <see langword="null" /> o una stringa vuota ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> non è lo stesso tipo del controllo provider, né una classe valida da esso derivata.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che funge da provider in una connessione web part.</param>
        <summary>Richiama il metodo di callback in un controllo provider che ottiene un'istanza di interfaccia da restituire ai consumer.</summary>
        <returns>Classe <see cref="T:System.Object" /> che rappresenta un'istanza dell'interfaccia restituita da un provider ai consumer per stabilire una connessione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce un oggetto dal controllo del provider che è un'istanza dell'interfaccia utilizzata per stabilire una connessione. Il tipo dell'oggetto sarà il tipo dell'interfaccia implementata. Ad esempio, due interfacce implementate per le connessioni Web part sono set di controlli <xref:System.Web.UI.WebControls.WebParts.IWebPartField> e <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Quando il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo viene chiamato su un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dell'oggetto, se il provider associato implementa una di queste interfacce, l'oggetto restituito sarà dello stesso tipo.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo viene chiamato da <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetti durante l'attivazione di una connessione. Si tratta di una fase critica che avvia una connessione e avvia il processo che consente a due controlli condividere i dati effettivamente.  
  
 Il controllo di consumer in una connessione deve essere in grado di funzionare con lo stesso tipo dell'interfaccia come il provider. In caso contrario, i controlli sono incompatibili e <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto deve essere utilizzato per stabilire una connessione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che funge da provider in una connessione web part.</param>
        <summary>Ottiene in insieme facoltativo di interfacce secondarie che possono essere supportate da un punto di connessione provider.</summary>
        <returns>Classe <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> di interfacce aggiuntive fornite dal controllo che funge da provider.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un oggetto punto di connessione provider ha sempre un'interfaccia predefinita che viene usata per stabilire una connessione con i consumer. Un'istanza dell'interfaccia predefinita viene recuperata chiamando il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo su un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto.  
  
 Tuttavia, alcuni controlli provider implementerà più interfacce di fornire agli utenti come parte di una connessione. Queste interfacce, che non sono quelle predefinite utilizzate per stabilire una connessione, vengono chiamate interfacce secondarie. Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> metodo fornisce un modo per restituire una raccolta di riferimenti alle interfacce secondarie, esattamente come il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> metodo restituisce un riferimento all'interfaccia predefinita.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> metodo la <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> classe non contiene alcuna implementazione; restituisce una raccolta vuota di interfacce secondarie. Per implementare questo metodo, è necessario ereditare la <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> classe ed eseguire l'override di questo metodo, restituendo un set specifico di interfacce secondarie.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>