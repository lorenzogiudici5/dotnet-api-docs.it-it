<Type Name="WebPartManager" FullName="System.Web.UI.WebControls.WebParts.WebPartManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6f5a41f1cc586a7365118c9cc1c24fdfb3cee6f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36386609" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebPartManager : System.Web.UI.Control, System.Web.UI.INamingContainer, System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebPartManager extends System.Web.UI.Control implements class System.Web.UI.INamingContainer, class System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
  <TypeSignature Language="VB.NET" Value="Public Class WebPartManager&#xA;Inherits Control&#xA;Implements INamingContainer, IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartManager : System::Web::UI::Control, System::Web::UI::INamingContainer, System::Web::UI::WebControls::WebParts::IPersonalizable" />
  <TypeSignature Language="F#" Value="type WebPartManager = class&#xA;    inherit Control&#xA;    interface INamingContainer&#xA;    interface IPersonalizable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.WebParts.IPersonalizable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.WebPartManagerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ViewStateModeById</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Serves as the central class of the Web Parts control set, managing all the Web Parts controls, functionality, and events that occur on a Web page.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo funziona come l'hub o centro di controllo di un'applicazione Web part. Deve esistere - un unico -<xref:System.Web.UI.WebControls.WebParts.WebPartManager> istanza del controllo in ogni pagina che utilizza i controlli Web part. Come per la maggior parte degli aspetti delle applicazioni Web part, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo funziona solo con gli utenti autenticati. Inoltre, la relativa funzionalità funziona quasi interamente con i controlli server che risiedono in aree di Web part che ereditano dal <xref:System.Web.UI.WebControls.WebParts.WebZone> classe. Controlli server che si trovano in una pagina di fuori di queste zone possono disporre di poche funzionalità Web part o l'interazione con il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo.  
  
 Come l'hub per le funzionalità Web part in una pagina, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo esegue i tipi di attività descritte nella tabella seguente.  
  
|Categoria attività|Funzionamento del controllo|  
|-------------------|---------------------------|  
|I controlli Web part di rilevamento|Tiene traccia di molti tipi diversi di controlli in una pagina che forniscono le funzionalità di Web part, tra cui <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, le connessioni, zone e altri utenti.|  
|Aggiunta e rimozione di controlli Web part|Fornisce i metodi per l'aggiunta, eliminazione e la chiusura <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli in una pagina.|  
|Amministrazione delle connessioni|Consente di creare connessioni tra i controlli e monitora le connessioni, nonché i processi di aggiunta e rimozione.|  
|Personalizzazione di pagine e controlli|Consente agli utenti di spostare i controlli in posizioni diverse in una pagina e avvia le viste in cui gli utenti possono modificare l'aspetto, proprietà e il comportamento dei controlli. Gestisce le impostazioni di personalizzazione specifiche dell'utente in ogni pagina.|  
|Per alternare tra diverse visualizzazioni di pagina|Consente di alternare diverse viste specifiche della pagina, in modo che gli utenti possono eseguire determinate attività, ad esempio la modifica di layout di pagina o controlli di modifica.|  
|Generazione di eventi del ciclo di vita Web part|Definisce, genera e consente agli sviluppatori di gestire gli eventi del ciclo di vita dei controlli Web part, ad esempio quando i controlli sono da aggiungere, spostare, connesso o eliminare.|  
|L'abilitazione di importazione ed esportazione di controlli|Esporta flussi XML che contengono lo stato delle proprietà di <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e consente agli utenti di importare i file per facilitare la personalizzazione di controlli complessi in altre pagine o siti.|  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe dispone di un ampio set di proprietà. Coerente con il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> ruolo degli altri controlli, dispone di una serie di proprietà che fanno riferimento a raccolte di controlli Web part o altri oggetti di Web part speciali. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> proprietà sono tutte le raccolte utilizzate dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo per il rilevamento e altro attività di gestione.  
  
 Un altro gruppo di proprietà contiene avvisi personalizzabili che si applicano in determinati scenari che si verificano in un'applicazione Web part. Tra cui la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A>, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A>e il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> proprietà.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe esegue l'override di alcune delle proprietà ereditate, vengono utilizzate per molti controlli server Web. Tra cui la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> proprietà.  
  
 Infine, è disponibile un gruppo di proprietà utili per accedere allo stato corrente dell'applicazione. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> proprietà indica la modalità di visualizzazione corrente di una pagina. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A> proprietà indica se un controllo è consentito eseguire il rendering di uno script sul lato client, utili nelle situazioni in cui gli utenti potrebbero disporre di browser con funzionalità diverse o scripting disattivata. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> proprietà è utile per fare riferimento a una classe di utilità che contiene le chiamate a un numero di metodi Web part che vengono utilizzati per casi di estensibilità. Nascondendo le chiamate a questi metodi in una classe separata (il <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> classe), il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> API della classe è stata semplificata. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà fornisce l'accesso agli oggetti di personalizzazione che archiviano le impostazioni di personalizzazione degli utenti e rendere persistenti i dati in un archivio permanente. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> cui è indicata dalla proprietà <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo in una pagina è attualmente selezionata per l'utente o l'applicazione. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> proprietà indica se i dati di personalizzazione in un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo è stato modificato.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo contiene cinque modalità di visualizzazione predefinite o viste di una pagina Web. Gli sviluppatori possono estendere questa funzionalità, la creazione di modalità di visualizzazione personalizzato estendendo i tipi, ad esempio il <xref:System.Web.UI.WebControls.WebParts.WebZone> classe o il <xref:System.Web.UI.WebControls.WebParts.ToolZone> classe. Gli utenti possono passare una pagina in diverse modalità di visualizzazione, purché il tipo corretto di controlli che corrispondono a una determinata modalità di visualizzazione sono presenti in una pagina.  
  
> [!NOTE]
>  È possibile estendere questa funzionalità in modo che gli utenti possono passare in modalità di visualizzazione personalizzato senza una zona corrispondente nella pagina. Tuttavia, il comportamento predefinito è che le modalità di visualizzazione corrispondono alle aree.  
  
 La modalità di visualizzazione standard sono rappresentate dai campi pubblici nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe. Nella tabella seguente vengono riepilogati i campi e le modalità di visualizzazione che cui fanno riferimento. La modalità di visualizzazione corrente di una pagina, come indicato in precedenza, viene sempre fatto riferimento nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> proprietà e il set di modalità di visualizzazione che è possibile eseguire in una pagina specifica, in base al tipo di zone che sono presenti nella pagina contenuto nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà.  
  
|Campo|Visualizzare i dettagli di modalità|  
|-----------|--------------------------|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>|La visualizzazione di utente normale di una pagina Web. il valore predefinito e più comune di modalità di visualizzazione.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>|La vista in cui gli utenti possono modificare o eliminare i controlli per modificare il layout di pagina.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>|La vista in cui una modifica interfaccia utente (UI) diventa visibile; gli utenti possono modificare l'aspetto, proprietà e comportamento dei controlli che sono visibili in modalità browse normale.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>|La vista in cui un catalogo dell'interfaccia utente diventa visibile; gli utenti possono aggiungere controlli a una pagina da cataloghi dei controlli disponibili.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>|La vista in cui una connessione dell'interfaccia utente diventa visibile; gli utenti possono connettersi, gestire o interrompere le connessioni tra i controlli.|  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo contiene anche un numero di eventi critici del ciclo di vita di pagine Web part e controlli. Questi eventi forniscono un controllo a livello di codice preciso del comportamento dei controlli Web part. La maggior parte dei metodi riguardano direttamente <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli (o altri controlli server o un utente che vengono inseriti nella <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone in modo che funzionano come <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli). Tuttavia, alcuni eventi relativi allo stato della pagina o le connessioni nella pagina. Nella tabella seguente sono elencati gli eventi disponibili e vengono riepilogati gli scopi.  
  
> [!NOTE]
>  In tutti i casi nella tabella seguente, la parola "controllo" fa riferimento a un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo o qualsiasi controllo server che si trova in una zona e viene eseguito il wrapping con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto in fase di esecuzione.  
  
|event|Descrizione|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>|Si verifica poco prima che un controllo viene aggiunto a una pagina per verificare che sia autorizzato.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>|Si verifica dopo che sono state attivate tutte le connessioni in una pagina.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>|Si verifica immediatamente prima del processo di attivazione di tutte le connessioni in una pagina.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>|Si verifica quando viene modificata la modalità di visualizzazione corrente di una pagina.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>|Si verifica poco prima del processo di modifica modalità di visualizzazione della pagina.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>|Si verifica dopo la selezione di un controllo è stata annullata.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>|Si verifica poco prima del processo di annullare la selezione di un controllo.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>|Si verifica dopo che un controllo è stato aggiunto a una zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding>|Si verifica poco prima del processo di aggiunta di un controllo a una zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>|Si verifica dopo la chiusura di un controllo (viene rimossa da una pagina).|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>|Si verifica poco prima del processo di chiusura di un controllo.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>|Si verifica dopo che un'istanza di un controllo dinamico (che è stato creato a livello di programmazione o aggiunti da un catalogo) è stata eliminata definitivamente.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting>|Si verifica poco prima del processo di eliminazione di un controllo dinamico.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>|Si verifica dopo che un controllo è stato spostato all'interno dell'area o in un'altra zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>|Si verifica poco prima del processo di spostamento di un controllo.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>|Si verifica dopo due controlli selezionati per la partecipazione in una connessione stabilita la connessione.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>|Si verifica poco prima del processo di connessione di due controlli.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>|Si verifica dopo la disconnessione di due controlli connessi.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>|Si verifica immediatamente prima del processo di disconnessione due controlli.|  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo dispone di numerosi metodi per la gestione delle pagine Web part. Un ampio set di metodi, non elencati in questo caso, i metodi i cui nomi rispettare il formato di via*EventName*. Questi metodi in genere generano gli eventi associati e fornire l'evento con un gestore di tipo <xref:System.Web.UI.WebControls.WebParts.WebPartEventHandler>. La maggior parte di questi metodi possono essere sostituita dagli sviluppatori che ereditano dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe. Inoltre, gli sviluppatori di pagina possono fornire gestori personalizzati per gli eventi associati a questi metodi. Ad esempio, nel caso del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento, lo sviluppatore della pagina è stato possibile aggiungere un' `OnWebPartAdded` attributo di `<asp:webpartmanager>` elemento nel markup di una pagina Web e quindi assegnarlo nome di un metodo personalizzato per l'attributo per la gestione personalizzata per l'evento. L'attributo corrisponde alla <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> metodo e questo modello di base di gestione degli eventi funziona per la maggior parte delle Web part eventi e i relativi metodi associati.  
  
 Inoltre, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo dispone di metodi particolari per l'attività di gestione <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli (e i controlli server o utente usato come <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli). Questi metodi includono <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A>.  
  
 Un altro set di metodi è specializzato per le connessioni. Alcuni esempi di questi metodi sono <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>.  
  
 Infine, alcuni <xref:System.Web.UI.WebControls.WebParts.WebPartManager> metodi riguardano la funzionalità di personalizzazione. Tra cui <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A>.  
  
 Per ulteriori informazioni su altri <xref:System.Web.UI.WebControls.WebParts.WebPartManager> metodi accessibili tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> proprietà, vedere la documentazione per il <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo dichiarativo e a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina Web part.  
  
-   Una pagina Web che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connesso, e un `<asp:webpartmanager>` elemento.  
  
-   Un file di codice sorgente che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un'interfaccia personalizzata.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 Il controllo utente dispone di un controllo elenco a discesa che mostra la modalità di visualizzazione disponibili in una pagina, in base ai controlli Web part presenti nella pagina. Nella pagina Web per questo esempio di codice, il controllo utente viene dichiarato immediatamente sotto il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> elemento nel markup della pagina ed è presente un `Register` direttiva nella parte superiore della pagina Web per registrare il controllo. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/DisplayModeMenuVB.ascx#6)]  
  
 Il markup dichiarativo per la pagina Web contiene `Register` direttive per il controllo utente e i controlli personalizzati. È un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento per contenere i controlli personalizzati e un `<asp:connectionszone>` elemento. La pagina contiene anche codice inline che gestisce gli eventi relativi alla connessione per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare; è possibile visualizzare l'effetto di questo codice come si connettono o disconnettono controlli.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 La terza parte dell'esempio è il codice sorgente per i controlli. Si noti che vi sia un'interfaccia denominata `IZipCode`, e questa interfaccia viene implementata nel `ZipCodeWebPart` classe. Questa classe ha un metodo di callback speciale denominato `ProvideIZipCode` che funge da provider. L'altro tipo, denominato `WeatherWebPart`, viene inoltre implementata con un metodo speciale denominato `GetIZipCode`, che consente il controllo di agire come un consumer di altro controllo.  
  
 Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice si presuppone che sia stato compilato l'origine in un assembly e il `Register` direttiva della pagina Web fa riferimento il nome dell'assembly. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_SimpleConnection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_SimpleConnection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/ZipCodeComponent.vb#2)]  
  
 Dopo aver caricato la pagina Web in un browser, fare clic sui **modalità di visualizzazione** controllo elenco a discesa e selezionare **Connect** per passare alla modalità di connessione. La connessione utilizza la modalità di `<asp:connectionszone>` elemento consentono di creare connessioni tra i controlli. Nella modalità di connessione, fare clic sulla freccia verso il basso nella barra del titolo del **CAP** per attivare il menu dei verbi di controllo e quindi fare clic su **Connect**. Dopo la connessione dell'interfaccia utente, scegliere il **creare una connessione a un Consumer** collegamento. Viene visualizzata una cella contenente un controllo elenco a discesa. Selezionare **Weather Control** nell'elenco a discesa e quindi fare clic su **Connect** per completare la connessione dei due controlli. Fare clic su **Close**e quindi usare il **modalità di visualizzazione** elenco a discesa per restituire la pagina sulla normale modalità browse. È possibile immettere un codice postale, e il controllo consumer verrà aggiornato con il valore che immesso. Poiché il `ZipCode` proprietà è stata contrassegnata con il `Personalizable` attributo nel codice sorgente, il valore della proprietà verrà mantenuto tra le sessioni del browser, quindi salvare il valore immesso dall'utente. Un controllo più sofisticato di consumer è stato possibile richiedere le informazioni sul codice postale, cercare informazioni meteorologiche in base al codice e visualizzare a un utente.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Il <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo è progettato per essere esteso. Perché è in modo centrale per le applicazioni Web part, quando si desidera estendere alcuni tipi specifici o controllare il set di controlli Web part in molti casi è anche necessario estendere la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe, poiché è probabile che alcune proprietà o un metodo che è necessario per rendere  il tipo personalizzato funziona nel contesto di un'applicazione Web part. Le Web part fare riferimento alla documentazione (vedere <see cref="N:System.Web.UI.WebControls.WebParts" />), quando si spiega come estendere una Web part digitare, spesso menziona quali azioni devono essere eseguite per estendere la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe nonché o viene illustrato come estendere in un esempio di codice.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.%23ctor%2A> costruttore inizializza diverse variabili importanti utilizzate dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Un'assegnazione che influisce direttamente sulla tutte le pagine Web part è il fatto che la modalità di visualizzazione pagina predefinito è impostata sulla modalità browse (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateConnections">
      <MemberSignature Language="C#" Value="protected virtual void ActivateConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ActivateConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ActivateConnections ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ActivateConnections();" />
      <MemberSignature Language="F#" Value="abstract member ActivateConnections : unit -&gt; unit&#xA;override this.ActivateConnections : unit -&gt; unit" Usage="webPartManager.ActivateConnections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes active all connections on a Web page that are currently inactive.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> metodo viene chiamato su ogni richiesta a una pagina per attivare le connessioni esistenti tra <xref:System.Web.UI.WebControls.WebParts.WebPart> e altri controlli server che risiedono <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone. In alcuni casi, ad esempio se si verifica un conflitto nelle connessioni in corso l'attivazione, questo metodo, a sua volta chiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> metodo per terminare la connessione problematica. Durante il processo di disconnessione di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento viene generato. In genere gli sviluppatori possono annullare questo evento, ma nel caso in cui si tratta di un conflitto tra le connessioni che non può essere annullata, perché il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo è necessaria risolvere il conflitto per completare il processo di attivazione delle connessioni. Per informazioni dettagliate, vedere <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart AddWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.WebPart AddWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int32 zoneIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::WebPart ^ AddWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Web::UI::WebControls::WebParts::WebPartZoneBase ^ zone, int zoneIndex);" />
      <MemberSignature Language="F#" Value="member this.AddWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.AddWebPart (webPart, zone, zoneIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="zone" Type="System.Web.UI.WebControls.WebParts.WebPartZoneBase" />
        <Parameter Name="zoneIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="webPart">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (or server or user control) to be added to a Web page or opened on a page.</param>
        <param name="zone">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> that <c>webPart</c> is being added to.</param>
        <param name="zoneIndex">An integer that represents the ordinal position that <c>webPart</c> occupies in <c>zone</c>, relative to other controls in <c>zone</c>.</param>
        <summary>Provides the standard programmatic method for adding <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls to a Web page.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control that was added to the page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> metodo viene utilizzato sia per aggiungere nuovi dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli a una pagina e a riaprire controlli statici o dinamici che sono stati chiusi in precedenza in una pagina. Quando viene chiamato il metodo per aggiungere un nuovo controllo, crea effettivamente una copia del controllo a cui fa riferimento il `webPart` parametro. Viene generato un nuovo ID per la copia del controllo, gli sviluppatori devono fare riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo restituito dal metodo per ottenere il nuovo valore di ID. Quando il metodo viene chiamato per riaprire un controllo chiuso in precedenza, restituisce un riferimento diretto al controllo fa riferimento il `webPart` parametro.  
  
> [!IMPORTANT]
>  È consigliabile utilizzare sempre il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> metodo, invece che al <xref:System.Web.UI.ControlCollection.Add%2A> metodo per la raccolta di controlli a cui fanno riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A?displayProperty=nameWithType> proprietà da aggiungere <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli a livello di codice alla pagina, perché in uso il <xref:System.Web.UI.ControlCollection.Add%2A> metodo genera un'eccezione. Per aggiungere un controllo che non è un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (in altre parole, un controllo server che verrà eseguito il wrapping con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo in fase di esecuzione), è opportuno chiamare dapprima la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> metodo per creare il controllo e quindi chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> metodo per aggiungere il controllo. Per una dimostrazione di questo approccio, vedere la sezione esempio.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato l'utilizzo del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> metodo per aggiungere un controllo server a livello di codice a una pagina. Il markup della pagina contiene un oggetto vuoto `<asp:webpartzone>` elemento e un `<asp:webpartmanager>` elemento. La prima volta il **Add Calendar** fa clic sul pulsante, il codice nel caso in cui gestore crea un <xref:System.Web.UI.WebControls.Calendar> controllare e lo aggiunge a una zona come una <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> dell'oggetto, chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> (metodo).  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.  \- or -  <paramref name="zone" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="zone" /> is not registered in the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control's collection of zones.  \- or -  <paramref name="webPart" /> is already in <paramref name="zone" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="zoneIndex" /> is less than zero.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AuthorizeWebPart">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler AuthorizeWebPart;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler AuthorizeWebPart" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AuthorizeWebPart As WebPartAuthorizationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartAuthorizationEventHandler ^ AuthorizeWebPart;" />
      <MemberSignature Language="F#" Value="member this.AuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler " Usage="member this.AuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" /> method is called to determine whether a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control can be added to a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento si verifica ogni volta che un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo viene aggiunto a una pagina. Esistono diversi scenari comuni in cui un controllo può essere aggiunto a una pagina. Per una descrizione completa di questi, vedere la sezione Osservazioni per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo. Quando viene aggiunto un controllo, deve essere controllato per verificare se il relativo <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà è stata impostata e, in tal caso, se il controllo è autorizzato a essere aggiunto alla pagina.  
  
 Gli sviluppatori possono creare gestori eventi per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento per fornire filtri per i controlli. Se un controllo <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valore della proprietà non soddisfa i criteri nel codice del gestore eventi, il controllo non viene aggiunto alla pagina.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come impostare un gestore dell'evento personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento, che sostituisce automaticamente il valore predefinito <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> metodo.  
  
 Il codice di `mgr1_AuthorizeWebPart` metodo controlla se i controlli della pagina includono le rispettive <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> i valori delle proprietà è impostata su `user` e, in caso affermativo, restituisce `true`, ovvero che saranno autorizzati e aggiunto alla pagina. Ciò presuppone che l'approccio predefinito consiste nel consentire agli utenti di visualizzare i controlli di una pagina nell'ambito di personalizzazione utente. Si noti, tuttavia, nell'esempio uno dei controlli è relativa <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valore della proprietà è impostata su `admin`. Gli sviluppatori possono posizionare questo filtro in un controllo specializzato che è stato progettato per vedere solo gli utenti amministratori. Il controllo avrà esito negativo durante il controllo delle autorizzazioni di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento e non verranno visualizzati. Si noti che i controlli che non vi sono proprietà impostate siano visualizzati anche; Questi sono considerati non deve per essere parte di un filtro perché i relativi <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> non vengono impostate proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/CS/AuthorizeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/VB/AuthorizeWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" />
      </Docs>
    </Member>
    <Member MemberName="AvailableTransformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.TransformerTypeCollection AvailableTransformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.TransformerTypeCollection AvailableTransformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableTransformers As TransformerTypeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ AvailableTransformers { System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableTransformers : System.Web.UI.WebControls.WebParts.TransformerTypeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.TransformerTypeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> objects that are available for use in creating Web Parts connections between server controls.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection" /> che contiene un set di <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> oggetti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà Usa il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A> metodo per creare la raccolta. Per impostazione predefinita, vengono letti convertitori disponibili dal file di configurazione dell'applicazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWebPartConnecting">
      <MemberSignature Language="C#" Value="public virtual void BeginWebPartConnecting (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginWebPartConnecting(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginWebPartConnecting(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member BeginWebPartConnecting : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.BeginWebPartConnecting : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.BeginWebPartConnecting webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The control for which the connection is being formed.</param>
        <summary>Starts the process of connecting two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A> metodo esista affinché il processo di creare connessioni tra i controlli può essere eseguito in fasi distinte, fornendo agli sviluppatori un maggiore controllo sul processo di connessione. Il metodo esegue una serie di controlli iniziali per garantire che `webPart` è in uno stato in cui una connessione legittimamente può essere formata. Se `webPart` passa tutti i controlli, viene impostato come il controllo selezionato attualmente (vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> proprietà), e il processo di connessione può continuare.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current display mode on the page is not <see cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is closed.  \- or -  <paramref name="webPart" /> is not part of the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection.  -or -  <paramref name="webPart" /> is equal to the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> control.</exception>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che desiderano estendere il <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo potrebbe essere necessario eseguire l'override di questo metodo in una classe derivata. Uno degli approcci disponibili, è possibile chiamare il metodo di base e quindi aggiungere alcune per la gestione personalizzata; In alternativa, è possibile personalizzare completamente il processo di avvio di una connessione tra i controlli. È possibile ad esempio, verificare che determinati dati siano disponibili prima di creare la connessione.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting" />
      </Docs>
    </Member>
    <Member MemberName="BeginWebPartEditing">
      <MemberSignature Language="C#" Value="public virtual void BeginWebPartEditing (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginWebPartEditing(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginWebPartEditing(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member BeginWebPartEditing : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.BeginWebPartEditing : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.BeginWebPartEditing webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The control to be edited.</param>
        <summary>Starts the process of editing a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> metodo esista affinché il processo di modifica dei controlli può essere eseguito in fasi distinte, fornendo agli sviluppatori un maggiore controllo sul processo. Il metodo esegue una serie di controlli iniziali per garantire che `webPart` è in uno stato in cui sarà possibile modificarla. Se `webPart` passa tutti i controlli, viene impostato come il controllo selezionato attualmente (vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> proprietà), e può continuare il processo di modifica.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current display mode on the page is not <see cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is closed.  \- or -  <paramref name="webPart" /> is not part of the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection.  -or -  <paramref name="webPart" /> is equal to the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> control.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing" />
      </Docs>
    </Member>
    <Member MemberName="BrowseDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode BrowseDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode BrowseDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BrowseDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ BrowseDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable BrowseDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the default display mode for pages that contain Web Parts controls. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> campo fa riferimento a un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> oggetto che viene creato e contenuto di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Poiché si tratta di un oggetto statico, è possibile fare riferimento ad esso direttamente tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe senza utilizzare un'istanza del controllo.  
  
 Quando una pagina che contiene le Web part controlli primo caricamento, è presente nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modalità browse) per impostazione predefinita. Quando gli utenti cercano semplicemente come se fossero in una pagina Web normale, la pagina rimane in modalità browse. Se gli utenti desiderano personalizzare layout, controlli, l'aspetto o il comportamento di una pagina, la pagina dovranno passare a una delle modalità di visualizzazione speciali disponibili tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> campo a livello di codice. Il codice consente di popolare un elenco di riepilogo a discesa con le modalità di visualizzazione supportate, in questo caso sono esplorazione e progettazione. Si noti che, nel `Page_PreRender` metodo, il codice controlla se l'oggetto corrente <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> è impostata su <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>. In tal caso, `Label1` saranno visibili in caso contrario, `Label1` verranno nascoste.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_BrowseDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_BrowseDisplayMode/CS/wpmgrBrowseDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_BrowseDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_BrowseDisplayMode/VB/wpmgrBrowseDisplayModevb.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, si è in modalità browse per impostazione predefinita. Si noti l'etichetta nella pagina che indica che è in modalità browse. Utilizzare il controllo elenco a discesa per passare alla modalità progettazione. Si noti che, a causa di codice il `Page_PreRender` metodo, l'etichetta ora è nascosto.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CanConnectWebParts">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Checks the <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls that will be participating in a connection to determine whether they are capable of being connected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> metodo viene utilizzato per determinare se due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli possono essere connessi. Il metodo viene in genere utilizzato come controllo condizionale prima di chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> metodo controlla una serie di criteri che devono essere soddisfatte prima di due controlli possono creare una connessione. Nell'elenco seguente vengono riepilogati i criteri principali per stabilire una connessione. Se vengono soddisfatti tutti i criteri (oltre ad alcune condizioni interne aggiuntive), il metodo restituisce `true`, vale a dire che i controlli possono essere connessi:  
  
-   I controlli di provider e consumer non possono essere `null`, e devono essere contenuti nella raccolta di controlli a cui fanno riferimento le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà.  
  
-   Il provider e l'utente non può essere lo stesso controllo. In altre parole un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo non è possibile connettersi a se stessa.  
  
-   Il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetti (punti di connessione) per il provider e il consumer non possono essere `null`.  
  
-   Il provider e l'utente non può essere chiusa (né controllo <xref:System.Web.UI.WebControls.WebParts.WebPart.IsClosed%2A> proprietà può essere `true`).  
  
-   Il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> proprietà del controllo punto di connessione deve corrispondere al tipo del controllo del consumer e provider.  
  
-   Entrambi i punti di connessione devono essere abilitati (loro <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> metodi devono restituire entrambi `true`).  
  
-   Ogni punto di connessione necessario non tentare di creare più connessioni rispetto a quello specificato nel proprio <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> proprietà.  
  
-   Se un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto (trasformatore) è necessaria per connettersi controlli incompatibili, non può essere `null`. Tuttavia, se i controlli sono già compatibili, deve essere il trasformatore `null`.  
  
-   Il trasformatore (se usati) necessario fare riferimento nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A> insieme.  
  
-   Il trasformatore (se usati) deve avere le interfacce che sono compatibili con il provider e consumer in modo che possa trasformare i dati tra i due controlli. Devono essere compatibili anche interfacce secondarie del consumer e provider.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
      </Docs>
    </MemberGroup>
    <Member MemberName="CanConnectWebParts">
      <MemberSignature Language="C#" Value="public bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint);" />
      <MemberSignature Language="F#" Value="member this.CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint -&gt; bool" Usage="webPartManager.CanConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Parameters>
      <Docs>
        <param name="provider">The control that provides data to <c>consumer</c> when the controls are connected.</param>
        <param name="providerConnectionPoint">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> that enables <c>provider</c> to participate in a connection.</param>
        <param name="consumer">The control that receives data from <c>provider</c> when the controls are connected.</param>
        <param name="consumerConnectionPoint">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> that acts as a callback method so that <c>consumer</c> can participate in a connection.</param>
        <summary>Checks the <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls that will be participating in a connection to determine whether they are capable of being connected, when the consumer and provider controls have compatible interfaces and a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> object is not needed.</summary>
        <returns>A Boolean value that indicates whether <paramref name="provider" /> and <paramref name="consumer" /> can be connected.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato per connettersi `provider` e `consumer` quando entrambi i controlli hanno connessione compatibili, tipi di punti in modo che un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto non è necessaria. È possibile utilizzare questo metodo per verificare che i due controlli possono essere connessi prima di chiamare <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> per creare una connessione a livello di codice.  
  
 Questo overload utilizza la stessa implementazione come il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> overload del metodo, con l'unica eccezione che questo overload non richiede un trasformatore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare questo metodo.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina Web part.  
  
-   Una pagina Web che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connesso, un `<asp:webpartmanager>` elemento e del codice di gestione degli eventi che crea una connessione utilizzando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> metodo.  
  
-   Un file di codice sorgente che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un'interfaccia personalizzata.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Il markup dichiarativo per la pagina Web contiene `Register` direttive per il controllo utente e i controlli personalizzati. È un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento per contenere i controlli personalizzati e un `<asp:connectionszone>` elemento. Si noti che il `Page_Load` metodo, il codice controlla se la connessione possa essere apportata e, in caso affermativo, definisce un provider, un consumer e i rispettivi punti di connessione e quindi aggiunge una nuova connessione al set di connessioni statiche a cui fanno riferimento le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A>proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La terza parte dell'esempio è il codice sorgente per i controlli. Contiene un'interfaccia e due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, uno che agisce come un provider e l'altro come un consumer. Poiché dispongono di punti di connessione compatibile (entrambi riconoscono il `IZipCode` interfaccia), un trasformatore non è necessaria per stabilire la connessione. Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_StaticConnections#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_StaticConnections#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/ZipCodeComponent.vb#2)]  
  
 Dopo aver caricato la pagina Web in un browser, fare clic sui **modalità di visualizzazione** controllo elenco a discesa e selezionare **Connect** per passare alla modalità di connessione. La connessione utilizza la modalità di `<asp:connectionszone>` elemento consentono di creare connessioni tra i controlli. Nella modalità di connessione, fare clic sulla freccia verso il basso nella barra del titolo del **CAP** per attivare il menu dei verbi di controllo e quindi fare clic su **Connect**. Dopo che viene visualizzata l'interfaccia di connessione utente (UI), si noti che una connessione è stata già creata dal codice contenuto nel `Page_Load` metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConnectWebParts">
      <MemberSignature Language="C#" Value="public virtual bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPartTransformer transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPartTransformer ^ transformer);" />
      <MemberSignature Language="F#" Value="abstract member CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; bool&#xA;override this.CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; bool" Usage="webPartManager.CanConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <Parameter Name="transformer" Type="System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Parameters>
      <Docs>
        <param name="provider">The control that provides data to <c>consumer</c> when the controls are connected.</param>
        <param name="providerConnectionPoint">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> that acts as a callback method so that <c>provider</c> can participate in a connection.</param>
        <param name="consumer">The control that receives data from <c>provider</c> when the controls are connected.</param>
        <param name="consumerConnectionPoint">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> that acts as a callback method so that <c>consumer</c> can participate in a connection.</param>
        <param name="transformer">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> that enables an incompatible <c>provider</c> and <c>consumer</c> to connect.</param>
        <summary>Checks the <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls that will be participating in a connection to determine whether they are capable of being connected, and uses a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> object to create the connection between an incompatible consumer and provider.</summary>
        <returns>A Boolean value that indicates whether <paramref name="provider" /> and <paramref name="consumer" /> can form a connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato per connettersi `provider` e `consumer` quando entrambi i controlli dispongono incompatibili punti di connessione tipi, in modo che un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto sono obbligatorie. È possibile utilizzare questo metodo per verificare che i due controlli possono essere connessi prima di chiamare <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> per creare una connessione a livello di codice.  
  
 Questo overload utilizza la stessa implementazione come il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29> overload del metodo, con l'unica eccezione che l'overload richiede un trasformatore.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode CatalogDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode CatalogDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CatalogDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ CatalogDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable CatalogDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the display mode used for adding server controls from a catalog of controls to a Web page. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> campo fa riferimento a un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> oggetto che viene creato e contenuto di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Poiché si tratta di un oggetto statico, è possibile fare riferimento ad esso direttamente tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe senza utilizzare un'istanza del controllo.  
  
 Quando gli utenti desiderano aggiungere controlli a una pagina, se un catalogo di controlli server è disponibile, possono passare la pagina a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> (modalità catalogo), e viene visualizzata l'interfaccia utente del catalogo (UI). L'interfaccia utente per un catalogo Web part viene fornito da un <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> controllo della zona. Gli sviluppatori di aggiungeranno questa zona alla pagina in fase di progettazione e quindi aggiungeranno i controlli server all'area, in modo che gli utenti saranno in grado di aggiungere questi controlli alle pagine in fase di esecuzione. Dopo che lo sviluppatore è aggiunto a questi controlli, la modalità catalogo diventerà una modalità di visualizzazione supportate nella pagina quanto i controlli necessari per abilitare la modalità di catalogo.  
  
 Quando un utente passa da una pagina per catalogo modalità, la zona e tutti i controlli server che sono stati aggiunti diventano visibili e l'utente può selezionare i controlli nel catalogo per aggiungere o rimuovere controlli dalla pagina. Dopo che i controlli sono stati aggiunti alla pagina, vengono visualizzati in modalità browse normale e dell'aggiornamento della pagina.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> campo a livello di codice. Il codice consente di popolare un elenco di riepilogo a discesa con le modalità di visualizzazione supportate per la pagina, in questo caso sono esplorazione, progettazione e catalogo. La modalità del catalogo è disponibile perché il `<asp:CatalogZone>` elemento e i relativi elementi figlio della pagina Web. Si noti che, nel `Page_PreRender` metodo, il codice controlla se l'oggetto corrente <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> è impostata su <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>. In tal caso, `Label1` saranno visibili in caso contrario, `Label1` verranno nascoste.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CatalogDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CatalogDisplayMode/CS/wpmgrCatalogDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CatalogDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CatalogDisplayMode/VB/wpmgrCatalogDisplayModevb.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, si è in modalità browse per impostazione predefinita. Si noti che l'etichetta nella pagina è nascosta. Utilizzare il controllo elenco a discesa per passare alla modalità di catalogo. Si noti che, a causa di codice il `Page_PreRender` metodo, l'etichetta è visibile. È possibile selezionare il controllo nel catalogo e aggiungerlo a una delle due aree della pagina.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="CheckRenderClientScript">
      <MemberSignature Language="C#" Value="protected virtual bool CheckRenderClientScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckRenderClientScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CheckRenderClientScript () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckRenderClientScript();" />
      <MemberSignature Language="F#" Value="abstract member CheckRenderClientScript : unit -&gt; bool&#xA;override this.CheckRenderClientScript : unit -&gt; bool" Usage="webPartManager.CheckRenderClientScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks the capabilities of the browser making the request, and the value of the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" /> property, to determine whether to render client script.</summary>
        <returns>A Boolean value that indicates whether to render client script.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
      </Docs>
    </Member>
    <Member MemberName="CloseProviderWarning">
      <MemberSignature Language="C#" Value="public virtual string CloseProviderWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseProviderWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CloseProviderWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CloseProviderWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CloseProviderWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a warning that is displayed when a user closes a control that is acting as a provider to other controls in a connection.</summary>
        <value>Stringa che contiene il messaggio di avviso. Il valore predefinito è un messaggio specifico delle impostazioni cultura fornito da .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un utente chiude un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo, in genere viene visualizzato alcun messaggio. Per ulteriori informazioni sul significato di chiusura di un controllo, vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> metodo.  
  
 Tuttavia, quando un controllo è connesso a un altro controllo e funge da provider di dati per l'altro controllo, viene visualizzato un messaggio di avviso predefinito quando un utente tenta di chiudere il controllo. Il messaggio indica gli utenti che un controllo provider sta per chiudere, che significa che controlla connesso al provider come consumer non avrà più disponibili dati da utilizzare. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> proprietà consente agli sviluppatori di personalizzare il messaggio di avviso che viene visualizzato all'utente.  
  
 Se uno sviluppatore di pagina assegna un valore di stringa vuota o null per questa proprietà, non verrà visualizzato alcun messaggio di avviso quando un utente chiude un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo che funge da provider.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> proprietà per visualizzare un messaggio di avviso personalizzato per gli utenti.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina Web part.  
  
-   Un file di codice sorgente che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un'interfaccia personalizzata.  
  
-   Una pagina Web che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connessi e un `<asp:webpartmanager>` elemento.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 Il codice seguente contiene solo la parte pagina Web dell'esempio. È necessario anche il controllo utente personalizzato e il codice sorgente per i controlli personalizzati indicato in precedenza. Ottenere la sezione esempio di questi due elementi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe.  
  
 Codice della pagina Web seguente viene illustrato come assegnare un messaggio di avviso personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> proprietà nel markup dichiarativo il `<asp:webpartmanager>` elemento.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CloseProviderWarning#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseProviderWarning/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CloseProviderWarning#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseProviderWarning/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 Dopo aver caricato la pagina Web in un browser, fare clic sui **modalità di visualizzazione** controllo elenco a discesa e selezionare **Connect** per passare alla modalità di connessione. La connessione utilizza la modalità di `<asp:connectionszone>` elemento consentono di creare connessioni tra i controlli. Nella modalità di connessione, fare clic sulla freccia verso il basso nella barra del titolo del **CAP** per attivare il menu dei verbi di controllo e quindi fare clic su **Connect**. Dopo che viene visualizzata l'interfaccia di connessione utente (UI), fare clic sui **creare una connessione a un Consumer** collegamento. Viene visualizzata una cella contenente un controllo elenco a discesa. Selezionare **Weather Control** nell'elenco a discesa e fare clic su **Connect** per completare la connessione dei due controlli. Fare clic su **Close**e quindi usare il **modalità di visualizzazione** elenco a discesa per restituire la pagina sulla normale modalità browse. Infine, fare clic sul menu dei verbi per il **CAP** controllare (ovvero il controllo del provider in questo caso) e selezionare **Chiudi**. Il messaggio personalizzato assegnato al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> proprietà viene visualizzata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseWebPart">
      <MemberSignature Language="C#" Value="public void CloseWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CloseWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CloseWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.CloseWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.CloseWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control that is being closed in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</param>
        <summary>Closes a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control in such a way that it is not rendered on a Web page, but can be reopened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> metodo rimuove un <xref:System.Web.UI.WebControls.WebParts.WebPart> o altri server di controllo in modo che non viene sottoposto a rendering della pagina Web che conteneva in. Il controllo chiuso viene aggiunto a un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> oggetto, che mantiene un riferimento al controllo chiuso e rende possibile per il controllo alla pagina da ripristinare. Un oggetto chiuso <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo viene comunque visualizzato nella raccolta cui fa riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà.  
  
 Chiusura di un controllo è diversa a eliminarlo. I controlli chiusi sono ancora disponibili per il ripristino a una pagina, ma un'istanza del controllo eliminato verrà rimosso definitivamente e non può mai essere ripristinata. Indipendentemente dal fatto che un <xref:System.Web.UI.WebControls.WebParts.WebPart> o controllo del server (dichiarato nel markup della pagina) statico o dinamico (aggiunto alla pagina a livello di codice o da un utente da un catalogo Web part), può essere chiuso e riaperto in una pagina.  
  
 In genere, gli utenti possono chiudere un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo fare clic sul menu dei verbi e selezionando il verbo di chiusura. Un controllo può anche essere chiuso chiamando direttamente le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> metodo e passando un riferimento a `webPart`.  
  
 In una pagina in cui <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli sono stati chiusi, se uno sviluppatore dichiara un' `<asp:catalogzone>` elemento e in esso contenuti aggiunge un `<asp:pagecatalogpart>` elemento, fornisce un'interfaccia utente semplice (UI) per gli utenti a ripristinare i controlli chiusi alla pagina in fase di esecuzione. Gli utenti possono passare la pagina in modalità di visualizzazione del catalogo e i controlli chiusi verranno visualizzato all'interno del catalogo di pagina. Gli utenti possono selezionare i controlli chiusi e aggiungerle alla pagina in qualsiasi posizione lo desiderano, e quindi i controlli selezionati vengono ripristinati alla pagina e il rendering come di consueto.  
  
 Quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> viene chiamato, genera vari eventi: <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> (se sono presenti più controlli), e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> (se sono presenti controlli connessi). In genere gli sviluppatori possono annullare questi eventi, ma in alcuni casi non è possibile annullare tali servizi. Per informazioni dettagliate, vedere la documentazione per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>, e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventi.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione pagina.  
  
-   Un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo.  
  
-   Una pagina Web.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La seconda parte dell'esempio di codice è l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo. Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio viene usato l'approccio di compilazione dinamica; pertanto è disponibile alcuna `Assembly` attributo la `Register` direttiva per il controllo nella parte superiore della pagina Web. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_CloseWebPart#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts_WebPartManager_CloseWebPart#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/VB/textdisplaywebpart.vb#3)]  
  
 La terza parte dell'esempio di codice è la pagina Web. La pagina contiene una <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, con un <`asp:pagecatalogpart>` elemento dichiarato all'interno di esso. Questo è ciò che conterrà chiuso <xref:System.Web.UI.WebControls.WebParts.WebPart> controllare e consentire agli utenti per aggiungerlo nuovamente alla pagina. Il `Button1_Click` metodo chiama direttamente il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> metodo per chiudere l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllare, anche se un utente può anche chiudere il controllo tramite il menu dei verbi.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CloseWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/CS/closeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CloseWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/VB/closeWebPartVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, chiudere l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo facendo clic sul menu dei verbi (il simbolo della freccia) l'intestazione del controllo e fare clic su **chiudere**. Modificare ora la pagina in modalità catalogo selezionando **Catalog** nel **modalità di visualizzazione** controllo elenco a discesa. Catalogo della pagina viene visualizzata con il controllo chiuso. Selezionare la casella di controllo accanto al controllo chiusa, fare clic su **Add** per aggiungerlo alla pagina e quindi fare clic su **Chiudi** per restituire la pagina in modalità di visualizzazione. Il controllo viene ripristinato alla pagina. Ora chiuderlo, ma questa volta facendo la **Close WebPart** pulsante.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is not in the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection.  \- or -  <paramref name="webPart" /> is a shared control and has already been closed by another user.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AllowClose" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsClosed" />
      </Docs>
    </Member>
    <Member MemberName="ConnectDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode ConnectDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode ConnectDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ConnectDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ ConnectDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable ConnectDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the display mode used for displaying a special user interface (UI) for users to manage connections between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> campo fa riferimento a un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> oggetto che viene creato e contenuto di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Poiché si tratta di un oggetto statico, è possibile fare riferimento ad esso direttamente tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe senza utilizzare un'istanza del controllo.  
  
 Quando gli utenti desiderano gestire le connessioni tra <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli in una pagina Web, se un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> zona è stata dichiarata nella pagina, possono passare la pagina di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modalità. La modalità di connessione consente di visualizzare un'interfaccia utente speciale per la gestione delle connessioni, che include la possibilità di connettere o disconnettere i controlli e modificare i dettagli delle connessioni esistenti.  
  
 Se si desidera fornire agli utenti la possibilità di gestire le connessioni con l'interfaccia utente fornita dall'insieme di controlli Web part, è necessario dichiarare un `<asp:connectionszone>` elemento nel markup della pagina. A differenza degli elementi per altri tipi di <xref:System.Web.UI.WebControls.WebParts.WebZone> zone, non è necessario aggiungere altri tag all'interno dell'elemento; è sufficiente dichiarare l'elemento da se stesso.  
  
   
  
## Examples  
 Esempio di codice seguente illustra l'uso del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modalità.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Un file di origine che contiene un'interfaccia e custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono creare una connessione.  
  
-   Una pagina Web che fornisce una connessione dell'interfaccia utente e illustra l'utilizzo con il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modalità.  
  
-   Una spiegazione su come eseguire l'esempio.  
  
 La prima parte dell'esempio di codice è un file di origine che contiene un'interfaccia e due personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> i controlli che sono progettati in modo è possibile che siano connessi. Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa l'approccio di compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_ConnectDisplayMode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_ConnectDisplayMode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio è una pagina Web che ospita i controlli personalizzati. All'interno del server `<script>` i tag nella pagina sono diversi metodi che popolano un elenco a discesa con le modalità di visualizzazione disponibile nella pagina. Un utente può selezionare dall'elenco a discesa per modificare la modalità di visualizzazione della pagina. Una delle modalità di visualizzazione disponibili è la modalità di connessione perché un `<asp:connectionszone>` elemento viene dichiarato nel markup della pagina. Si noti che questo elemento non contiene altri elementi figlio. è disponibile solo per abilitare la gestione connessione dell'interfaccia utente per gli utenti.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modalità viene visualizzato in questo esempio in due posizioni. Innanzitutto, il `Page_Init` metodo, la modalità di connessione viene aggiunto all'elenco di riepilogo delle modalità di visualizzazione, come il codice scorre la raccolta a cui fa riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà. In secondo luogo, il `Page_PreRender` metodo controlla la modalità di visualizzazione corrente nella pagina e se la modalità corrente è <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>, viene visualizzato un messaggio un <xref:System.Web.UI.WebControls.Label> controllo.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ConnectDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/CS/ConnectDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ConnectDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/VB/ConnectDisplayModeVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, fare clic sull'elenco a discesa e selezionare **Connetti** passare in modalità di connessione. Si noti che viene visualizzato un messaggio che informa che la pagina è in modalità di connessione. Scegliere il menu dei verbi (un simbolo della freccia) nella barra del titolo di una del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e quindi fare clic su **Connetti** nel menu dei verbi. Dopo la connessione che dell'interfaccia utente viene visualizzato, fare clic sul collegamento per creare una connessione. Utilizzare l'elenco a discesa all'interno della connessione dell'interfaccia utente visualizzato, selezionare altro controllo che prendono parte alla connessione, scegliere il **Connetti** pulsante. Viene stabilita la connessione. Fare clic sui **Chiudi** pulsante e quindi utilizzare l'elenco a discesa nella parte superiore della pagina per restituire la pagina per esaminare la modalità di visualizzazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="Connections">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection Connections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection Connections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ Connections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the collection of all current connections on a Web page.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> che contiene un set di <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> oggetti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> proprietà fornisce un modo per accedere al set corrente di connessioni in una pagina. La raccolta è di sola lettura, gli sviluppatori che desiderano modificare una connessione specifica dalla raccolta devono utilizzare <xref:System.Web.UI.WebControls.WebParts.WebPartManager> metodi, ad esempio <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato l'utilizzo di strumenti dichiarativo e programmatico del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina Web part.  
  
-   Una pagina Web che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connesso, e un `<asp:webpartmanager>` elemento.  
  
-   Un file di codice sorgente che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un'interfaccia personalizzata.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 Il codice seguente contiene solo la parte pagina Web dell'esempio. È necessario anche il controllo utente personalizzato e il codice sorgente per i controlli personalizzati indicato in precedenza. Ottenere la sezione esempio di questi due elementi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe.  
  
 Il codice della pagina Web seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> proprietà a livello di codice per ottenere il numero di connessioni correnti in una pagina. Si noti che nel `<script>` sezione relativa ai tag, il codice per gestire due eventi per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare gli accessi il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> proprietà per ottenere il conteggio.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 Dopo aver caricato la pagina Web in un browser, fare clic sui **modalità di visualizzazione** controllo elenco a discesa e selezionare **Connect** per passare alla modalità di connessione. La connessione utilizza la modalità di `<asp:connectionszone>` elemento consentono di creare connessioni tra i controlli. Nella modalità di connessione, fare clic sulla freccia verso il basso nella barra del titolo del **CAP** per attivare il menu dei verbi di controllo e quindi fare clic su **Connect**. Dopo l'interfaccia di connessione utente (UI) consente di visualizzare, fare clic sui **creare una connessione a un Consumer** collegamento. Viene visualizzata una cella contenente un controllo elenco a discesa. Selezionare **Weather Control** nell'elenco a discesa e fare clic su **Connect** per completare la connessione dei due controlli. Fare clic su **Close**e quindi usare il **modalità di visualizzazione** elenco a discesa per restituire la pagina sulla normale modalità browse. Si noti che un'etichetta ora consente di visualizzare il numero di connessioni e il numero di <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Se si restituisce ora per modalità di connessione e disconnettere i due controlli, quando si torna alla modalità, visualizzazione contenuto dell'etichetta deve essere aggiornato e non deve esistere alcuna connessione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionsActivated">
      <MemberSignature Language="C#" Value="public event EventHandler ConnectionsActivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ConnectionsActivated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ConnectionsActivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ConnectionsActivated;" />
      <MemberSignature Language="F#" Value="member this.ConnectionsActivated : EventHandler " Usage="member this.ConnectionsActivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after all the current Web Parts connections on a page are not only connected, but have also begun actively sharing data between the consumer and provider controls involved in each connection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nel ciclo di vita delle connessioni, questo evento viene generato al termine del processo di caricamento una pagina. Si verifica anche dopo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento, che indica solo che la <xref:System.Web.UI.WebControls.WebParts.WebPart> o avvenuta connessione di controlli server coinvolti in una determinata connessione. Nel caso in cui sono presenti più connessioni in una pagina, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> metodo indica che tutte le connessioni Web part valide in una pagina sono ora attivi e in grado di condividere i dati. Sapere che tutte le connessioni sono attive, gli sviluppatori possono eseguire qualsiasi numero di attività, tra cui la notifica agli utenti dello stato di tutte le connessioni, la notifica di controlli di consumer per elaborare e visualizzare i dati dai propri provider e così via.  
  
 Questo evento è associato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A> metodo, che genera l'evento e consente agli sviluppatori di creare gestori personalizzati per l'evento.  
  
 Gli sviluppatori di pagina possono creare un gestore per l'evento personalizzato aggiungendo il `OnConnectionsActivated` attributo il `<asp:webpartmanager>` elemento nella pagina e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionsActivating">
      <MemberSignature Language="C#" Value="public event EventHandler ConnectionsActivating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ConnectionsActivating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ConnectionsActivating As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ConnectionsActivating;" />
      <MemberSignature Language="F#" Value="member this.ConnectionsActivating : EventHandler " Usage="member this.ConnectionsActivating : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of activating all the established Web Parts connections on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nel ciclo di vita delle connessioni, questo evento si verifica quando una pagina di completamento in corso il processo di caricamento, appena prima di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> metodo viene chiamato. È diverso dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> evento, che implica una determinata connessione tra <xref:System.Web.UI.WebControls.WebParts.WebPart> o altri controlli server. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento si verifica quando tutte le connessioni possibili in una pagina è sono eseguita la connessione e siano per essere attivato.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento è associato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> (metodo), che genera l'evento. Sviluppatori di controlli che desiderano estendere il tipo di connessioni che possono essere aggiunti a una pagina è stato possibile eseguire l'override protetto <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> (metodo) e attivare i tipi aggiuntivi di connessioni.  
  
 Gli sviluppatori di pagina possono creare un gestore per l'evento personalizzato aggiungendo il `OnConnectionsActivating` attributo il `<asp:webpartmanager>` elemento nella pagina e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectWebParts">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls (or other server controls capable of forming connections) that reside in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo costituisce una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connesso. Prima di chiamare questo metodo per creare una connessione, è anche possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> metodo in un controllo condizionale per garantire che i controlli soddisfino i requisiti per stabilire una connessione.  
  
> [!NOTE]
>  È inoltre possibile creare una connessione tra due controlli server che non sono <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. In generale, i due controlli devono essere i controlli server personalizzato (ad esempio, i controlli che ereditano da <xref:System.Web.UI.WebControls.WebControl> o controlli server ASP.NET esistenti) in modo che è possibile aggiungere i membri richiesti. I controlli sarebbe inoltre necessario soddisfare i requisiti specificati di seguito.  
  
 Qualsiasi tipo di uno scenario di connessione tra due controlli deve soddisfare i requisiti seguenti per essere in grado di connettersi:  
  
-   Ogni controllo si trova in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona (non è necessario essere della stessa area).  
  
-   Come implementato nel gruppo di controlli Web part, il controllo in una connessione provider implementa un'interfaccia come un metodo pubblico che funge da un callback al provider e ha un `ConnectionProvider` attributo dei metadati del metodo per identificarla come una connessione del provider punto. Poiché il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodo che richiama i punti di connessione provider è virtuale, un oggetto derivato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo non è necessario utilizzare lo stesso attributo di metadati.  
  
-   Come implementato nel gruppo di controlli Web part, il controllo di consumer in una connessione ha anche un metodo speciale che consente di ottenere un riferimento all'interfaccia esposta nel metodo di callback del provider e il consumer ha un `ConnectionConsumer` attributo dei metadati Scegliere il metodo venga identificato come connessione di un consumer. Poiché il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodo che richiama i punti di connessione consumer è virtuale, un oggetto derivato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo non è necessario utilizzare lo stesso attributo di metadati.  
  
-   I metodi di callback devono essere compatibili, in quanto il consumer può utilizzare il tipo di interfaccia specificato nel metodo di callback del provider (vale a dire che il consumer e provider possono condividere dati direttamente) o lo sviluppatore deve usare un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> l'oggetto in trasformare i dati dal provider in un formato che il consumer può utilizzare.  
  
    > [!IMPORTANT]
    >  Quando non è necessario un trasformatore, utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29> overload del metodo. Se ti servono un trasformatore, Usa il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> overload del metodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectWebParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::WebPartConnection ^ ConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint);" />
      <MemberSignature Language="F#" Value="member this.ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection" Usage="webPartManager.ConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Parameters>
      <Docs>
        <param name="provider">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control that has the role of furnishing data to another connected control.</param>
        <param name="providerConnectionPoint">A method that serves as a callback method for the connection. As implemented in the Web Parts control set, this is a public method in <c>provider</c> that is marked with a <see langword="ConnectionProvider" /> metadata attribute.</param>
        <param name="consumer">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control that has the role of receiving data from <c>provider</c>, and then processing or displaying it.</param>
        <param name="consumerConnectionPoint">A method that connects with <c>providerConnectionPoint</c> to receive the data for the connection. As implemented in the Web Parts control set, this is a public method in <c>consumer</c> that is marked with a <see langword="ConnectionConsumer" /> metadata attribute.</param>
        <summary>Creates a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> controls using only the references to the controls and their specified <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> objects.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> that contains the various information about the provider and the consumer needed for a connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload viene utilizzato per connettere i controlli quando i punti di connessione sono sufficientemente compatibili che possano connettersi senza utilizzare un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto. Quando viene chiamato l'overload del metodo, semplicemente passa la chiamata all'altra versione di overload del metodo e passa `null` per il parametro che richiede un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto.  
  
 Quando si tenta di connettere due controlli a livello di programmazione, è possibile usare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> metodo in un controllo condizionale per determinare se i controlli possono essere connessi direttamente.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare questo metodo per creare una connessione a livello di codice. Per il codice completo necessario per eseguire l'esempio, vedere la sezione esempio del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per questo esempio, è necessario il codice sorgente per il controllo utente che consente di modificare le modalità di visualizzazione della pagina e il codice sorgente per l'oggetto personalizzato due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli.  
  
 Il codice per la pagina Web che ospita i due controlli indicato di seguito. La pagina utilizza `Register` direttive nella parte superiore per dichiarare il controllo utente e i controlli personalizzati. I controlli personalizzati sono tuttavia vi fa riferimento in modo dichiarativo all'interno un `<asp:webpartzone>` elemento. Il codice che gestisce il `Button1_Click` metodo crea una connessione tra i controlli mediante il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ConnectWebParts1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectWebParts1/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ConnectWebParts1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectWebParts1/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, fare clic sui **connettere i controlli Web part** pulsante in modo da formare la connessione. È quindi possibile immettere alcuni dati nella casella di testo e fare clic sui **immettere codice postale di 5 cifre** pulsante per dimostrare che sono connessi i controlli e che i dati immessi nel primo controllo viene aggiornati al secondo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control's collection of dynamic collections is read-only.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
      </Docs>
    </Member>
    <Member MemberName="ConnectWebParts">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPartTransformer transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartConnection ^ ConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPartTransformer ^ transformer);" />
      <MemberSignature Language="F#" Value="abstract member ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection&#xA;override this.ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection" Usage="webPartManager.ConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <Parameter Name="transformer" Type="System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Parameters>
      <Docs>
        <param name="provider">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> that has the role of furnishing data to another connected control.</param>
        <param name="providerConnectionPoint">A public method in <c>provider</c> that is marked with a <see langword="ConnectionProvider" /> metadata attribute, and serves as a callback method for the connection.</param>
        <param name="consumer">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> that has the role of receiving data from <c>provider</c> or <c>transformer</c>, and then processing or displaying it.</param>
        <param name="consumerConnectionPoint">A public method in <c>consumer</c> that is marked with a <see langword="ConnectionConsumer" /> metadata attribute, and connects with <c>providerConnectionPoint</c> to receive the data for the connection.</param>
        <param name="transformer">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> that enables a connection between two controls by converting the data from <c>provider</c> to a format that <c>consumer</c> can process.</param>
        <summary>Creates a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> controls using the references to the controls, their specified <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> objects, and a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> object.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> that contains the information about the provider, consumer, and transformer needed for a connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload viene utilizzato per connettere i controlli quando i punti di connessione sono incompatibili. L'incompatibilità si verifica quando `consumer` implementa un'interfaccia diversa rispetto a `provider` come punto di connessione. Il trasformatore converte i dati in un tipo che può essere riconosciuto dal `consumer`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Connections have already been activated in <see cref="E:System.Web.UI.Control.PreRender" />.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Controls As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ControlCollection ^ Controls { System::Web::UI::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Web.UI.ControlCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of all <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, server, or user controls that are contained in <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zones on a Web page and are managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>Un <see cref="T:System.Web.UI.ControlCollection" /> che contiene tutti i controlli gestiti dal <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A> proprietà non fa riferimento gli altri controlli a cui fanno riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare, ad esempio i vari controlli di zona <xref:System.Web.UI.WebControls.WebParts.EditorPart> o <xref:System.Web.UI.WebControls.WebParts.CatalogPart> i controlli e altri.  
  
 Questa proprietà viene utilizzata dall'insieme di controlli Web part e nella maggior parte delle situazioni di sviluppo che non deve essere chiamato dal codice. Per questo motivo, anche se la proprietà è pubblica, è nascosta da IntelliSense. Gli sviluppatori che desiderano accedere alla raccolta di <xref:System.Web.UI.WebControls.WebParts.WebPart> o altri controlli server gestiti dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo deve utilizzare il relativo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
      </Docs>
    </Member>
    <Member MemberName="CopyWebPart">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPart CopyWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPart CopyWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPart ^ CopyWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member CopyWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.WebPart&#xA;override this.CopyWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.CopyWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control to be copied.</param>
        <summary>Used by the Web Parts control set to create a copy of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control for the purpose of adding the control to a Web page.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> to be added to a page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> metodo direttamente dal codice. Questo metodo viene chiamato internamente dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo come parte del processo di aggiunta di un nuovo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> o controllo server a una pagina. Un controllo dinamico viene aggiunto a una pagina a livello di codice o tramite l'interfaccia utente Web part (UI), ad esempio da un utente aggiunge un controllo da un catalogo dei controlli, invece di un controllo statico, che viene dichiarato direttamente nel markup della pagina.  
  
> [!NOTE]
>  Il metodo può essere sottoposto a override in una classe derivata se gli sviluppatori che desiderano abilitare il metodo gestire scenari di copia aggiuntivi. Per informazioni dettagliate, vedere la sezione Note per gli eredi.  
  
 Quando viene aggiunto un nuovo controllo dinamico, se si tratta di un <xref:System.Web.UI.WebControls.WebParts.WebPart> (controllo), il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> metodo restituisce una nuova istanza del controllo. Se il controllo da aggiungere è un altro tipo di controllo del server (ad esempio un controllo utente, un controllo personalizzato o un controllo ASP.NET), il controllo sarà già stato incluso con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto dall'insieme di controlli Web part. Quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> metodo rileva un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> (controllo), restituisce una nuova istanza del <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo con una nuova istanza del controllo figlio incapsulato.  
  
 Quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> metodo crea una nuova copia di un controllo per restituire, ma reimposta anche i valori di tutte le proprietà sui rispettivi valori predefiniti. Si noti che, se si desidera conservare i valori delle proprietà personalizzabili e li copiato nella nuova istanza di controllo, è necessario chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.CopyPersonalizationState%2A> anche metodo. Il passaggio finale svolte dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> consiste nel chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID%2A> metodo per ottenere un nuovo ID per il controllo.  
  
> [!NOTE]
>  Poiché il metodo ottiene un nuovo ID per un controllo copiato, è consigliabile non basarsi sul che fanno riferimento a un controllo dinamico che viene aggiunto a una pagina dal relativo ID originale. Al contrario, è necessario fare riferimento la nuova istanza del controllo restituito dal metodo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il metodo è dichiarato come <see langword="virtual" /> in modo che gli sviluppatori possono ereditare dal <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe, eseguire l'override del metodo e fornire per altri scenari in cui è possibile creare copie dei controlli. Ad esempio, il metodo può facoltativamente venga visualizzato come input un controllo che è stato serializzato in un file XML. Il metodo è stato possibile deserializzare il file XML (se presente) e quindi chiamare il metodo di base per gestire i casi esistenti e per restituire una nuova istanza di un <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controllo.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CreateAvailableTransformers">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.TransformerTypeCollection CreateAvailableTransformers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.TransformerTypeCollection CreateAvailableTransformers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateAvailableTransformers () As TransformerTypeCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ CreateAvailableTransformers();" />
      <MemberSignature Language="F#" Value="abstract member CreateAvailableTransformers : unit -&gt; System.Web.UI.WebControls.WebParts.TransformerTypeCollection&#xA;override this.CreateAvailableTransformers : unit -&gt; System.Web.UI.WebControls.WebParts.TransformerTypeCollection" Usage="webPartManager.CreateAvailableTransformers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.TransformerTypeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a set of transformers specified in a Web site's configuration file and adds them to the collection of transformers referenced by the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" /> property.</summary>
        <returns>The collection of transformers specified in a Web site's configuration file.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Questo metodo può essere sottoposto a override per aggiungere ulteriori convertitori che possono essere utilizzati dall'applicazione. Ad esempio, è stato possibile scrivere il metodo per recuperare un elenco di convertitori disponibili da un servizio Web.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override sealed System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="webPartManager.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the collection of all controls that are managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control on a Web page. This class cannot be inherited.</summary>
        <returns>A <see cref="T:System.Web.UI.ControlCollection" /> consisting of all the various Web Parts controls managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Poiché questo metodo è protetto e sealed, è visibile alle classi che ereditano dal <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe, ma non può essere sottoposto a override.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateDisplayModes">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection CreateDisplayModes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection CreateDisplayModes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDisplayModes () As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ CreateDisplayModes();" />
      <MemberSignature Language="F#" Value="abstract member CreateDisplayModes : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&#xA;override this.CreateDisplayModes : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="webPartManager.CreateDisplayModes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the set of all possible display modes for a Web Parts application.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> that contains all the display modes that are supported.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo crea l'elenco di tutte le possibili modalità di visualizzazione, non solo le modalità di visualizzazione è supportate in una pagina particolare. Per ulteriori informazioni sulle modalità di visualizzazione supportate, vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà.  
  
 Per impostazione predefinita, il set di controlli Web part crea le seguenti modalità di visualizzazione da utilizzare nelle pagine Web part:  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>  
  
 Gli sviluppatori possono creare modalità di visualizzazione personalizzate, con o senza aree personalizzate che derivano dal <xref:System.Web.UI.WebControls.WebParts.WebZone> o <xref:System.Web.UI.WebControls.WebParts.ToolZone> classi. Per creare una modalità di visualizzazione personalizzato, è necessario ereditare dal <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> (classe), e per aggiungere la modalità di visualizzazione come una modalità supportata in una pagina, è necessario ereditare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe ed eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A> (metodo).  
  
 Quando si aggiungono le modalità di visualizzazione utilizzando il <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection.Add%2A> metodo, è necessario aggiungerle nell'ordine in cui si desidera che vengano visualizzati nei controlli dell'interfaccia utente (ad esempio un <xref:System.Web.UI.WebControls.ListBox> controllo) che forniscono agli utenti le possibili modalità di visualizzazione in una pagina.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A>.  
  
 L'esempio di codice è costituito da cinque parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina Web part.  
  
-   Una pagina Web che ospita gli altri controlli.  
  
-   Un controllo utente che si trova in un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona della pagina Web e consente di immettere e visualizzare testo in un'etichetta.  
  
-   Un file di codice sorgente che contiene due controlli. Uno è un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo e l'altro è un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> oggetto da aggiungere alla modalità di visualizzazione predefinite della pagina.  
  
-   Un file di codice sorgente che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un'interfaccia personalizzata.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La seconda parte dell'esempio è la pagina Web. Contiene due <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controlli, i controlli utente e l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Si noti il `Register` direttive nella parte superiore della pagina per fare riferimento ai controlli utente e spazio dei nomi per i controlli compilati.  
  
 [!code-aspx-csharp[Webparts_WebPartManager_CreateDisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/createDisplayModeCS.aspx#1)]
 [!code-aspx-vb[Webparts_WebPartManager_CreateDisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/createDisplayModeVB.aspx#1)]  
  
 La terza parte dell'esempio è il controllo utente per l'immissione e la visualizzazione di testo. Usa un <xref:System.Web.UI.WebControls.MultiView> controllo per creare più viste dell'interfaccia utente. Una vista viene visualizzata con il `Button1` pulsante, l'altro senza. Si noti che in sottoposto a override `OnPreRender` metodo, il codice controlla se la pagina è attualmente in modalità di visualizzazione personalizzata e, in tal caso, la prima visualizzazione del controllo utente, che include il pulsante. Se la pagina non è nella modalità di visualizzazione personalizzata, ad esempio se la pagina è in modalità browse o struttura, il pulsante è nascosto.  
  
 [!code-aspx-csharp[Webparts_WebPartManager_CreateDisplayModes#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/TextDisplaycs.ascx#2)]
 [!code-aspx-vb[Webparts_WebPartManager_CreateDisplayModes#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/TextDisplayvb.ascx#2)]  
  
 La quarta parte dell'esempio è il file di origine per le due classi personalizzate. Si noti che l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe sostituzioni il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A> (metodo) e che chiama innanzitutto il metodo di base per aggiungere tutte le modalità di visualizzazione predefinito e quindi aggiunge la modalità di visualizzazione personalizzato. La classe della modalità di visualizzazione personalizzato, `InLineEditDisplayMode`, è sufficiente eredita <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>, imposta il nome della modalità di visualizzazione nel costruttore e quindi esegue l'override di un numero di proprietà di base per definire le caratteristiche della visualizzazione personalizzata.  
  
 Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[Webparts_WebPartManager_CreateDisplayModes#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/CustomDisplayMode.cs#3)]
 [!code-vb[Webparts_WebPartManager_CreateDisplayModes#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/CustomDisplayMode.vb#3)]  
  
 Per eseguire l'esempio di codice, caricare la pagina in un browser. Si noti che la pagina è attualmente in modalità browse, e nessun pulsante è visibile. Utilizzando il **modalità di visualizzazione** elenco a discesa controllo elenco, modificare la pagina **Inline Edit Display** modalità e notare che ora il `Button1` pulsante è visibile nel controllo utente inferiore. Aggiungere testo e fare clic sul pulsante per aggiornare il controllo. Si noti che la visualizzazione delle pagine viene restituita alla modalità di visualizzazione, il testo immesso verrà visualizzato e il pulsante è ancora una volta nascosto in quanto la pagina non è più in modalità di visualizzazione personalizzata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDynamicConnectionID">
      <MemberSignature Language="C#" Value="protected virtual string CreateDynamicConnectionID ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateDynamicConnectionID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDynamicConnectionID () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ CreateDynamicConnectionID();" />
      <MemberSignature Language="F#" Value="abstract member CreateDynamicConnectionID : unit -&gt; string&#xA;override this.CreateDynamicConnectionID : unit -&gt; string" Usage="webPartManager.CreateDynamicConnectionID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a unique value to serve as an ID for a dynamic connection.</summary>
        <returns>A string that contains a unique ID for a connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> metodo genera un valore GUID e lo converte in una stringa che funge da ID univoco per una connessione. Il metodo viene chiamato ogni volta che viene creata una connessione dinamica.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È possibile eseguire l'override di questo metodo in un oggetto derivato <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> (classe) per modificare l'implementazione per la generazione di un ID univoco.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="CreateDynamicWebPartID">
      <MemberSignature Language="C#" Value="protected virtual string CreateDynamicWebPartID (Type webPartType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateDynamicWebPartID(class System.Type webPartType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDynamicWebPartID (webPartType As Type) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ CreateDynamicWebPartID(Type ^ webPartType);" />
      <MemberSignature Language="F#" Value="abstract member CreateDynamicWebPartID : Type -&gt; string&#xA;override this.CreateDynamicWebPartID : Type -&gt; string" Usage="webPartManager.CreateDynamicWebPartID webPartType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPartType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="webPartType">The <see cref="T:System.Type" /> of the control for which an ID is being generated.</param>
        <summary>Generates a unique ID for a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <returns>A string that contains the unique ID for a control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Web.UI.WebControls.WebParts.WebPart> vengono aggiunti a una pagina Web, possono essere statici (ossia, il controllo viene dichiarato nel markup della pagina) o dinamici (ossia, vengono aggiunti a livello di codice). In qualsiasi scenario in cui il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo creando nuovi controlli dinamici da aggiungere alla pagina, viene chiamato questo metodo per generare un ID univoco.  
  
 Il metodo è virtuale in modo che gli sviluppatori possono eseguirne l'override se desiderano fornire un'implementazione personalizzata per generare l'ID.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPartType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateErrorWebPart">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.ErrorWebPart CreateErrorWebPart (string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ErrorWebPart CreateErrorWebPart(string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateErrorWebPart (originalID As String, originalTypeName As String, originalPath As String, genericWebPartID As String, errorMessage As String) As ErrorWebPart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::ErrorWebPart ^ CreateErrorWebPart(System::String ^ originalID, System::String ^ originalTypeName, System::String ^ originalPath, System::String ^ genericWebPartID, System::String ^ errorMessage);" />
      <MemberSignature Language="F#" Value="abstract member CreateErrorWebPart : string * string * string * string * string -&gt; System.Web.UI.WebControls.WebParts.ErrorWebPart&#xA;override this.CreateErrorWebPart : string * string * string * string * string -&gt; System.Web.UI.WebControls.WebParts.ErrorWebPart" Usage="webPartManager.CreateErrorWebPart (originalID, originalTypeName, originalPath, genericWebPartID, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ErrorWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalID" Type="System.String" />
        <Parameter Name="originalTypeName" Type="System.String" />
        <Parameter Name="originalPath" Type="System.String" />
        <Parameter Name="genericWebPartID" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="originalID">A string that is the ID of the failing control. If a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> is involved in the failure, the ID is the ID of its child server control.</param>
        <param name="originalTypeName">A string that is the name of the <see cref="T:System.Type" /> of the failed control. If a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> is involved in the failure, the type name is the type of its child server control.</param>
        <param name="originalPath">A string that contains the path to a user control, if a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> that contains a child user control is involved in the failure.</param>
        <param name="genericWebPartID">A string that returns the ID of a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />, if that type of control was involved in the failure to load or create a control.</param>
        <param name="errorMessage">A string that contains the error message to display on the page.</param>
        <summary>Creates a special control that is inserted into a page and displayed for end users, when an attempt to load or create a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control fails for some reason.</summary>
        <returns>An <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> that is inserted into a page in place of a control that failed to be loaded or created.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart%2A> metodo viene chiamato quando il controllo Web part set tenta di caricare o creare un'istanza di un dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> o del controllo server non riesce per qualche motivo. Il metodo crea un <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> oggetto, viene assegnato un messaggio di errore e lo restituisce. Il <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> controllo verrà inserito al posto del controllo non riuscito e il messaggio di errore viene visualizzato nella pagina.  
  
 Non è possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart%2A> metodo direttamente dal codice. Tuttavia, è possibile ereditare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe ed estendere il metodo. Per informazioni dettagliate, vedere la sezione Note per gli eredi.  
  
 Gli utenti finali possono lavorare con un <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> controllare in una pagina gran parte come se fossero una normale <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo. Per rimuovere il messaggio di errore, è possibile chiudere il controllo, fare clic sul verbo di chiusura, a quel punto verrà aggiunto il controllo a un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> oggetto, analogamente a qualsiasi altro controllo chiuso. Se un utente finale elimina un <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> controllo, il controllo server che non è riuscito a caricare verrà eliminato dalla pagina.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si desidera personalizzare le informazioni restituite nel <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> (controllo), è possibile eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)" /> metodo, chiamare il metodo di base, assegnare valori diversi per i parametri passati al metodo di base e quindi restituire risultante<see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" />controllo. Ad esempio, se non si desidera che gli utenti finali vedano la <paramref name="originalPath" /> valore (in cui viene mostrato il percorso della directory virtuale di un controllo utente), quando si chiama il metodo basa è possibile passare una stringa vuota ("") per tale parametro.  È anche possibile personalizzare il comportamento del <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> controllo stesso, tramite l'eredità da quest'ultimo. Ad esempio, è possibile eseguire l'override relativa <see cref="P:System.Web.UI.WebControls.WebParts.Part.Title" /> o <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.AllowMinimize" /> proprietà.</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePersonalization">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPartPersonalization CreatePersonalization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartPersonalization CreatePersonalization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreatePersonalization () As WebPartPersonalization" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ CreatePersonalization();" />
      <MemberSignature Language="F#" Value="abstract member CreatePersonalization : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartPersonalization&#xA;override this.CreatePersonalization : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartPersonalization" Usage="webPartManager.CreatePersonalization " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartPersonalization</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a personalization object to contain a user's personalization data for the current Web page.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> to contain a user's personalization data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A> metodo restituisce un oggetto per contenere e gestire le impostazioni di personalizzazione dell'utente per la pagina corrente. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo gestisce questo oggetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWebPart">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.GenericWebPart CreateWebPart (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.GenericWebPart CreateWebPart(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::GenericWebPart ^ CreateWebPart(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member CreateWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart&#xA;override this.CreateWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart" Usage="webPartManager.CreateWebPart control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.GenericWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">A server control that is not a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</param>
        <summary>Wraps a server control that is not a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control with a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> object, so that the control can have Web Parts functionality.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> that wraps <paramref name="control" /> and enables it to function as a true <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> metodo è il meccanismo principale per l'abilitazione di controlli server che non sono <xref:System.Web.UI.WebControls.WebParts.WebPart> dovranno avere la stessa funzionalità di un <xref:System.Web.UI.WebControls.WebParts.WebPart> (controllo) e pertanto deve far parte completamente nelle applicazioni Web part. Tramite questo metodo, gli sviluppatori praticamente espandere il numero di controlli server che possono essere utilizzati in un'applicazione Web part, perché praticamente qualsiasi tipo di controllo server, controlli ASP.NET standard, i controlli utente e controlli personalizzati, possono essere usati.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo Usa anche questo metodo in due altri scenari per eseguire il wrapping di controlli server con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto. Quando gli utenti aggiungono i controlli server a una pagina utilizzando la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> il controllo, se il controllo importato non è un <xref:System.Web.UI.WebControls.WebParts.WebPart> (controllo), il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> metodo viene chiamato. Inoltre, quando i controlli server vengono dichiarati in un formato di persistenza all'interno di un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona in una pagina Web, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> viene chiamato per tutti i controlli che non sono <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli.  
  
 Quando si aggiunge a livello di codice un controllo server a una zona, un approccio tipico consiste nell'utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> metodo per eseguire il wrapping del controllo con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> dell'oggetto e quindi chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> metodo per aggiungere il controllo alla raccolta di tutti i <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli della pagina, che fa riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato l'utilizzo del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> metodo. Nel `Button2_Click method`, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> metodo viene chiamato per eseguire il wrapping di un <xref:System.Web.UI.WebControls.Calendar> controllare con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto prima di aggiungerlo all'area.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questo metodo può essere sottoposto a override per l'utilizzo di un oggetto derivato <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> classe invece della classe di base fornita con le Web part di controllo set.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteWarning">
      <MemberSignature Language="C#" Value="public virtual string DeleteWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DeleteWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DeleteWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a custom warning message displayed to end users when they delete a control.</summary>
        <value>Stringa che contiene il testo del messaggio di avviso. Il valore predefinito è un messaggio di avviso localizzato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un utente elimina una <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo, in genere viene visualizzato un messaggio di avviso predefinito. L'utente viene informato quando viene eliminata l'istanza di un controllo, l'eliminazione è permanente. Lo sviluppatore della pagina potrebbe fornire agli utenti un modo per aggiungere una nuova istanza del controllo alla pagina (ad esempio tramite un catalogo di <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, o a livello di codice), ma verrà rimosso definitivamente l'istanza corrente di un controllo che viene eliminato. La finestra di dialogo che viene visualizzato l'avviso include un pulsante per l'utente annullare l'eliminazione, se lo si desidera.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> proprietà consente agli sviluppatori di impostare il messaggio di avviso che viene visualizzato all'utente.  
  
 Se uno sviluppatore di pagina assegna una stringa vuota ("") valore di questa proprietà, nessuna finestra di dialogo di avviso messaggio verrà visualizzato quando un utente elimina una <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> proprietà non viene visualizzata nel caso di statico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e controlli server. I controlli statici sono controlli server che vengono dichiarati all'interno di un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona nel markup della pagina Web. Poiché tali controlli sono statici, non possono essere eliminate, in modo che il messaggio di avviso di eliminazione non è visualizzato in questo caso. Controlli statici possono essere chiusa dall'utente, ma un controllo chiuso verrà aggiunte al catalogo della pagina, da cui può aggiungerlo nuovamente alla pagina da un utente, mentre un controllo eliminato non può essere recuperato.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> proprietà in modo dichiarativo e a livello di codice.  
  
 Esistono quattro parti per l'esempio di codice:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione pagina.  
  
-   Un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo.  
  
-   Una pagina Web.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La seconda parte dell'esempio di codice è l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo. Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio viene usato l'approccio di compilazione dinamica; pertanto è disponibile alcuna `Assembly` attributo la `Register` direttiva per il controllo nella parte superiore della pagina Web. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_DeleteWarning#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts_WebPartManager_DeleteWarning#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/VB/textdisplaywebpart.vb#3)]  
  
 La terza parte dell'esempio di codice è la pagina Web. La pagina contiene una <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, con l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo dichiarato nella zona, in modo che un utente può aggiungerlo alla pagina in fase di esecuzione. Si noti che solo i controlli dinamici (i controlli che vengono aggiunti a una pagina a livello di codice o da un catalogo come questo) possono essere eliminati da una pagina. I controlli statici (i controlli che vengono dichiarati all'interno di un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona nel markup della pagina) possono essere chiusi, ma mai eliminati. Il `<asp:webpartmanager>` elemento dichiara un valore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> proprietà utilizzando il `DeleteWarning` attributo. Il `Button1_Click` metodo assegna un altro valore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWarning#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/CS/deleteWarningCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWarning#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/VB/deleteWarningVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, è necessario aggiungere il <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo alla pagina. Utilizzando il **modalità di visualizzazione** controllo elenco a discesa, selezionare la modalità catalogo. Quando viene visualizzata nel catalogo, selezionare la casella di controllo accanto al controllo personalizzato, fare clic su **Add** per aggiungerlo alla pagina e quindi fare clic su **Chiudi** per restituire la pagina in modalità di visualizzazione. Ora che il controllo è visibile, è possibile eliminarlo. Utilizzando il **modalità di visualizzazione** controllare nuovamente, passare alla modalità progettazione (è possibile eliminare i controlli in modalità browse). Fare clic sul menu dei verbi (il simbolo della freccia) nell'intestazione della <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo e scegliere **eliminare**. L'avviso è impostata sul `DeleteWarning` viene visualizzato l'attributo. Fare clic su **annullare**. Fare clic sul pulsante con etichettato **Change Delete Warning**, che modifica il valore della proprietà a livello di codice. Nel menu dei verbi sul controllo, selezionare **eliminare** anche in questo caso e si noti che questo tempo viene visualizzato il messaggio di avviso.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteWebPart">
      <MemberSignature Language="C#" Value="public void DeleteWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.DeleteWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.DeleteWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The server control to be deleted.</param>
        <summary>Permanently removes a dynamic instance of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control from a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A> metodo consente di rimuovere definitivamente il controllo rappresentato dal `webPart` parametro da una pagina. A differenza di un controllo chiuso, che viene aggiunto il <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controllo e può essere aggiunto nuovamente alla pagina, un'istanza del controllo eliminato non può mai essere nuovamente aggiunto alla pagina.  
  
> [!NOTE]
>  Come implementato dal controllo Web part impostata, la possibilità per gli utenti di eliminare un dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo varia in base all'utente e l'ambito di personalizzazione in cui il controllo è stato aggiunto a una pagina. Se il controllo viene aggiunto quando la pagina è nell'ambito condiviso (da un utente che dispone di autorizzazioni), quindi il controllo non può essere eliminato dai singoli utenti quando la pagina si trova nell'ambito di utente.  
  
 È possibile eliminare solo i controlli dinamici. I controlli dinamici vengono aggiunti a una pagina a livello di programmazione o dagli utenti aggiunta di controlli da un catalogo. I controlli statici vengono aggiunti a una pagina in modo dichiarativo nel formato di markup o il salvataggio permanente. Poiché i tag dichiarativi sono presenti in modo permanente nel markup, i controlli statici non possono essere eliminati, ma può essere chiuso e riaperto.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A>. La prima volta che il **Add Calendar** fa clic sul pulsante, il codice nel caso in cui gestore crea un <xref:System.Web.UI.WebControls.Calendar> controllare e lo aggiunge a una zona come un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto. Poiché il controllo viene aggiunto a livello di codice, si tratta di un controllo dinamico e pertanto può essere eliminato. Quando un utente sceglie il **Delete Calendar** pulsante, il codice assicura che il controllo è presente e quindi eliminarlo chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A> (metodo).  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsClosed" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
      </Docs>
    </Member>
    <Member MemberName="DesignDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode DesignDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode DesignDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DesignDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ DesignDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable DesignDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the display mode used for changing the layout of Web pages that contain Web Parts controls. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> campo fa riferimento a un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> oggetto che viene creato e contenuto di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Poiché si tratta di un oggetto statico, è possibile fare riferimento ad esso direttamente tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe senza utilizzare un'istanza del controllo.  
  
 Quando una pagina che contiene le Web part controlli primo caricamento, è presente nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modalità browse) per impostazione predefinita. Quando gli utenti desiderano modificare il layout della pagina spostando i controlli in aree diverse o all'interno delle aree corrente, devono passare prima pagina per <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> (modalità progettazione). Nella modalità progettazione, viene visualizzata l'interfaccia utente (UI) per le varie zone e gli utenti possono trascinare i controlli per modificare il layout.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> campo a livello di codice. Il codice consente di popolare un elenco di riepilogo a discesa con le modalità di visualizzazione supportate per la pagina, in questo caso, esplorazione e progettazione. Si noti che, nel `Page_PreRender` metodo, il codice controlla se l'oggetto corrente <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> è impostata su <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>. In tal caso, `Label1` saranno visibili in caso contrario, `Label1` verranno nascoste.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DesignDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DesignDisplayMode/CS/wpmgrDesignDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DesignDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DesignDisplayMode/VB/wpmgrDesignDisplayModevb.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, si è in modalità browse per impostazione predefinita. Si noti che l'etichetta nella pagina è nascosta. Utilizzare il controllo elenco a discesa per passare alla modalità progettazione. Si noti che, a causa di codice il `Page_PreRender` metodo, l'etichetta è visibile.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="DisconnectWebPart">
      <MemberSignature Language="C#" Value="protected virtual void DisconnectWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DisconnectWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DisconnectWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member DisconnectWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.DisconnectWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.DisconnectWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control that is to be disconnected.</param>
        <summary>Removes a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control that is being closed or deleted from any connections it is participating in.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> metodo viene chiamato internamente dal controllo Web part impostato quando un controllo viene chiuso in una pagina o eliminato da una pagina. In tale scenario, il metodo viene chiamato per rimuovere il controllo da tutte le connessioni in cui è coinvolta come un consumer o provider. Se il controllo viene rimosso da qualsiasi connessione, questo metodo chiama anche il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo per terminare tutte le connessioni in cui `webPart` è stata coinvolta.  
  
 Quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> viene chiamato, genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento. In genere questo evento può essere annullato, ma in due casi che non può essere annullata. Un caso si verifica durante le richieste alla pagina, quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> metodo viene chiamato. Se si verifica un conflitto tra le connessioni esistenti, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> metodo verrà richiamato per chiudere una delle connessioni in conflitto in questa istanza di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento non può essere annullato, perché il conflitto deve essere risolto.  
  
 Nel secondo caso si verifica quando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o controllo server che è attualmente connesso è chiuso o eliminato. In questo caso, poiché il controllo viene rimosso dalla pagina, le esigenze di connessione venga terminata anche, pertanto per impostazione predefinita non è possibile annullare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento per interrompere il processo di chiusura di una connessione. Per altre informazioni, vedere l'evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>. Utilizzando due personalizzata <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, la pagina Web consente di creare una connessione tra i controlli facendo clic su un pulsante, mentre un altro pulsante consente di disconnettere i controlli. Se si chiude uno dei controlli quando la pagina è in modalità browse e sono connessi i controlli, un override del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> metodo consente di disconnettere il controllo chiuso, termina la connessione e viene visualizzato un messaggio.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente per la modifica delle modalità di visualizzazione.  
  
-   Un file di origine contenente custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli.  
  
-   Una pagina Web per ospitare i controlli.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La seconda parte è il file contenente il codice sorgente per l'oggetto personalizzato due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che verranno connessi e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. In questo esempio viene utilizzata la compilazione dinamica, pertanto la `Register` direttiva che fa riferimento a questi componenti della pagina Web viene dichiarata in modo appropriato nella parte superiore della pagina Web. Per una procedura dettagliata che illustra le opzioni di compilazione, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 Nel codice sorgente, si noti il controllo ereditato `MyWebPartManager` che esegue l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> metodo. Questo metodo controlla ogni connessione in una pagina per vedere se il controllo viene chiuso partecipa la connessione e, in caso affermativo, chiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo per terminare la connessione. Questo comportamento è identico all'implementazione di base del metodo nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Il metodo sottoposto a override Personalizza quindi l'implementazione di base mediante la scrittura di un messaggio alla pagina.  
  
 [!code-csharp[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che nella parte superiore, contenga `Register` direttive per registrare il controllo utente e l'assembly compilato dinamicamente con i <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La pagina contiene due metodi principali. Il `Button1_Click` metodo crea una connessione tra i controlli, mentre il `Button2_Click` metodo disconnette i controlli.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/wpmgrDisconnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/wpmgrDisconnectWebPartsVB.aspx#1)]  
  
 Dopo il caricamento della pagina, fare clic sui **Connetti** per connettere i controlli pulsante. Fare clic sul menu dei verbi in uno dei controlli (la freccia verso il basso nell'intestazione del controllo), quindi selezionare **Chiudi** dal menu dei verbi. Quando si tenta di chiudere il controllo, viene chiamato il metodo sottoposto a override, la connessione viene terminata e viene scritto il messaggio alla pagina. Se si desidera reimpostare la pagina per ripristinare il controllo chiuso e sperimentare con altre opzioni, fare clic sui **Reset User State** link per rimuovere i dati di personalizzazione e ripristinare lo stato originale della pagina.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      </Docs>
    </Member>
    <Member MemberName="DisconnectWebParts">
      <MemberSignature Language="C#" Value="public virtual void DisconnectWebParts (System.Web.UI.WebControls.WebParts.WebPartConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisconnectWebParts(class System.Web.UI.WebControls.WebParts.WebPartConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DisconnectWebParts (connection As WebPartConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DisconnectWebParts(System::Web::UI::WebControls::WebParts::WebPartConnection ^ connection);" />
      <MemberSignature Language="F#" Value="abstract member DisconnectWebParts : System.Web.UI.WebControls.WebParts.WebPartConnection -&gt; unit&#xA;override this.DisconnectWebParts : System.Web.UI.WebControls.WebParts.WebPartConnection -&gt; unit" Usage="webPartManager.DisconnectWebParts connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Web.UI.WebControls.WebParts.WebPartConnection" />
      </Parameters>
      <Docs>
        <param name="connection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> that represents the connection between server controls.</param>
        <summary>Carries out the process of disconnecting server controls that are connected on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo esegue la procedura completa di chiusura di una connessione tra <xref:System.Web.UI.WebControls.WebParts.WebPart> o i controlli server, quando si passa il `connection` parametro.  
  
 Questo metodo consente di disconnettere i controlli quando si inserisce un `<asp:connectionszone>` elemento in una pagina Web, per fornire un'interfaccia utente (UI) per la gestione delle connessioni. Quando una pagina è modalità di connessione (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>), esiste una connessione corrente e gli utenti possono selezionare un pulsante che chiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo per terminare la connessione.  
  
 È inoltre possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo direttamente dal codice, se si desidera disconnettere i controlli a livello di programmazione e senza la necessità di aggiungere un `<asp:connectionszone>` elemento a una pagina.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>. Utilizzando due personalizzata <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, la pagina Web consente di creare una connessione tra i controlli facendo clic su un pulsante, mentre un altro pulsante consente di disconnettere i controlli.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente per la modifica delle modalità di visualizzazione.  
  
-   Un file di origine contenente custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli.  
  
-   Una pagina Web per ospitare i controlli.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La seconda parte è un file contenente il codice sorgente per l'oggetto personalizzato due <xref:System.Web.UI.WebControls.WebParts.WebPart> i controlli che verranno connessi. Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. In questo esempio viene utilizzata la compilazione dinamica, pertanto la `Register` direttiva che fa riferimento a questi componenti della pagina Web viene dichiarata in modo appropriato nella parte superiore della pagina Web. Per una procedura dettagliata che illustra le opzioni di compilazione, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che nella parte superiore, contenga `Register` direttive per registrare il controllo utente e l'assembly compilato dinamicamente con i <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La pagina contiene due metodi principali. Il `Button1_Click` metodo crea una connessione tra i controlli e la `Button2_Click` metodo disconnette i controlli.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/wpmgrDisconnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/wpmgrDisconnectWebPartsVB.aspx#1)]  
  
 Dopo il caricamento della pagina, è possibile fare clic il **Connetti** per connettere i controlli pulsante. Se si immettere testo nel controllo casella di testo, quindi il **invio** pulsante, verrà visualizzato il testo nel controllo connesso (non essere visualizzato se i controlli sono stati disconnessi). Se si sceglie il **Disconnect** pulsante, i controlli saranno disconnessa. È possibile verificare lo stato della connessione dei controlli mediante il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina in **Connect** modalità. Successivamente, fare clic sul menu dei verbi (rappresentato da una freccia) nella barra del titolo di uno dei controlli e selezionare il **Connetti** elemento. Viene visualizzata la connessione dell'interfaccia utente; è disponibile poiché è presente un `<asp:connectionszone>` elemento dichiarato nella pagina. È inoltre possibile connettersi e disconnettere i controlli da questa interfaccia utente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connection" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connection" /> is not contained in either <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" /> or <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" /> is read-only.  \- or -  <paramref name="connection" /> has already been disconnected from <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />.  \- or -  <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" /> is read-only.  \- or -  <paramref name="connection" /> has already been disconnected from <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />.</exception>
        <block subset="none" type="overrides">
          <para>È possibile eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" /> metodo se si desidera modificare l'implementazione predefinita per la disconnessione <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controlli. Se si esegue l'override del metodo e si desidera aggiungere un'implementazione di metodo esistente, è possibile chiamare il metodo di base prima di eseguire codice personalizzato.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="DisplayMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartDisplayMode DisplayMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayMode DisplayMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DisplayMode As WebPartDisplayMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ DisplayMode { System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ get(); void set(System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the active display mode for a Web page that contains Web Parts controls.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> che determina la modalità di visualizzazione della pagina.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una pagina che contiene i controlli Web part è sempre in uno dei numerosi possibili modalità di visualizzazione. Per informazioni dettagliate sulle modalità di visualizzazione, vedere [modalità di visualizzazione Web part pagina](http://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4).  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe crea le modalità di visualizzazione per una pagina Web. Utilizzo della base <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> (classe), il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo crea diversi oggetti di modalità di visualizzazione standard che possono essere usati nelle pagine che contengono i controlli Web part. Sono descritte in queste modalità di visualizzazione standard di <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> Cenni preliminari sulla classe.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo gestisce inoltre le modalità di visualizzazione per le pagine che utilizzano i controlli Web part. Utilizzando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> proprietà, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo mantiene un riferimento per la modalità di visualizzazione corrente in una pagina. È anche possibile usare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> proprietà per passare una pagina in diverse modalità di visualizzazione. Per un esempio di modifica delle modalità di visualizzazione in una pagina che utilizza i controlli Web part, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Come parte di gestione della modalità di visualizzazione, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo fornisce anche eventi e gestori di eventi relativi alla modalità di visualizzazione, ad esempio il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A> metodo e il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> metodo. Questi metodi forniscono un meccanismo per la personalizzazione del comportamento della pagina e anche per l'aggiunta di una modalità di visualizzazione personalizzate.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> proprietà. Dopo il caricamento della pagina in un browser, è possibile utilizzare i pulsanti nella parte inferiore della pagina per cambiare la modalità di visualizzazione. La pagina è in modalità browse per impostazione predefinita al momento del caricamento. Se si passa alla modalità progettazione, è possibile trascinare i controlli server da una zona o disporre di due controlli all'interno di una zona. Se si passa alla modalità di modifica, è possibile fare clic sul menu dei verbi nell'intestazione del controllo server, selezionare **modifica**e modificare il controllo mediante l'interfaccia utente modifica fornita (UI).  
  
> [!NOTE]
>  Il passaggio tra modalità di visualizzazione in un'applicazione Web part è molto comune, e si potrebbe voler fornire un modo coerenza e riutilizzabile per eseguire questa operazione in tutte le pagine che contengono i controlli Web part. Per un esempio di un controllo utente che modifica modalità di visualizzazione e che possa essere riutilizzato in più pagine, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayMode/CS/wpmgrDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayMode/VB/wpmgrDisplayModevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> object being assigned to the property is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> object being assigned to the property is not one of the supported display modes.  \- or -  The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> object being assigned to the property is disabled.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
      </Docs>
    </Member>
    <Member MemberName="DisplayModeChanged">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler DisplayModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler DisplayModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DisplayModeChanged As WebPartDisplayModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartDisplayModeEventHandler ^ DisplayModeChanged;" />
      <MemberSignature Language="F#" Value="member this.DisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler " Usage="member this.DisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the current display mode on a Web Parts page has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modalità di visualizzazione sono parte integrante delle applicazioni Web part. Quando gli utenti passa alla modalità di visualizzazione diverse di una pagina Web, la pagina spesso avrà un aspetto molto diversi, a seconda dello scopo della nuova modalità di visualizzazione. Dopo aver modificato una modalità di visualizzazione, potrebbe apportare alcune modifiche nell'interfaccia utente (UI), ad esempio nascondere o mostrare determinati controlli, modifica dell'aspetto degli elementi dell'interfaccia utente selezionati e così via.  
  
> [!NOTE]
>  Per ulteriori informazioni sulle modalità di visualizzazione, vedere [modalità di visualizzazione Web part pagina](http://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4). Per ulteriori informazioni sull'utilizzo degli eventi, vedere [procedura: utilizzare eventi in un'applicazione Web Form](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DisplayModeChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler DisplayModeChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler DisplayModeChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DisplayModeChanging As WebPartDisplayModeCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartDisplayModeCancelEventHandler ^ DisplayModeChanging;" />
      <MemberSignature Language="F#" Value="member this.DisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler " Usage="member this.DisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a user clicks a verb on a Web page that begins the process of changing to a different display mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modalità di visualizzazione sono parte integrante delle applicazioni Web part. Quando gli utenti passa alla modalità di visualizzazione diverse di una pagina Web, la pagina spesso avrà un aspetto molto diversi, a seconda dello scopo della nuova modalità di visualizzazione. Dopo che un utente avvia il processo di modifica a una nuova modalità di visualizzazione facendo clic su un verbo, è possibile apportare determinate modifiche nell'interfaccia utente (UI) utilizzando il <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode%2A> proprietà per determinare quali verranno la nuova modalità di visualizzazione e quindi modificando diverse dell'interfaccia utente gli elementi di conseguenza. Un modo utile per eseguire questa operazione è per eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> metodo per personalizzare l'interfaccia utente.  
  
> [!NOTE]
>  Per ulteriori informazioni sulle modalità di visualizzazione, vedere [modalità di visualizzazione Web part pagina](http://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4). Per ulteriori informazioni sull'utilizzo degli eventi, vedere [procedura: utilizzare eventi in un'applicazione Web Form](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DisplayModes">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection DisplayModes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection DisplayModes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayModes As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ DisplayModes { System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayModes : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a read-only collection of all display modes that are associated with a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> che contiene il set di <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> oggetti associati con la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> riferimenti a proprietà tutti associati modalità di visualizzazione, al contrario del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà, che fa riferimento solo alle modalità di visualizzazione disponibili (supportato) nella pagina corrente.  
  
 Due modalità di visualizzazione fornito, esplorazione e progettazione, sono sempre supportate in una pagina. Altri tre modalità di visualizzazione, modifica, catalogo e le connessioni, sono supportate solo quando una pagina contiene il tipo corrispondente della zona necessario per una specifica modalità di visualizzazione funzionare. Ad esempio, se la pagina non contiene un' <xref:System.Web.UI.WebControls.WebParts.EditorZone> zona, la modalità di visualizzazione di modifica verrà visualizzati nella raccolta cui fa il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> proprietà, ma non sarà presente nella raccolta cui fa riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> proprietà. Il codice utilizza questa proprietà per popolare l'elenco con tutte le modalità di visualizzazione disponibile nell'insieme di controlli Web part, anche quelli che non sono supportati nella pagina corrente. In questo caso, il catalogo e connettersi visualizzazione non sono supportate, corrispondenti necessari zone non sono presenti nella pagina.  
  
 Gli altri tre modalità: di visualizzazione esplorazione, progettazione e modifica - sono supportati nella pagina. Modificare la modalità è supportata perché la pagina contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> di zona, durante l'esplorazione e le modalità di progettazione sono sempre supportate.  
  
 Dopo aver caricato la pagina in un browser, è possibile utilizzare il controllo elenco a discesa per passare dalla modalità browse alla modalità progettazione, quindi alla modalità di modifica. In modalità di modifica, è possibile fare clic sul menu a discesa dei verbi nell'intestazione di uno dei controlli server e selezionare **modifica** la modifica del controllo. Si noti che se si seleziona **Catalog** oppure **Connect** nell'elenco a discesa, viene generato un errore di pagina.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayModes/CS/wpmgrDisplayModescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayModes/VB/wpmgrDisplayModesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
      </Docs>
    </Member>
    <Member MemberName="DynamicConnections">
      <MemberSignature Language="C#" Value="protected internal System.Web.UI.WebControls.WebParts.WebPartConnectionCollection DynamicConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection DynamicConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property DynamicConnections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ DynamicConnections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynamicConnections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of all dynamic connections that currently exist on a Web page.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> contenente riferimenti a tutte le connessioni dinamiche in una pagina.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le connessioni dinamiche sono creati a livello di codice, anziché in modo statico. Connessioni statiche vengono create dichiarandoli nel markup della pagina Web Form. Le connessioni dinamiche vengono generate a livello di codice o da un utente che ha creato una connessione tramite l'interfaccia di connessione utente (UI).  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A> insieme, sebbene sia in sola lettura ed è possibile modificarne il contenuto, consente l'accesso a livello di codice per ogni oggetto di connessione dinamica.  
  
> [!NOTE]
>  Per eseguire operazioni comuni, ad esempio la connessione o disconnessione <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, gli sviluppatori devono usare i metodi pubblici nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager> class, ad esempio <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, anziché tentare di modificare direttamente connessione gli oggetti di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A> insieme.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID" />
      </Docs>
    </Member>
    <Member MemberName="EditDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode EditDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode EditDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EditDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ EditDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable EditDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the display mode in which end users can edit and modify server controls. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> campo fa riferimento a un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> oggetto che viene creato e contenuto di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Poiché si tratta di un oggetto statico, è possibile fare riferimento ad esso direttamente tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe senza utilizzare un'istanza del controllo.  
  
 Quando una pagina che contiene le Web part controlli primo caricamento, è presente nel <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modalità browse) per impostazione predefinita. Quando gli utenti desiderano modificare o modificare un controllo server, devono passare prima pagina per <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> (modalità di modifica). In secondo luogo, è necessario selezionare un controllo server specifico da modificare, scegliendo il verbo di modifica del menu dei verbi nell'intestazione del controllo. Dopo il controllo è in modalità di modifica, viene visualizzata l'interfaccia utente di modifica (UI) per modificare il controllo selezionato.  
  
 Per abilitare la modalità di modifica in una pagina, la pagina deve contenere almeno <xref:System.Web.UI.WebControls.WebParts.EditorZone> i controlli zona che include uno o più di modifica forniti, come il <xref:System.Web.UI.WebControls.WebParts.LayoutEditorPart> controllo o controlli di modifica personalizzati.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> campo a livello di codice. Il codice consente di popolare un elenco di riepilogo a discesa con le modalità di visualizzazione supportate per la pagina, in questo caso sono esplorazione, progettazione e modifica. Per supportare la modifica, un `<asp:EditorZone>` elemento è nella pagina. Si noti che, nel `Page_PreRender` metodo, il codice controlla se l'oggetto corrente <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> è impostata su <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>. In tal caso, `Label1` saranno visibili in caso contrario, `Label1` verranno nascoste.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_EditDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_EditDisplayMode/CS/wpmgrEditDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_EditDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_EditDisplayMode/VB/wpmgrEditDisplayModevb.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, si è in modalità browse per impostazione predefinita. Nota: l'etichetta nella pagina è nascosta. Utilizzare il controllo elenco a discesa per passare alla modalità di modifica. Si noti che, a causa di codice il `Page_PreRender` metodo, l'etichetta è visibile. Fare clic sui **modifica** verbo nel menu dei verbi in uno dei controlli, per abilitare la modifica del controllo specifico.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public virtual bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableClientScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableClientScript : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether client-side scripting is enabled on the Web page that contains a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>Valore booleano che indica se è possibile eseguire lo script client nella pagina. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A> proprietà fornisce un modo per gli sviluppatori disabilitare gli script client. Si consiglia di disabilitare il client di scripting per motivi di sicurezza o per verificare che tutti gli utenti di una pagina avrà un'esperienza utente simile, anche se utilizzano browser diversi.  
  
 È possibile disabilitare mediante l'aggiunta di script client un' `EnableClientScript` attributo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> elemento in una pagina Web, come la seguente riga di codice dichiarativo:  
  
 `<asp:webpartmanager id="manager" runat="server"`  
  
 `EnableClientScript="false" />`  
  
 Gli sviluppatori possono inoltre eliminare questa proprietà tramite l'eredità dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe e impostando il valore predefinito valore `false`.  
  
 Il set di controlli Web part utilizza per fornire alcuni dei client interfaccia utente (UI) e funzionalità di personalizzazione di script client. Se si disabilita client scripting, Web part controlli continueranno a funzionare, ma alcune funzionalità sono disabilitate. La possibilità di trascinare i controlli in aree diverse è disabilitata, nonché la possibilità di eseguire il rendering dei verbi in un menu a discesa nella barra del titolo di un controllo (i verbi vengono invece visualizzati come collegamenti nella barra del titolo del controllo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EnableTheming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableTheming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableTheming : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating that the use of themes is enabled on a Web page.</summary>
        <value>Valore booleano che indica se i temi sono abilitati. <see langword="true" /> in tutti i casi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo esegue l'override della base <xref:System.Web.UI.Control.EnableTheming%2A> per verificare che restituisca sempre un valore di proprietà `true`. Ciò avviene perché le Web part insieme di controlli richiede l'uso dei temi per eseguire il rendering le Web part i controlli che sono controlli figlio del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo e che costituiscono l'interfaccia utente (UI) di una pagina Web. Ad esempio, vengono utilizzati per eseguire il rendering delle varie aree e i controlli che si trovano in aree, inclusi i diversi tipi di controlli parte (i controlli che ereditano dal <xref:System.Web.UI.WebControls.WebParts.Part> classe), controlli utente, i controlli server ASP.NET e server personalizzato controlli.  
  
 Anche se sottoposto a override <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A> proprietà viene implementata come una proprietà di lettura/scrittura in base alle relative proprietà di base, non è possibile impostare la proprietà, perché per impostazione predefinita deve sempre restituire un valore di `true`. Se si tenta di impostare la proprietà, un <xref:System.NotSupportedException> generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the property value.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWebPartConnecting">
      <MemberSignature Language="C#" Value="public virtual void EndWebPartConnecting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWebPartConnecting() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWebPartConnecting ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWebPartConnecting();" />
      <MemberSignature Language="F#" Value="abstract member EndWebPartConnecting : unit -&gt; unit&#xA;override this.EndWebPartConnecting : unit -&gt; unit" Usage="webPartManager.EndWebPartConnecting " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completes the process of connecting a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control to another control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A> metodo completa il processo di connessione di un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo su un altro controllo. È la controparte per la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A> metodo.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A> metodo assicura che l'oggetto di personalizzazione fa riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà è modificabile, che è necessario perché la formazione di una connessione è a sua volta un tipo di personalizzazione. Il metodo verifica quindi che il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> l'oggetto non è `null`e infine chiama la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The control referenced by the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> property is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che desiderano estendere il <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo potrebbe essere necessario eseguire l'override di questo metodo in una classe derivata. Uno degli approcci disponibili, è possibile chiamare il metodo di base e quindi aggiungere alcune per la gestione personalizzata oppure si potrebbe voler personalizzare completamente l'intero processo di completamento di una connessione tra i controlli.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="EndWebPartEditing">
      <MemberSignature Language="C#" Value="public virtual void EndWebPartEditing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWebPartEditing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWebPartEditing ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWebPartEditing();" />
      <MemberSignature Language="F#" Value="abstract member EndWebPartEditing : unit -&gt; unit&#xA;override this.EndWebPartEditing : unit -&gt; unit" Usage="webPartManager.EndWebPartEditing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completes the process of editing a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> metodo completa il processo di modifica un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo. È la controparte per la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> metodo.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> metodo assicura che l'oggetto di personalizzazione fa riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà è modificabile, che è necessario perché la modifica di un controllo è un processo che richiede le modifiche di personalizzazione. Il metodo verifica quindi che il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> l'oggetto non è `null`, in modo che attualmente selezionato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo possa essere modificato e infine chiama la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The control referenced by the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> property is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che desiderano estendere il <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo potrebbe essere necessario eseguire l'override di questo metodo in una classe derivata. Uno degli approcci disponibili, è possibile chiamare il metodo di base e quindi aggiungere alcune per la gestione personalizzata oppure si potrebbe voler personalizzare completamente l'intero processo di completamento di modifica di un controllo. Ad esempio, nel metodo di override, è possibile chiamare innanzitutto il metodo di base e quindi aggiungere codice che determina quali modifiche sono state apportate e consente di visualizzare l'elenco di modifiche all'utente finale come un messaggio di conferma.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ExportSensitiveDataWarning">
      <MemberSignature Language="C#" Value="public virtual string ExportSensitiveDataWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExportSensitiveDataWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ExportSensitiveDataWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ExportSensitiveDataWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExportSensitiveDataWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text of a warning message that is displayed when a user attempts to export sensitive state data from a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <value>Stringa che contiene il messaggio di avviso. Il messaggio predefinito è un valore specifico delle impostazioni cultura fornito da .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un utente tenta di esportare i dati sensibili dello stato da un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo, se i dati che si desidera esportare provengono da un membro che è stato contrassegnato come riservato nel codice sorgente, all'utente in una finestra di messaggio informa che viene visualizzato un messaggio di avviso in fase di esportazione dei dati sensibili e fornendo un'opportunità per annullare l'esportazione. Gli sviluppatori possono contrassegnare i dati di un membro specifico impostando il `isSensitive` parametro del `[Personalizable]` attributo `true` sul membro. Per ulteriori informazioni su questo attributo e un parametro, vedere il <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute> classe.  
  
> [!IMPORTANT]
>  Quando si usa la funzionalità di esportazione di Web part, i dati sensibili possono essere esportati potenzialmente a utenti non autorizzati. Per informazioni dettagliate su come proteggersi da questa minaccia, vedere [protezione delle pagine Web part](http://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 Ogni volta che gli utenti tentano di esportazione, viene visualizzato il messaggio predefinito. Tuttavia, assegnando un valore per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> proprietà, è possibile fornire un messaggio di avviso personalizzati.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo dichiarativo del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> proprietà.  
  
 Il codice per la seguente pagina Web utilizza uno standard <xref:System.Web.UI.WebControls.BulletedList> controllare e lo inserisce in una zona. Il controllo sarà incluso in un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo in fase di esecuzione, in modo da agire come un vero <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo. Per rendere il controllo può essere esportata, un `ExportMode` attributo viene aggiunto per il `<asp:bulletedlist>` elemento e il valore dell'attributo è impostato su <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.All>, il che significa che i dati sensibili sia non sensibili può essere esportato. Si noti inoltre che il `<asp:webpartmanager>` elemento, il `ExportSensitiveDataWarning` attributo viene assegnato un valore personalizzato.  
  
 Si noti che per l'esempio di codice siano funzionanti, è presente l'impostazione che è necessario aggiungere il file Web. config per abilitare l'esportazione dei file di descrizione di Web part. Verificare di disporre di un file Web. config nella stessa directory della pagina Web per questo esempio di codice. All'interno di `<system.web>` sezione, assicurarsi che sia presente un `<webParts>` elemento con un `enableExport` attributo impostato su `true`, come nel seguente codice.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ExportSensitiveData#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ExportSensitiveData/CS/wpmgrExportSensitiveWarningCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ExportSensitiveData#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ExportSensitiveData/VB/wpmgrExportSensitiveWarningVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, fare clic sul menu dei verbi (rappresentato da una freccia verso il basso) nella barra del titolo del controllo che contiene i collegamenti. Nel menu di verbi, selezionare **esportare**e si noti che viene visualizzata una finestra di messaggio con il messaggio di avviso personalizzato. Se si desidera continuare con l'esportazione, fare clic su **OK**, che consente di salvare una copia locale di un file di descrizione XML con tutti i dati sul controllo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ExportWebPart">
      <MemberSignature Language="C#" Value="public virtual void ExportWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExportWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member ExportWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Xml.XmlWriter -&gt; unit&#xA;override this.ExportWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Xml.XmlWriter -&gt; unit" Usage="webPartManager.ExportWebPart (webPart, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="webPart">The control from which data will be exported.</param>
        <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> that writes the exported data from <c>webPart</c> to an XML description file.</param>
        <summary>Creates an XML description file that contains state and property data for a server control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> metodo Assembla diversi dati di stato e di proprietà da `webPart` in un file XML. I dati includono informazioni sul controllo, compresi i dati sullo stato, assembly e i dati della proprietà. L'utente che avvia l'esportazione può salvare il file XML su disco nel computer locale o in rete. Altri utenti possono quindi importare il file di descrizione in una pagina diversa o un sito Web e applicare i dati dello stato e proprietà a un'istanza diversa di `webPart`. Fornisce un meccanismo rapido e semplice per gli utenti di condividere e riutilizzare le impostazioni dei controlli server e fornisce inoltre agli sviluppatori di un modo per controllare l'aspetto e il comportamento dei controlli esportati e importati.  
  
 Proprietà `webPart` non vengono esportati per impostazione predefinita. Per abilitare l'esportazione di una proprietà, è necessario contrassegnarlo con il `[Personalizable]` attributo nel codice sorgente. È anche possibile contrassegnare una proprietà può essere esportata come contenente dati sensibili, impostando il `isSensitive` parametro del `[Personalizable]` attributo `true`. Per impostazione predefinita `isSensitive` è `false`. Gli sviluppatori possono impostare il parametro `true` per indicare che i dati sensibili.  
  
 Per abilitare `webPart` per l'esportazione, lo sviluppatore imposta relativi <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> valore della proprietà da uno <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.All> (che include tutte le proprietà personalizzabili e sensibili), o a <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.NonSensitiveData>, che consente di esportare tutti gli elementi tranne le proprietà riservate .  
  
> [!IMPORTANT]
>  Consentire agli utenti di esportare i dati da controlli e per importare dati in altri controlli, comporta alcuni rischi di protezione. Gli sviluppatori devono usare l'approccio illustrato in precedenza per proteggere dati riservati e se si desidera evitare il rischio di esposizione dei dati, dovranno non abilitare l'esportazione in `webPart` affatto. Per informazioni dettagliate sui problemi di sicurezza di Web part, vedere [protezione delle pagine Web part](http://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.  \- or -  <paramref name="writer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is not contained in the collection of controls referenced in <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />.  \- or -  The <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" /> property of <paramref name="webPart" /> is set to a value of <see cref="F:System.Web.UI.WebControls.WebParts.WebPartExportMode.None" />, which means that export is disabled for <paramref name="webPart" />.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberSignature Language="F#" Value="override this.Focus : unit -&gt; unit" Usage="webPartManager.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Overridden to prevent focus from ever being set on the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control, because it has no user interface (UI).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Focus%2A> metodo esegue l'override della base <xref:System.Web.UI.Control.Focus%2A?displayProperty=nameWithType> (metodo) e genera un'eccezione se il chiamante chiama il metodo. Poiché il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo non dispone di alcuna interfaccia utente e non è mai visibile agli utenti, è possibile non consentire mai lo stato attivo deve essere impostato su se stesso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">A caller tries to call the <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.Focus" /> method, which is not supported in a control that has no UI.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetConsumerConnectionPoints">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection GetConsumerConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection GetConsumerConnectionPoints(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConsumerConnectionPointCollection ^ GetConsumerConnectionPoints(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetConsumerConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection&#xA;override this.GetConsumerConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection" Usage="webPartManager.GetConsumerConnectionPoints webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A server control that is acting as a consumer in a connection.</param>
        <summary>Retrieves the collection of <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> objects that can act as connection points from a server control that is acting as a consumer within a Web Parts connection.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection" /> that contains all connection points in the consumer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sempre una connessione Web part richiede esattamente due controlli, uno che funge da provider di dati, l'altro che funge da consumer di dati. Ogni controllo deve avere uno o più metodi che sono definiti come punti di connessione. Nel caso di un controllo consumer, i relativi punti di connessione sono <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetti. Il recupero dei punti di connessione consumer è un passaggio necessario stabilire una connessione Web part.  
  
 Un consumer deve sempre disporre di almeno un punto di connessione per essere in grado di stabilire una connessione. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodo controlla un controllo consumer e recupera una raccolta di tutti i relativi punti di connessione. Se un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo non dispone di alcun punto di connessione, il metodo restituisce una raccolta vuota.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina Web part.  
  
-   Una pagina Web che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connesso, e un `<asp:webpartmanager>` elemento.  
  
-   Un file di codice sorgente che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un'interfaccia personalizzata.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere l'argomento [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Il markup dichiarativo per la pagina Web contiene `Register` direttive per il controllo utente e i controlli personalizzati. È un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento per contenere i controlli personalizzati e un `<asp:connectionszone>` elemento. Si noti che il `Page_Load` metodo, il codice verifica se una connessione già esiste e, in caso contrario, definisce un provider, un consumer e i rispettivi punti di connessione e quindi aggiunge una nuova connessione al set di connessioni statiche a cui fanno riferimento i <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> proprietà. Si noti che il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection> oggetto che viene recuperato utilizzando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodo viene quindi passato al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> metodo per determinare se è possibile creare una connessione tra i due controlli.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La terza parte dell'esempio è il codice sorgente per i controlli. È possibile ottenere questo codice e le istruzioni per la compilazione, dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe.  
  
 Dopo aver caricato la pagina Web in un browser, fare clic sui **modalità di visualizzazione** controllo elenco a discesa e selezionare **Connect** per passare alla modalità di connessione. La connessione utilizza la modalità di `<asp:connectionszone>` elemento consentono di creare connessioni tra i controlli. Nella modalità di connessione, fare clic sulla freccia verso il basso nella barra del titolo del **CAP** per attivare il menu dei verbi di controllo e quindi fare clic su **Connect**. Dopo che viene visualizzata l'interfaccia di connessione utente (UI), si noti che una connessione è stata già creata dal codice contenuto nel `Page_Load` metodo. Se si torna a questa pagina in una sessione browser successiva, questa connessione statica sarà già stata stabilita e non dovrà essere ricreato ogni volta che il caricamento della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentWebPartManager">
      <MemberSignature Language="C#" Value="public static System.Web.UI.WebControls.WebParts.WebPartManager GetCurrentWebPartManager (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.WebControls.WebParts.WebPartManager GetCurrentWebPartManager(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::WebControls::WebParts::WebPartManager ^ GetCurrentWebPartManager(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="static member GetCurrentWebPartManager : System.Web.UI.Page -&gt; System.Web.UI.WebControls.WebParts.WebPartManager" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">The Web page that contains an instance of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</param>
        <summary>Retrieves a reference to the current instance of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control on a page.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> that references the current instance of the control on a page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> metodo è utile nei contesti in cui si desidera recuperare un riferimento all'oggetto corrente <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. È in uno scenario comune in cui questa situazione si verifica se si scrive un controllo personalizzato che non è possibile conoscere durante lo sviluppo quali l'ID del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo nella relativa pagina sarà.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> metodo è statico, pertanto è possibile chiamare direttamente senza la necessità di un'istanza di un <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo.  
  
 Alcuni controlli Web part insieme di controlli, ad esempio <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, dispongono di un <xref:System.Web.UI.WebControls.WebParts.WebPart.WebPartManager%2A> proprietà che può recuperare un riferimento all'oggetto corrente <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Di conseguenza, quando si utilizzano tali controlli, utilizzare questa proprietà per recuperare un riferimento.  
  
 Se si esegue la codifica in un contesto in cui si conosce l'ID del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare, ad esempio la scrittura di codice inline all'interno di una pagina Web, è più semplice ed efficace per fare riferimento direttamente al <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo utilizzando il relativo ID.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A>. Nell'esempio è costituito da due parti: un controllo server personalizzato e una pagina Web che ospiti il controllo.  
  
 L'oggetto personalizzato <xref:System.Web.UI.WebControls.Label> controlli utilizza la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> metodo per recuperare l'ID del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo nella pagina corrente, quindi viene visualizzato l'ID.  
  
 [!code-csharp[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/CS/MyManagerIDLabel.cs#2)]
 [!code-vb[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/VB/MyManagerIDLabel.vb#2)]  
  
 L'esempio di codice seguente viene fornita la pagina Web che ospita il controllo in un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/CS/getCurrentWPManagerCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/VB/getcurrentWPManagervb.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, si noti che l'ID dell'oggetto corrente <xref:System.Web.UI.WebControls.WebParts.WebPartManager> viene visualizzato all'interno del controllo <xref:System.Web.UI.WebControls.Label> controllo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDisplayTitle">
      <MemberSignature Language="C#" Value="protected internal virtual string GetDisplayTitle (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetDisplayTitle(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ GetDisplayTitle(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetDisplayTitle : System.Web.UI.WebControls.WebParts.WebPart -&gt; string&#xA;override this.GetDisplayTitle : System.Web.UI.WebControls.WebParts.WebPart -&gt; string" Usage="webPartManager.GetDisplayTitle webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The control for which the method returns the value of <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" />.</param>
        <summary>Gets a string containing the value for the <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" /> property of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <returns>A string that contains the calculated value of <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" /> for <paramref name="webPart" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ottiene il valore calcolato della <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A> proprietà per `webPart`. Quando gli sviluppatori si assegnano un valore per il <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> proprietà di un <xref:System.Web.UI.WebControls.WebParts.WebPart> (controllo), questo metodo produce il valore da visualizzare come titolo. Il valore calcolato per i controlli senza nome è costituito da un numero aggiunto a una stringa con il numero che indica la sequenza di un controllo all'interno della zona corrente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is not in the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection.</exception>
        <block subset="none" type="overrides">
          <para>Questo metodo può essere sottoposto a override per modificare la modalità di calcolo il titolo da visualizzare per impostazione predefinita.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" />
      </Docs>
    </Member>
    <Member MemberName="GetExportUrl">
      <MemberSignature Language="C#" Value="public string GetExportUrl (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetExportUrl(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetExportUrl(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.GetExportUrl : System.Web.UI.WebControls.WebParts.WebPart -&gt; string" Usage="webPartManager.GetExportUrl webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> that is being exported.</param>
        <summary>Gets the relative virtual path and the query string that are part of the request when a user attempts to export a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <returns>A string that contains the relative virtual path and the query string that together form the request to export a control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl%2A> metodo è un percorso virtuale relativo al percorso del server della pagina che contiene il controllo e il valore di stringa di query che forma la richiesta di esportazione è inviata al server. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl%2A> metodo codifica la stringa prima di consentire alla richiesta da inviare, per proteggersi da attacchi di uno script dannoso.  
  
> [!NOTE]
>  Per ulteriori informazioni sulla protezione di applicazioni Web part, vedere [protezione delle pagine Web part](http://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.GenericWebPart GetGenericWebPart (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.GenericWebPart GetGenericWebPart(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::GenericWebPart ^ GetGenericWebPart(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetGenericWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart" Usage="webPartManager.GetGenericWebPart control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.GenericWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">A server control that exists in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> and is wrapped as a child control of a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> at run time.</param>
        <summary>Gets a reference to the instance of the <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> control that contains a server control.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> that wraps <paramref name="control" /> as a child control. The method returns <see langword="null" /> if <paramref name="control" /> is not contained in a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In generale, esistono due categorie di controlli che gli sviluppatori posizionano nelle <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone deve far parte di applicazioni Web part: <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che ereditano dal <xref:System.Web.UI.WebControls.WebParts.WebPart> classe di base e altri controlli server, che possono essere standard I controlli ASP.NET, i controlli personalizzati o controlli utente. Quando uno di questi controlli è posizionato in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona, assume la funzionalità di un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo. Oggetto <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo dispone di implicitamente questa funzionalità, ma non altri tipi di controlli server. Per abilitare gli altri controlli server di agire come <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla quando questi vengono collocati in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona, ASP.NET esegue il wrapping con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo. Poiché il <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo eredita direttamente il <xref:System.Web.UI.WebControls.WebParts.WebPart> (classe), fornisce i controlli figlio con le funzionalità Web part true.  
  
 Spesso in fase di esecuzione, gli sviluppatori di pagina potrebbe essere necessario ottenere un riferimento per il <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo contenente uno dei controlli server in una zona. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> metodo consente di recuperare un riferimento al <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> metodo. L'esempio di codice contiene una <xref:System.Web.UI.WebControls.Calendar> controllo dichiarati all'interno di un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona. Il `Button1_Click` metodo stampa prima di tutto l'ID del <xref:System.Web.UI.WebControls.Calendar> controllo a un'etichetta, quindi viene utilizzato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> metodo per recuperare un riferimento al <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo che esegue il wrapping del calendario. L'ID del <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo e l'ID del controllo figlio (ovvero il <xref:System.Web.UI.WebControls.Calendar> controllo), vengono stampati in una seconda etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_GetGenericWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetGenericWebPart/CS/getGenericWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_GetGenericWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetGenericWebPart/VB/getGenericWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />
      </Docs>
    </Member>
    <Member MemberName="GetProviderConnectionPoints">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection GetProviderConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection GetProviderConnectionPoints(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ProviderConnectionPointCollection ^ GetProviderConnectionPoints(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetProviderConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection&#xA;override this.GetProviderConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection" Usage="webPartManager.GetProviderConnectionPoints webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A server control that is acting as a provider in a connection.</param>
        <summary>Retrieves the collection of <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> objects that can act as connection points from a server control that is acting as a provider within a Web Parts connection.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection" /> that contains all connection points in the provider.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sempre una connessione Web part richiede esattamente due controlli, uno che funge da provider di dati, l'altro che funge da consumer di dati. Ogni controllo deve avere uno o più metodi che sono definiti come punti di connessione. Nel caso di un controllo di provider, i relativi punti di connessione sono <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetti.  
  
 Un provider deve sempre avere almeno un punto di connessione per essere in grado di stabilire una connessione. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodo controlla un controllo di provider e recupera una raccolta di tutti i relativi punti di connessione. Il recupero dei punti di connessione del provider è un passaggio necessario stabilire una connessione Web part.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina Web part.  
  
-   Una pagina Web che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connesso, e un `<asp:webpartmanager>` elemento.  
  
-   Un file di codice sorgente che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un'interfaccia personalizzata.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Il markup dichiarativo per la pagina Web contiene `Register` direttive per il controllo utente e i controlli personalizzati. È un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento per contenere i controlli personalizzati e un `<asp:connectionszone>` elemento. Si noti che il `Page_Load` metodo, il codice verifica se una connessione già esiste e, in caso contrario, definisce un provider, un consumer e i rispettivi punti di connessione e quindi aggiunge una nuova connessione al set di connessioni statiche a cui fanno riferimento i <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> proprietà. Si noti che il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection> oggetto che viene recuperato utilizzando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodo viene quindi passato al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> metodo per determinare se è possibile creare una connessione tra i due controlli.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La terza parte dell'esempio è il codice sorgente per i controlli. È possibile ottenere questo codice e le istruzioni per la compilazione, dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe.  
  
 Dopo aver caricato la pagina Web in un browser, fare clic sui **modalità di visualizzazione** controllo elenco a discesa e selezionare **Connect** per passare alla modalità di connessione. La connessione utilizza la modalità di `<asp:connectionszone>` elemento consentono di creare connessioni tra i controlli. Nella modalità di connessione, fare clic sulla freccia verso il basso nella barra del titolo del **CAP** per attivare il menu dei verbi di controllo e quindi fare clic su **Connect**. Dopo che viene visualizzata l'interfaccia di connessione utente (UI), si noti che una connessione è stata già creata dal codice contenuto nel `Page_Load` metodo. Se si torna a questa pagina in una sessione browser successiva, questa connessione statica sarà già stata stabilita e non dovrà essere ricreato ogni volta che il caricamento della pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ImportWebPart">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPart ImportWebPart (System.Xml.XmlReader reader, out string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPart ImportWebPart(class System.Xml.XmlReader reader, [out] string&amp; errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportWebPart (reader As XmlReader, ByRef errorMessage As String) As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPart ^ ImportWebPart(System::Xml::XmlReader ^ reader, [Runtime::InteropServices::Out] System::String ^ % errorMessage);" />
      <MemberSignature Language="F#" Value="abstract member ImportWebPart : System.Xml.XmlReader *  -&gt; System.Web.UI.WebControls.WebParts.WebPart&#xA;override this.ImportWebPart : System.Xml.XmlReader *  -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.ImportWebPart (reader, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="errorMessage" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reader">An <see cref="T:System.Xml.XmlReader" /> that reads the state and property data from the XML description file that is being imported.</param>
        <param name="errorMessage">A <see cref="T:System.String" /> that is displayed to the user if an error is encountered during import.</param>
        <summary>Imports an XML description file that contains state and property data for a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control, and applies the data to the control.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (or a server control that is wrapped by a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> and thus treated as a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />) that is referenced in the imported XML description file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> metodo importa un file di descrizione XML che è stato creato con il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> metodo per un controllo server. Non è il controllo effettivo del server che verrà importato, ma solo il file di descrizione contenente i dati di stato e di proprietà sul controllo. Il controllo e l'assembly cui viene fatto riferimento nel file description deve già essere disponibili nel server in cui un utente tenta di importare il file di descrizione.  
  
 Per abilitare l'importazione di un controllo, uno sviluppatore deve aggiungere un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> controllo nella pagina in cui l'importazione verrà abilitata. All'interno della zona, un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> controllo deve essere aggiunto. Questo controllo fornisce una finestra di dialogo che consente agli utenti di individuare il file di descrizione da importare.  
  
 Dopo che un utente consente di individuare un file di descrizione e ha iniziato l'importazione, il file di descrizione viene letto dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> metodo. Se non sono presenti errori e se l'assembly e il controllo non viene trovati, il controllo server viene aggiunto al catalogo all'interno di <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> controllo e le varie proprietà e dati di stati specificati nel file di descrizione vengono applicati al controllo. L'utente può quindi selezionare il controllo e aggiungerlo alla pagina.  
  
> [!IMPORTANT]
>  Ad esempio il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> metodo, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> metodo presenta alcune potenziali rischi di protezione. Perché include l'importazione di dati in un sito Web, un utente malintenzionato può provare a inserire i dati errati o script nel file di descrizione che viene importato. Quindi i dati errati possono apparire in una pagina o in un database o è stato possibile eseguire lo script. Per una panoramica sui potenziali rischi associati all'importazione di file di descrizione e metodi per evitare tali rischi, vedere [protezione delle pagine Web part](http://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.EndOfStreamException">
          <paramref name="reader" /> could not read the file.  \- or -  <paramref name="reader" /> needed to display an import error message but did not find one in the file.  \- or -  <paramref name="reader" /> reached the end of the file without finding the XML element that contains the exported data.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Internals">
      <MemberSignature Language="C#" Value="protected System.Web.UI.WebControls.WebParts.WebPartManagerInternals Internals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartManagerInternals Internals" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Internals" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Internals As WebPartManagerInternals" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::WebControls::WebParts::WebPartManagerInternals ^ Internals { System::Web::UI::WebControls::WebParts::WebPartManagerInternals ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Internals : System.Web.UI.WebControls.WebParts.WebPartManagerInternals" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Internals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartManagerInternals</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" /> class, which is used to combine and separate a set of methods that are actually implemented in the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> class, but are mostly useful for control developers.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />, tramite il quale un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> possono fare riferimento i vari metodi che sono stati separati nel <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> proprietà espone l'API per la chiamata in un set di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> i metodi usati soprattutto nei casi di estendibilità.  
  
 Sono progettati per utilizzare questi metodi interni per accedervi tramite la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> proprietà. Perché la proprietà è protetta, è possibile solo accedervi e chiamare i metodi all'interno di un'istanza di <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> ereditando dalla classe il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> (classe).  
  
> [!NOTE]
>  Questa proprietà è nascosta da IntelliSense in [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)]. Tuttavia, in un oggetto derivato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> (classe), è comunque possibile accedere la proprietà e i relativi membri diversi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAuthorized">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control can be added to a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La flessibilità della funzionalità Web part è la possibilità di aggiungere i controlli server a pagine Web in fase di esecuzione. Esistono diversi scenari comuni in cui un controllo server (che può essere personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo, un controllo server personalizzato, un controllo utente o un controllo ASP.NET) possono essere aggiunti.  
  
 Nei seguenti scenari comuni, le Web part insieme di controlli tenta di aggiungere controlli server a una pagina e il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo viene chiamato per fornire le autorizzazioni:  
  
-   Quando viene aggiunto un controllo server mediante la dichiarazione nel markup della pagina Web all'interno di un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona.  
  
-   Quando un controllo server viene aggiunto a livello di codice a una zona.  
  
-   Quando un utente importa un controllo server nel catalogo di controlli Web part.  
  
-   Quando un oggetto esistente controllo server verrà caricato dall'archivio dati di personalizzazione.  
  
-   Quando un controllo server viene aggiunto a un <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> controllo per renderlo disponibile in un catalogo di controlli server.  
  
 In ogni scenario in cui vengono aggiunti controlli, la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo viene chiamato per verificare che siano stati soddisfatti tutti i criteri di autorizzazione per consentire un controllo da aggiungere. Quando è autorizzato un controllo, viene aggiunto in genere come lo sarebbe se si è verificato alcun filtro. Quando un controllo non è autorizzato, il set di controlli Web part può rispondere in diversi modi, a seconda del contesto. Il set di controlli possa interrompersi aggiungere una parte non autorizzata (se non è necessario per informare l'utente), è possibile visualizzare un messaggio di errore oppure è possibile aggiungere un'istanza del <xref:System.Web.UI.WebControls.WebParts.UnauthorizedWebPart> (classe) come segnaposto. Questo oggetto segnaposto non è visibile nella pagina, ma è visibile nel codice di origine della pagina per indicare che un controllo non autorizzato sia stato escluso.  
  
 Il determinante della se un controllo è autorizzato è il filtro di autorizzazione. Un filtro di autorizzazione è una funzionalità nel gruppo di controlli Web part che consente agli sviluppatori di escludere da una pagina tutti i controlli che non soddisfano i criteri specificati.  
  
 Per creare un filtro, gli sviluppatori devono eseguire due operazioni. In primo luogo, è necessario assegnare un valore stringa (il valore può essere arbitrario) per il <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà di ogni <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo si intende utilizzare nello scenario. Possono anche assegnare un valore per questa proprietà per altri tipi di controlli server che non sono <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, perché se vengono inseriti nel <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone, tali controlli sono inclusi in un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllo in fase di esecuzione e il controllo eredita il <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà.  
  
 Il secondo passaggio necessario per la creazione di un filtro è su override il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> metodo, o per creare un gestore eventi per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento. In questi metodi, uno sviluppatore può controllare la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà, e se il valore indica che il controllo non deve essere autorizzato, in modo che il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo restituisce un valore di `false`.  
  
> [!NOTE]
>  Per esempi di codice e una descrizione di come configurare un filtro personalizzato mediante il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo, vedere gli argomenti per gli overload del metodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAuthorized">
      <MemberSignature Language="C#" Value="public bool IsAuthorized (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAuthorized(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAuthorized(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.IsAuthorized : System.Web.UI.WebControls.WebParts.WebPart -&gt; bool" Usage="webPartManager.IsAuthorized webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control being checked for authorization.</param>
        <summary>Carries out the initial steps in determining whether a control is authorized to be added to a page.</summary>
        <returns>A Boolean value that indicates whether <paramref name="webPart" /> can be added to a page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> è il metodo iniziale chiamato dal controllo Web part impostato per verificare le autorizzazioni per un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo. Accetta `webPart` come parametro e avvia un processo per la determinazione se il controllo verrà aggiunto a una pagina. Chiamare questo metodo direttamente dal codice quando è necessario determinare se un determinato controllo è autorizzato.  
  
 Questo metodo esegue l'attività iniziali per determinare se il controllo eredita il <xref:System.Web.UI.WebControls.WebParts.WebPart> classe oppure è un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> controllare e, in tal caso, il tipo di controllo figlio contiene. Per completare l'attività di autorizzazione, viene chiamato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload di metodo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Web.UI.WebControls.WebParts.WebPart%29> metodo dal codice per determinare se un controllo è autorizzato a essere aggiunto a una pagina.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo che esegue l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo.  
  
-   Una pagina Web che consente di creare un filtro per un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo.  
  
-   Una spiegazione su come eseguire l'esempio di codice.  
  
 Esempio di codice Usa un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo che esegue l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload del metodo per la gestione personalizzata del <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà. Questo controllo verifica per un valore della proprietà `admin` e, se il valore è presente, autorizza il controllo. Se un controllo presenta un valore diverso, non è autorizzato; controlli senza il valore della proprietà sono autorizzati, come si presume che non siano parte dello scenario di filtro.  
  
 Per eseguire questo esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa il metodo di compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/MyManagerAuthorize.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/MyManagerAuthorize.vb#2)]  
  
 La seconda parte dell'esempio di codice crea un filtro che può escludere un controllo. La seguente pagina Web contiene tre controlli server ASP.NET in un `<asp:webpartzone>` elemento. Si noti che i controlli primo e secondo hanno loro <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> le proprietà impostate su valori diversi e il terzo non assegna la proprietà. Questo valore di autorizzazione può essere verificato in fase di esecuzione e il controllo può essere aggiunto alla pagina se il filtro corrisponde ai criteri impostati dallo sviluppatore. Si noti inoltre che il `Page_Load` metodo, il codice chiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Web.UI.WebControls.WebParts.WebPart%29> metodo per determinare se i controlli sono autorizzati, e in tal caso, viene impostata ogni controllo <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/IsAuthorizedCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/IsAuthorizedVB.aspx#1)]  
  
 Si noti che per l'esempio di codice funzionare, è necessario aggiungere un'impostazione nel file Web. config per abilitare l'esportazione dei file di descrizione di Web part. Verificare di disporre di un file Web. config nella stessa directory della pagina Web per questo esempio di codice. All'interno di `<system.web>` sezione, assicurarsi che sia presente un `<webParts>` elemento con un `enableExport` attributo impostato su `true`, come nel seguente codice.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Dopo il caricamento della pagina in un browser, si noti che viene visualizzato il primo controllo, in quanto corrisponde ai criteri nel metodo sottoposto a override. Il secondo controllo non viene aggiunto alla pagina, in quanto essa viene esclusa dal filtro. Il terzo controllo viene aggiunto, perché non è relativo <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> set di proprietà. Si noti che se si sceglie l'icona del menu dei verbi nella barra del titolo del controllo, entrambi possono essere esportato perché le rispettive <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> sono stati assegnati i valori delle proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Questo metodo viene chiamato direttamente dal codice. Se si desidera ottenere un maggiore controllo a livello di codice tramite il processo di autorizzazione, è possibile eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)" /> overload di metodo.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsAuthorized">
      <MemberSignature Language="C#" Value="public virtual bool IsAuthorized (Type type, string path, string authorizationFilter, bool isShared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAuthorized(class System.Type type, string path, string authorizationFilter, bool isShared) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAuthorized(Type ^ type, System::String ^ path, System::String ^ authorizationFilter, bool isShared);" />
      <MemberSignature Language="F#" Value="abstract member IsAuthorized : Type * string * string * bool -&gt; bool&#xA;override this.IsAuthorized : Type * string * string * bool -&gt; bool" Usage="webPartManager.IsAuthorized (type, path, authorizationFilter, isShared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="authorizationFilter" Type="System.String" />
        <Parameter Name="isShared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Type" /> of the control being checked for authorization.</param>
        <param name="path">The relative application path to the source file for the control being authorized, if the control is a user control.</param>
        <param name="authorizationFilter">An arbitrary string value assigned to the <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" /> property of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control, used to authorize whether a control can be added to a page.</param>
        <param name="isShared">Indicates whether the control being checked for authorization is a shared control, meaning that it is visible to many or all users of the application, and its <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" /> property value is set to <see langword="true" />.</param>
        <summary>Carries out the final steps in determining whether a control is authorized to be added to a page.</summary>
        <returns>A Boolean value that indicates whether a control is authorized to be added to a page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> overload del metodo esegue i passaggi finali della determinazione se un controllo è autorizzato a essere aggiunto a una pagina. Il metodo assicura che `type` è un tipo valido e che `path` ha un valore solo se il controllo viene verificato è un controllo utente. Viene quindi chiamato critici <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> metodo, che genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo per determinare se un controllo è autorizzato a essere aggiunto a una pagina.  
  
 Il primo passaggio consiste nel creare un filtro che può escludere un controllo. La seguente pagina Web contiene tre controlli server ASP.NET in un `<asp:webpartzone>` elemento. Si noti che i controlli primo e secondo hanno loro <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> le proprietà impostate su valori diversi e il terzo non assegna la proprietà. Questo valore di autorizzazione può essere verificato in fase di esecuzione e il controllo può essere aggiunto alla pagina se il filtro corrisponde ai criteri impostati dallo sviluppatore.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/IsAuthorizedCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/IsAuthorizedVB.aspx#1)]  
  
 Il secondo passaggio consiste nell'eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> (metodo) e creare la gestione filtri di autorizzazione personalizzata. Si noti che il codice di verifica innanzitutto se la proprietà ha un valore, in modo che qualsiasi controllo che non assegna il <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà verrà aggiunti automaticamente. Se un controllo presenta un filtro, restituisce il codice `true` solo se il valore di filtro è uguale a `admin`. Ciò dimostra un semplice meccanismo che è possibile utilizzare per la visualizzazione di determinati controlli a determinati utenti, a seconda del ruolo. Mentre un esempio completo usando i ruoli non rientra nell'ambito di questo argomento, è possibile utilizzare la stessa logica come il metodo sottoposto a override in questo esempio di codice, ad eccezione del fatto che è possibile verificare se l'utente corrente è un ruolo che corrisponde al valore di filtro di autorizzazione , quindi aggiungere il controllo solo per tale utente. Ciò consente di creare pagine in cui alcuni utenti verrebbero visualizzati tutti i controlli e altri utenti visualizzeranno solo i controlli selezionati. Si tratta di come potrebbe apparire la logica che controlla il filtro se si utilizzano i ruoli:  
  
```vb  
If Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter) Then  
  return True  
Else  
  return False  
End If  
```  
  
```csharp  
if(Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter))  
    return true;  
else  
    return false;  
```  
  
 Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa il metodo di compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/MyManagerAuthorize.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/MyManagerAuthorize.vb#2)]  
  
 Dopo il caricamento della pagina in un browser, si noti che viene visualizzato il primo controllo, in quanto corrisponde ai criteri nel metodo sottoposto a override. Il secondo controllo non viene aggiunto alla pagina, perché il relativo valore di filtro è escluso. Il terzo controllo viene aggiunto, perché non è relativo <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> set di proprietà. Se si modifica il valore della proprietà del secondo controllo corrisponde a quello del primo controllo e quindi eseguire nuovamente la pagina, viene aggiunto anche il secondo controllo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> is a user control, and <paramref name="path" /> is either <see langword="null" /> or an empty string ("").  \- or -  <paramref name="type" /> is not a user control, and <paramref name="path" /> has a value assigned to it.</exception>
        <block subset="none" type="overrides">
          <para>Questo metodo può essere sottoposto a override tramite l'eredità dal <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe, se si desidera fornire una gestione aggiuntiva quando verifica dell'autorizzazione. È possibile eseguire l'override del metodo per archiviare per determinati valori di <paramref name="authorizationFilter" /> parametro e in base al valore, restituire un valore booleano che determina se il controllo verrà aggiunto a una pagina.  Per gli sviluppatori di pagina che si vogliono per verificare i filtri di autorizzazione e la gestione personalizzata, è un'opzione per l'esecuzione di questa inline in una pagina aspx o in un file code-behind, senza dover ereditare tutte le classi. È possibile dichiarare un gestore eventi alternativo nella pagina per il <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" /> metodo il <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo. Per ulteriori dettagli e un esempio, vedere il <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" /> metodo.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsCustomPersonalizationStateDirty">
      <MemberSignature Language="C#" Value="protected virtual bool IsCustomPersonalizationStateDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCustomPersonalizationStateDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsCustomPersonalizationStateDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsCustomPersonalizationStateDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCustomPersonalizationStateDirty : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether personalization changes have been made that affect page-level personalization details controlled by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>Valore booleano che indica se sono state apportate modifiche di personalizzazione. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlli utilizza il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> proprietà internamente per rilevare se i dati di personalizzazione a livello di pagina che gestisce è stata modificata. I dati di personalizzazione viene modificato quando gli utenti eseguono azioni a livello di pagina, ad esempio aggiungendo o rimuovendo <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, la connessione o disconnessione di controlli, la modifica del layout della pagina spostando i controlli e altre azioni.  
  
> [!NOTE]
>  Gli utenti possono anche eseguire la personalizzazione a livello di controllo, ovvero che rendono le modifiche di personalizzazione a un controllo specifico e le modifiche interessano solo tale controllo. Ad esempio la modifica del controllo e modifica il testo del titolo o il colore di sfondo. Personalizzazione a livello di controllo non influisce sui dati di personalizzazione a livello di pagina rilevati dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> (controllo) e pertanto <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> valore della proprietà non viene modificato in `true` quando si verifica la personalizzazione a livello di controllo.  
  
 Anche se il metodo è protetto e non accessibili direttamente da un chiamante, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> proprietà accessibili direttamente dai chiamanti, e restituisce il valore di questa proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.PersonalizationState.IsDirty" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.PersonalizationState.SetDirty" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="webPartManager.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Contains the persisted state data to be loaded.</param>
        <summary>Loads control state data that was saved from a previous page request, and needs to be restored on a subsequent request.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A> metodo è utile per ripristinare i dati della proprietà che devono essere resa persistente postback della pagina, anche quando le <xref:System.Web.UI.Control.EnableViewState%2A> è impostata su `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> is not a valid <see cref="P:System.Web.UI.PageStatePersister.ControlState" />.</exception>
        <altmember cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LoadCustomPersonalizationState">
      <MemberSignature Language="C#" Value="protected virtual void LoadCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadCustomPersonalizationState(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadCustomPersonalizationState (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadCustomPersonalizationState(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit&#xA;override this.LoadCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="webPartManager.LoadCustomPersonalizationState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> that contains the state data to be loaded.</param>
        <summary>Stores the custom personalization data that has been passed to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control by the personalization objects to be used later during the initialization process.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A> metodo fornisce i dati di stato salvato sotto forma di un <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> oggetto. Questi dati viene utilizzati per caricare i dati di personalizzazione nei controlli Web part ed eseguire altre attività di inizializzazione.  
  
> [!NOTE]
>  Questo metodo viene chiamato da una sequenza di metodi che inizia quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState%2A> metodo richiede inizialmente associato <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> oggetto da fornire i dati di personalizzazione per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo.  
  
 È possibile chiamare questo metodo direttamente dal codice. Tuttavia, è possibile, chiamare direttamente il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A> metodo, che a sua volta chiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A> metodo e restituisce i dati di personalizzazione.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> metodo in un oggetto derivato <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="MediumPermissionSet">
      <MemberSignature Language="C#" Value="protected virtual System.Security.PermissionSet MediumPermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet MediumPermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MediumPermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::PermissionSet ^ MediumPermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MediumPermissionSet : System.Security.PermissionSet" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Security.PermissionSet" /> object that allows only <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> permission and <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> permission.</summary>
        <value>Un <see cref="T:System.Security.PermissionSet" /> oggetto che consente solo <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> autorizzazione e <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> l'autorizzazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.PermissionSet> oggetto restituito da questa proprietà viene utilizzata durante l'importazione per la deserializzazione di tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimalPermissionSet">
      <MemberSignature Language="C#" Value="protected virtual System.Security.PermissionSet MinimalPermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet MinimalPermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MinimalPermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::PermissionSet ^ MinimalPermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MinimalPermissionSet : System.Security.PermissionSet" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Security.PermissionSet" /> object that allows only <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> permission and <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> permission.</summary>
        <value>Ottiene un <see cref="T:System.Security.PermissionSet" /> oggetto che consente solo <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> autorizzazione e <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> l'autorizzazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.PermissionSet> oggetto restituito da questa proprietà viene utilizzata durante l'importazione per tutte le funzioni ad eccezione del fatto digitare la deserializzazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveWebPart">
      <MemberSignature Language="C#" Value="public virtual void MoveWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int32 zoneIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MoveWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Web::UI::WebControls::WebParts::WebPartZoneBase ^ zone, int zoneIndex);" />
      <MemberSignature Language="F#" Value="abstract member MoveWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; unit&#xA;override this.MoveWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; unit" Usage="webPartManager.MoveWebPart (webPart, zone, zoneIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="zone" Type="System.Web.UI.WebControls.WebParts.WebPartZoneBase" />
        <Parameter Name="zoneIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="webPart">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control being moved.</param>
        <param name="zone">The target <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> to which <c>webPart</c> is being moved.</param>
        <param name="zoneIndex">An integer that indicates the index of <c>webPart</c> relative to other controls within <c>zone</c>.</param>
        <summary>Moves a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control from one <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone to another, or to a new position within the same zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlli utilizza la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> metodo spostare `webPart` in una nuova posizione nella stessa area o in un'area diversa. È possibile chiamare questo metodo direttamente dal codice e viene anche richiamato quando un utente si sposta un controllo in una nuova posizione utilizzando diverse opzioni nell'interfaccia utente Web part (UI).  
  
 Una serie di condizioni da soddisfare prima `webPart` possono essere spostati, e la maggior parte di questi sono indicata dagli elementi elencati nella sezione relativa alle eccezioni di questo argomento. Se `webPart` non è stata inclusa in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona prima di tutto, non può essere spostato in una zona.  
  
 Le condizioni sono stati soddisfatti, la sequenza di azioni seguente si verifica per spostare `webPart`:  
  
1.  Il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> genera l'evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>.  
  
2.  `webPart` viene rimosso dall'area corrente (se necessario) e aggiunto alla nuova area o nella nuova posizione all'interno della relativa area.  
  
3.  Il metodo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> genera l'evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>.  
  
4.  Il `zoneIndex` di ogni <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo nelle aree di origine e di destinazione viene reimpostato in modo da riflettere lo spostamento del controllo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> metodo direttamente dal codice per spostare un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo da un'area a altra.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Un controllo utente per la modifica delle modalità di visualizzazione.  
  
-   Una pagina Web per ospitare i controlli.  
  
-   Una spiegazione su come eseguire l'esempio di codice.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per ulteriori informazioni sulle modalità di visualizzazione e il funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La seconda parte dell'esempio è una pagina Web che contiene due aree, ognuno dei quali contiene due controlli server. Quando un utente sceglie il **Move WebPart** pulsante nella pagina, il codice nel `Button1_Click` metodo sposta un controllo dalla prima area in una nuova posizione della seconda area. Si noti che il codice deve chiamare prima il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> metodo per recuperare il <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto che esegue il wrapping di `list1` controllo. Questa operazione è necessaria perché il primo parametro del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> metodo richiede un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllano, mentre `list1` è un controllo server ASP.NET.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_MoveWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_MoveWebPart/CS/MoveWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_MoveWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_MoveWebPart/VB/MoveWebPartVB.aspx#1)]  
  
 Dopo il caricamento della pagina, fare clic sui **Move WebPart** pulsante e si noti che il controllo che contiene i collegamenti si sposta in corrispondenza della posizione centrale nella seconda area. Lo spostamento del controllo viene eseguito a livello di codice chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> metodo. È anche possibile usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla modalità di progettazione e in modalità progettazione, è possibile trascinare i controlli in aree diverse o posizioni diverse nelle stesse aree. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> metodo viene chiamato anche dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> il controllo per gestire tali avviata dall'utente si sposta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is not contained in the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.  \- or -  <paramref name="zone" /> is not contained in the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Zones" /> collection of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.  \- or -  The zone referenced by the <paramref name="webPart" /> control's <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.Zone" /> property is <see langword="null" />, which means that <paramref name="webPart" /> is not currently contained in a zone.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> or <paramref name="zone" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="zoneIndex" /> is less than zero.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnAuthorizeWebPart">
      <MemberSignature Language="C#" Value="protected virtual void OnAuthorizeWebPart (System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAuthorizeWebPart(class System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAuthorizeWebPart (e As WebPartAuthorizationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAuthorizeWebPart(System::Web::UI::WebControls::WebParts::WebPartAuthorizationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs -&gt; unit&#xA;override this.OnAuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs -&gt; unit" Usage="webPartManager.OnAuthorizeWebPart e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" /> event and invokes a handler for the event, if one exists.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> metodo viene chiamato dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo, quando un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo viene controllato per l'autorizzazione da aggiungere a una pagina. Quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> viene chiamato, genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento, e se è presente un metodo del gestore per l'evento, richiama il gestore.  
  
 Il processo di autorizzazione <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli è un'importante funzionalità Web part. Ogni <xref:System.Web.UI.WebControls.WebParts.WebPart> o un controllo server che viene aggiunto a una zona dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo passa attraverso un processo di autorizzazione per determinare se è possibile aggiungere il controllo. Per impostazione predefinita, il set di controlli Web part non fornisce i criteri di filtro per impedire l'aggiunta a una zona di controlli. Ma il set di controlli forniscono i meccanismi necessari per gli sviluppatori creare i propri criteri di filtro. Tramite questi meccanismi, è possibile creare scenari di filtro personalizzati. Ad esempio, è possibile creare un filtro in modo che, se un utente è incluso un ruolo di amministratore, alcuni controlli viene aggiunta a una zona quando viene eseguito il rendering della pagina e se l'utente è in un ruolo utente, tali controlli non sarebbe possibile aggiungere.  
  
 I meccanismi per filtrare i controlli durante il processo di autorizzazione sono il <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà in <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> metodi e il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento sul <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo.  
  
 Per creare un filtro, sono disponibili essenzialmente due attività. In primo luogo, assegnare le stringhe per il <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà di ogni <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo che si desidera filtrare. Questi valori stringa possono essere arbitrari, ma devono contenere i criteri che si desidera filtrare. Ad esempio, se si desidera un determinato controllo da aggiungere a un'area solo se un amministratore visualizza la pagina e quindi è possibile assegnare un valore di stringa `admin` alla proprietà. È quindi possibile utilizzare la funzionalità di ruoli ASP.NET e aggiungere tutti gli utenti del sito per ruoli diversi, ad esempio amministratore, manager e utente. Durante il caricamento di una pagina, il codice di filtro verifica il ruolo di un utente, confrontarlo con il valore di filtro di autorizzazione su un controllo viene selezionato e se, ad esempio, l'utente è in un ruolo di amministratore ed è stato impostato il controllo <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valore per `admin`, è stato possibile aggiungere il controllo.  
  
 Il secondo passaggio nella creazione di un filtro consiste nello scrivere codice per controllare la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> i valori delle proprietà in <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e determinare se è autorizzata ogni controllo prima di essere aggiunto alla relativa zona. Sono disponibili due opzioni per la posizione in cui inserire il codice del filtro. La prima opzione è l'opzione preferita per gli sviluppatori di pagina. È possibile creare un metodo per gestire il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento direttamente nel codice di script server della pagina Web o in un file di separazione del codice. Associare il metodo associato all'evento mediante l'aggiunta di `OnAuthorizeWebPart` attributo al tag per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare nella pagina, come illustrato nell'esempio di markup codice seguente.  
  
```  
<asp:webpartmanager id="manager1" runat="server"   
   OnAuthorizeWebPart="manager1_AuthorizeWebPart" />  
```  
  
 Il metodo personalizzato dovrà è controllare ogni <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo per i criteri di filtro e quindi, sulla base dei risultati, assegnare un valore booleano per la <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs.IsAuthorized%2A> proprietà del <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs> oggetto per indicare se il <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo può essere aggiunto. Il codice nella sezione esempio illustra come eseguire questa operazione.  
  
 La seconda opzione per stabilire dove inserire il codice di filtro è da cui ereditare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> classe ed eseguire l'override di un metodo per controllare i criteri di filtro. I due metodi è possibile eseguire l'override per questo scopo sono il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=nameWithType> metodo o la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> metodo. Anche se dei metodi funzionerà, nella maggior parte dei casi è preferibile eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo, perché consente un maggiore controllo a livello di codice tramite il processo di autorizzazione intero, mentre il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> metodo esegue solo un'attività specifica , che consiste nel generare l'evento e controllo per un gestore. Per un esempio di codice di un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPartManager> che esegue l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> metodo, vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=nameWithType> overload del metodo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come impostare un gestore dell'evento personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento, in modo che il gestore può fornire codice di filtro personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> metodo. Questo esempio può essere un modo comune per uno sviluppatore di pagina per fornire uno scenario di filtro e l'autorizzazione di <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli da aggiungere a una pagina.  
  
 Nella pagina Web, si noti che il `<asp:webpartmanager>` elemento ha il `OnAuthorizeWebPart` attributo con il nome del gestore dell'evento assegnato a esso. Il metodo controlla se i controlli della pagina includono le rispettive <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> i valori delle proprietà è impostata su `admin` e, in caso affermativo, restituisce `true`, ovvero che saranno autorizzati e aggiunto alla pagina.  
  
> [!NOTE]
>  Si noti che i controlli che non dispone di alcun valore assegnato al <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> proprietà sono state aggiunte anche, perché questi verranno considerati non deve per essere parte di un filtro. Potrebbe trattarsi di un approccio comune in uno scenario di filtro: alcuni controlli vengono filtrati e altri utenti non sarebbe, in quanto si presume che sia disponibile per tutti gli utenti.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/CS/AuthorizeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/VB/AuthorizeWebPartVB.aspx#1)]  
  
 Poiché l'impostazione degli utenti nei ruoli non rientra nell'ambito di questo argomento, questo esempio di codice non controlla i ruoli utente in cui l'applicazione di filtri. Tuttavia, lo scenario di filtro dei controlli in base ai ruoli utente è probabile che uno degli usi più comuni di questa funzionalità di filtro. Se si dispone dei ruoli del sito e si desidera controllare i ruoli utente in questo metodo per filtrare i controlli, il metodo sarà simile alla seguente blocco di codice seguente (e l'approccio più semplice nell'esempio di codice precedente, che non utilizza i ruoli).  
  
```vb  
Protected Sub WebPartManager1_AuthorizeWebPart(ByVal sender _  
  As Object, ByVal e As WebPartAuthorizationEventArgs)  
  
  If String.IsNullOrEmpty(e.AuthorizationFilter) Then  
    If Roles.IsUserInRole(Page.User.Identity.Name, _  
      e.AuthorizationFilter) Then  
  
      e.IsAuthorized = True  
    Else  
      e.IsAuthorized = False  
    End If  
  End If  
  
End Sub  
```  
  
```csharp  
protected void mgr1_AuthorizeWebPart(object sender,   
  WebPartAuthorizationEventArgs e)  
{  
  if (!String.IsNullOrEmpty(e.AuthorizationFilter))  
  {  
    if(Roles.IsUserInRole(Page.User.Identity.Name, e.authorizationFilter))  
      e.IsAuthorized = true;  
    else  
      e.IsAuthorized = false;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" />
      </Docs>
    </Member>
    <Member MemberName="OnConnectionsActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnConnectionsActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnConnectionsActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnConnectionsActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnConnectionsActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnConnectionsActivated : EventArgs -&gt; unit&#xA;override this.OnConnectionsActivated : EventArgs -&gt; unit" Usage="webPartManager.OnConnectionsActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" /> event to indicate that a page and its controls are loaded, and connections on the page have been activated to begin sharing data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> evento dopo che una pagina ha completato il processo di caricamento. Il metodo fornisce un modo per aggiungere un gestore per l'evento.  
  
 Gli sviluppatori di pagine è possono aggiungere un gestore personalizzato per l'evento aggiungendo un `OnConnectionsActivated` attributo il `<asp:webpartmanager>` elemento in una pagina e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" /> metodo in un oggetto derivato <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
      </Docs>
    </Member>
    <Member MemberName="OnConnectionsActivating">
      <MemberSignature Language="C#" Value="protected virtual void OnConnectionsActivating (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnConnectionsActivating(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnConnectionsActivating (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnConnectionsActivating(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnConnectionsActivating : EventArgs -&gt; unit&#xA;override this.OnConnectionsActivating : EventArgs -&gt; unit" Usage="webPartManager.OnConnectionsActivating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" /> event to indicate that a page and its controls have loaded, and the process of activating connections can begin.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento, che fornisce agli sviluppatori un meccanismo per la personalizzazione a livello di codice il processo di attivazione delle connessioni.  
  
 Gli sviluppatori di pagine è possono aggiungere un gestore personalizzato per l'evento aggiungendo un `OnConnectionsActivating` attributo il `<asp:webpartmanager>` elemento in una pagina e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" /> metodo in un oggetto derivato <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="OnDisplayModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayModeChanged (System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayModeChanged(class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDisplayModeChanged (e As WebPartDisplayModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDisplayModeChanged(System::Web::UI::WebControls::WebParts::WebPartDisplayModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs -&gt; unit&#xA;override this.OnDisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs -&gt; unit" Usage="webPartManager.OnDisplayModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" /> that contains event data associated with a changed display mode.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged" /> event to indicate that the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control has completed the process of switching from one display mode to another on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A> metodo in base modulo genera semplicemente il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged> evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È possibile eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" /> metodo. Ad esempio, dopo una modifica della modalità di visualizzazione, potrebbe essere vuoi modificare alcuni elementi dell'aspetto dell'interfaccia utente (UI), a seconda che visualizzano la modalità è inclusa nel <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs.OldDisplayMode" /> proprietà. Oppure si potrebbe voler alcune parti del contenuto, visualizzare o nascondere un determinato controllo.  Quando si esegue l'override del metodo, è in genere chiami il metodo di base come ultimo passaggio del metodo sottoposto a override, in modo che il codice personalizzato viene eseguito per primo e ultimo, viene generato l'evento che indica che la modifica di modalità è stata completata.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayModeChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayModeChanging (System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayModeChanging(class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDisplayModeChanging (e As WebPartDisplayModeCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDisplayModeChanging(System::Web::UI::WebControls::WebParts::WebPartDisplayModeCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs -&gt; unit&#xA;override this.OnDisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs -&gt; unit" Usage="webPartManager.OnDisplayModeChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains event data associated with a changing display mode.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging" /> event to indicate that the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control is in the process of switching from one display mode to another on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> metodo in base modulo genera semplicemente il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging> evento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È possibile eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" /> metodo. Ad esempio, una modalità di visualizzazione in fase di modifica, è possibile verificare che la nuova modalità di visualizzazione verranno (tramite la <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode" /> proprietà) e modificare un elemento nell'interfaccia utente (UI) in base a ciò che sarà la nuova modalità di visualizzazione. Se si dispone di una modalità di visualizzazione personalizzato, si desidera rendere visibili alcuni controlli se la modalità personalizzata sarà la nuova modalità di visualizzazione.  Quando si esegue l'override di questo metodo, è in genere chiami il metodo di base come primo passaggio del metodo sottoposto a override, in modo che l'evento viene generato per segnalare il che avvio di una modalità di visualizzazione modificare. Quindi, il codice personalizzato può apportare modifiche nell'interfaccia utente (UI) prima che venga effettivamente visualizzata la nuova modalità di visualizzazione.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="webPartManager.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event, which is the first event in the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control life cycle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnInit%2A> metodo chiama il metodo di basa, che genera il <xref:System.Web.UI.Control.Init> evento per il controllo e quindi esegue diversi passaggi preparatori, ad esempio verificare che sia presente solo un'istanza del <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare in una pagina e il caricamento dati di personalizzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">There is another <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control on the page</exception>
        <altmember cref="E:System.Web.UI.Control.Init" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="webPartManager.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event, which occurs just before a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control is rendered on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender%2A> metodo chiama il metodo di basa, che genera il <xref:System.Web.UI.Control.PreRender> controlla diversi script client che sono necessarie le pagine che contengono le Web part di eventi del controllo e registri.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedWebPartChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedWebPartChanged (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedWebPartChanged(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedWebPartChanged (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedWebPartChanged(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnSelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnSelectedWebPartChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" /> event, which occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has either been newly selected or had its selection cleared.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> evento, ovvero in genere un punto nel tempo in cui uno sviluppatore potrebbe voler modificare l'aspetto dell'interfaccia utente (UI). Ad esempio, quando un nuovo <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo è selezionato, il controllo di Web part insieme di modifiche per il rendering del controllo appena selezionato. Dopo la selezione di un controllo è deselezionata, il rendering è tornato alla normalità.  
  
 Dopo che un utente seleziona un determinato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo per la modifica, la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> metodo viene chiamato. Quando l'utente termina la modifica del controllo e ha chiuso, con il risultato che la selezione del controllo è deselezionata, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> metodo viene chiamato nuovamente.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sono disponibili diverse opzioni relative al <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" /> evento, per consentire agli sviluppatori di personalizzare il rendering che si verifica dopo che il controllo selezionato è stato modificato. Nel codice dichiarativo, all'interno di <see langword="&lt;asp:webpartmanager&gt;" /> elemento è possibile impostare il <see langword="OnSelectedWebPartChanged" /> attributo e assegnarvi il nome di un metodo personalizzato. Il metodo personalizzato, è possibile modificare il rendering dei controlli selezionati quando si verifica l'evento. È possibile ereditare il <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe ed eseguire l'override del metodo. Una terza opzione consiste nel personalizzare il rendering a livello di zona; ad esempio, è possibile ereditare dal <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> classe ed eseguire l'override relativo <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)" /> (metodo), per personalizzare il rendering di controlli selezionate e deselezionate durante il processo di modifica.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedWebPartChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedWebPartChanging (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedWebPartChanging(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedWebPartChanging (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedWebPartChanging(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnSelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnSelectedWebPartChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" /> event, which occurs during the process of changing which <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control is currently selected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> evento che si verifica durante il processo di modifica del <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo attualmente selezionato.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo utilizza questo metodo e l'evento associato per fornire un'opportunità per annullare un processo in cui il controllo selezionato in fase di modifica. Ad esempio, il metodo viene chiamato all'interno di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> metodo e anche all'interno il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> metodo per fornire un modo per annullare il processo di. Se un utente sceglie il verbo di annullamento su un controllo che viene modificato, il controllo non è più selezionato e le modifiche non vengono salvate, in quanto il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> metodo consente di annullare le modifiche.  
  
> [!NOTE]
>  Il metodo viene chiamato in modo analogo durante i metodi che iniziano e terminano il processo di connessione un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo su un altro controllo, per abilitare l'annullamento del processo.  
  
 Gli sviluppatori di pagina possono creare un gestore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> eventi aggiungendo il `OnSelectedWebPartChanging` attributo il `<asp:webpartmanager>` elemento nel markup della pagina dichiarativo e assegnazione all'attributo del nome di un metodo personalizzato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="webPartManager.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Event data associated with the removal of the control.</param>
        <summary>Raises the base <see cref="E:System.Web.UI.Control.Unload" /> event and removes the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> instance from a Web page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartAdded (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartAdded(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartAdded (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartAdded(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" /> event, which occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has been added to a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> metodo viene chiamato durante il processo di aggiunta di un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (o un altro controllo server che viene aggiunto a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona) a una pagina.  
  
 Gli sviluppatori di pagina possono creare un gestore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> eventi aggiungendo il `OnWebPartAdded` attributo il <`asp:webpartmanager>` elemento e assegnando un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartAdding">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartAdding (System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartAdding(class System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartAdding (e As WebPartAddingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartAdding(System::Web::UI::WebControls::WebParts::WebPartAddingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs -&gt; unit&#xA;override this.OnWebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs -&gt; unit" Usage="webPartManager.OnWebPartAdding e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" /> event, which occurs during the process of adding a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control (or a server or user control) to a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> evento per indicare che un controllo è in corso l'aggiunta. Il metodo fornisce anche l'opzione per annullare il processo di aggiunta. Se il controllo viene aggiunto correttamente, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento segue.  
  
 Gli sviluppatori di pagina possono fornire un gestore personalizzato per l'evento associato aggiungendo il `OnWebPartAdding` attributo il `<asp:webpartmanager>` elemento in una pagina Web e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che creano derivati <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classi possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" /> metodo per personalizzare la gestione dell'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartClosed (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartClosed(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartClosed (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartClosed(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" /> event to signal that a control has been removed from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento per indicare che un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (o altri server o un controllo utente) è stato chiuso correttamente in una pagina.  
  
 Per chiudere un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo significa rimuoverlo da una pagina in modo che non viene eseguito e posizionarlo in un particolare oggetto contenitore collettivamente indicati come un catalogo di pagina. In un catalogo, che corrisponde ai <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controllare, gestisce riferimenti alle chiuso <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli per ogni pagina. Se un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controllo viene dichiarato in una pagina all'interno di un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, gli utenti possono spostare la pagina in modalità di visualizzazione del catalogo e aggiungere nuovamente alla pagina tutti i controlli che in precedenza sono stati chiusi.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> metodo fornisce una possibilità per gli sviluppatori di creare un gestore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento. Gli sviluppatori di pagine è possono aggiungere un gestore personalizzato per l'evento aggiungendo un `OnWebPartClosed` attributo il `<asp:webpartmanager>` elemento in una pagina e quindi assegnare un nome di metodo personalizzato per l'attributo. Un'attività utile che uno sviluppatore può eseguire in questo metodo consiste nel visualizzare un segnaposto al posto del controllo chiuso, completare la procedura aggiungere il controllo torna alla pagina con una descrizione comando che verrebbe informare gli utenti.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartClosing (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartClosing(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartClosing (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartClosing(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnWebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" /> event, which occurs during the process of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control being removed from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento per indicare che un controllo è in corso è chiuso o rimosso da una pagina. Il metodo fornisce anche l'opzione per annullare il processo di chiusura. Se il controllo viene rimosso correttamente dalla pagina, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento segue.  
  
 Gli sviluppatori di pagina possono fornire un gestore personalizzato per l'evento associato aggiungendo il `OnWebPartClosinging` attributo il `<asp:webpartmanager>` elemento in una pagina Web e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che creano derivati <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classi possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" /> metodo per personalizzare la gestione dell'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartDeleted (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartDeleted(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartDeleted (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartDeleted(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" /> event, which occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has been permanently deleted from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A> metodo viene chiamato durante il processo di eliminazione di un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (o un altro controllo server che viene aggiunto a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona) da una pagina.  
  
 Gli sviluppatori di pagina possono creare un gestore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> eventi aggiungendo il `OnWebPartDeleted` attributo il <`asp:webpartmanager>` elemento e assegnando un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartDeleting (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartDeleting(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartDeleting (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartDeleting(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnWebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartDeleting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" /> event, which indicates that a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control (or server or user control that is contained in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone) is in the process of being deleted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo dinamica <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli possono essere eliminati e, quando viene eliminato un controllo, l'istanza del controllo verrà rimosso definitivamente da una pagina e non può essere ripristinato. Dinamica <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli sono quelli che vengono aggiunti a livello di codice o da un catalogo di Web part, a differenza dei controlli statici che vengono dichiarati nel markup della pagina Web.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> evento per indicare che un controllo verrà definitivamente eliminato dalla relativa area. Il metodo fornisce inoltre la possibilità di annullare il processo di eliminazione. Se il controllo viene eliminato dalla pagina, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> evento segue.  
  
 Gli sviluppatori di pagina possono fornire un gestore personalizzato per l'evento associato aggiungendo il `OnWebPartDeleting` attributo il `<asp:webpartmanager>` elemento in una pagina Web e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che creano derivati <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classi possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" /> metodo per personalizzare la gestione dell'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartMoved">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartMoved (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartMoved(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartMoved (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartMoved(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartMoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" /> event, which occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has been moved to a different location on a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento alla fine del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> metodo, che assicura che il processo di spostamento di un controllo è stato completato prima di qualsiasi codice nell'evento gestore viene eseguito.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento viene generato quando un controllo viene spostato all'interno della relativa area o in un fuso orario diverso, e non è importante se lo spostamento viene eseguito a livello di codice o da un utente di trascinare il controllo.  
  
 Gli sviluppatori di pagina possono creare un gestore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> eventi aggiungendo il `OnWebPartMoved` attributo il <`asp:webpartmanager>` elemento e assegnando un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartMoving">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartMoving (System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartMoving(class System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartMoving (e As WebPartMovingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartMoving(System::Web::UI::WebControls::WebParts::WebPartMovingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs -&gt; unit&#xA;override this.OnWebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs -&gt; unit" Usage="webPartManager.OnWebPartMoving e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" /> event, which indicates that a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server or user control in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone is in the process of being moved.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento che si verifica quando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o altro controllo server viene spostato all'interno dell'area o in un'altra zona. Il metodo fornisce inoltre la possibilità di annullare il processo di spostamento. Se lo spostamento viene completato correttamente, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento segue.  
  
 Gli sviluppatori di pagina possono fornire un gestore personalizzato per l'evento associato aggiungendo il `OnWebPartMoving` attributo il `<asp:webpartmanager>` elemento in una pagina Web e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che creano derivati <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classi possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" /> metodo per personalizzare la gestione dell'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsConnected">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsConnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsConnected(class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsConnected (e As WebPartConnectionsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsConnected(System::Web::UI::WebControls::WebParts::WebPartConnectionsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit&#xA;override this.OnWebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsConnected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" /> event, which occurs after a connection has been established between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A> genera l'evento corrispondente alla fine del metodo di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo, che assicura che i passaggi necessari per connettere due controlli vengano completati prima che venga eseguito qualsiasi codice nel gestore eventi.  
  
 Il metodo consente di controllare a livello di codice il processo di creazione di connessioni e l'evento associato è un pratico punto in cui aggiornare l'interfaccia utente (UI) o notificare a un utente che sia stata stabilita una connessione.  
  
 Gli sviluppatori di pagina possono creare un gestore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> eventi aggiungendo il `OnWebPartsConnected` attributo il <`asp:webpartmanager>` elemento e assegnando un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsConnecting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsConnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsConnecting(class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsConnecting (e As WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsConnecting(System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit&#xA;override this.OnWebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsConnecting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" /> event, which occurs during the process of establishing a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server or user controls contained in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> evento che si verifica quando due controlli tentano di stabilire una connessione. Il metodo offre la possibilità di annullare il tentativo di connessione. Se la connessione ha esito positivo, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento segue.  
  
 Gli sviluppatori di pagina possono fornire un gestore personalizzato per l'evento associato aggiungendo il `OnWebPartsConnecting` attributo il `<asp:webpartmanager>` elemento in una pagina Web e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che creano derivati <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classi possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" /> metodo per personalizzare la gestione dell'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsDisconnected">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsDisconnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsDisconnected(class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsDisconnected (e As WebPartConnectionsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsDisconnected(System::Web::UI::WebControls::WebParts::WebPartConnectionsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit&#xA;override this.OnWebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsDisconnected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" /> event, which occurs after a connection between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls has ended.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A> genera l'evento corrispondente alla fine del metodo di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> (metodo), che esegue il processo di terminazione di una connessione tra due controlli.  
  
 Il metodo consente di controllare a livello di codice il processo di chiusura di una connessione, in modo che gli sviluppatori possono informare l'utente, apportare modifiche all'interfaccia utente (UI) o apportare altre modifiche all'applicazione.  
  
 Gli sviluppatori di pagina possono creare un gestore personalizzato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> eventi aggiungendo il `OnWebPartsDisconnected` attributo il <`asp:webpartmanager>` elemento e assegnando un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsDisconnecting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsDisconnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsDisconnecting(class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsDisconnecting (e As WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsDisconnecting(System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit&#xA;override this.OnWebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsDisconnecting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" /> event, which indicates that two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server or user controls in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone are in the process of ending a connection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A> metodo genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento che si verifica quando due controlli terminano una connessione. Il metodo offre la possibilità di annullare il processo di disconnessione. Se la connessione viene rimosso correttamente, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> evento segue.  
  
 Gli sviluppatori di pagina possono fornire un gestore personalizzato per l'evento associato aggiungendo il `OnWebPartsDisconnecting` attributo il `<asp:webpartmanager>` elemento in una pagina Web e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Gli sviluppatori che creano derivati <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classi possono eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" /> metodo per personalizzare la gestione dell'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      </Docs>
    </Member>
    <Member MemberName="Personalization">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartPersonalization Personalization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartPersonalization Personalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Personalization As WebPartPersonalization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ Personalization { System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Personalization : System.Web.UI.WebControls.WebParts.WebPartPersonalization" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Personalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartPersonalization</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to an object that contains personalization data for a Web page.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> che contiene i dati di personalizzazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà fornisce un modo per accedere il <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> oggetto associato a una pagina tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Utilizzo di questa proprietà, è possibile accedere ai diversi membri dell'oggetto di personalizzazione. Ad esempio, è possibile utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> metodo per l'ambito di personalizzazione della pagina da condiviso a un ambito di utente, o viceversa. È inoltre possibile trovare l'ambito di personalizzazione corrente della pagina, se la personalizzazione sia abilitata anche nella pagina, il provider viene utilizzato per i dati di personalizzazione e altro ancora.  
  
 Si noti che i dati a cui fanno riferimento le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà è di solo i dati di personalizzazione a livello di pagina che viene rilevati dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. I dati di personalizzazione di specifica del controllo, ad esempio i valori delle proprietà personalizzabili nei <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli non fa parte del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà.  
  
> [!NOTE]
>  Per ulteriori informazioni sulla personalizzazione di Web part, vedere [Panoramica sulla personalizzazione delle parti Web](http://msdn.microsoft.com/library/7dc34f74-52aa-4082-b98d-2bcf9e07e320).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà a livello di codice.  
  
 La seguente pagina Web consente di passare alla modalità di modifica per modificare alcuni aspetti di <xref:System.Web.UI.WebControls.Calendar> controllo. Il **Attiva/Disattiva ambito** pulsante consente la pagina all'utente o un ambito di personalizzazione condiviso. Il **modalità di modifica** e **Browse Mode** pulsanti ogni passare la pagina in modalità di visualizzazione appropriata. Si noti che il `<script>` tag sezione del file, due dei metodi di gestione degli eventi impiegano i <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà per accedere ai membri utili dell'oggetto sottostante. In particolare, questi metodi usano il <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> metodo e la <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> proprietà per l'oggetto si accede tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_Personalization#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_Personalization/CS/wpmgrPersonalizationCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_Personalization#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_Personalization/VB/wpmgrPersonalizationVB.aspx#1)]  
  
 Ad esempio di codice per l'esecuzione, è necessario abilitare anche una o più utenti di personalizzare le pagine nell'ambito condiviso. Aggiungere una voce al file Web. config, all'interno di `<system.web>` sezione, simile a quello riportato il markup seguente.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow  
        users="[Replace the text and brackets with a user name or   
           group.]"  
        roles="admin"   
        verbs="enterSharedScope"  />  
    </authorization>  
  </personalization>  
</webParts>   
```  
  
 Dopo aver caricato la pagina in un browser, fare clic sui **Attiva/Disattiva ambito** pulsante e si noti che ora la pagina è indicato l'ambito è condiviso. Fare clic su **modalità di modifica** per modificare la modalità di visualizzazione, fare clic sul menu dei verbi di controllo visibile e selezionare **modificare** dal menu di scelta. Si noti che viene visualizzata l'interfaccia utente (UI) per entrambi i controlli di modifica. Fare clic su **Browse Mode** per tornare alla visualizzazione normale. Se la pagina si trova nell'ambito condiviso, fare clic su **Attiva/Disattiva ambito** nuovamente per garantire la pagina si trova nell'ambito di utente. Successivamente, seguire gli stessi passaggi per modificare nuovamente il controllo, ma si noti che ora nell'interfaccia utente, modifica il <xref:System.Web.UI.WebControls.WebParts.BehaviorEditorPart> controllo non viene visualizzato. Ciò avviene perché questo controllo funziona solo quando la pagina si trova nell'ambito di personalizzazione condiviso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScript">
      <MemberSignature Language="C#" Value="protected virtual void RegisterClientScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterClientScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RegisterClientScript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RegisterClientScript();" />
      <MemberSignature Language="F#" Value="abstract member RegisterClientScript : unit -&gt; unit&#xA;override this.RegisterClientScript : unit -&gt; unit" Usage="webPartManager.RegisterClientScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control to emit client-side script that is used for various personalization features, such as dragging <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls in a Web page.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterClientScriptBlock(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="webPartManager.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the content of the control to write to the page.</param>
        <summary>Overridden to prevent the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control from rendering any content.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="webPartManager.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves state data for the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control so the data can be restored on future request to the Web page that contains the control.</summary>
        <returns>An <see cref="T:System.Object" /> to contain the control's saved state data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A> metodo salva i dati per le proprietà che devono essere resa persistente postback pagina base, anche quando le <xref:System.Web.UI.Control.EnableViewState%2A> è impostata su `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCustomPersonalizationState">
      <MemberSignature Language="C#" Value="protected virtual void SaveCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SaveCustomPersonalizationState(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SaveCustomPersonalizationState (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SaveCustomPersonalizationState(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member SaveCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit&#xA;override this.SaveCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="webPartManager.SaveCustomPersonalizationState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> that contains the state data to be loaded.</param>
        <summary>Saves custom personalization state data maintained by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control, so that this data can be reloaded whenever the page is reloaded.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A> metodo è fondamentale nel processo di personalizzazione, perché abilita le impostazioni utente personalizzate da archiviare per le sessioni future del browser e visite a una pagina. Il metodo salva i dati dello stato di personalizzazione, che includono elementi come illustrato di seguito: dinamica <xref:System.Web.UI.WebControls.WebParts.WebPart> o controlli server che sono stati aggiunti a una pagina o eliminati da una pagina; controlli che sono stati spostati in una pagina e le connessioni dinamiche con stato creata o eliminata.  
  
 È possibile chiamare questo metodo direttamente dal codice. È possibile, tuttavia, chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A> (metodo), che a sua volta chiama questo metodo per salvare i dati di personalizzazione.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È possibile eseguire l'override di questo metodo in un oggetto derivato <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe per personalizzare il processo di salvataggio dei dati di personalizzazione.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart SelectedWebPart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart SelectedWebPart" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedWebPart As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ SelectedWebPart { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPart : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control that is currently selected for editing or for creating a connection with another control.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controllo attualmente selezionata per la modifica o che costituiscono una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> proprietà restituisce un riferimento a un <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server che attualmente selezionato per la modifica o per la creazione di una connessione con un altro controllo.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo fornisce diversi metodi ed eventi utili per la gestione del processo di selezione di un controllo. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> evento si verifica subito dopo un controllo è selezionato, ma prima che vengano apportate modifiche. Per eseguire alcune azioni sul controllo dopo la selezione, eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> metodo. Potrebbe ad esempio, si desidera modificare l'aspetto di un controllo è selezionato, ma non è ancora stato modificato per evidenziare visivamente il controllo selezionato.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> evento si verifica subito dopo il controllo selezionato è stato modificato. Per eseguire alcune azioni sul controllo dopo che è stato modificato, eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> metodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" />
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPartChanged">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler SelectedWebPartChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler SelectedWebPartChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedWebPartChanged As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ SelectedWebPartChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.SelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the selection of one <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has changed and moved to another control on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento può essere utilizzato in combinazione con il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> metodo per modificare l'interfaccia utente (UI) del controllo selezionato. Ad esempio, se l'utente passa la pagina in modalità progettazione (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>) e quindi seleziona un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo con l'intenzione di trascinarlo in una nuova posizione, è comune per modificare il rendering del controllo selezionato, ad esempio modificando il colore del relativo bordo o sfondo mentre è selezionato.  
  
> [!NOTE]
>  Per ulteriori informazioni sull'utilizzo degli eventi, vedere [procedura: utilizzare eventi in un'applicazione Web Form](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPartChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler SelectedWebPartChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler SelectedWebPartChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedWebPartChanging As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ SelectedWebPartChanging;" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.SelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of changing which <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control is currently selected on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento può essere utilizzato in combinazione con il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> metodo. Gli sviluppatori di pagina possono creare un gestore eventi nel codice aggiungendo i `OnSelectedWebPartChanging` attributo il `<asp:webpartmanager>` elemento in una pagina e impostando il valore dell'attributo per il nome di un metodo personalizzato che gestirà l'evento.  
  
 Questo evento viene generato durante il processo di avvio o chiusura di una connessione tra i controlli e quando all'inizio e alla fine di una modifica di un controllo. Per informazioni dettagliate, vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> metodo.  
  
 In genere, quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> evento viene generato come risultato diretto di un'azione dell'utente che modifica il controllo selezionato, è possibile annullare l'evento. Tuttavia, è uno scenario in cui l'evento non può essere annullato. Se un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controllo viene eliminato, il <xref:System.Web.UI.WebControls.WebParts.WebPart> tutti i controlli in esso contenuti devono essere chiusi, in caso contrario, potrebbe essere orfani. In questo caso il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo chiude il <xref:System.Web.UI.WebControls.WebParts.WebPart> , non l'utente ed è necessario determinare a quale controllo è selezionato e quando modificare la selezione senza provocare di interruzione, in modo che è possibile completare il processo di pulizia tutti i controlli. Pertanto, per impostazione predefinita il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> metodo non può essere annullato in questo scenario. Per un evento correlato che può essere annullato, vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="SetPersonalizationDirty">
      <MemberSignature Language="C#" Value="protected void SetPersonalizationDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetPersonalizationDirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetPersonalizationDirty ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetPersonalizationDirty();" />
      <MemberSignature Language="F#" Value="member this.SetPersonalizationDirty : unit -&gt; unit" Usage="webPartManager.SetPersonalizationDirty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets a flag indicating that custom personalization data for the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A> metodo imposta un flag che determina i componenti di personalizzazione nel controllo di Web part impostato per salvare i dati di personalizzazione aggiornato. Per ulteriori informazioni sugli scenari che possono comportare modifiche ai dati di personalizzazione registrati dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo, vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> proprietà.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A> metodo non può essere chiamato direttamente dal codice e non può essere sottoposto a override, perché viene usato internamente dal controllo Web part impostato come parte della funzionalità di personalizzazione di Web part.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il metodo può essere chiamato da un oggetto derivato <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe. Ciò potrebbe essere utile se si desidera personalizzare la personalizzazione dei componenti del controllo Web part impostato e pertanto è necessario controllare il processo di impostazione dei flag per i dati di personalizzazione.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="SetSelectedWebPart">
      <MemberSignature Language="C#" Value="protected void SetSelectedWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetSelectedWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetSelectedWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.SetSelectedWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.SetSelectedWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control that has been selected.</param>
        <summary>Sets the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> property value equal to the currently selected <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart%2A> metodo viene chiamato durante i processi che possono iniziano o terminano la modifica del controllo specificato per il `webPart` parametro e quelli che possono iniziare o terminare una connessione che include `webPart`.  
  
 All'inizio dei processi di modifica e di connessione, `webPart` è il controllo che è stato selezionato per la modifica o di immettere una connessione.  
  
 Alla fine dei processi di modifica e di connessione `null` viene passato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart%2A> metodo, che comporta il controllo attualmente selezionato non è più selezionato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SkinID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SkinID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SkinID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SkinID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an empty string ("") so that no skin can be applied to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>Una stringa vuota che impedisce il <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo da un'interfaccia assegnato a esso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A> override di proprietà ereditata <xref:System.Web.UI.Control.SkinID%2A?displayProperty=nameWithType> proprietà per evitare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo, ossia un controllo invisibile, dall'utilizzo di interfacce. L'implementazione della proprietà impedisce l'assegnazione restituendo sempre una stringa vuota da un'interfaccia di `get` funzione di accesso e generare sempre un'eccezione se viene eseguito un tentativo di impostare un valore `set` della funzione di accesso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the property value.</exception>
        <altmember cref="P:System.Web.UI.Control.SkinID" />
      </Docs>
    </Member>
    <Member MemberName="StaticConnections">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection StaticConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection StaticConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticConnections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ StaticConnections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StaticConnections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the collection of all <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> objects on a Web page that are defined as static connections.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> che contiene tutte le connessioni statiche nella pagina.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> proprietà viene utilizzata per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo per rilevare e gestire tutte le connessioni statiche in una pagina. Una connessione statica, a differenza di una connessione dinamica, non dovrà essere aggiunta a una pagina ogni volta che viene eseguito il rendering della pagina.  
  
 La raccolta cui fa riferimento questa proprietà contiene tutte le connessioni statiche presenti nella pagina, se vengono creati a livello di programmazione o specificati con un `<asp:webpartconnection>` elemento nel markup della pagina.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> proprietà.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina Web part.  
  
-   Un file di codice sorgente che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un'interfaccia personalizzata.  
  
-   Una pagina Web che contiene due custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connesso, e un `<asp:webpartmanager>` elemento.  
  
-   Spiegazione del funzionamento dell'esempio in un browser.  
  
 Il codice seguente contiene solo la parte pagina Web dell'esempio. È necessario anche ottenere le prime due parti di esempio, ovvero il controllo utente personalizzato e il codice sorgente per i controlli personalizzati e all'interfaccia, dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Questo argomento spiega anche le opzioni per la compilazione di <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli.  
  
 La terza parte dell'esempio di codice è la pagina Web. Il markup dichiarativo per la pagina contiene `Register` direttive per il controllo utente e i controlli personalizzati. È un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento per contenere i controlli personalizzati e un `<asp:connectionszone>` elemento. Si noti che il `Page_Load` metodo, il codice verifica se una connessione già esiste e, in caso contrario, definisce un provider, un consumer e i rispettivi punti di connessione e quindi aggiunge una nuova connessione al set di connessioni statiche a cui fanno riferimento i <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 Dopo aver caricato la pagina Web in un browser, fare clic sui **modalità di visualizzazione** controllo elenco a discesa e selezionare **Connect** per passare alla modalità di connessione. La connessione utilizza la modalità di `<asp:connectionszone>` elemento consentono di creare connessioni tra i controlli. Nella modalità di connessione, fare clic sulla freccia verso il basso nella barra del titolo del **CAP** per attivare il menu dei verbi di controllo e quindi fare clic su **Connect**. Dopo che viene visualizzata l'interfaccia di connessione utente (UI), si noti che una connessione è stata già creata dal codice contenuto nel `Page_Load` metodo. Se si torna a questa pagina in una sessione browser successiva, questa connessione statica sarà già stata stabilita e non dovrà essere ricreato ogni volta che il caricamento della pagina.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
      </Docs>
    </Member>
    <Member MemberName="SupportedDisplayModes">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection SupportedDisplayModes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection SupportedDisplayModes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportedDisplayModes As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ SupportedDisplayModes { System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedDisplayModes : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a read-only collection of all display modes that are available on a particular Web page.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> che contiene il set di <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> oggetti disponibili in una pagina Web specifica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà contiene solo la modalità di visualizzazione sono effettivamente disponibili in una pagina, in base ai tipi di controlli di zona presenti nella pagina.  
  
> [!NOTE]
>  Modalità di visualizzazione possono essere disabilitate e quando una modalità di visualizzazione è disabilitata, non è aggiunto al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> raccolta, anche quando il tipo di zona che supporta tale modalità di visualizzazione corrispondente è presente nella pagina.  
  
 Modalità di progettazione e la modalità Browse sono sempre supportate. La modalità di visualizzazione che può variare sono la modifica del catalogo e le modalità di connessione. Ognuna di queste modalità di visualizzazione è associata a un particolare tipo di <xref:System.Web.UI.WebControls.WebParts.ToolZone> controllo. La presenza di tale area appositamente tipizzata in una pagina Web che fa sì che una specifica modalità di visualizzazione da aggiungere alla raccolta a cui fanno riferimento le <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà. Se, ad esempio, una pagina Web contiene un' <xref:System.Web.UI.WebControls.WebParts.EditorZone> zona ma non un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> della zona, quindi la modalità di visualizzazione di modifica è una delle modalità supportate in questa pagina, ma la modalità di visualizzazione del catalogo non è supportata.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> rispetto alla proprietà di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> proprietà, che fa riferimento a una raccolta contenente tutte le modalità di visualizzazione disponibili per l'oggetto corrente <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare, anche quelli che non sono supportate in una pagina particolare.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> proprietà. Il codice utilizza questa proprietà per popolare l'elenco con solo le modalità di visualizzazione disponibile nella pagina Web corrente.  
  
 Esistono tre supportate le modalità di visualizzazione in questa pagina: esplorazione, progettazione e la modifica. Le prime due sono sempre disponibili, e la modalità di modifica è disponibile in questo esempio di codice perché la pagina contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> controllo. Il catalogo e connessione modalità non vengono visualizzate, poiché le aree corrispondenti non sono presenti in questa pagina.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SupportedDisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SupportedDisplayModes/CS/wpmgrSuppDisplayModescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SupportedDisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SupportedDisplayModes/VB/wpmgrSuppDisplayModesvb.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, è possibile utilizzare il controllo elenco a discesa per passare dalla modalità browse alla modalità progettazione, quindi alla modalità di modifica. In modalità di modifica, è possibile fare clic sul menu a discesa dei verbi nell'intestazione di uno dei controlli server e selezionare **modifica** la modifica del controllo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsDirty As Boolean Implements IPersonalizable.IsDirty" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether custom personalization state data managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control has changed on a Web page.</summary>
        <value>Valore booleano che indica se i dati dello stato di personalizzazione sono stato modificato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> proprietà fornisce un modo per i chiamanti determinare se i dati che sono gestiti da stato della personalizzazione di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo è stato modificato. Quando gli utenti personalizzano dettagli a livello di pagina, ad esempio modifica il layout di pagina, la creazione o eliminazione di connessioni e aggiunta o eliminazione di controlli, i dati di personalizzazione gestiti come il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare le modifiche. Si tratta di un metodo pass-through che restituisce ai chiamanti il valore di protetto <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> proprietà, che non è possibile accedere ad esso direttamente dai chiamanti.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> proprietà non indica se i valori delle proprietà personalizzabili o le proprietà che influiscono sull'aspetto dei singoli <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, sono stati modificati. Personalizzazione a livello di controllo verrà rilevata singolarmente per ogni controllo. Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> proprietà indica solo se i dati di personalizzazione che è a livello di pagina ed è gestito dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo è stato modificato.  
  
 Nell'elenco seguente vengono descritti alcuni casi comuni di personalizzazione che possono provocare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> proprietà per restituire un valore di `true`, a indicare che il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo dispone di alcuni dati di personalizzazione modificati:  
  
-   Chiusura di un valore statico <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (o controllo server o utente) in una pagina.  
  
-   Ripristino di un valore statico chiuso <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo da un catalogo di pagina a una pagina.  
  
-   Spostamento di un controllo all'interno dell'area o in un'altra zona.  
  
-   Aggiunta di un controllo da un catalogo di <xref:System.Web.UI.WebControls.WebParts.WebPart> o i controlli server o aggiunta di un controllo a livello di codice.  
  
-   Creazione di una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, a livello di codice o tramite l'interfaccia di connessione utente (UI).  
  
-   Eliminazione di una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, a livello di programmazione o utilizzando la connessione dell'interfaccia utente.  
  
 Per accedere a questo valore della proprietà, è necessario eseguire il cast di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> istanza di controllo per il <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interfaccia; è possibile quindi leggere il <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> valore della proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato un utilizzo semplice del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> proprietà, alcune comuni di personalizzazione della pagina che indica le istanze che provocano un <xref:System.Web.UI.WebControls.WebParts.WebPartManager> la modifica dei dati di personalizzazione del controllo.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Un controllo utente che consente di modificare le modalità di visualizzazione in una pagina che contiene i controlli Web part.  
  
-   Un file di origine che contiene il codice personalizzato due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che possono essere connesso e un'interfaccia.  
  
-   Una pagina Web che ospita tutti i controlli.  
  
-   Spiegazione del funzionamento dell'esempio di codice.  
  
 La prima parte dell'esempio di codice è il controllo utente per la modifica delle modalità di visualizzazione. È possibile ottenere il codice sorgente per il controllo utente dalla sezione degli esempi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Cenni preliminari sulla classe. Per informazioni sulla modalità di visualizzazione e funzionamento del controllo utente, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La seconda parte dell'esempio è il file di origine con i controlli personalizzati e l'interfaccia. Si noti che il `IZipCode` interfaccia espone un metodo e che questo metodo come implementato personalizzato `ZipCodeWebPart` controllo serve come metodo di callback per abilitare `ZipCodeWebPart` di agire come un provider in uno scenario di connessione. Altro controllo `WeatherWebPart`, in una connessione di controllo funge da consumer; può utilizzare l'interfaccia fornita da `ZipCodeWebPart`. In un'applicazione reale, `WeatherWebPart` potrebbe utilizzare un valore di codice postale personalizzato dal provider e quindi fornire informazioni grafiche sul tempo agli utenti.  
  
 Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Pertanto, si noti che il `Register` direttiva per il componente nella parte superiore della pagina Web contiene solo `TagPrefix` e `Namespace` attributi, senza un `Assembly` attributo. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsDirty#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsDirty#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che include due <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone, con il primo criterio che contiene le due funzioni <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. È inoltre disponibile una <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona che contiene uno standard <xref:System.Web.UI.WebControls.Calendar> controllo che gli utenti possono aggiungere alla pagina. Il `<asp:connectionszone>` elemento fornisce una connessione dell'interfaccia utente per gli utenti di creare connessioni tra i controlli. Nel `Page_PreRender` metodo, si noti che viene verificato se i dati di personalizzazione sono stato modificato e, in caso affermativo, aggiorna il testo di `Label1`.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsDirty#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/CS/wpmgrIsDirtyCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsDirty#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/VB/wpmgrIsDirtyVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, provare a creare alcuni degli scenari elencati nella sezione Osservazioni di questo argomento che modifica i dati di personalizzazione. Quando si apportano modifiche, se una modifica interessa uno degli scenari di personalizzazione rilevati dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare, il testo del `Label1` visualizzazione del controllo per indicare che i dati di personalizzazione sono stata modificata. Ad esempio, è possibile eseguire queste operazioni:  
  
-   Creare una connessione tra controlli scegliendo il **connettere i controlli Web part** pulsante.  
  
-   Usare la **modalità di visualizzazione** controllo elenco a discesa per passare alla modalità di catalogo e aggiungere il **calendario personale** controllo al secondo <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona.  
  
-   Modifica la pagina nuovo alla modalità visualizzazione fare clic su del menu dei verbi (visualizzata con un simbolo della freccia nella barra del titolo) per il **calendario personale** controllare, quindi selezionare **chiudere** per chiuderla e aggiungerlo al catalogo della pagina.  
  
-   Restituire la pagina sulla modalità di catalogo e aggiungere la **calendario personale** controllo tornare alla pagina.  
  
-   Usare la **modalità di visualizzazione** controllare per passare alla modalità progettazione e ridisporre il layout dei controlli mediante il trascinamento di almeno uno di essi a un'altra area o in una posizione diversa nella stessa area.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.PersonalizationState" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.Load">
      <MemberSignature Language="C#" Value="void IPersonalizable.Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.WebParts.IPersonalizable.Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub Load (state As PersonalizationDictionary) Implements IPersonalizable.Load" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state) = System::Web::UI::WebControls::WebParts::IPersonalizable::Load;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> that contains the state data to be loaded.</param>
        <summary>Returns previously saved custom personalization state data that needs to be loaded to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un'implementazione del <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A?displayProperty=nameWithType> metodo, che fornisce un modo per set di controlli Web part per accedere direttamente alla protetto <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A?displayProperty=nameWithType> metodo. Quando questo metodo viene chiamato, memorizza i dati personalizzati che sono gestiti dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo e che in precedenza è stato salvato nell'archivio permanente dei dati per l'utilizzo in un secondo momento nel processo di inizializzazione.  
  
> [!NOTE]
>  Nella maggior parte dei casi, pagine e controlli codice dello sviluppatore non necessario chiamare questo metodo, perché viene utilizzato principalmente dall'insieme come un meccanismo per il recupero dei dati di personalizzazione di controlli Web part.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Uno scenario in cui gli sviluppatori di utilizzare questo metodo è che stanno sviluppando un framework di personalizzazione da utilizzare al posto di quella fornito dal set di controlli Web part. In questi casi, gli sviluppatori possono ereditare dal <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe ed eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" /> per restituire un'implementazione personalizzata di un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> oggetto. L'oggetto personalizzato <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> oggetto chiama l'implementazione del <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> metodo al momento opportuno per caricare i dati di personalizzazione.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.Save">
      <MemberSignature Language="C#" Value="void IPersonalizable.Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.WebParts.IPersonalizable.Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub Save (state As PersonalizationDictionary) Implements IPersonalizable.Save" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state) = System::Web::UI::WebControls::WebParts::IPersonalizable::Save;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> that contains the state data to be saved.</param>
        <summary>Saves custom personalization state data that is managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A> metodo è un'implementazione del <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A?displayProperty=nameWithType> metodo, che fornisce un modo per set di controlli Web part per accedere direttamente alla protetto <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A?displayProperty=nameWithType> metodo. Quando questo metodo viene chiamato, Salva dati di tutte le personalizzazioni che sono gestiti dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo nell'archivio permanente dei dati configurato per un'applicazione Web part.  
  
> [!NOTE]
>  Nella maggior parte dei casi, pagine e controlli codice dello sviluppatore non necessario chiamare questo metodo, perché viene utilizzato principalmente dall'insieme come un meccanismo per il salvataggio dei dati di personalizzazione di controlli Web part.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Uno scenario in cui gli sviluppatori funzionerà con questo metodo è che stanno sviluppando un framework di personalizzazione da utilizzare al posto di quella fornito dal set di controlli Web part. In questi casi, gli sviluppatori possono ereditare dal <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> classe ed eseguire l'override di <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" /> per restituire un'implementazione personalizzata di un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> oggetto. L'oggetto personalizzato <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> oggetto chiama l'implementazione del <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> metodo al momento opportuno per salvare i dati di personalizzazione.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="webPartManager.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Applies personalization state data to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control, and calls the base method to enable tracking changes to the view-state data for the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le modifiche ai dati dello stato di visualizzazione vengono archiviate un <xref:System.Web.UI.StateBag> oggetti e sono accessibili tramite il controllo <xref:System.Web.UI.Control.ViewState%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that enables child controls to be visible.</summary>
        <value>Un valore booleano che indica se un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> controllo e i relativi controlli figlio sono visibili. <see langword="true" /> in tutti i casi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo esegue l'override della base <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> proprietà per restituire sempre un valore di `true` per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> proprietà. Anche se il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo stesso non è visibile, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> proprietà deve essere impostato su `true` in modo che tutti i relativi controlli figlio sono visibili per impostazione predefinita.  
  
 Se si prova a impostare il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> proprietà, viene sempre generato un errore perché il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo ha eseguito l'override di proprietà di base e impedisce l'assegnazione di qualsiasi valore alla proprietà.  
  
 Questa proprietà non è associabile nelle finestre di progettazione visiva, ma è associabile in fase di esecuzione. Per altre informazioni, vedere <xref:System.ComponentModel.BindableAttribute>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to assign a value to the property.</exception>
      </Docs>
    </Member>
    <Member MemberName="WebPartAdded">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartAdded" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartAdded As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartAdded;" />
      <MemberSignature Language="F#" Value="member this.WebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control has been added to a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone, to indicate that the control was added successfully.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento è utile per indicare che un controllo dinamico (un controllo a livello di codice non dichiarato nel markup della pagina) è stato aggiunto a una zona. In combinazione con il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> metodo, l'evento fornisce agli sviluppatori un modo per aggiornare l'interfaccia utente (UI) o in caso contrario, informare gli utenti che è stato aggiunto un controllo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
      </Docs>
    </Member>
    <Member MemberName="WebPartAdding">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler WebPartAdding;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler WebPartAdding" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartAdding As WebPartAddingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartAddingEventHandler ^ WebPartAdding;" />
      <MemberSignature Language="F#" Value="member this.WebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler " Usage="member this.WebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of adding a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control to a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> evento viene generato dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A> metodo una volta iniziato il processo di aggiunta di un controllo a una zona. Questo evento fornisce la possibilità di annullare il processo prima del completamento. Se il processo di aggiunta ha esito positivo, questo evento è seguito dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento.  
  
 Gli sviluppatori di pagina possono fornire gestori personalizzati per l'evento aggiungendo il `OnWebPartAdding` attributo il `<asp:webpartmanager>` elemento in una pagina e assegnazione di un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
      </Docs>
    </Member>
    <Member MemberName="WebPartClosed">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartClosed" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartClosed As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartClosed;" />
      <MemberSignature Language="F#" Value="member this.WebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control (or server or user control) is removed from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento indica che un controllo è stato chiuso, da un utente o a livello di codice. Per chiudere un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo significa rimuoverlo da una pagina in modo che non viene eseguito e posizionarlo in un particolare oggetto contenitore collettivamente indicati come un catalogo di pagina. In un catalogo, che corrisponde ai <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controllare, gestisce riferimenti alle chiuso <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli per ogni pagina. Se un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controllo viene dichiarato in una pagina all'interno di un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, gli utenti possono passare una modalità di visualizzazione del catalogo e aggiungere nuovamente a una pagina tutti i controlli che in precedenza sono stati chiusi.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento è associato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> (metodo), che genera l'evento e fornisce un gestore per il.  
  
 Gli sviluppatori di pagine è possono aggiungere un gestore personalizzato per l'evento aggiungendo un `OnWebPartClosed` attributo il `<asp:webpartmanager>` elemento in una pagina e quindi assegnare un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartClosing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartClosing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartClosing As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ WebPartClosing;" />
      <MemberSignature Language="F#" Value="member this.WebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.WebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of removing a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control (or server or user control) from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento viene generato dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A> metodo quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> è in corso la chiusura di un controllo barra. Se la rimozione del controllo ha esito positivo, questo evento è seguito dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento.  
  
 Gli sviluppatori di pagina possono fornire un gestore personalizzato per l'evento aggiungendo il `OnWebPartClosed` attributo per il <`asp:webpartmanager>` elemento in una pagina e assegnazione di un nome di metodo personalizzato per l'attributo.  
  
 In genere, quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento viene generato come risultato diretto di una chiusura utente un <xref:System.Web.UI.WebControls.WebParts.WebPart> (controllo), è possibile annullare l'evento. Tuttavia, è uno scenario in cui l'evento non può essere annullato. Se un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controllo viene eliminato, il <xref:System.Web.UI.WebControls.WebParts.WebPart> tutti i controlli in esso contenuti devono essere chiusi, in caso contrario, potrebbe essere orfani. In questo caso il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo chiude il <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, non dell'utente. E quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo è in corso la chiamata il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> metodo per chiudere ogni controllo e il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento viene generato, l'evento non può essere annullata (per impostazione predefinita) perché il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> deve completare l'attività di pulizia tutti i controlli della zona.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartDeleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartDeleted As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartDeleted;" />
      <MemberSignature Language="F#" Value="member this.WebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control has been deleted from a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> evento è utile per indicare che un controllo dinamico (un controllo a livello di codice non dichiarato nel markup della pagina) è stato eliminato da una zona. In combinazione con il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A> metodo, l'evento fornisce agli sviluppatori un modo per aggiornare l'interfaccia utente (UI) o in caso contrario, informare gli utenti che un controllo è stato eliminato correttamente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartDeleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartDeleting As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ WebPartDeleting;" />
      <MemberSignature Language="F#" Value="member this.WebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.WebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of permanently deleting an instance of a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control from a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> evento viene generato dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A> (metodo), durante il processo di eliminazione di un controllo dinamico (che è stato aggiunto a livello di codice o da un utente tramite l'interfaccia utente Web part). L'evento fornisce la possibilità di annullare il processo prima del completamento. Se il processo di eliminazione viene completato correttamente, questo evento è seguito dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> evento.  
  
 Gli sviluppatori di pagina possono fornire gestori personalizzati per l'evento aggiungendo il `OnWebPartDeleting` attributo il `<asp:webpartmanager>` elemento in una pagina e assegnazione di un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartMoved">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartMoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartMoved" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartMoved As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartMoved;" />
      <MemberSignature Language="F#" Value="member this.WebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control has been moved to a different location on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si applica sia statico (dichiarato nel markup della pagina Web) sia i controlli dinamici. È associato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> metodo. Poiché l'evento viene generato dopo che è stata completata un'operazione di spostamento, gli sviluppatori possono includere un gestore eventi per fornire notifiche agli utenti, una convalida o altre azioni. Per aggiungere un gestore eventi, è possibile aggiungere un `OnWebPartMoved` attributo il `<asp:webpartmanager>` elemento in una pagina e assegnare il nome di un metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartMoving">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler WebPartMoving;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler WebPartMoving" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartMoving As WebPartMovingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartMovingEventHandler ^ WebPartMoving;" />
      <MemberSignature Language="F#" Value="member this.WebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler " Usage="member this.WebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of moving a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control that is contained in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento viene generato quando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o altro controllo server viene spostato all'interno della relativa area o in un'altra zona. Ciò può verificarsi quando si trascina un controllo e quando viene eseguito uno spostamento a livello di codice.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento viene generato dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> (metodo) che offre l'opportunità per annullare il processo di spostamento prima del completamento. Se lo spostamento viene completato e il controllo viene inserito in una nuova posizione, questo evento è seguito dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento.  
  
 Gli sviluppatori di pagina possono creare un gestore per l'evento personalizzato aggiungendo il `OnWebPartMoving` attributo il `<asp:webpartmanager>` elemento e assegnando un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WebParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartCollection WebParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartCollection WebParts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WebParts As WebPartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartCollection ^ WebParts { System::Web::UI::WebControls::WebParts::WebPartCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WebParts : System.Web.UI.WebControls.WebParts.WebPartCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to all <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls tracked by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control on a Web page.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection" /> che contiene riferimenti a un set di <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controlli.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà viene utilizzata per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo per tenere traccia di tutti <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che sono contenuti all'interno di <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> aree della pagina. Anche se la raccolta è di sola lettura, è possibile accedere a singoli <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla a livello di codice tramite la raccolta e apportare modifiche a loro.  
  
> [!NOTE]
>  È possibile disporre di un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo inserito in una pagina di fuori di un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona, determinando il controllo non viene rilevato dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllano o a cui fa riferimento relativo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> insieme. Tuttavia, è necessario utilizzare un <xref:System.Web.UI.WebControls.WebParts.WebPart> perché quindi perde la funzionalità Web part e opera come un normale controllo server di controllo all'esterno di una zona.  
  
 Qualsiasi tipo di controllo che può essere inserito in una zona, se un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo, un controllo ASP.NET standard, un controllo utente o un controllo server personalizzato, può essere considerato come un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo in fase di esecuzione. Quando un controllo che non è un <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo venga posizionato un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona, in fase di esecuzione ASP.NET include il controllo con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> dell'oggetto, in modo che il controllo può comportarsi come un vero <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo. Pertanto, tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo può registrare qualsiasi tipo di controllo del server, indipendentemente dal fatto che derivi dal <xref:System.Web.UI.WebControls.WebParts.WebPart> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà a livello di codice per accedere a singoli <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Si noti che nel markup dichiarativo per la pagina Web, all'interno di `<asp:webpartzone>` elemento vi sono due controlli server ASP.NET standard. Anche se questi non ereditano dal <xref:System.Web.UI.WebControls.WebParts.WebPart> classe, perché si trovano in un'area che verrà eseguito il wrapping con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto in fase di esecuzione e pertanto verranno inclusi nella raccolta cui fa riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà. È inoltre possibile aggiungere custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, i controlli utente o personalizzate per il server controlla in questa zona e verrebbe gestite nello stesso modo.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_WebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_WebParts/CS/wpmgrWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_WebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_WebParts/VB/wpmgrWebPartsVB.aspx#1)]  
  
 Si noti che per l'esempio di codice funzionare, è necessario aggiungere un'impostazione nel file Web. config per abilitare l'esportazione dei file di descrizione di Web part. Verificare di disporre di un file Web. config nella stessa directory della pagina Web per questo esempio di codice. All'interno di `<system.web>` sezione, assicurarsi che sia presente un `<webParts>` elemento con un `enableExport` attributo impostato su `true`, come nel seguente codice.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Dopo il caricamento della pagina in un browser, se si sceglie il **WebPart Count** pulsante, il codice Usa il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> proprietà per restituire il conteggio dei controlli nella raccolta. Se si sceglie il **Hide Calendar Title** pulsante, il codice modificato il calendario in modo che esegue il rendering con solo un bordo e non un titolo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebPartsConnected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsConnected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsConnected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsConnected As WebPartConnectionsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsEventHandler ^ WebPartsConnected;" />
      <MemberSignature Language="F#" Value="member this.WebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " Usage="member this.WebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a specific connection has been established between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls (or server or user controls).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento è associato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A> metodo. L'evento è utile perché dopo avere stabilito che una connessione è stata completata, è possibile informare l'utente di fatto, o anche modificare l'interfaccia utente (UI) della pagina. Ad esempio, si potrebbe voler visualizzare un'immagine che suggerisce una connessione tra due controlli o visualizza un messaggio breve e quindi modificare la modalità di visualizzazione pagina indietro per modalità browse.  
  
 Gli sviluppatori di pagina possono associare un gestore dell'evento personalizzato con questo evento aggiungendo il `OnWebPartsConnected` attributo il `<asp:webpartmanager>` elemento nella pagina e assegnazione di un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartsConnecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsConnecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsConnecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsConnecting As WebPartConnectionsCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventHandler ^ WebPartsConnecting;" />
      <MemberSignature Language="F#" Value="member this.WebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " Usage="member this.WebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of creating a connection between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls (or server or user controls placed in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> evento viene generato dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A> (metodo), e segnala che ha iniziato il processo di connessione (ad esempio, un utente ha selezionato un controllo e fa clic su un verbo di connessione), ma non è stato ancora completato. L'evento fornisce la possibilità di annullare una connessione prima del completamento. Se la connessione viene completata correttamente, questo evento è seguito dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento.  
  
 Gli sviluppatori di pagine è possono aggiungere un gestore per l'evento personalizzato aggiungendo il `OnWebPartsConnecting` attributo il `<asp:webpartmanager>` elemento e assegnando un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
      </Docs>
    </Member>
    <Member MemberName="WebPartsDisconnected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsDisconnected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsDisconnected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsDisconnected As WebPartConnectionsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsEventHandler ^ WebPartsDisconnected;" />
      <MemberSignature Language="F#" Value="member this.WebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " Usage="member this.WebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server controls has been terminated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> evento è associato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A> metodo. L'evento è utile perché dopo avere stabilito che una connessione viene terminata, è possibile informare l'utente, eseguire alcune operazioni di pulizia nel codice o apportare altre modifiche nell'interfaccia utente (UI).  
  
 Gli sviluppatori di pagina possono associare un gestore dell'evento personalizzato con questo evento aggiungendo il `OnWebPartsDisConnected` attributo il `<asp:webpartmanager>` elemento nella pagina e assegnazione di un nome di metodo personalizzato per l'attributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartsDisconnecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsDisconnecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsDisconnecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsDisconnecting As WebPartConnectionsCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventHandler ^ WebPartsDisconnecting;" />
      <MemberSignature Language="F#" Value="member this.WebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " Usage="member this.WebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of ending the connection between previously connected <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento viene generato dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A> metodo e segnala il fatto che un utente ha fatto clic su un verbo di disconnessione o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo in caso contrario, è stato chiamato. L'evento fornisce la possibilità di annullare il processo di chiusura di una connessione prima del completamento. Se la connessione viene chiusa correttamente, questo evento è seguito dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> evento.  
  
 Gli sviluppatori di pagine è possono aggiungere un gestore per l'evento personalizzato aggiungendo il `OnWebPartsDisconnecting` attributo il `<asp:webpartmanager>` elemento e assegnando un nome di metodo personalizzato per l'attributo.  
  
 In genere, quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento viene generato come risultato diretto di un'azione dell'utente che termina una connessione, è possibile annullare l'evento. Tuttavia, esistono diversi scenari in cui l'evento non può essere annullato. Il primo scenario è, se un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controllo viene eliminato, il <xref:System.Web.UI.WebControls.WebParts.WebPart> tutti i controlli in esso contenuti devono essere chiusi, in caso contrario, potrebbe essere orfani. In questo caso il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo chiude il <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, non l'utente e deve inoltre essere in grado di terminare le connessioni di qualsiasi controllo connesso senza provocare di interruzione, in modo che è possibile completare il processo di pulizia e di chiusura tutti i controlli. Pertanto, per impostazione predefinita il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> metodo non può essere annullato in questo scenario. Per un evento correlato che può essere annullato, vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento.  
  
 Il secondo scenario in cui il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento non può essere annullato quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> metodo viene chiamato (this chiamato durante ogni richiesta a una pagina, ad esempio), senza che sia presente un conflitto tra le connessioni esistenti in una pagina. Ad esempio, ad esempio un utente si connette controllo x al controllo y ma condiviso di un utente si connette controllo x al controllo z e ancora controllo x non è consentita in modo da formare più connessioni. In questo caso, le singole impostazioni dell'utente per la connessione ha la precedenza e il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo risolve il conflitto chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> (metodo) e termina la connessione tra x e z per l'utente specifico. Poiché la disconnessione è essenziale per risolvere il conflitto, per impostazione predefinita il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento non può essere annullato in questo scenario.  
  
 Il terzo scenario in cui il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> metodo non può essere annullato quando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o controllo server che è attualmente connesso viene eliminato o chiuso. Poiché il controllo dovrà essere rimosso dalla pagina, è necessario rimuovere la connessione. Pertanto, quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo richiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> metodo, che a sua volta genera il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento, per impostazione predefinita non esiste è possibile utilizzare l'annullamento dell'evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      </Docs>
    </Member>
    <Member MemberName="Zones">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartZoneCollection Zones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartZoneCollection Zones" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Zones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Zones As WebPartZoneCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartZoneCollection ^ Zones { System::Web::UI::WebControls::WebParts::WebPartZoneCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Zones : System.Web.UI.WebControls.WebParts.WebPartZoneCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Zones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartZoneCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of all the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zones on a Web page.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection" /> che fa riferimento a un set di <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> proprietà viene utilizzata per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo per tenere traccia il <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone in una pagina Web. Si noti che la proprietà non fa riferimento a tutti i tipi di zone; solo le zone che derivano da fa riferimento il <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> classe, inclusi <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zone.  
  
 Anche se la raccolta cui fa riferimento la proprietà è di sola lettura, è possibile utilizzare per accedere ai singoli oggetti nella raccolta e utilizzarli a livello di codice.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> proprietà a livello di codice per accedere a singoli <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> i controlli zona. Si noti che nel markup dichiarativo per la pagina Web, sono disponibili due `<asp:webpartzone>` elementi, ognuno dei quali contiene un controllo server. Nel `<script>` sezione della pagina, il codice venga utilizzata la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> proprietà per accedere alle singole aree, elencando tutti gli ID di area e quindi modificando il colore di sfondo della seconda area.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_Zones#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_Zones/CS/wpmgrzonescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_Zones#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_Zones/VB/wpmgrzonesvb.aspx#1)]  
  
 Si noti che per l'esempio di codice funzionare, è necessario aggiungere un'impostazione nel file Web. config per abilitare l'esportazione dei file di descrizione di Web part. Verificare di disporre di un file Web. config nella stessa directory della pagina Web per questo esempio di codice. All'interno di `<system.web>` sezione, assicurarsi che sia presente un `<webParts>` elemento con un `enableExport` attributo impostato su `true`, come nel seguente codice.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Dopo il caricamento della pagina in un browser, se si sceglie il **List Zone IDs** pulsante, il codice Usa il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> proprietà per elencare gli ID di tutte le zone nella raccolta. Se si sceglie il **Change Zone BackColor** pulsante, il codice viene modificato il colore di sfondo dell'area di secondo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>