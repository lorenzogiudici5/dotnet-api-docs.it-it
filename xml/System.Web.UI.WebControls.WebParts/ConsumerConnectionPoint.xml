<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a906fef29cb08b4b1a7448d724be44cee8213f6c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36386164" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definisce un oggetto punto di connessione che consente a un controllo server di agire da consumer per la creazione di una connessione con un provider.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In ogni connessione Web part tra due controlli server, ogni controllo deve avere (tra gli altri requisiti) un oggetto punto di connessione associata che consente di connettersi a altro controllo e specificare o utilizzare i dati, a seconda che il controllo viene definito come il provider o consumer per la connessione. Oggetto <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetto contiene in genere i dettagli per la connessione e un altro controllo e il tipo di dati che è possibile condividere un controllo. Per un controllo che funge da consumer in una connessione, il punto di connessione deve essere un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto. Per informazioni dettagliate sulle connessioni Web part e punti di connessione, leggere gli argomenti elencati nella sezione Vedere anche.  
  
 Per creare un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> dell'oggetto, sono necessari diversi passaggi:  
  
1.  Abilitare il controllo di un consumer fare riferimento a un'istanza di interfaccia. Un <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server (qualsiasi tipo di controllo del server che verrà aggiunto a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona può essere utilizzata) deve essere in grado di utilizzare i dati da una specifica istanza dell'interfaccia. Il controllo non è necessario implementare l'interfaccia. solo il provider deve implementarla. Il consumer può utilizzare con il tipo di interfaccia esatto fornito da un provider o, in caso contrario, un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto può essere utilizzato per trasformare i dati dal tipo di interfaccia del provider in un tipo riconosciuto dal consumer. Un modo comune per abilitare un consumer consiste nel dichiarare un campo privato per contenere un riferimento al tipo di interfaccia desiderato.  
  
2.  Identificare un metodo di callback. Un metodo nel consumer deve essere identificato come metodo di callback per stabilire una connessione con il provider. Questo metodo recupera un'istanza dell'interfaccia che il provider implementa e assegna il file, ad esempio, nel campo privato creato nel primo passaggio. L'approccio di Web part per l'identificazione di un metodo di callback del consumer consiste nell'aggiungere un `ConnectionConsumer` attributo dei metadati (definito dal <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> classe) per il metodo che riceve l'istanza dell'interfaccia. Quando viene aggiunto l'attributo, l'unico parametro obbligatorio è un nome visualizzato da utilizzare per il punto di connessione consumer. Parametri facoltativi è inoltre possibile aggiungere, ad esempio un ID.  
  
3.  Processo e l'output dei dati dall'istanza dell'interfaccia. Eseguire qualsiasi elaborazione interna come necessaria sui dati, e quindi in genere un controllo utente verrà eseguito il rendering dei dati per la pagina. È un modo comune in questo modo per eseguire l'override del controllo <xref:System.Web.UI.Control.OnPreRender%2A> metodo.  
  
    > [!NOTE]
    >  Durante una richiesta sincrona, un consumer deve richiedere i dati direttamente dal provider durante o immediatamente dopo il <xref:System.Web.UI.Control.PreRender> evento. Durante una richiesta asincrona, se il metodo di callback del provider non viene chiamato in qualsiasi momento durante il rendering, lo sviluppatore può presupporre che nessun dato è stato inviato al consumer.  
  
 Dopo che un controllo sia stato preparato per agire come un consumer, il controllo può partecipare alle connessioni (presupponendo che un controllo provider viene inoltre e reso disponibile). Per creare una connessione statica e dichiarativa nel markup della pagina Web, gli sviluppatori possono utilizzare il `<asp:webpartconnection>` elemento. Se il `ConnectionConsumer` attributo nel codice sorgente del consumer che identifica il metodo di callback specifica un ID per il punto di connessione, quindi tale valore deve essere assegnato per il `ConsumerConnectionPointID` attributo il `<asp:webpartconnection>` elemento in una pagina. Un motivo che uno sviluppatore può specificare un ID per un punto di connessione consumer è se sono presenti più punti di connessione definiti nel controllo consumer. Se per il punto di connessione consumer nel controllo consumer non è specificato alcun ID, non è un valore da assegnare ai `ConsumerConnectionPointID` attributo nella pagina, in quanto la connessione verrà creata utilizzando il valore predefinito ottenuto dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> campo.  
  
 Per creare una connessione nel codice, gli sviluppatori devono creare un nuovo <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodo e passando l'ID del controllo consumer, con l'ID o indice del definita <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> all'oggetto nel controllo consumer. Restituito <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> , insieme a un riferimento al controllo consumer, un riferimento all'oggetto controllo provider e un oggetto corrispondente <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dell'oggetto, sono tutti passato per il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo per creare un nuovo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 Anche se gli sviluppatori possono utilizzare i punti di connessione consumer come parte delle connessioni in modo dichiarativo o a livello di codice, gli utenti possono anche interagire con i punti di connessione consumer per stabilire connessioni tramite l'interfaccia utente (UI). Se gli sviluppatori di dichiarano un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo in una pagina Web, fornisce un'interfaccia utente in fase di esecuzione per gli utenti di creare connessioni. Se si sceglie il controllo del provider come punto di partenza per stabilire la connessione, fare clic sul relativo verbo di connessione (possono anche scegliere il consumer, non c'è alcuna differenza nella connessione risultante), nell'interfaccia utente verrà visualizzato un controllo elenco a discesa con il visualizzare i nomi di disponibili consumer connessione punto (o punti se sono presenti più sessioni) che il provider può inviare i dati. Gli utenti devono selezionare un punto di connessione consumer per stabilire una connessione.  
  
 Un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto viene associato direttamente a uno specifico controllo consumer e archivia i dettagli relativi a una connessione nelle proprietà del componente eredita dalla base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Ad esempio, in ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> proprietà, un punto di connessione consumer mantiene il tipo di interfaccia utilizzata. Se il provider e consumer in una connessione sia comprende il tipo di interfaccia, i controlli sono compatibili e in grado di creare una connessione diretta. Se il provider e l'utente non può funzionare con lo stesso tipo di interfaccia, che sono incompatibili e devono usare un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto da tradurre il punto di connessione provider <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> proprietà in un tipo che il consumer può funzionare con. Un'altra proprietà ereditata importante è il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> proprietà che fornisce un nome descrittivo da visualizzare nell'interfaccia utente per gli utenti di scegliere una connessione consumer punto durante la creazione di connessioni. Il nome visualizzato è il parametro obbligatorio quando gli sviluppatori aggiungono un `ConnectionConsumer` attributo al metodo di callback in un controllo di consumer. Ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> proprietà risulta utilizzabile anche, come indicato in precedenza, perché fornisce un identificatore univoco per un punto di connessione consumer nel caso in cui un consumer ha più punti di connessione. Un consumer può disporre di più <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> gli oggetti definiti in essa contenuti e in questo caso, quando gli sviluppatori aggiungono il `ConnectionConsumer` attributo a un metodo, specifichino un valore di ID per distinguere ogni punto di connessione. Un'altra proprietà ereditata significativa è la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> proprietà, che indica se un punto di connessione consumer può connettersi contemporaneamente a più provider. Questo valore della proprietà `false` per impostazione predefinita per i punti di connessione consumer (mentre il valore predefinito è `true` per i punti di connessione provider).  
  
 Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe aggiunge diversi metodi univoci ai membri del componente eredita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> metodo richiama il metodo di callback definito del consumer per recuperare l'istanza dell'interfaccia dal provider. Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> metodo restituisce un valore booleano che indica se il punto di connessione è in grado di stabilire connessioni, in base allo stato corrente del controllo consumer associato.  
  
   
  
## Examples  
 Esempio di codice seguente vengono illustrati modi semplici per creare una connessione in modo dichiarativo, utilizzare a livello di codice o tramite l'interfaccia utente, in ogni caso di un punto di connessione consumer.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer di una connessione.  
  
-   Una pagina Web per tutti i controlli host ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che viene assegnato ai `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e controlli. Il file di origine contiene una semplice interfaccia denominata `IZipCode`. È inoltre disponibile una <xref:System.Web.UI.WebControls.WebParts.WebPart> classe denominata `ZipCodeWebPart` che implementa l'interfaccia e funge da controllo provider. L'altro <xref:System.Web.UI.WebControls.WebParts.WebPart> classe è denominata `WeatherWebPart`, e funge da consumer per la connessione. Questa classe ha un metodo denominato `GetZipCode` che ottiene un'istanza di `IZipCode` interfaccia dal controllo del provider. Si noti che questo metodo è contrassegnato come metodo di punto di connessione del consumer con una `ConnectionConsumer` attributo nei relativi metadati. Si tratta del meccanismo per identificare il metodo del punto di connessione nel controllo consumer.  
  
 Ad esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e un controllo del Server Web personalizzato utilizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Nella parte superiore sono `Register` direttive per registrare i controlli personalizzati che formano la connessione e il controllo utente che consente agli utenti di modificare le modalità di visualizzazione della pagina. La connessione stessa viene creata in modo dichiarativo all'interno di `<staticconnections>` elemento nella pagina. Ciò viene indicata la modalità di creazione di una connessione-nota il `ConsumerConnectionPointID` attributo il `<asp:webpartconnection>` elemento. È inoltre possibile creare la connessione a livello di codice; il codice per questo scopo è presente il `Button1_Click` metodo. In questo caso, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto viene creato e quindi passato a un metodo che crea l'effettiva connessione. Se la connessione viene creata in modo dichiarativo o a livello di codice, i punti di connessione devono sempre specificati per il provider e consumer. Il `Button2_Click` metodo accessi il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> gli oggetti per il provider e consumer e scrive alcuni valori della proprietà a un'etichetta nella pagina.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, fare clic sui **dettagli punto di connessione** pulsante. Informazioni sui punti di connessione provider e consumer stabiliti nella connessione dichiarativa. Successivamente, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina in modalità di connessione. Nel menu dei verbi il **Provider di codice postale** <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (rappresentato da una freccia verso il basso nella barra del titolo), fare clic sul verbo di connessione. La connessione viene visualizzata l'interfaccia utente, creato automaticamente dal `<asp:connectionszone>` controllo dichiarato nella pagina. Si tratta di un altro modo per creare una connessione (tramite l'interfaccia utente), insieme ai metodi strumenti dichiarativi e programmatici indicati in precedenza. Fare clic sui **Disconnect** pulsante per terminare la connessione statica esistente. Fare clic sui **creare una connessione a un Consumer** collegamento. L'interfaccia utente viene ora visualizzato un controllo elenco a discesa che elenca il nome visualizzato del punto di connessione di consumer. Il tipo dell'oggetto sarà il tipo dell'interfaccia implementata. Ad esempio, due interfacce implementate per le connessioni Web part sono set di controlli ** e **. Fare clic sui **connessione dinamica** pulsante per creare una connessione a livello di codice. Il ** metodo viene chiamato da ** oggetti durante l'attivazione di una connessione. Fare clic sui **dettagli punto di connessione** nuovo clic sul pulsante, per indicare i dettagli sull'oggetto punto di connessione consumer una volta più.  
  
 Nell'esempio è stata illustrata una connessione e l'utilizzo di un punto di connessione consumer in tre modi: una connessione statica dichiarata nel markup della pagina Web; una connessione creata nel codice che utilizza un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto e una connessione creata da un utente tramite la connessione dell'interfaccia utente.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metodo del controllo consumer che restituisce ai consumer un'istanza dell'interfaccia per stabilire una connessione.</param>
        <param name="interfaceType">Oggetto <see cref="T:System.Type" /> dell'interfaccia che il consumer riceve da un provider.</param>
        <param name="controlType">Oggetto <see cref="T:System.Type" /> del controllo consumer a cui viene associato il punto di connessione del consumer.</param>
        <param name="displayName">Nome visualizzato descrittivo per il punto di connessione del consumer presentato agli utenti nell'interfaccia utente di connessione.</param>
        <param name="id">Identificatore univoco per il punto di connessione del consumer.</param>
        <param name="allowsMultipleConnections">Valore Boolean che indica se il punto di connessione del consumer può disporre di più connessioni simultanee con i provider.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Queste interfacce, che non sono quelle predefinite utilizzate per stabilire una connessione, vengono chiamate interfacce secondarie.  
  
 Il  metodo fornisce un modo per restituire una raccolta di riferimenti alle interfacce secondarie, esattamente come il  metodo restituisce un riferimento all'interfaccia predefinita. Il  metodo la  classe non contiene alcuna implementazione; restituisce una raccolta vuota di interfacce secondarie.  
  
 Per implementare questo metodo, è necessario ereditare la  classe ed eseguire l'override di questo metodo, restituendo un set specifico di interfacce secondarie. Tuttavia, nei casi in cui si desidera semplicemente a stabilire una connessione e non si estende la classe, è necessario chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> per restituire un oggetto punto di connessione da un provider.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come derivare il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe per creare un punto di connessione del provider personalizzato.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Un file di origine che contiene un provider <xref:System.Web.UI.WebControls.WebParts.WebPart> controllare, un consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto.  
  
-   Una pagina Web che ospita i controlli in una connessione statica.  
  
-   Una spiegazione su come eseguire il codice di esempio.  
  
 La prima parte dell'esempio di codice è l'origine per il provider e consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe, denominata `TableConsumerConnectionPoint`. Si noti che il costruttore del `TableConsumerConnectionPoint` classe chiama il costruttore basa, passando i parametri obbligatori come indicato nella sezione dei parametri. Si noti inoltre che nel `TableConsumer` (classe), il `SetConnectionInterface` metodo viene specificato come metodo di callback per le connessioni e il `ConnectionConsumer` attributo dichiara l'oggetto personalizzato `TableConsumerConnectionPoint` come parametro. Ciò dimostra come creare un punto di connessione consumer personalizzato e associarlo a un controllo consumer. Questo esempio si presuppone che il codice sorgente viene compilato in modo dinamico, pertanto è consigliabile inserire il file di codice di origine nella sottocartella App_Code dell'applicazione Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 La seconda parte dell'esempio di codice è la pagina Web che ospita i controlli personalizzati in una connessione Web part statica. Nella parte superiore della pagina è una `Register` direttiva per dichiarare un prefisso e lo spazio dei nomi per i controlli personalizzati. La connessione viene dichiarata utilizzando un `<asp:webpartconnection>` controlli elemento e il provider e consumer sono dichiarati all'interno di un `<asp:webpartzone>` elemento.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Caricare la pagina in un browser. La connessione tra i controlli già esiste e il consumer consente di visualizzare i dati dal provider, perché la connessione è stata dichiarata come statica nella pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> è <see langword="null" />.  \- o -  <paramref name="interfaceType" /> è <see langword="null" />.  \- o -  <paramref name="controlType" /> è <see langword="null" />.  \- oppure -  <paramref name="displayName" /> è <see langword="null" /> o una stringa vuota ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> non è dello stesso tipo del controllo consumer o di una classe valida da esso derivata.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Controllo consumer associato a un punto di connessione del consumer.</param>
        <param name="data">Istanza dell'interfaccia restituita da un controllo provider.</param>
        <summary>Chiama il metodo di callback in un controllo consumer e recupera l'istanza dell'interfaccia da un controllo provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riceve un'istanza dell'interfaccia da un provider che contiene i dati per il controllo di consumer.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> metodo viene chiamato da <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetti durante l'attivazione di una connessione. Si tratta di un passaggio critico che fa parte di avvio di una connessione e l'abilitazione di due controlli condividere i dati.  
  
 Il controllo di consumer in una connessione deve essere in grado di funzionare con lo stesso tipo dell'interfaccia come il provider. In caso contrario, i controlli sono incompatibili e <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto deve essere utilizzato per stabilire una connessione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Controllo consumer associato all'oggetto <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces">Classe <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> delle interfacce secondarie che prendono parte a una connessione.</param>
        <summary>Determina se un punto di connessione del consumer è attualmente in grado di stabilire una connessione.</summary>
        <returns>
          <see langword="true" /> se un punto di connessione è in grado di stabilire attualmente una connessione; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> , implementato sempre restituisce `true` in tutti i casi per la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe. Per questo metodo si desidera effettuare una verifica lo stato della `control` e `secondaryInterfaces` in determinati momenti critici per determinare se un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto è attualmente in grado di creare una connessione.  
  
 Possono essere presenti scenari in cui `control` è in uno stato che renderebbe impossibile in modo da formare una connessione, o in cui `secondaryInterfaces` deve essere presente prima di creare una connessione. In questi casi, gli sviluppatori possono ereditare dal <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe ed eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> metodo, che fornisce un'implementazione personalizzata per determinare quando il punto di connessione è pronto per supportare le connessioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>