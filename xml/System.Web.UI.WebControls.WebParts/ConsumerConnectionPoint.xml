<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd78a1f3ef930919223c519dad4ba41ea2113649" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51914500" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definisce un oggetto punto di connessione che consente a un controllo server di agire da consumer per la creazione di una connessione con un provider.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In ogni connessione Web part tra due controlli server, ogni controllo deve avere (tra gli altri requisiti) un oggetto punto di connessione associata che consente di connettersi all'altro controllo e fornire o utilizzare i dati, a seconda che il controllo viene designato come il provider o i consumer per la connessione. Oggetto <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetto in genere contiene i dettagli per la connessione e un altro controllo e il tipo di dati che è possibile condividere un controllo. Per un controllo funge da consumer in una connessione, il punto di connessione deve essere un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto. Per informazioni dettagliate sulle connessioni Web part e i punti di connessione, leggere gli argomenti elencati nella sezione Vedere anche seguente.  
  
 Per creare un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> dell'oggetto, sono necessari diversi passaggi:  
  
1.  Abilitare un controllo consumer fare riferimento a un'istanza dell'interfaccia. Oggetto <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server (qualsiasi tipo di controllo del server che verrà aggiunti a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona può essere usata) deve essere in grado di utilizzare dati da una specifica istanza dell'interfaccia. Il controllo non deve implementare l'interfaccia. solo il provider è necessario implementarla. Il consumer può utilizzare con il tipo di interfaccia esatto resi disponibili da un provider o, in caso contrario, un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto può essere utilizzato per trasformare i dati dal tipo di interfaccia del provider in un tipo riconosciuto dal consumer. Un modo tipico per consentire un consumer consiste nel dichiarare un campo privato per contenere un riferimento al tipo di interfaccia desiderata.  
  
2.  Identificare un metodo di callback. Un metodo nel consumer deve essere identificato come metodo di callback per stabilire una connessione con il provider. Questo metodo recupera un'istanza dell'interfaccia che il provider implementa e li assegna a, ad esempio, il campo privato creata nel primo passaggio. L'approccio di Web part per l'identificazione di un metodo di callback nel consumer consiste nell'aggiungere un `ConnectionConsumer` attributo di metadati (definito dal <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> classe) per il metodo che riceve l'istanza dell'interfaccia. Quando viene aggiunto l'attributo, l'unico parametro obbligatorio è un nome visualizzato da utilizzare per il punto di connessione consumer. I parametri facoltativi è inoltre possibile aggiungere, ad esempio un ID.  
  
3.  Processo e output i dati dall'istanza dell'interfaccia. Eseguire l'elaborazione interna in base alle esigenze dei dati e quindi in genere un controllo consumer eseguirà il rendering di dati alla pagina. Un modo comune per questa operazione è eseguire l'override del controllo <xref:System.Web.UI.Control.OnPreRender%2A> (metodo).  
  
    > [!NOTE]
    >  Durante una richiesta sincrona, un consumer deve richiedere i dati direttamente dal provider durante o immediatamente dopo il <xref:System.Web.UI.Control.PreRender> evento. Durante una richiesta asincrona, se il metodo di callback del provider non viene chiamato in qualsiasi momento durante il rendering, lo sviluppatore può presupporre che i dati non è stati inviati al consumer.  
  
 Dopo che è stato dotato di un controllo per fungere da consumer, il controllo può essere connessa (supponendo che un controllo provider sia anche e reso disponibile). Per creare un collegamento statico e dichiarativo nel markup di una pagina Web, gli sviluppatori possono utilizzare il `<asp:webpartconnection>` elemento. Se il `ConnectionConsumer` attributo nel codice sorgente consumer che identifica il metodo di callback specifica un ID per il punto di connessione e quindi tale valore deve essere assegnato al `ConsumerConnectionPointID` attributo il `<asp:webpartconnection>` elemento in una pagina. Un motivo che uno sviluppatore può specificare un ID per un punto di connessione del consumer è se esistono più punti di connessione definiti nel controllo consumer. Se per il punto di connessione consumer del controllo consumer non è specificato alcun ID, un valore non deve essere assegnato al `ConsumerConnectionPointID` attributo nella pagina, in quanto verrà creata la connessione utilizza un valore predefinito ottenuto dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> campo.  
  
 Per creare una connessione nel codice, gli sviluppatori devono creare una nuova <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodo e passando l'ID del controllo consumer, insieme all'ID o indice del definita <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> all'oggetto nel controllo consumer. Restituito <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> , insieme a un riferimento al controllo consumer, un riferimento all'oggetto controllo provider e un corrispondente <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> dell'oggetto, sono tutti passato al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo per creare un nuovo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 Anche se gli sviluppatori possono usare i punti di connessione consumer come parte di stabilire le connessioni in modo dichiarativo o a livello di codice, gli utenti possono anche interagire con i punti di connessione consumer per stabilire connessioni tramite l'interfaccia utente (UI). Se gli sviluppatori di dichiarano un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo in una pagina Web, fornisce un'interfaccia utente in fase di esecuzione per gli utenti di creare connessioni. Se gli utenti scelgono il controllo del provider come punto di partenza per stabilire la connessione facendo clic relativo verbo di connessione, possono anche scegliere il consumer, ma non c'è alcuna differenza nella connessione risultante, nell'interfaccia utente visualizzerà un controllo elenco a discesa con le visualizzare i nomi della disponibili consumer connessione punto (o punti se sono presenti più sessioni) che il provider può inviare i dati. Gli utenti devono selezionare un punto di connessione consumer per stabilire una connessione.  
  
 Oggetto <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto viene associato direttamente a uno specifico controllo consumer e archivia i dettagli relativi a una connessione in proprietà ereditate dalla base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Ad esempio, in ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> proprietà, un punto di connessione consumer mantiene il tipo di interfaccia viene utilizzata. Se il provider e consumer in una connessione sia individuare il tipo di interfaccia, i controlli sono in grado di creare una connessione diretta e compatibili. Se il provider e l'utente non può funzionare con lo stesso tipo di interfaccia, sono incompatibili e devono usare una <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto da tradurre il punto di connessione provider <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> proprietà in un tipo che possa essere utilizzato con i consumer. Un'altra proprietà ereditata importante è il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> proprietà che fornisce un nome descrittivo da visualizzare nell'interfaccia utente per gli utenti di scegliere una connessione del consumer punto durante la creazione di connessioni. Il nome visualizzato è il parametro obbligatorio quando gli sviluppatori di aggiungere un `ConnectionConsumer` attributo al metodo di callback in un controllo consumer. Ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> proprietà è anche utile, come indicato in precedenza, perché fornisce un identificatore univoco per un punto di connessione consumer nel caso in cui un consumer ha più punti di connessione. Un consumer può disporre di più <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> gli oggetti definiti all'interno e in questo caso, quando gli sviluppatori di aggiungere il `ConnectionConsumer` attributo a un metodo, è necessario specificare un valore di ID per distinguere ogni punto di connessione. Un'altra proprietà ereditata significativa è la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> proprietà, che indica se un punto di connessione consumer possa connettersi contemporaneamente a più provider. Valore di questa proprietà viene `false` per impostazione predefinita per i punti di connessione consumer (mentre l'impostazione predefinita è `true` per punti di connessione del provider).  
  
 Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe aggiunge diversi metodi univoci per i membri eredita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> classe. Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> metodo richiama il metodo di callback definito del consumer per recuperare l'istanza dell'interfaccia dal provider. Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> metodo restituisce un valore booleano che indica se il punto di connessione è in grado di stabilire le connessioni, basate sullo stato corrente del controllo consumer associato.  
  
   
  
## Examples  
 Esempio di codice seguente illustra modi semplici per creare una connessione in modo dichiarativo, a livello di codice o tramite l'interfaccia utente, in ogni caso di utilizzo di un punto di connessione consumer.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e controlli. Il file di origine contiene una semplice interfaccia denominata `IZipCode`. È inoltre disponibile un' <xref:System.Web.UI.WebControls.WebParts.WebPart> classe denominata `ZipCodeWebPart` che implementa l'interfaccia e funge da controllo provider. L'altra <xref:System.Web.UI.WebControls.WebParts.WebPart> classe è denominata `WeatherWebPart`, e funge da consumer per la connessione. Questa classe ha un metodo denominato `GetZipCode` che ottiene un'istanza del `IZipCode` interfaccia dal controllo provider. Si noti che questo metodo è contrassegnato come metodo del punto di connessione del consumer con una `ConnectionConsumer` attributo nei relativi metadati. Si tratta del meccanismo per identificare il metodo del punto di connessione del controllo consumer.  
  
 Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Nella parte superiore sono `Register` direttive per registrare i controlli personalizzati che formano la connessione e il controllo utente che consente agli utenti di modificare le modalità di visualizzazione della pagina. La connessione stessa viene creata in modo dichiarativo all'interno di `<staticconnections>` elemento della pagina. Ciò viene illustrato un modo per creare una connessione, nota il `ConsumerConnectionPointID` attributo la `<asp:webpartconnection>` elemento. È anche possibile creare la connessione a livello di codice; il codice per questa operazione è nel `Button1_Click` (metodo). In questo caso, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto viene creato e quindi passato a un metodo che crea la connessione effettiva. Se la connessione viene creata in modo dichiarativo o a livello di codice, i punti di connessione è obbligatorio sempre per il provider e consumer. Il `Button2_Click` metodo accessi il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetti per il consumer sia il provider e scrive alcuni dei valori delle relative proprietà a un'etichetta nella pagina.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, scegliere il **dettagli punto di connessione** pulsante. Informazioni sui punti di connessione provider e consumer stabilita la connessione dichiarativo. Successivamente, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina in modalità di connessione. Nel menu dei verbi di **Provider di codice postale** <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo (rappresentato da una freccia verso il basso nella barra del titolo), fare clic sul verbo connect. La connessione viene visualizzata l'interfaccia utente, creato automaticamente dal `<asp:connectionszone>` dichiarato nella pagina del controllo. Si tratta di un altro modo per creare una connessione (tramite l'interfaccia utente), con i metodi dichiarativi e a livello di codice illustrati in precedenza. Scegliere il **Disconnect** pulsante per terminare la connessione statica esistente. Scegliere il **creare una connessione a un Consumer** collegamento. L'interfaccia utente ora visualizza un controllo elenco a discesa che elenca il nome visualizzato del punto di connessione di consumer. Selezionare il punto di connessione nell'elenco a discesa e quindi fare clic su **Connect** per completare la connessione. Fare quindi clic **Disconnect** nuovamente. Scegliere il **connessione dinamica** pulsante per creare una connessione a livello di codice. Usare la **modalità di visualizzazione** controllo per restituire la pagina modalità di visualizzazione. Scegliere il **dettagli punto di connessione** pulsante anche in questo caso, per indicare i dettagli relativi all'oggetto punto di connessione del consumer una volta più.  
  
 L'esempio è stata illustrata una connessione e l'utilizzo di un punto di connessione consumer in tre modi: una connessione statica dichiarati nel markup della pagina Web; una connessione creata nel codice che utilizza un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto e una connessione creata da un utente tramite l'interfaccia utente di connessione.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Web part ASP.NET le pagine</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Panoramica delle connessioni Web part</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Metodo del controllo consumer che restituisce ai consumer un'istanza dell'interfaccia per stabilire una connessione.</param>
        <param name="interfaceType">Oggetto <see cref="T:System.Type" /> dell'interfaccia che il consumer riceve da un provider.</param>
        <param name="controlType">Oggetto <see cref="T:System.Type" /> del controllo consumer a cui viene associato il punto di connessione del consumer.</param>
        <param name="displayName">Nome visualizzato descrittivo per il punto di connessione del consumer presentato agli utenti nell'interfaccia utente di connessione.</param>
        <param name="id">Identificatore univoco per il punto di connessione del consumer.</param>
        <param name="allowsMultipleConnections">Valore Boolean che indica se il punto di connessione del consumer può disporre di più connessioni simultanee con i provider.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> costruttore per il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe chiama semplicemente il costruttore di base, passando i diversi parametri e inizializzare la classe di base.  
  
 Il costruttore della classe base controlla un numero di parametri per un punto di connessione e può generare eccezioni diverse. Per un elenco delle possibili eccezioni, vedere la sezione eccezioni.  
  
 È possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> costruttore per creare una propria istanza del <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe. Tuttavia, nei casi in cui si desidera semplicemente stabilendo una connessione e non si estende la classe, è necessario chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> per restituire un oggetto punto di connessione da un provider.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come derivare dal <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe per creare un punto di connessione provider personalizzato.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Un file di origine che contiene un provider <xref:System.Web.UI.WebControls.WebParts.WebPart> controllare, un consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto.  
  
-   Una pagina Web che ospita i controlli in una connessione statica.  
  
-   Una spiegazione su come eseguire il codice di esempio.  
  
 La prima parte dell'esempio di codice è l'origine per il provider e consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e un oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe, denominata `TableConsumerConnectionPoint`. Si noti che il costruttore del `TableConsumerConnectionPoint` classe chiama il costruttore base, passando i parametri obbligatori come indicato nella sezione dei parametri. Si noti inoltre che nel `TableConsumer` (classe), il `SetConnectionInterface` metodo viene specificato come metodo di callback per le connessioni e il `ConnectionConsumer` attributo dichiara l'oggetto personalizzato `TableConsumerConnectionPoint` come parametro. Ciò viene illustrato come creare un punto di connessione consumer personalizzato e associarlo a un controllo consumer. Questo esempio si presuppone che il codice sorgente viene compilato in modo dinamico, pertanto è necessario inserire il file di codice sorgente in una sottocartella App_Code dell'applicazione Web.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 La seconda parte dell'esempio di codice è la pagina Web che ospita i controlli personalizzati in una connessione Web part statico. Nella parte superiore della pagina è un `Register` direttiva per dichiarare un prefisso e lo spazio dei nomi per i controlli personalizzati. La connessione viene dichiarata utilizzando un `<asp:webpartconnection>` controlli di elemento e il provider e consumer sono dichiarati all'interno di un `<asp:webpartzone>` elemento.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Caricare la pagina in un browser. La connessione tra i controlli già esiste e il consumer consente di visualizzare i dati dal provider, poiché la connessione è stata dichiarata come statica nella pagina.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="interfaceType" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="controlType" /> è <see langword="null" />.  
  
\- oppure - 
 <paramref name="displayName" /> è <see langword="null" /> o è una stringa vuota ("").</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" /> non è dello stesso tipo del controllo consumer o di una classe valida da esso derivata.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Web part ASP.NET le pagine</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Controllo consumer associato a un punto di connessione del consumer.</param>
        <param name="data">Istanza dell'interfaccia restituita da un controllo provider.</param>
        <summary>Chiama il metodo di callback in un controllo consumer e recupera l'istanza dell'interfaccia da un controllo provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riceve un'istanza dell'interfaccia da un provider che contiene i dati per il controllo consumer.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> metodo viene chiamato da <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetti durante l'attivazione di una connessione. Si tratta di un passaggio fondamentale, che fa parte di avvio di una connessione e l'abilitazione di due controlli condividere i dati.  
  
 Il controllo consumer in una connessione deve essere in grado di funzionare con lo stesso tipo dell'interfaccia come provider. In caso contrario, i controlli non sono compatibili e un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto deve essere utilizzato per stabilire una connessione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Controllo consumer associato all'oggetto <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces">Classe <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> delle interfacce secondarie che prendono parte a una connessione.</param>
        <summary>Determina se un punto di connessione del consumer è attualmente in grado di stabilire una connessione.</summary>
        <returns>
          <see langword="true" /> se un punto di connessione è in grado di stabilire attualmente una connessione; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> metodo, come implementato restituisce sempre `true` in tutti i casi per il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe. Lo scopo di questo metodo è per verificare lo stato del `control` e `secondaryInterfaces` in determinati momenti critici per determinare se un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto è attualmente in grado di creare una connessione.  
  
 Possono esistere scenari in cui `control` è in uno stato che renderebbe impossibile in modo da formare una connessione, o in cui `secondaryInterfaces` deve esistere prima di creare una connessione. In questi casi, gli sviluppatori possono ereditare il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> classe ed eseguire l'override di <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> metodo, che fornisce un'implementazione personalizzata per determinare quando il punto di connessione è pronto per supportare le connessioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>