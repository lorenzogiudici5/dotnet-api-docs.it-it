<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9876a0ff584b9342112f635529e62289ab52c444" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30591675" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce un oggetto che consente a due controlli <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> di creare una connessione. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il set di controlli Web part, una connessione è un collegamento o un'associazione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> (o altri server o il utente) controlli che consente di condividere i dati. La possibilità di condividere i dati consente controlli connessi da utilizzare nella modalità che vanno oltre le funzionalità offerte dai controlli isolati. Ad esempio, se un controllo fornisce i dati di CAP e un altro può leggere i dati e fornire informazioni meteorologiche in base al codice postale, la funzionalità dei due controlli connessa offre maggior valore agli utenti. Per estendere questo esempio, stato possibile creare altri controlli, che sono anche le informazioni visualizzate in base a un codice postale, ad esempio un controllo con i collegamenti per ottenere notizie locali, e tutti i controlli che è possono utilizzare i dati di codice postale potrebbe condividere i dati con il singolo controllo che fornisce un codice postale. Gli utenti finali di applicazioni Web part è possibile creare e gestire le connessioni tra tali controlli compatibili direttamente da un Web browser, tramite l'interfaccia utente di connessioni standard (UI) fornito dal <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo o tramite un'interfaccia utente personalizzata fornita da un Developer.  
  
 Questo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Cenni preliminari sulla classe è una descrizione generale delle informazioni di base per la creazione di una connessione. Per altre informazioni sui requisiti per la creazione di connessioni e componenti specifici, vedere [Cenni preliminari sulle connessioni di Web part](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b), oppure vedere le classi di riferimento ed esempi indicati nella discussione seguente di codice. Esistono alcuni aspetti fondamentali di una connessione Web part:  
  
-   Due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Ogni connessione Web part è costituita da due controlli. È possibile che un controllo di partecipare contemporaneamente più di una connessione, ma ogni singola connessione è costituito da esattamente due controlli. I controlli possono derivare direttamente la <xref:System.Web.UI.WebControls.WebParts.WebPart> classe base oppure può essere altri controlli server, inclusi i controlli ASP.NET, i controlli server personalizzati e controlli utente. I controlli che non derivano dal <xref:System.Web.UI.WebControls.WebParts.WebPart> classe, se inserita in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> della zona, vengono automaticamente inclusi in un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto in fase di esecuzione, che consente loro di ereditare il <xref:System.Web.UI.WebControls.WebParts.WebPart> classe e funzione come in fase di esecuzione <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli.  
  
-   I controlli che si trovano <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone. Entrambi <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e qualsiasi altro tipo di controllo del server deve risiedere in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona per poter partecipare connessioni Web part (e la maggior parte delle altre funzionalità di Web part).  
  
-   Consumer e provider. In ogni connessione Web part sono disponibili due controlli: un provider di dati e i consumer di dati. Il provider fornisce dati al consumer tramite un metodo di callback specificato che restituisce i dati sotto forma di un'interfaccia. (Per un esempio di come creare e specificare il metodo di callback, vedere la sezione esempio di questo argomento). Questo metodo di callback è noto come un punto di connessione. I dettagli di questo punto di connessione (il "nome", un ID e il tipo di interfaccia restituito) sono contenuti un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto associato al controllo del provider. Il consumer riceve i dati tramite un metodo specifico che può accettare un'istanza dell'interfaccia. Questo metodo è noto come punto di connessione consumer e i dettagli del punto di connessione (nome, ID e tipo di interfaccia) sono contenuti un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto associato al controllo del consumer.  
  
-   Controlli compatibili o un trasformatore valido. Per una connessione a funzionare, il consumer e provider deve essere compatibile (Ciò significa che è possono utilizzare i metodi di punto di connessione specificata con lo stesso tipo dell'interfaccia) o che vi sia un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto in grado di tradurre il tipo fornito per il provider in un tipo riconosciuto dal consumer.  
  
-   Un oggetto <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>. Per una connessione esistente, deve essere un'istanza di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe che contiene i riferimenti ai controlli provider e consumer, nonché i dettagli dei punti di connessione. Se il provider e consumer sono incompatibili e usare invece un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto per la connessione, la connessione fa riferimento il trasformatore.  
  
-   Mezzo per stabilire la connessione. Dopo che i controlli consumer e provider sono stati correttamente progettati con i metodi di punto di connessione e inseriti in una zona e un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto disponibile, l'ultimo passaggio necessario per avviare la connessione. Questa situazione può verificarsi è agli utenti di creare la connessione tramite l'interfaccia utente. Se si inserisce un `<asp:connectionszone>` elemento nella pagina e l'altro necessari i componenti per una connessione sono presenti, in fase di esecuzione un utente può impostare la pagina in modalità di connessione, fare clic su un verbo di connessione del menu dei verbi del provider o consumer e una connessione dell'interfaccia utente (in base il <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo) verranno visualizzati. Tramite questa interfaccia, l'utente può avviare la connessione. Un altro modo per avviare la connessione è a livello di codice. In entrambi i casi, se tramite l'interfaccia utente o a livello di codice al metodo sottostante che avvia la connessione è lo stesso. L'applicazione chiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo (o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo se si utilizza un trasformatore) sul <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare, passare il provider, il consumer e i relativi oggetti punto di connessione corrispondente, e il metodo restituisce un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe definisce un oggetto che incapsula le informazioni essenziali di una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La classe è costituita quasi interamente le proprietà relative ai dettagli di una determinata connessione. Alcune proprietà riguardano il controllo utente in una connessione. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà fa riferimento al controllo consumer stesso e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> proprietà fa riferimento all'ID. del consumer Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> fa riferimento oggetto, che contiene i dettagli del punto di connessione del consumer, il consumer <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà fa riferimento all'ID del <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto. Tutte queste proprietà di connessione correlate al consumer devono avere un valore assegnato a loro per creare una connessione.  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe include inoltre diverse proprietà correlate al controllo del provider in una connessione e tali corrispondono alle proprietà per un consumer. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà fa riferimento al controllo provider stesso, mentre il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> proprietà fa riferimento al relativo ID. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> riferimenti alle proprietà di <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà fa riferimento all'ID del punto di connessione del provider.  
  
 Alcune proprietà riguardano lo stato della connessione. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> proprietà indica se la connessione è attiva (attualmente lo scambio di dati) o inattiva (ancora connessi, ma non è attivamente condivisione dati). Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> proprietà indica se la connessione è condivisa (disponibile a tutti gli utenti di una pagina) o una connessione, specifici dell'utente e la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà indica se il controllo è statico (dichiarato nel markup della pagina e pertanto permanente) o dinamico (creato a livello di codice, ovvero che non può essere eliminato).  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come creare una semplice connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. L'esempio illustra tre modi di stabilire una connessione: in modo dichiarativo, inserendo i tag per la connessione nel markup della pagina Web. a livello di codice per la creazione della connessione nel codice. e tramite l'interfaccia utente, inserendo un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo nella pagina, che consente agli utenti di stabilire una connessione.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e controlli. Il file di origine contiene una semplice interfaccia denominata `IZipCode`. È inoltre disponibile un <xref:System.Web.UI.WebControls.WebParts.WebPart> classe denominata `ZipCodeWebPart` che implementa l'interfaccia e funge da controllo provider. Il relativo `ProvideIZipCode` è il metodo di callback che implementa l'unico membro dell'interfaccia. Il metodo restituisce semplicemente un'istanza dell'interfaccia. Si noti che il metodo è contrassegnato con un `ConnectionProvider` attributo nei relativi metadati. Questo è il meccanismo per identificare il metodo come metodo di callback per il punto di connessione del provider. L'altro <xref:System.Web.UI.WebControls.WebParts.WebPart> classe è denominata `WeatherWebPart`, e funge da consumer per la connessione. Questa classe ha un metodo denominato `GetZipCode` che ottiene un'istanza di `IZipCode` interfaccia dal controllo provider. Si noti che questo metodo è contrassegnato come metodo di punto di connessione del consumer con una `ConnectionConsumer` attributo nei relativi metadati.  
  
 Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Nella parte superiore di `Register` direttive per il controllo utente e l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Poiché nell'esempio si presuppone la compilazione dinamica dei controlli, il codice sorgente per i controlli deve essere in una sottocartella App_Code. il `Register` tag nella pagina fa riferimento solo a un prefisso del tag arbitrario e lo spazio dei nomi dei controlli. L'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> (provider e consumer) i controlli vengono dichiarati all'interno della pagina Web `<asp:webpartzone>` elemento, all'interno un `<zonetemplate>` elemento.  
  
 La pagina fornisce tre metodi per stabilire una connessione tra i controlli personalizzati. Il primo metodo è dichiarativo. Nel markup della pagina di un <`StaticConnections>` elemento viene dichiarato e, all'interno di un `<asp:WebPartConnections>` elemento, con i vari dettagli di consumer e provider di connessione specificata come attributi. Questo è un modo per creare una connessione, dichiarandola direttamente nella pagina Web, in particolare all'interno di `<asp:WebPartManager>` elemento. A causa di questa connessione statica, è necessario creare una connessione tra i due controlli personalizzati è immediatamente la prima volta che il caricamento della pagina.  
  
 Viene eseguito un secondo metodo per stabilire una connessione tra i controlli di `<asp:connectionszone>` elemento della pagina. Se un utente passa a una pagina in modalità di connessione in fase di esecuzione e fa clic su un verbo di connessione in uno dei controlli personalizzati, il `<asp:connectionszone>` elemento, è possibile eseguire automaticamente il rendering dell'interfaccia utente per la creazione di una connessione.  
  
 La pagina viene inoltre illustrato un terzo metodo di creazione di una connessione, ovvero a livello di codice. Nel `Button1_Click` il metodo, il codice crea un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto per il controllo provider e recupera il punto di connessione chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodo. Viene eseguita un'operazione simile per il controllo consumer, la chiamata di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> metodo. Infine, viene creato il nuovo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo aver caricato la pagina Web in un browser, la prima connessione già esiste perché è dichiarato all'interno di `<StaticConnections>` elemento. Immettere il testo nel **ZIP Code Provider** del controllo verrà visualizzato nel controllo consumer. Disconnettere quindi i due controlli. Utilizzo di **modalità di visualizzazione** elenco a discesa controllo elenco, modificare la pagina per la modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) per ogni il <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e notare che ognuno includa un **Connetti** opzione. Si tratta di un verbo di connessione, viene visualizzato nel menu dei verbi solo quando la pagina è in modalità di connessione. Fare clic sul verbo connect in uno dei controlli e la connessione dell'interfaccia utente fornita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> verrà visualizzato un controllo. Fare clic su di **Disconnect** pulsante per terminare la connessione tra i controlli statica. Utilizzare il **modalità di visualizzazione** controllo per restituire la pagina in modalità di visualizzazione. Provare a immettere di nuovo testo nel provider di nuovo e si noti che, in quanto i controlli sono disconnessi, il testo non viene aggiornato nel controllo consumer.  
  
 Successivamente, è possibile utilizzare lo stesso metodo come illustrato in precedenza per impostare nuovamente la pagina in modalità di connessione. Fare clic su un verbo di connessione in uno dei controlli. Fare clic su di **creare una connessione** collegamento e utilizzare l'interfaccia utente fornita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo per creare una connessione tra i controlli. Questo è il secondo metodo per la creazione di una connessione. Si noti che non appena viene stabilita la connessione, l'ultima stringa immesso nel controllo provider (che non è riuscita in quanto i controlli sono stati disconnessi) improvvisamente è presente nel consumer, in quanto la connessione è stata ricreata. Fare clic su di **Disconnect** pulsante per terminare la connessione corrente appena creata. Restituire la pagina in modalità di visualizzazione. Immettere di nuovo testo del provider per dimostrare che il testo non è aggiornato e che i controlli sono disconnessi nuovamente.  
  
 Restituire la pagina per la modalità di connessione. Anziché facendo clic su un verbo di connessione, fare clic su di **connettere i controlli Web part** pulsante, che rappresenta il terzo metodo di stabilire una connessione. Questo approccio si connette i controlli a livello di codice in un unico passaggio semplice senza dover usare il <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo. Si noti che, come la connessione, viene creato, l'ultima stringa che immessa nel provider improvvisamente viene visualizzato nel controllo consumer.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> costruttore è pubblico in modo che il parser ASP.NET è possibile creare un'istanza quando una connessione viene dichiarata nel markup della pagina Web, questo costruttore non deve essere utilizzato nel codice dello sviluppatore.  
  
 Quando si desidera creare un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> dell'oggetto a livello di codice, è consigliabile utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> fornito nel metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Questi metodi gestiscono molti dettagli di creazione di una connessione e restituire un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> costruttore per il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe imposta i valori del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà `true`. In questo modo lo stato predefinito di una nuova connessione deve essere statico (vale a dire che è dichiarato nel markup della pagina Web contenente) e condiviso (visibile a tutti gli utenti della pagina). Questo sarà necessario quando si aggiunge una connessione nello scenario tipico, dichiarando la connessione nel markup della pagina con un `<asp:webpartconnection>` elemento. In altre circostanze, tuttavia, una connessione avranno valori diversi per queste proprietà. Ad esempio, quando si aggiunge una connessione a livello di programmazione creando l'oggetto di connessione nel codice e l'utente visualizza la pagina nell'ambito di personalizzazione utente predefinito, la connessione viene creata come un dinamico, per ogni-user(visible only to the specific user) connessione.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà sono di sola lettura e queste proprietà che determinano la natura di una connessione vengono impostate internamente dal <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo a seconda di come viene creata una connessione (in modo dichiarativo nel markup della pagina, o a livello di programmazione codice o tramite l'interfaccia utente).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da controllo consumer in una connessione.</summary>
        <value>Classe <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che rappresenta il controllo Web part che funge da consumer in una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni connessione Web part è costituita da due controlli che condividono i dati. Un controllo funge da provider di dati e l'altro controllo funge da consumer, ricezione e l'elaborazione dei dati dal provider. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà ottiene un riferimento di <xref:System.Web.UI.WebControls.WebParts.WebPart> controllo che funge da consumer in una relazione di connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per i due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che fungono da consumer e provider per la connessione e un'interfaccia utilizzata per i punti di connessione. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è il codice per la pagina Web che ospita i controlli e viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà. Nella parte superiore della pagina di `Register` direttive per il controllo utente e i controlli personalizzati. Poiché in questo esempio viene utilizzata la compilazione dinamica, il `Register` direttiva per il file di origine non è necessario fare riferimento a un nome di assembly; include solo un prefisso di tag arbitrario e lo spazio dei nomi dei controlli. Nel `Button2_Click` (metodo), il codice accede all'oggetto di connessione tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> di controllo e ottiene un riferimento al controllo consumer.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo il caricamento della pagina in un browser, utilizzare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) su uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e fare clic sul verbo di connessione. Utilizzare il **connettere i controlli Web part** pulsante o l'interfaccia di connessione fornite utente (UI), per creare una connessione tra i due controlli. Fare clic su di **Display Consumer Info** pulsante per eseguire il codice che illustra il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La lunghezza della proprietà <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> è zero.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto che funge da punto di connessione per un controllo consumer in una connessione.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> associato al controllo consumer in una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno dei passaggi necessari per la creazione di una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli consiste nel creare punti di connessione per ogni controllo. Il punto di connessione consumer è un oggetto che contiene le informazioni sulla connessione per il controllo che funge da consumer. Nel codice sorgente del consumer, uno dei metodi deve essere identificato con il `ConnectionConsumer` attributo. Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto associato a un controllo consumer contiene i dettagli sul metodo e l'attributo, incluso un ID per il metodo, un nome visualizzato per l'utilizzo nell'interfaccia utente (UI), e il tipo di interfaccia il metodo è possibile recuperare. Questo set di informazioni sul consumer, il metodo per la creazione di connessioni e il tipo di interfaccia che riconosce, forma un punto di connessione consumer.  
  
 Per impostazione predefinita, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto può connettersi a una sola <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto alla volta. Un consumer può disporre di più metodi identificati come punti di connessione consumer possibili, ma un consumer può partecipare solo una connessione come un consumer (pertanto solo uno dei suoi punti di connessione consumer può essere attivo) alla volta. Al contrario, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> può connettersi a un numero qualsiasi di <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetti. Questo comportamento predefinito può essere modificato eseguendo l'override di <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> proprietà il <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> attributo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per i due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che fungono da consumer e provider per la connessione e un'interfaccia utilizzata per i punti di connessione. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è il codice per la pagina Web che ospita i controlli e viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà. Nel `Button1_Click` (metodo), tutti gli oggetti necessari per formare una connessione vengono creati, incluso un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto. Questi oggetti vengono passati per la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo per creare la connessione. Nel `Button2_Click` (metodo), il codice accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> punto proprietà e consente di visualizzare alcuni dettagli della connessione.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo il caricamento della pagina in un browser, utilizzare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) su uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e fare clic sul verbo di connessione. Utilizzare il **connettere i controlli Web part** pulsante o l'interfaccia utente, per creare una connessione tra i due controlli di connessione fornita. Fare clic su di **ConnectionPoint Details** pulsante per eseguire il codice che illustra il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della proprietà in una connessione che fa riferimento all'ID dell'oggetto che funge da punto di connessione consumer per la connessione.</summary>
        <value>Stinga contenente l'ID per il punto di connessione consumer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per una connessione statica dichiarata nel markup della pagina Web, gli sviluppatori possono specificare il punto di connessione consumer da utilizzare per la connessione assegnando un valore per il `ConsumerConnectionPointID` attributo il `<asp:webpartconnection>` elemento. Se non viene assegnato un valore per l'attributo, il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> viene utilizzato il valore di proprietà.  
  
 Quando si creano connessioni dinamiche, (a livello di codice), in genere è consigliabile non impostare il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà. È possibile chiamare semplicemente il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> di controllo, passando il consumer e consumer punto di connessione oggetti (insieme agli altri parametri necessari) e tale metodo consente di determinare l'ID corretto da utilizzare per la connessione del consumer punto. Analogamente, quando si disconnette, è possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo senza la necessità di specificare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valore della proprietà.  
  
> [!NOTE]
>  L'ID di un punto di connessione consumer può determinare quando si designa un <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server come un consumer. È necessario identificare un metodo del consumer che recupera un'istanza di un'interfaccia fornita da un provider di controllo o un trasformatore. Per identificare il metodo, contrassegnarlo con il `ConnectionConsumer` attributo code. Quando si aggiunge questo attributo, è possibile aggiungere un parametro di valore di stringa facoltativo che funge da ID per il consumer <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto. Se si specifica un valore per il parametro ID facoltativo, tale valore diventa il valore di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà per la connessione. Se non si specifica un valore di ID, il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> viene utilizzato il valore di proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che nel markup della pagina, viene dichiarata una connessione utilizzando il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione richiesta sono incluse le `ConsumerConnectionPointID` attributo. Un secondo metodo per la creazione della connessione è presente il `Button1_Click` (metodo), in cui il codice crea una nuova connessione utilizzando il punto di connessione definito nel controllo consumer. Quindi, nel `Button2_Click` (metodo), il codice accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere testo nel controllo del provider e verrà visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. Utilizzo di **modalità di visualizzazione** elenco a discesa controllo elenco, passare alla modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) su uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e fare clic sul verbo di connessione. Fare clic su di **Disconnect** pulsante. Utilizzare il **connettere i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic su di **ConnectionPoint Details** pulsante per eseguire il codice che accede al <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valore della proprietà. Il valore viene scritto in un'etichetta sotto i controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della proprietà in una connessione che fa riferimento all'ID del controllo <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da consumer per la connessione.</summary>
        <value>Stringa contenente l'ID del controllo che funge da consumer in una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valore della proprietà è obbligatorio quando si crea una connessione tra <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Se non viene assegnato un valore alla proprietà, viene generata un'eccezione quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo tenta di attivare la connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> proprietà.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che nel markup della pagina, viene dichiarata una connessione utilizzando il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione richiesta sono incluse le `ConsumerID` attributo. Un secondo metodo per la creazione della connessione è presente il `Button1_Click` (metodo), in cui il codice crea una nuova connessione utilizzando il punto di connessione definito nel controllo consumer. Quindi, nel `Button2_Click` (metodo), il codice accede al valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> proprietà e lo visualizza in un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere testo nel controllo del provider e verrà visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. Utilizzo di **modalità di visualizzazione** elenco a discesa controllo elenco, passare alla modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) su uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e fare clic sul verbo di connessione. Fare clic su di **Disconnect** pulsante. Utilizzare il **connettere i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic su di **Consumer Details** pulsante per eseguire il codice che accede al <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valore della proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'ID di un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <value>Stringa contenente l'ID di un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto ha un valore univoco assegnato al relativo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> proprietà. Si tratta di verificare che sia presente un modo per distinguere tra più connessioni.  
  
 Se si crea una connessione statica dichiarando un `<asp:webpartconnection>` elemento in una pagina Web e si assegna un valore per il `ID` attributo per la connessione, un'eccezione viene generata quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo tenta di attivare la connessione.  
  
 Quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo Crea una nuova connessione dinamica, viene chiamato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> metodo per generare un ID univoco per la connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> proprietà.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che nel markup della pagina, viene dichiarata una connessione utilizzando il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione richiesta sono incluse le `ID` attributo. Un secondo metodo per la creazione della connessione è presente il `Button1_Click` (metodo), in cui il codice crea una nuova connessione utilizzando il punto di connessione definito nel controllo consumer. In questo caso, l'ID proprietà non è necessaria, perché la connessione è dinamica e <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo viene assegnato un ID per la connessione. Nel `Button2_Click` (metodo), il codice accede al valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> proprietà e lo visualizza in un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere testo nel controllo del provider e verrà visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. Utilizzo di **modalità di visualizzazione** elenco a discesa controllo elenco, passare alla modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) su uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e fare clic sul verbo di connessione. Fare clic su di **Disconnect** pulsante. Utilizzare il **connettere i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic su di **Dettagli connessione** pulsante per eseguire il codice che accede al <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> valore della proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se al momento è stato stabilito un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> ed è possibile scambiare i dati tra i relativi controlli provider e consumer.</summary>
        <value>
          <see langword="true" /> se la connessione è attiva; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> proprietà indica uno stato di un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto. Quando la connessione è in questo stato, i controlli di provider e consumer nella connessione stanno comunicando e in grado di scambiare dati tramite una comune interfaccia o un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto.  
  
 Quando un utente visualizza una pagina viene eseguito il rendering che include a stabilire una connessione in modalità di visualizzazione normale, la connessione è in genere attiva (a meno che non è riuscito a essere attivato a causa di un conflitto o di altro problema al caricamento della pagina). Nelle prime fasi del ciclo di vita di pagina e di controllo, è il valore della proprietà `false`. La connessione viene attivata subito dopo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> evento il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo viene generato. In particolare, la connessione viene attivata dopo che il consumer ha recuperato un'istanza dell'interfaccia specificata dal provider o un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto.  
  
 È utile sapere se una connessione è attiva in situazioni in cui potrebbero essere presenti conflitti o problemi di sincronizzazione a causa di più connessioni in una pagina. Se si verifica un conflitto tra due connessioni, ad esempio il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo ha la possibilità di non attivazione di una delle connessioni per evitare il conflitto.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato l'utilizzo del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> proprietà.  
  
 Nell'esempio è costituito da tre parti:  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio di codice è la pagina Web. Nella parte superiore è un `Register` using che fa riferimento al codice sorgente per i due compilati in modo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La connessione statica è dichiarata all'interno di `<StaticConnections>` elemento nella pagina. All'interno di `<script>` elemento sono quattro i gestori di eventi. Ogni gestore eventi controlla il valore del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> proprietà di connessione statica e scrive un messaggio per il <xref:System.Web.UI.WebControls.Label> controllo che indica se la connessione è attiva o inattiva in tale stato del ciclo di vita di pagine e controlli. Nell'esempio viene illustrato in quale punto di connessione diventa attiva e che rimane attiva dopo la pagina viene eseguito il rendering.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Caricare la pagina in un browser. La connessione statica è già stata creata e i messaggi sono già stati scritti per le etichette che mostra se la connessione è stata attiva in diversi punti nel ciclo di vita di pagine e controlli. Fare clic su di **Dettagli connessione** pulsante e si noti che la connessione non è attiva a questo punto, ma che la connessione viene riattivata ogni volta dopo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> eventi e che è ancora attiva (e rimarrà tale) dopo il <xref:System.Web.UI.Control.PreRender> evento della pagina.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> è visibile a tutti gli utenti o solo all'utente corrente.</summary>
        <value>
          <see langword="true" /> se la connessione è condivisa; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Come per i singoli <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto può essere un'istanza condivisa o per utente. Un'istanza condivisa indica che la connessione è visibile a tutti gli utenti di una pagina Web, mentre un'istanza per ogni utente indica che la connessione è visibile solo a un utente specifico.  
  
 In generale, il modo in cui che una connessione viene aggiunta a una pagina determina se la connessione è condivisa. Se la connessione è dichiarata nel markup della pagina Web, quindi la connessione è condivisa e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valore della proprietà è `true`. Inoltre, se la pagina Web è nell'ambito di personalizzazione condiviso quando viene aggiunta una connessione, è anche condivisa. In genere, quando un utente utilizza il `<asp:connectionszone>` interfaccia utente (UI) per aggiungere una connessione, la pagina è nell'ambito di personalizzazione utente, pertanto la connessione non è condivisa e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valore della proprietà è `false`.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come utilizzabili a livello del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> proprietà.  
  
 L'esempio di codice è costituito da cinque parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una voce nel file Web. config che è necessario per eseguire l'esempio.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Nel `Button2_Click` (metodo), controlla la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> proprietà della connessione esistente e viene visualizzato il risultato nella pagina.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 La quarta parte dell'esempio di codice è una voce nel file Web. config che è necessario per l'account utente che verrà eseguito l'esempio per essere in grado di modificare la pagina nell'ambito di personalizzazione condiviso. A tale scopo, è necessario disporre di una voce nel file Web. config all'interno di `<system.web>` sezione che è simile all'esempio seguente.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Dopo il caricamento della pagina in un browser, utilizzare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic su di **connettere i controlli Web part** pulsante per creare una connessione. Fare clic su, il **i dettagli della connessione** pulsante per visualizzare se la connessione è condivisa. Se la connessione è stato creato con la pagina nell'ambito di personalizzazione utente predefinito, il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valore della proprietà deve essere `false` per la connessione.  
  
 Nel menu di uno dei verbi di <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli (indicati dalla freccia rivolta verso il basso nella barra del titolo), fare clic sul verbo di connessione. Quando viene visualizzata l'interfaccia utente di connessione, fare clic su di **Disconnect** pulsante per terminare la connessione. Utilizzare il **modalità di visualizzazione** controllo per restituire la pagina in modalità di visualizzazione.  
  
 Nel **modalità di visualizzazione** controllo, seleziona il **Shared** opzione per passare alla pagina nell'ambito di personalizzazione condiviso. Seguire la stessa procedura descritta sopra per creare una connessione e scegliere nuovamente il **Dettagli connessione** pulsante per visualizzare se la connessione è condivisa. In questo caso, il valore di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> della proprietà deve essere `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> è dichiarato nel markup di una pagina Web o creato a livello di codice.</summary>
        <value>
          <see langword="true" /> se la connessione è statica; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le connessioni tra i controlli Web part possono essere statico o dinamico. Una connessione statica viene dichiarata nel markup della pagina Web utilizzando un `<asp:WebPartConnection>` elemento. Le connessioni dinamiche vengono create a livello di codice o quando un utente crea una connessione tramite l'interfaccia utente (UI) definita per il <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo.  
  
 Connessioni statiche sono oggetti condivisi, ovvero che sono disponibili per tutti gli utenti della pagina Web. Inoltre, sono essenzialmente permanente perché, come un valore statico <xref:System.Web.UI.WebControls.WebParts.WebPart> (controllo), non possono essere eliminati definitivamente.  
  
> [!NOTE]
>  Mentre un oggetto di connessione statica non può essere eliminato in modo permanente, può essere disconnesso in modo permanente. In questo caso, l'oggetto disconnesso sarebbe presente sul server, ma un utente finale non sarà mai consapevole dell'esistenza dell'oggetto in una pagina.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio di codice è la pagina Web. Nella parte superiore è un `Register` using che fa riferimento al codice sorgente per i due compilati in modo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La connessione statica è dichiarata all'interno di `<StaticConnections>` elemento nella pagina. Il `Button1_Click` metodo accessi il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà per controllare se la connessione è statica.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Caricare la pagina in un browser. La connessione statica è già stata creata. Immettere testo nel controllo del provider e notare che il testo viene visualizzato nel controllo consumer. Fare clic su di **Dettagli connessione** pulsante per visualizzare il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un controllo <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da provider in una connessione web part.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da provider di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni connessione Web part è costituita da due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli, un consumer e un provider e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà restituisce un riferimento al provider di controllo in una connessione.  
  
 Ad esempio la controparte in una connessione (controllo consumer), è necessario il controllo del provider per stabilire una connessione. Se si crea la connessione a livello di programmazione, o la dichiarazione nel formato di persistenza della pagina, è necessario specificare un controllo di agire come provider per una connessione.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato l'utilizzo del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio di codice è la pagina Web. Nella parte superiore è un `Register` using che fa riferimento al codice sorgente per i due compilati in modo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La connessione statica è dichiarata all'interno di `<StaticConnections>` elemento nella pagina. Si noti che il `<asp:webpartconnection>` elemento, il `ProviderID` presenta l'ID del controllo provider assegnato. Ciò è necessario per identificare il provider per la connessione statica. Il `Button1_Click` metodo accessi il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà e scrive alcuni dettagli a un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Caricare la pagina in un browser. La connessione statica è già stata creata. Immettere testo nel controllo del provider e notare che il testo viene visualizzato nel controllo consumer. Fare clic su di **Provider Details** pulsante per visualizzare alcuni dei valori di proprietà a cui si accede tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La lunghezza del valore della proprietà <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> è zero.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto che funge da punto di connessione per un controllo <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> provider per una connessione.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> associato al controllo provider in una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno dei passaggi necessari per la creazione di una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli consiste nel creare punti di connessione per ogni controllo. Il punto di connessione del provider è un oggetto che contiene le informazioni sulla connessione per il controllo che funge da provider. Nel codice sorgente del provider, uno dei metodi deve essere identificato con il `ConnectionProvider` attributo. Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> che è associata a un provider di controllo contiene i dettagli sul metodo e l'attributo, incluso un ID per il metodo, un nome visualizzato per l'utilizzo nell'interfaccia utente (UI), e il tipo di istanza dell'interfaccia il metodo può restituire a un consumer controllo. Questo set di informazioni sul provider, il metodo per la creazione di connessioni e il tipo di interfaccia che viene fornita, forma un punto di connessione.  
  
 Per impostazione predefinita, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> può connettersi a un solo <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetti contemporaneamente. Un consumer può disporre di più metodi identificati come punti di connessione consumer possibili, ma un consumer può partecipare solo una connessione come un consumer (pertanto solo uno dei suoi punti di connessione consumer può essere attivo) alla volta. Al contrario, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> può connettersi a un numero qualsiasi di <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetti per impostazione predefinita. Ad esempio, un controllo di provider che fornisce un codice postale potrebbe essere connesso a più controlli consumer che usano un codice postale creare vari tipi di dati in base al codice postale, ad esempio dati meteorologici, notizie e così via. Questo comportamento predefinito può essere modificato eseguendo l'override di <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> proprietà il <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attributo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> proprietà.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per i due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che fungono da consumer e provider per la connessione e un'interfaccia utilizzata per i punti di connessione. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è il codice per la pagina Web che ospita i controlli e viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> proprietà. Nel `Button1_Click` (metodo), tutti gli oggetti necessari per formare una connessione vengono creati, incluso un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto. Si noti la chiamata al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. I diversi oggetti creati vengono passati per la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo per creare la connessione. Nel `Button2_Click` (metodo), il codice accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> punto proprietà e consente di visualizzare alcuni dettagli della connessione.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo il caricamento della pagina in un browser, utilizzare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) su uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e fare clic sul verbo di connessione. Utilizzare il **connettere i controlli Web part** pulsante o l'interfaccia utente, per creare una connessione tra i due controlli di connessione fornita. Fare clic su di **ConnectionPoint Details** pulsante per eseguire il codice che illustra il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della proprietà in una connessione che fa riferimento all'ID dell'oggetto che funge da punto di connessione provider per la connessione.</summary>
        <value>Stinga contenente l'ID per un oggetto punto di connessione provider.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per una connessione statica dichiarata nel markup della pagina Web, gli sviluppatori possono specificare il punto di connessione del provider da utilizzare per la connessione assegnando un valore per il `ProviderConnectionPointID` attributo il `<asp:webpartconnection>` elemento. Se non viene assegnato un valore per l'attributo, il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> viene utilizzato il valore di proprietà.  
  
 Quando si creano connessioni dinamiche, (a livello di codice), in genere è consigliabile non impostare il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà. È possibile chiamare semplicemente il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> di controllo, passando il provider e provider punto di connessione oggetti (insieme agli altri parametri necessari) e tale metodo consente di determinare l'ID corretto da utilizzare per la connessione del provider punto. Analogamente, quando si disconnette, è possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo senza la necessità di specificare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valore della proprietà.  
  
> [!NOTE]
>  L'ID di un punto di connessione provider può determinare quando si designa un <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server come un provider. È necessario identificare un metodo di callback del provider che viene utilizzata un'istanza di un'interfaccia contenente i dati da un consumer. Per identificare il metodo, contrassegnarlo con il `ConnectionProvider` attributo code. Quando si aggiunge questo attributo, è possibile aggiungere un parametro di valore di stringa facoltativo che funge da ID per il provider <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto. Se si specifica un valore per il parametro ID facoltativo, tale valore diventa il valore di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà per la connessione. Se non si specifica un valore di ID, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo viene assegnato un ID predefinito quando viene creato l'oggetto.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che nel markup della pagina, viene dichiarata una connessione utilizzando il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione richiesta sono incluse le `ProviderConnectionPointID` attributo. Un secondo metodo per la creazione della connessione è presente il `Button1_Click` (metodo), in cui il codice crea una nuova connessione utilizzando il punto di connessione (e l'ID) definiti nel controllo del provider. Quindi, nel `Button2_Click` (metodo), il codice accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere testo nel controllo del provider e verrà visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. Utilizzo di **modalità di visualizzazione** elenco a discesa controllo elenco, passare alla modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) su uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e fare clic sul verbo di connessione. Fare clic su di **Disconnect** pulsante. Utilizzare il **connettere i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic su di **ConnectionPoint Details** pulsante per eseguire il codice che accede al <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valore della proprietà. Il valore viene scritto in un'etichetta sotto i controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della proprietà in una connessione che fa riferimento all'ID del controllo <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da provider per la connessione</summary>
        <value>Stringa contenente l'ID del controllo provider.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valore della proprietà è obbligatorio quando si crea una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Se non viene assegnato un valore alla proprietà, viene generata un'eccezione quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo tenta di attivare la connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> proprietà.  
  
 Nell'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file ascx, assegnandogli il nome del file che è stato assegnato le `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che nel markup della pagina, viene dichiarata una connessione utilizzando il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione richiesta sono incluse le `ProviderID` attributo. Un secondo metodo per la creazione della connessione è presente il `Button1_Click` (metodo), in cui il codice crea una nuova connessione utilizzando il punto di connessione definito nel controllo consumer. Quindi, nel `Button2_Click` (metodo), il codice accede al valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> proprietà e lo visualizza in un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Dopo aver caricato la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere testo nel controllo del provider e verrà visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. A tale scopo, utilizzare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) su uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e fare clic sul verbo di connessione. Fare clic su di **Disconnect** pulsante e i controlli vengono disconnessi. Successivamente, utilizzare il **connettere i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic su di **Consumer Details** pulsante per eseguire il codice che accede al <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valore della proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue l'override del metodo <see cref="M:System.Object.ToString" /> ereditato e restituisce un nome breve del tipo per l'oggetto connessione.</summary>
        <returns>Stringa contenente il nome breve, ovvero non qualificato, del tipo di un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato principalmente per motivi di praticità nelle finestre di progettazione. È possibile migliorare le modalità di visualizzazione oggetti connessione in visualizzazione progettazione utilizzando il nome del tipo più breve, anziché un nome completo del tipo. Tuttavia, il metodo può essere chiamato in qualsiasi punto del codice in cui si desidera conoscere il nome del tipo di un oggetto connessione.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> per restituire il nome breve del tipo di un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da provider e consumer per una connessione.  
  
-   Una pagina Web per ospitare i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per eseguire l'esempio di codice, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato dinamicamente in fase di esecuzione. Nell'esempio viene utilizzata la compilazione dinamica. Per una procedura dettagliata viene illustrato come compilare, vedere [procedura dettagliata: sviluppo e l'utilizzo di un controllo personalizzato](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio di codice è la pagina Web. Nella parte superiore è un `Register` using che fa riferimento al codice sorgente per i due compilati in modo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La connessione statica è dichiarata all'interno di `<StaticConnections>` elemento nella pagina. Il `Button1_Click` chiamate al metodo di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metodo per scrivere il nome del tipo della connessione a un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Caricare la pagina in un browser. La connessione statica è già stata creata. Immettere testo nel controllo del provider e notare che il testo viene visualizzato nel controllo consumer. Fare clic su di **Dettagli connessione** pulsante per eseguire il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> utilizzato per trasformare i dati tra due punti di connessione altrimenti incompatibili in una connessione web part.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In una connessione Web part, esistono due modi in cui è possono connettersi i controlli di provider e consumer nella connessione. Essere connessi direttamente, tramite le rispettive <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetti e un tipo di interfaccia che è stato riconosciuto da entrambi i controlli. O, se non sono compatibili, possono essere connessi indirettamente, utilizzando un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> che trasforma un'istanza dell'interfaccia da un provider in un tipo riconosciuto da un consumer.  
  
 Quando è necessario un trasformatore come parte di una connessione, il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> proprietà fornisce un riferimento al <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto. È possibile aggiungere un trasformatore per una connessione in modo dichiarativo nel markup di una pagina Web, tramite l'aggiunta di un tag per un convertitore personalizzato (o uno di quelli forniti con il set di controlli Web part) all'interno di `<asp:WebPartConnection>` elemento. È inoltre possibile aggiungere un trasformatore a livello di codice, creazione di un'istanza nel codice e la chiamata di <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo per creare la connessione, passare l'oggetto transformer insieme agli altri parametri necessari.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di oggetti <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> utilizzati internamente dall'insieme di controlli Web part.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> contenente oggetti <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> proprietà non è destinata all'utilizzo dagli sviluppatori. Per accedere al trasformatore associato a una connessione, gli sviluppatori devono utilizzare sempre il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> proprietà.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> proprietà viene utilizzata internamente dal controllo Web part impostato in modo che gli sviluppatori di dichiarare elementi trasformatore all'interno di pagine di `<asp:webpartconnection>` elemento nel markup di una pagina Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>