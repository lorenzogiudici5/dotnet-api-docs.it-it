<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="00c595b93cfa46531c3addba1cbdbaaca274fcb8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37596402" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce un oggetto che consente a due controlli <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> di creare una connessione. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nell'insieme di controlli Web part, una connessione è un collegamento o un'associazione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> (o server o altri utenti) i controlli che ne consente la condivisione dei dati. La possibilità di condividere i dati consente connessi i controlli da utilizzare nella modalità che vanno oltre le funzionalità offerte dai controlli isolati. Ad esempio, se un controllo fornisce i dati di codice postale, e un altro controllo può leggere i dati e fornire informazioni meteorologiche in base al codice postale, la funzionalità connesso i due controlli fornisce più valore agli utenti. Per estendere questo esempio, è stato possibile creare altri controlli che sono anche visualizzare informazioni in base al codice postale, ad esempio un controllo con collegamenti alle notizie locali, e tutti i controlli che è possono utilizzare i dati di codice postale potrebbero condividere i dati con il controllo singolo che fornisce un codice postale. Gli utenti finali di applicazioni Web part è possibile creare e gestire le connessioni tra tali controlli compatibili direttamente da un Web browser, tramite l'interfaccia utente di connessioni standard (UI) fornito dal <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo o tramite un'interfaccia utente personalizzata fornita da un per gli sviluppatori.  
  
 Ciò <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Panoramica della classe è una descrizione generale delle informazioni di base per la creazione di una connessione. Per altre informazioni sui requisiti per la creazione di connessioni e componenti specifici, vedere [panoramica delle connessioni Web part](http://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b), o visualizzare le classi di riferimento ed esempi indicati nella discussione seguente di codice. Esistono alcuni aspetti fondamentali di una connessione Web part:  
  
-   Due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Ogni connessione Web part è costituita da due controlli. È possibile che un controllo di partecipare contemporaneamente più di una connessione, ma ogni singola connessione è costituito da esattamente due controlli. I controlli possono derivare direttamente dal <xref:System.Web.UI.WebControls.WebParts.WebPart> classe di base, è possibile o altri controlli server, inclusi i controlli ASP.NET, controlli server personalizzati e controlli utente. I controlli che non derivano dal <xref:System.Web.UI.WebControls.WebParts.WebPart> se inserito nella classe un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona, viene eseguito il wrapping con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> oggetto in fase di esecuzione, che consente loro di ereditare il <xref:System.Web.UI.WebControls.WebParts.WebPart> classe e funzione come fase di esecuzione <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli.  
  
-   I controlli che si trovano <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zone. Entrambe <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli e qualsiasi altro tipo di controllo del server deve risiedere in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona per poter partecipare a connessioni Web part (e molte altre funzionalità di Web part).  
  
-   Consumer e provider. In ogni connessione Web part sono disponibili due controlli: un provider di dati e un consumer di dati. Il provider fornisce dati per il consumer tramite un metodo di callback specificati che restituisce i dati sotto forma di un'interfaccia. (Per un esempio di come creare e specificare il metodo di callback, vedere la sezione esempio di questo argomento). Questo metodo di callback è noto come punto di connessione provider. Sono contenuti i dettagli di questo punto di connessione (il nome "descrittivo", un ID e il tipo di interfaccia restituito) in un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto associato al controllo provider. Il consumer riceve i dati tramite un metodo specifico che può accettare un'istanza dell'interfaccia. Questo metodo è noto come un punto di connessione del consumer e i dettagli del punto di connessione (nome, ID e tipo di interfaccia) sono contenuti in un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto associato al controllo consumer.  
  
-   Controlli compatibili o un trasformatore valido. Per una connessione a funzionare, l'utente e il provider deve essere compatibili (ovvero che i relativi metodi di punto di connessione specificata possono funzionare con lo stesso tipo dell'interfaccia) o che vi sia un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto in grado di tradurre il tipo fornito per il provider in un tipo riconosciuto dal consumer.  
  
-   Un oggetto <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>. Per una connessione a esiste, deve esistere un'istanza di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe che contiene i riferimenti ai controlli consumer e provider, con i dettagli dei punti di connessione. Se il provider e l'utente non sono compatibili e usare invece un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto per la connessione, la connessione fa riferimento il trasformatore.  
  
-   Mezzo per stabilire la connessione. Dopo che i controlli consumer e provider sono stati correttamente progettati con i metodi di punto di connessione e inseriti in una zona e un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto disponibile, l'ultimo passaggio necessario per avviare la connessione. Questa situazione può verificarsi è per gli utenti creare la connessione tramite l'interfaccia utente. Se si inserisce un `<asp:connectionszone>` elemento nella pagina e l'altro necessari i componenti per una connessione sono sul posto, in fase di esecuzione un utente può impostare la pagina in modalità di connessione, fare clic su un verbo di connect nel menu dei verbi di provider o consumer e un'interfaccia utente di connessione (in base il <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo) verranno visualizzati. Tramite questa interfaccia utente, l'utente può avviare la connessione. Un altro modo per avviare la connessione è a livello di codice. In entrambi i casi, se tramite l'interfaccia utente o a livello di codice al metodo sottostante che avvia la connessione è lo stesso. L'applicazione chiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo (o il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo se si usa un trasformatore) sul <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare, passandogli il provider, il consumer e i relativi oggetti punto di connessione corrispondente, e il metodo restituisce un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe definisce un oggetto che incapsula i dettagli più importanti di una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La classe è costituito da quasi interamente di proprietà relative ai dettagli di una determinata connessione. Alcune proprietà riguardano il controllo consumer in una connessione. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> del controllo consumer, fa riferimento a proprietà e il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> proprietà fa riferimento all'ID. del consumer Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto che contiene i dettagli del punto di connessione del consumer, viene fatto riferimento da parte del consumer <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà fa riferimento all'ID del <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto. Tutte queste proprietà di connessione correlati consumer devono avere un valore assegnato a loro per creare una connessione.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe include inoltre diverse proprietà correlate al controllo provider in una connessione e questi corrispondono alle proprietà di un consumer. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà fa riferimento al controllo provider, mentre il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> proprietà fa riferimento al relativo ID. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> riferimenti a proprietà di <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto e il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà fa riferimento all'ID del punto di connessione del provider.  
  
 Alcune proprietà riguardano lo stato della connessione. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> proprietà indica se la connessione è attivo (attualmente lo scambio di dati) o inattiva (ancora connessi, ma non attivamente una condivisione dati). Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> proprietà indica se la connessione è condivisa (disponibile a tutti gli utenti di una pagina) o una connessione, specifici dell'utente e la <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà indica se il controllo è statico (dichiarato nel markup della pagina e pertanto permanente) o dinamico (creato a livello di codice, ovvero che non può essere eliminato).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare una semplice connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Nell'esempio vengono illustrati tre modi di stabilire una connessione: in modo dichiarativo, inserendo i tag per la connessione nel markup della pagina Web. a livello di codice tramite la creazione della connessione nel codice. e tramite l'interfaccia utente, inserendo un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo nella pagina, che consente agli utenti di stabilire una connessione.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e controlli. Il file di origine contiene una semplice interfaccia denominata `IZipCode`. È inoltre disponibile un' <xref:System.Web.UI.WebControls.WebParts.WebPart> classe denominata `ZipCodeWebPart` che implementa l'interfaccia e funge da controllo provider. Relativo `ProvideIZipCode` metodo è il metodo di callback che implementa unico membro dell'interfaccia. Il metodo restituisce semplicemente un'istanza dell'interfaccia. Si noti che il metodo è contrassegnato con un `ConnectionProvider` attributo nei relativi metadati. Si tratta del meccanismo per identificare il metodo come metodo di callback per il punto di connessione del provider. L'altra <xref:System.Web.UI.WebControls.WebParts.WebPart> classe è denominata `WeatherWebPart`, e funge da consumer per la connessione. Questa classe ha un metodo denominato `GetZipCode` che ottiene un'istanza del `IZipCode` interfaccia dal controllo provider. Si noti che questo metodo è contrassegnato come metodo del punto di connessione del consumer con una `ConnectionConsumer` attributo nei relativi metadati.  
  
 Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Nella parte superiore sono il `Register` direttive per il controllo utente e l'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Poiché nell'esempio si presuppone la compilazione dinamica dei controlli, il codice sorgente per i controlli deve essere in una sottocartella App_Code. il `Register` tag nella pagina fa riferimento solo un prefisso di tag arbitrari e lo spazio dei nomi dei controlli. L'oggetto personalizzato <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli (il provider e consumer) vengono dichiarati all'interno della pagina Web `<asp:webpartzone>` elemento, all'interno un `<zonetemplate>` elemento.  
  
 La pagina offre tre modi per creare una connessione tra i controlli personalizzati. Il primo metodo è dichiarativo. Nel markup della pagina, un <`StaticConnections>` elemento viene dichiarato e interno è presente un `<asp:WebPartConnections>` elemento, con i vari dettagli consumer e provider di connessione specificate come attributi. Si tratta di un modo per creare una connessione, dichiarandolo direttamente nella pagina Web, in modo specifico all'interno di `<asp:WebPartManager>` elemento. A causa di questa connessione statica, una connessione tra i due controlli personalizzati viene creata immediatamente la prima volta che il caricamento della pagina.  
  
 Un secondo metodo per stabilire una connessione tra i controlli avviene tramite il `<asp:connectionszone>` elemento della pagina. Se un utente passa una pagina in modalità di connessione in fase di esecuzione e fa clic su un verbo di connessione in uno dei controlli personalizzati, il `<asp:connectionszone>` elemento visualizza automaticamente l'interfaccia utente per la creazione di una connessione.  
  
 La pagina viene inoltre illustrato un terzo modo per creare una connessione, ovvero a livello di codice. Nel `Button1_Click` metodo, il codice crea un' <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto per il controllo provider e recupera i dettagli punto di connessione chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> (metodo). Che esegue un'operazione simile per il controllo consumer, chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> (metodo). Infine, viene creato il nuovo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo su di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina Web in un browser, la prima connessione già esiste perché è dichiarato all'interno di `<StaticConnections>` elemento. Immettere testo nel **Provider di codice postale** controllo che verrà visualizzato nel controllo consumer. Successivamente, disconnettere due controlli. Usando il **modalità di visualizzazione** elenco a discesa del controllo di elenco, modificare la pagina per la modalità di connessione. Scegliere il menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) per ciascuna delle <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e notare che ognuno includa una **Connect** opzione. Si tratta di un verbo di connect, che viene visualizzato nel menu dei verbi solo quando la pagina è in modalità di connessione. Fare clic sul verbo connect in uno dei controlli e la connessione dell'interfaccia utente fornita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo viene visualizzato. Scegliere il **Disconnect** pulsante per terminare la connessione tra i controlli statica. Usare la **modalità di visualizzazione** controllo per restituire la pagina modalità di visualizzazione. Provare a immettere nuovo testo nel provider di nuovo e si noti che poiché i controlli sono disconnessi, il testo ha esito negativo per l'aggiornamento del controllo consumer.  
  
 Successivamente, usare il metodo di stesso come illustrato in precedenza per passare nuovamente la pagina in modalità di connessione. Fare clic su un verbo di connessione in uno dei controlli. Fare clic sui **creare una connessione** collegare e usare l'interfaccia utente fornita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo per creare una connessione tra i controlli. Questo è il secondo metodo per la creazione di una connessione. Si noti che, non appena viene stabilita la connessione, l'ultima stringa immesso nel controllo provider (che non sono stati visualizzati perché i controlli sono stati disconnessi) improvvisamente appare nel consumer, perché la connessione sia stata ricreata. Scegliere il **Disconnect** pulsante per terminare la connessione corrente appena creata. Restituire la pagina modalità di visualizzazione. Immettere il nuovo testo del provider per dimostrare che il testo non viene aggiornato e che i controlli vengono disconnessi anche in questo caso.  
  
 Restituire la pagina per la modalità di connessione. Anziché facendo clic su un verbo di connessione, fare clic sui **collegare i controlli Web part** pulsante, che illustra il terzo metodo per la creazione di una connessione di. Questo approccio si connette i controlli a livello di codice in un unico passaggio semplice senza dover usare il <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo. Si noti che quando viene creata la connessione, l'ultima stringa che immessa nel provider improvvisamente viene visualizzato nel controllo consumer.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> costruttore è pubblico in modo che il parser ASP.NET può creare un'istanza quando una connessione viene dichiarata nel markup di una pagina Web; questo costruttore non deve essere usato nel codice dello sviluppatore.  
  
 Quando si desidera creare un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> dell'oggetto a livello di codice, è consigliabile usare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> o il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> fornito nel metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Questi metodi gestiscono molti dettagli della creazione di una connessione e restituire un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> costruttore per il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> classe imposta i valori delle <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> le proprietà da `true`. In questo modo lo stato predefinito di una nuova connessione deve essere statico (vale a dire che è dichiarato nel markup della pagina Web che lo contiene) e condiviso (visibile a tutti gli utenti della pagina). Questo sarà il caso quando si aggiunge una connessione in uno scenario tipico, dichiarando la connessione nel markup della pagina con un `<asp:webpartconnection>` elemento. In altre circostanze, tuttavia, una connessione avrà valori diversi per queste proprietà. Ad esempio, quando si aggiunge una connessione a livello di programmazione creando l'oggetto di connessione nel codice e l'utente visualizza la pagina nell'ambito di personalizzazione utente predefinita, la connessione viene creata come una dinamica, per ogni-user(visible only to the specific user) connessione.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> delle proprietà sono di sola lettura e vengono impostate internamente da queste proprietà che determinano la natura di una connessione di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo a seconda del modo in cui viene creata una connessione (in modo dichiarativo nel markup della pagina, o a livello di programmazione codice o tramite l'interfaccia utente).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da controllo consumer in una connessione.</summary>
        <value>Classe <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che rappresenta il controllo Web part che funge da consumer in una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni connessione Web part è costituita da due controlli che condividono i dati. Un controllo funge da provider di dati e l'altro controllo che funge da consumer, ricevere ed elaborare i dati dal provider. Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà ottiene un riferimento al <xref:System.Web.UI.WebControls.WebParts.WebPart> funge da consumer in una relazione di connessione di controllo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà.  
  
 L'esempio di codice è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per i due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che fungono da consumer e provider per la connessione e un'interfaccia utilizzata per i punti di connessione. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è il codice per la pagina Web che ospita i controlli e viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà. Nella parte superiore della pagina sono i `Register` direttive per il controllo utente e i controlli personalizzati. Poiché questo esempio Usa la compilazione dinamica, il `Register` direttiva per il file di origine non è necessario fare riferimento a un nome di assembly; include solo un prefisso di tag arbitrari e lo spazio dei nomi dei controlli. Nel `Button2_Click` metodo, il codice accede all'oggetto di connessione tramite la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllano e ottiene un riferimento al controllo consumer.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) in uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e scegliere il verbo. Usare la **collegare i controlli Web part** pulsante o l'interfaccia utente di connessione specificata (UI), per creare una connessione tra i due controlli. Fare clic sui **Display Consumer Info** pulsante per eseguire il codice che illustra il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La lunghezza della proprietà <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> è zero.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto che funge da punto di connessione per un controllo consumer in una connessione.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> associato al controllo consumer in una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno dei passaggi necessari per la creazione di una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli consiste nel creare punti di connessione per ogni controllo. Il punto di connessione del consumer è un oggetto che contiene le informazioni su come connettersi al controllo funge da consumer. Nel codice sorgente del consumer, uno dei metodi deve essere identificato con il `ConnectionConsumer` attributo. Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto associato a un controllo consumer contiene informazioni dettagliate sul metodo e l'attributo, incluso un ID per il metodo, un nome visualizzato per l'uso nell'interfaccia utente (UI), e il tipo di interfaccia che il metodo può recuperare. Questo set di informazioni sul consumer, il metodo per la creazione di connessioni e il tipo di interfaccia che può riconoscere, collettivamente costituisce un punto di connessione consumer.  
  
 Per impostazione predefinita, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto può connettersi a una sola <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto alla volta. Un consumer può disporre di più metodi identificati come punti di connessione del consumer possibili, ma un consumer può partecipare solo una connessione come un consumer (di conseguenza, solo uno dei punti di connessione consumer può essere attivo) alla volta. Al contrario, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> può connettersi a un numero qualsiasi di <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetti. Questo comportamento predefinito può essere modificato eseguendo l'override di <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> proprietà di <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> attributo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per i due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che fungono da consumer e provider per la connessione e un'interfaccia utilizzata per i punti di connessione. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è il codice per la pagina Web che ospita i controlli e viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà. Nel `Button1_Click` metodo, tutti gli oggetti necessari per formare una connessione vengono creati, incluso un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto. Tutti questi oggetti vengono passati al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo per creare la connessione. Nel `Button2_Click` metodo, il codice accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà e consente di visualizzare alcuni dettagli della connessione del punto.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) in uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e scegliere il verbo. Usare la **collegare i controlli Web part** pulsante o l'interfaccia utente, per creare una connessione tra i due controlli di connessione fornita. Fare clic sui **dettagli ConnectionPoint** pulsante per eseguire il codice che illustra il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della proprietà in una connessione che fa riferimento all'ID dell'oggetto che funge da punto di connessione consumer per la connessione.</summary>
        <value>Stinga contenente l'ID per il punto di connessione consumer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per una connessione statica dichiarata nel markup di una pagina Web, gli sviluppatori possono specificare il punto di connessione consumer da utilizzare per la connessione tramite l'assegnazione di un valore per il `ConsumerConnectionPointID` attributo la `<asp:webpartconnection>` elemento. Se un valore non viene assegnato all'attributo, il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> viene usato il valore di proprietà.  
  
 Quando si creano connessioni dinamiche, (a livello di codice), in genere è consigliabile non impostare il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà. È possibile chiamare semplicemente il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo su di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare, passando il consumer e consumer punto di connessione oggetti (insieme agli altri parametri necessari) e tale metodo consente di determinare l'ID corretto da usare per la connessione del consumer punto. Analogamente, quando si disconnette, è possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo senza la necessità di specificare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valore della proprietà.  
  
> [!NOTE]
>  L'ID del punto di connessione del consumer può determinare quando si designa un <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server come un consumer. È necessario identificare un metodo nel consumer che recupera un'istanza di un'interfaccia fornita da un controllo provider o da un trasformatore. Per identificare il metodo, contrassegnarla con il `ConnectionConsumer` attributo code. Quando si aggiunge questo attributo, è possibile aggiungere un parametro di valore di stringa facoltativa che funge da un ID per il consumer <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetto. Se si specifica un valore per il parametro ID facoltativo, tale valore diventa il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà per la connessione. Se non si specifica un valore di ID, il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> viene usato il valore di proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare strumenti dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che una connessione viene dichiarata nel markup della pagina, tramite il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione include la necessaria `ConsumerConnectionPointID` attributo. Un secondo metodo per la creazione della connessione viene visualizzata nel `Button1_Click` metodo, in cui il codice crea una nuova connessione, utilizzando il punto di connessione definito nel controllo consumer. Quindi, nella `Button2_Click` metodo, il codice accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere il testo nel controllo provider e si noti che viene visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. Usando il **modalità di visualizzazione** elenco a discesa del controllo di elenco, passare alla modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) in uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e scegliere il verbo. Scegliere il **Disconnect** pulsante. Usare la **collegare i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic sui **dettagli ConnectionPoint** pulsante per eseguire il codice che accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> valore della proprietà. Il valore viene scritto in un'etichetta sotto i controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della proprietà in una connessione che fa riferimento all'ID del controllo <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da consumer per la connessione.</summary>
        <value>Stringa contenente l'ID del controllo che funge da consumer in una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valore della proprietà è necessario quando si crea una connessione tra <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Se un valore non viene assegnato alla proprietà, viene generata un'eccezione quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo tenta di attivare la connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare strumenti dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> proprietà.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che una connessione viene dichiarata nel markup della pagina, tramite il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione include la necessaria `ConsumerID` attributo. Un secondo metodo per la creazione della connessione viene visualizzata nel `Button1_Click` metodo, in cui il codice crea una nuova connessione, utilizzando il punto di connessione definito nel controllo consumer. Quindi, nella `Button2_Click` metodo, il codice accede al valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> proprietà e lo visualizza in un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere il testo nel controllo provider e si noti che viene visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. Usando il **modalità di visualizzazione** elenco a discesa del controllo di elenco, passare alla modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) in uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e scegliere il verbo. Scegliere il **Disconnect** pulsante. Usare la **collegare i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic sui **Consumer Details** pulsante per eseguire il codice che accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> valore della proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'ID di un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</summary>
        <value>Stringa contenente l'ID di un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto ha un valore univoco assegnato al relativo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> proprietà. Questo modo si garantisce che vi sia un modo per distinguere tra più connessioni.  
  
 Se si crea una connessione statica dichiarando un' `<asp:webpartconnection>` elemento in una pagina Web e si assegna un valore per il `ID` attributo per la connessione, un'eccezione generata quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo tenta di attivare la connessione.  
  
 Quando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo Crea una nuova connessione dinamica, viene chiamato il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> metodo per generare un ID univoco per la connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare strumenti dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> proprietà.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che una connessione viene dichiarata nel markup della pagina, tramite il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione include la necessaria `ID` attributo. Un secondo metodo per la creazione della connessione viene visualizzata nel `Button1_Click` metodo, in cui il codice crea una nuova connessione, utilizzando il punto di connessione definito nel controllo consumer. In questo caso, la proprietà ID non è necessaria, poiché la connessione è dinamica e il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo viene assegnato un ID per la connessione. Nel `Button2_Click` metodo, il codice accede al valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> proprietà e lo visualizza in un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere il testo nel controllo provider e si noti che viene visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. Usando il **modalità di visualizzazione** elenco a discesa del controllo di elenco, passare alla modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) in uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e scegliere il verbo. Scegliere il **Disconnect** pulsante. Usare la **collegare i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic sul **dettagli di connessione** pulsante per eseguire il codice che accede al <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> valore della proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se al momento è stato stabilito un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> ed è possibile scambiare i dati tra i relativi controlli provider e consumer.</summary>
        <value>
          <see langword="true" /> se la connessione è attiva; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> proprietà indica uno stato di un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto. Quando la connessione è in questo stato, i controlli consumer e provider nella connessione sono in grado di scambiare dati tramite un'interfaccia comune e in comunicazione o un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto.  
  
 Quando un utente visualizza una pagina viene eseguito il rendering che include una connessione stabilita in modalità di visualizzazione normale, la connessione è in genere attiva (a meno che non è riuscito a essere attivato a causa di un conflitto o un altro problema al caricamento della pagina). Nelle prime fasi del ciclo di vita di pagine e controlli, il valore della proprietà è `false`. La connessione viene attivata subito dopo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> evento sul <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo viene generato. In particolare, la connessione viene attivata dopo che il consumer ha recuperato un'istanza dell'interfaccia specificata dal provider o un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto.  
  
 È utile sapere se una connessione è attiva in situazioni in cui potrebbero essere presenti conflitti o problemi di sincronizzazione a causa di più connessioni in una pagina. Ad esempio, se è presente un tipo di conflitto tra due connessioni, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo ha la possibilità di non attivazione di una delle connessioni per evitare il conflitto.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> proprietà.  
  
 L'esempio è costituito da tre parti:  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio di codice è la pagina Web. Nella parte superiore è un `Register` using che fa riferimento al codice sorgente per le due compilati in modo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La connessione statica viene dichiarata all'interno di `<StaticConnections>` elemento della pagina. All'interno di `<script>` elemento sono quattro i gestori di eventi. Ciascun gestore eventi controlla il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> proprietà di connessione statica e scrive un messaggio di <xref:System.Web.UI.WebControls.Label> controllo che indica se la connessione è attiva o inattiva in quello stato. il pagina e il controllo del ciclo di vita. Nell'esempio viene illustrato in quale punto la connessione diventa attiva e che rimane attivo dopo la pagina viene eseguito il rendering.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 Caricare la pagina in un browser. È già stata creata la connessione statica e i messaggi sono già stati scritti per le etichette che mostra se la connessione era attiva in vari punti ciclo di vita della pagina e il controllo. Fare clic sui **i dettagli della connessione** pulsante e notare che la connessione non è attiva a questo punto, ma che la connessione viene riattivata ogni volta dopo la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> evento e che sia ancora attiva (e rimarrà tale) dopo il <xref:System.Web.UI.Control.PreRender> evento della pagina.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> è visibile a tutti gli utenti o solo all'utente corrente.</summary>
        <value>
          <see langword="true" /> se la connessione è condivisa; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Come per i singoli <xref:System.Web.UI.WebControls.WebParts.WebPart> (controlli), un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto può essere un'istanza condivisa o una singolo utente. Un'istanza condivisa significa che la connessione è visibile a tutti gli utenti di una pagina Web e un'istanza per ogni utente indica che la connessione è visibile solo a un utente specifico.  
  
 In generale, il modo in cui che una connessione viene aggiunta a una pagina determina se la connessione è condivisa. Se la connessione viene dichiarata nel markup di una pagina Web, quindi la connessione è condivisa e il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valore della proprietà è `true`. Inoltre, se la pagina Web è nell'ambito di personalizzazione condivisa quando una connessione viene aggiunta, la connessione viene anche condivisa. In genere, quando un utente utilizza il `<asp:connectionszone>` interfaccia utente (UI) per aggiungere una connessione, la pagina è nell'ambito di personalizzazione utente, in modo che la connessione non è condivisa e il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valore della proprietà è `false`.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra utilizzabili a livello del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> proprietà.  
  
 L'esempio di codice è costituito da cinque parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una voce nel file Web. config che è necessario per eseguire l'esempio.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Nel `Button2_Click` metodo, controlla il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> proprietà della connessione esistente e il risultato viene visualizzato nella pagina.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Nella quarta parte dell'esempio di codice è una voce nel file Web. config che è necessario per l'account utente che eseguiranno l'esempio per essere in grado di modificare la pagina nell'ambito di personalizzazione condivisa. A tale scopo, è necessario disporre di una voce nel file Web. config all'interno di `<system.web>` sezione simile al seguente.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 Una volta caricata la pagina in un browser, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina per la modalità di connessione. Fare clic sui **collegare i controlli Web part** pulsante in modo da formare una connessione. Successivamente, fare clic il **dettagli della connessione** pulsante da visualizzare se la connessione è condivisa. Se è stata creata la connessione con la pagina nell'ambito di personalizzazione utente predefinita, il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> valore della proprietà deve essere `false` per la connessione.  
  
 Nel menu dei verbi di uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli (indicati dalla freccia verso il basso nella barra del titolo), fare clic sul verbo di connessione. Quando viene visualizzata l'interfaccia utente di connessione, scegliere il **Disconnect** pulsante per terminare la connessione. Usare la **modalità di visualizzazione** controllo per restituire la pagina modalità di visualizzazione.  
  
 Nel **modalità di visualizzazione** controllo, seleziona la **condiviso** condiviso di opzione per passare alla pagina in ambito di personalizzazione. Seguire gli stessi passaggi come quelli descritti in precedenza per creare una connessione e scegliere nuovamente la **dettagli della connessione** pulsante da visualizzare se la connessione è condivisa. In questo caso, il valore di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> della proprietà deve essere `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> è dichiarato nel markup di una pagina Web o creato a livello di codice.</summary>
        <value>
          <see langword="true" /> se la connessione è statica; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le connessioni tra i controlli Web part possono essere statico o dinamico. Una connessione statica viene dichiarata nel markup di una pagina Web, usando un `<asp:WebPartConnection>` elemento. Le connessioni dinamiche vengono create a livello di programmazione o quando un utente crea una connessione tramite l'interfaccia utente (UI) definita dal <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> controllo.  
  
 Connessioni statiche sono oggetti condivisi, vale a dire che siano disponibili per tutti gli utenti della pagina Web. Inoltre, sono essenzialmente permanente perché, come un valore statico <xref:System.Web.UI.WebControls.WebParts.WebPart> (controllo), non possono essere eliminati definitivamente.  
  
> [!NOTE]
>  Mentre un oggetto di connessione statica non può essere eliminato definitivamente, può essere disconnesso in modo permanente. In questo caso, l'oggetto disconnesso sarebbe presente sul server, ma un utente finale non sarà mai consapevole dell'esistenza dell'oggetto in una pagina.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio di codice è la pagina Web. Nella parte superiore è un `Register` using che fa riferimento al codice sorgente per le due compilati in modo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La connessione statica viene dichiarata all'interno di `<StaticConnections>` elemento della pagina. Il `Button1_Click` metodo accessi il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà per controllare se la connessione è statica.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 Caricare la pagina in un browser. La connessione statica viene già creata. Immettere il testo nel controllo provider e si noti che il testo viene visualizzato nel controllo consumer. Fare clic sulla **dettagli di connessione** pulsante per visualizzare il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un controllo <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da provider in una connessione web part.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da provider di dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni connessione Web part è costituita da due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli: un consumer e un provider, ovvero e <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà restituisce un riferimento al controllo provider in una connessione.  
  
 Ad esempio la controparte in una connessione (controllo consumer), del controllo provider è necessario per stabilire una connessione. Se si crea la connessione a livello di codice oppure dichiarandolo in formato di persistenza della pagina, è necessario specificare un controllo che funge da provider per una connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio di codice è la pagina Web. Nella parte superiore è un `Register` using che fa riferimento al codice sorgente per le due compilati in modo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La connessione statica viene dichiarata all'interno di `<StaticConnections>` elemento della pagina. Si noti che il `<asp:webpartconnection>` elemento, il `ProviderID` attributo con l'ID del controllo provider assegnato. Ciò è necessario per identificare il provider per la connessione statica. Il `Button1_Click` accede a metodo di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà e scrive alcuni dei relativi dettagli in un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 Caricare la pagina in un browser. La connessione statica viene già creata. Immettere il testo nel controllo provider e si noti che il testo viene visualizzato nel controllo consumer. Fare clic sui **Provider Details** pulsante per visualizzare alcuni dei valori delle proprietà accessibili tramite il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La lunghezza del valore della proprietà <see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> è zero.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto che funge da punto di connessione per un controllo <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> provider per una connessione.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> associato al controllo provider in una connessione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uno dei passaggi necessari per la creazione di una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli consiste nel creare punti di connessione per ogni controllo. Il punto di connessione del provider è un oggetto che contiene le informazioni su come connettersi al controllo funge da provider. Nel codice sorgente del provider, uno dei metodi deve essere identificato con il `ConnectionProvider` attributo. Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> vale a dire associate con un provider di controllo contiene informazioni dettagliate sul metodo e l'attributo, incluso un ID per il metodo, un nome visualizzato per l'uso nell'interfaccia utente (UI), e il tipo di istanza dell'interfaccia che il metodo può restituire a un consumer controllo. Questo set di informazioni sul provider, il metodo per la creazione di connessioni e il tipo di interfaccia che viene fornita, collettivamente costituisce un punto di connessione provider.  
  
 Per impostazione predefinita, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> può connettersi a una sola <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto alla volta. Un consumer può disporre di più metodi identificati come punti di connessione del consumer possibili, ma un consumer può partecipare solo una connessione come un consumer (di conseguenza, solo uno dei punti di connessione consumer può essere attivo) alla volta. Al contrario, un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> può connettersi a un numero qualsiasi di <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> oggetti per impostazione predefinita. Ad esempio, un controllo provider che fornisce un codice postale potrebbe essere connesso a più controlli consumer che usano un codice postale per creare vari tipi di dati basati su un codice postale, ad esempio i dati meteo, notizie e così via. Questo comportamento predefinito può essere modificato eseguendo l'override di <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> proprietà di <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> attributo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo a livello di codice del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> proprietà.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per i due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli che fungono da consumer e provider per la connessione e un'interfaccia utilizzata per i punti di connessione. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è il codice per la pagina Web che ospita i controlli e viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> proprietà. Nel `Button1_Click` metodo, tutti gli oggetti necessari per formare una connessione vengono creati, incluso un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto. Si noti la chiamata ai <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> metodo sul <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo. Tutti i diversi oggetti creati vengono passati al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo per creare la connessione. Nel `Button2_Click` metodo, il codice accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> proprietà e consente di visualizzare alcuni dettagli della connessione del punto.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) in uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e scegliere il verbo. Usare la **collegare i controlli Web part** pulsante o l'interfaccia utente, per creare una connessione tra i due controlli di connessione fornita. Fare clic sui **dettagli ConnectionPoint** pulsante per eseguire il codice che illustra il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della proprietà in una connessione che fa riferimento all'ID dell'oggetto che funge da punto di connessione provider per la connessione.</summary>
        <value>Stinga contenente l'ID per un oggetto punto di connessione provider.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per una connessione statica dichiarata nel markup di una pagina Web, gli sviluppatori possono specificare quale punto di connessione del provider da utilizzare per la connessione tramite l'assegnazione di un valore per il `ProviderConnectionPointID` attributo la `<asp:webpartconnection>` elemento. Se un valore non viene assegnato all'attributo, il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> viene usato il valore di proprietà.  
  
 Quando si creano connessioni dinamiche, (a livello di codice), in genere è consigliabile non impostare il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà. È possibile chiamare semplicemente il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> metodo su di <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllare, passando il provider e una connessione al provider di oggetti (insieme agli altri parametri necessari) punto e tale metodo consente di determinare l'ID corretto da usare per la connessione del provider punto. Analogamente, quando si disconnette, è possibile chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> metodo senza la necessità di specificare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valore della proprietà.  
  
> [!NOTE]
>  Può determinare l'ID del punto di connessione del provider quando si designa un <xref:System.Web.UI.WebControls.WebParts.WebPart> o un altro controllo server come un provider. È necessario identificare un metodo di callback del provider che viene utilizzata un'istanza di un'interfaccia contenente i dati da un consumer. Per identificare il metodo, contrassegnarla con il `ConnectionProvider` attributo code. Quando si aggiunge questo attributo, è possibile aggiungere un parametro di valore di stringa facoltativa che funge da un ID per il provider <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> oggetto. Se si specifica un valore per il parametro ID facoltativo, tale valore diventa il valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà per la connessione. Se non si specifica un valore di ID, il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo viene assegnato un ID predefinito quando viene creato l'oggetto.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare strumenti dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che una connessione viene dichiarata nel markup della pagina, tramite il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione include la necessaria `ProviderConnectionPointID` attributo. Un secondo metodo per la creazione della connessione viene visualizzata nel `Button1_Click` metodo, in cui il codice crea una nuova connessione, utilizzando il punto di connessione (e l'ID) definiti nel controllo provider. Quindi, nella `Button2_Click` metodo, il codice accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> proprietà.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere il testo nel controllo provider e si noti che viene visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. Usando il **modalità di visualizzazione** elenco a discesa del controllo di elenco, passare alla modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) in uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e scegliere il verbo. Scegliere il **Disconnect** pulsante. Usare la **collegare i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic sui **dettagli ConnectionPoint** pulsante per eseguire il codice che accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> valore della proprietà. Il valore viene scritto in un'etichetta sotto i controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della proprietà in una connessione che fa riferimento all'ID del controllo <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> che funge da provider per la connessione</summary>
        <value>Stringa contenente l'ID del controllo provider.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valore della proprietà è necessario quando si crea una connessione tra due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. Se un valore non viene assegnato alla proprietà, viene generata un'eccezione quando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo tenta di attivare la connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare strumenti dichiarativi e programmatici del <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> proprietà.  
  
 L'esempio è costituito da quattro parti:  
  
-   Modalità di visualizzazione di un controllo utente che consente di modificare le Web part in una pagina.  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare tutti i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte di questo esempio di codice è il controllo utente che consente agli utenti di modificare la modalità di visualizzazione in una pagina Web. Salvare il seguente codice sorgente in un file con estensione ascx, assegnarvi il nome di file che viene assegnato al `Src` attributo del `Register` direttiva per il controllo utente, ovvero nella parte superiore della pagina Web host. Per informazioni dettagliate sulle modalità di visualizzazione e una descrizione del codice sorgente in questo controllo, vedere [procedura dettagliata: modifica delle modalità di visualizzazione in una pagina Web part](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 La seconda parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 La terza parte dell'esempio di codice è la pagina Web. Si noti che una connessione viene dichiarata nel markup della pagina, tramite il `<StaticConnections>` e `<asp:WebPartsConnection>` elementi. La dichiarazione di connessione include la necessaria `ProviderID` attributo. Un secondo metodo per la creazione della connessione viene visualizzata nel `Button1_Click` metodo, in cui il codice crea una nuova connessione, utilizzando il punto di connessione definito nel controllo consumer. Quindi, nella `Button2_Click` metodo, il codice accede al valore della <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> proprietà e lo visualizza in un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Una volta caricata la pagina in un browser, esiste già una connessione a causa della connessione statica dichiarata nella pagina. Immettere il testo nel controllo provider e si noti che viene visualizzato nel consumer a causa della connessione. Successivamente, disconnettere i controlli. A tale scopo, usare il **modalità di visualizzazione** controllo elenco a discesa per passare alla pagina modalità di connessione. Fare clic sul menu dei verbi (rappresentato da una freccia verso il basso nella barra del titolo) in uno del <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla e scegliere il verbo. Scegliere il **Disconnect** pulsante e i controlli sono disconnessi. Successivamente, usare il **collegare i controlli Web part** pulsante per ricreare una connessione tra i due controlli. Fare clic sui **Consumer Details** pulsante per eseguire il codice che accede il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> valore della proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue l'override del metodo <see cref="M:System.Object.ToString" /> ereditato e restituisce un nome breve del tipo per l'oggetto connessione.</summary>
        <returns>Stringa contenente il nome breve, ovvero non qualificato, del tipo di un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato principalmente per motivi di praticità da finestre di progettazione controlli. Migliora come oggetti connessione vengono visualizzate nella visualizzazione progettazione usando il nome del tipo più breve, invece di un nome completo del tipo. Tuttavia, il metodo può essere chiamato in qualsiasi punto nel codice in cui si desidera conoscere il nome del tipo di un oggetto di connessione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare le <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> per restituire il nome del tipo short un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> oggetto.  
  
 L'esempio di codice è costituito da tre parti:  
  
-   Codice sorgente per un'interfaccia e due <xref:System.Web.UI.WebControls.WebParts.WebPart> controlla che funge da consumer per una connessione e il provider.  
  
-   Una pagina Web per ospitare i controlli ed eseguire l'esempio di codice.  
  
-   Una spiegazione su come eseguire la pagina di esempio.  
  
 La prima parte dell'esempio di codice è il codice sorgente per l'interfaccia e i controlli consumer e provider. Per l'esempio di codice per l'esecuzione, è necessario compilare il codice sorgente. È possibile compilarlo in modo esplicito e inserire l'assembly risultante nella cartella Bin del sito Web o nella global assembly cache. In alternativa, è possibile inserire il codice sorgente nella cartella App_Code del sito, in cui verrà compilato in modo dinamico in fase di esecuzione. Questo esempio di codice Usa la compilazione dinamica. Per una procedura dettagliata che illustra come eseguire la compilazione, vedere [procedura dettagliata: sviluppo e Using a Custom Web Server Control](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 La seconda parte dell'esempio di codice è la pagina Web. Nella parte superiore è un `Register` using che fa riferimento al codice sorgente per le due compilati in modo dinamico <xref:System.Web.UI.WebControls.WebParts.WebPart> controlli. La connessione statica viene dichiarata all'interno di `<StaticConnections>` elemento della pagina. Il `Button1_Click` chiamate al metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> metodo per scrivere il nome del tipo della connessione a un'etichetta.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 Caricare la pagina in un browser. La connessione statica viene già creata. Immettere il testo nel controllo provider e si noti che il testo viene visualizzato nel controllo consumer. Fare clic sui **dettagli della connessione** pulsante per l'esecuzione di <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> utilizzato per trasformare i dati tra due punti di connessione altrimenti incompatibili in una connessione web part.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In una connessione Web part, esistono due modi in cui possono connettersi i controlli consumer e provider nella connessione. Possono essere connessi direttamente, mediante le rispettive <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> oggetti e un tipo di interfaccia che viene riconosciuto da entrambi i controlli. Oppure, se sono compatibili, è possibile connettersi indirettamente, usando un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto che consente di trasformare un'istanza dell'interfaccia da un provider in un tipo riconosciuto da un consumer.  
  
 Quando un trasformatore è necessario come parte di una connessione, il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> proprietà fornisce un riferimento al <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> oggetto. È possibile aggiungere un convertitore per una connessione in modo dichiarativo nel markup di una pagina Web, aggiungendo un tag per un convertitore personalizzato (o uno di trasformatori forniti con il set di controlli Web part) all'interno di `<asp:WebPartConnection>` elemento. È possibile anche aggiungere un trasformatore a livello di programmazione, creazione di un'istanza nel codice e chiama il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> metodo sul <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controllo per creare la connessione, passare a esso l'oggetto di trasformatore insieme agli altri parametri necessari.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di oggetti <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> utilizzati internamente dall'insieme di controlli Web part.</summary>
        <value>Oggetto <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> contenente oggetti <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> proprietà non è destinata all'uso dagli sviluppatori. Per accedere a transformer associata a una connessione, gli sviluppatori devono sempre usare il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> proprietà.  
  
 Il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> proprietà viene utilizzata internamente dal controllo Web part impostato per consentire agli sviluppatori di pagina dichiarare gli elementi di trasformatore all'interno di `<asp:webpartconnection>` elemento nel markup di una pagina Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      </Docs>
    </Member>
  </Members>
</Type>