<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bd266704ee3fe75b84f3b0e3aa578f64c1e8009d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36445044" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlTypeInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlTypeInvoker" />
  <TypeSignature Language="F#" Value="type XamlTypeInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scopo della <xref:System.Xaml.Schema.XamlTypeInvoker> consiste nell'abilitare un sistema di tipi XAML estensibile, schema e un runtime che non si basa interamente sulle funzionalità di Common Language Runtime, ad esempio attributi CLR, informazioni sulla reflection tramite lavoro <xref:System.Type> e <xref:System.Reflection.MemberInfo>e così via. Le sottoclassi di <xref:System.Xaml.Schema.XamlTypeInvoker> vengono utilizzati come parametri di input per i costruttori delle classi di schema XAML alternativi, ad esempio <xref:System.Xaml.XamlType>. Si crea una sottoclasse <xref:System.Xaml.XamlType> e passare il <xref:System.Xaml.Schema.XamlTypeInvoker> tramite al costruttore di base. Oltre a definire un <xref:System.Xaml.Schema.XamlTypeInvoker> per il costruttore, è necessario fornire anche le sostituzioni per almeno alcune delle `Lookup` metodi di <xref:System.Xaml.XamlType>.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> ha un'implementazione predefinita. L'implementazione predefinita segue un modello simile per l'implementazione predefinita di tipi dello schema XAML <xref:System.Xaml.XamlType> e <xref:System.Xaml.XamlMember>: il sistema di tipi CLR viene utilizzato per la creazione di istanze, i valori e le ricerche, incluso l'uso di attributi CLR, <xref:System.Type> e<xref:System.Reflection.MemberInfo>e così via.  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> fornisce metodi per la creazione di istanze di base (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) e i metodi rilevanti per i tipi in cui la <xref:System.Xaml.XamlType> rappresenta una raccolta, dizionario o una matrice (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlTypeInvoker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita è vuota.  
  
 Questo costruttore viene richiamato internamente per fornire un valore per <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>. Per un <xref:System.Xaml.Schema.XamlTypeInvoker> sottoclasse, è previsto che è utilizzare la <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> firma per la costruzione o fornire una sostituzione che chiama <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> come base. Fornire il <xref:System.Xaml.XamlType> implementa un modello predefinito where <xref:System.Xaml.Schema.XamlTypeInvoker> non può essere modificato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlTypeInvoker(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xaml.Schema.XamlTypeInvoker : System.Xaml.XamlType -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="new System.Xaml.Schema.XamlTypeInvoker type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore viene chiamato internamente in base il <xref:System.Xaml.XamlType> in cui il <xref:System.Xaml.Schema.XamlTypeInvoker> viene utilizzato per la costruzione. Il `type` fornite di seguito è rilevante per tutte le altre chiamate al metodo per <xref:System.Xaml.Schema.XamlTypeInvoker>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToCollection (instance As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToCollection(System::Object ^ instance, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToCollection : obj * obj -&gt; unit&#xA;override this.AddToCollection : obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToCollection (instance, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="item">The item to add.</param>
        <summary>Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario chiamare questo metodo solo su un <xref:System.Xaml.XamlType> che rappresenta una raccolta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>L'implementazione di base include una chiamata al supporto interno <c>ThrowIfUnknown</c>. Questo supporto genera sempre un'eccezione per i casi in cui un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basa sconosciuto <see cref="T:System.Xaml.XamlType" />, inclusi i casi nel <see cref="P:System.Xaml.XamlType.UnderlyingType" /> del <see cref="T:System.Xaml.XamlType" /> è <see langword="null" />.  Internamente, le chiamate di implementazione di base <see cref="P:System.Xaml.XamlType.IsCollection" />e genera un'eccezione se il risultato è <see langword="false" />.  L'implementazione di base non necessariamente utilizza un proprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementazione. Innanzitutto, un cast di <paramref name="instance" /> a <see cref="T:System.Collections.IList" /> viene eseguito un tentativo. Se l'esito è positivo, una chiamata a <see cref="M:System.Collections.IList.Add(System.Object)" /> viene eseguita e il metodo restituisce. In caso contrario, l'implementazione di base utilizza CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> per richiamare sottostante <see langword="Add" /> (metodo), così come ottenuto da una chiamata a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> per questo <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  Nell'implementazione di base viene generata alcuna eccezione, questo livello se <paramref name="item" /> è <see langword="null" />. È comunque possibile che l'oggetto sottostante <see langword="Add" /> metodo genererà un'eccezione quando viene richiamato. Altre eccezioni in fase di esecuzione sono possibili se <see cref="P:System.Xaml.XamlType.ItemType" /> non restituisce un risultato valido.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddToDictionary (instance As Object, key As Object, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddToDictionary(System::Object ^ instance, System::Object ^ key, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member AddToDictionary : obj * obj * obj -&gt; unit&#xA;override this.AddToDictionary : obj * obj * obj -&gt; unit" Usage="xamlTypeInvoker.AddToDictionary (instance, key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <param name="key">Dictionary key for the item to add.</param>
        <param name="item">The item value to add.</param>
        <summary>Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario chiamare questo metodo solo su un <xref:System.Xaml.XamlType> che rappresenta un dizionario.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">
          <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>L'implementazione di base include una chiamata al supporto interno <c>ThrowIfUnknown</c>. Questo supporto genera sempre un'eccezione per i casi in cui un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basa sconosciuto <see cref="T:System.Xaml.XamlType" />, inclusi i casi nel <see cref="P:System.Xaml.XamlType.UnderlyingType" /> del <see cref="T:System.Xaml.XamlType" /> è <see langword="null" />.  Internamente, le chiamate di implementazione di base <see cref="P:System.Xaml.XamlType.IsDictionary" />e genera un'eccezione se il risultato è <see langword="false" />.  L'implementazione di base non necessariamente utilizza un proprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementazione. Innanzitutto, un cast di <paramref name="instance" /> a <see cref="T:System.Collections.IDictionary" /> viene eseguito un tentativo. Se l'esito è positivo, una chiamata a <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> viene eseguita e il metodo restituisce. In caso contrario, l'implementazione di base utilizza CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> per richiamare sottostante <see langword="Add" /> (metodo), così come ottenuto da una chiamata a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> per questo <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  Nell'implementazione di base viene generata alcuna eccezione, questo livello se <paramref name="item" /> oppure <paramref name="key" /> sono <see langword="null" />. È comunque possibile che l'oggetto sottostante <see langword="Add" /> metodo genererà un'eccezione quando viene richiamato. Altre eccezioni in fase di esecuzione sono possibili se <see cref="P:System.Xaml.XamlType.ItemType" /> non restituisce un risultato valido.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (arguments As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(cli::array &lt;System::Object ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : obj[] -&gt; obj&#xA;override this.CreateInstance : obj[] -&gt; obj" Usage="xamlTypeInvoker.CreateInstance arguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">An array of objects that supply the <see langword="x:ConstructorArgs" /> for the instance. May be <see langword="null" /> for types that do not require or use <see langword="x:ConstructorArgs" />.</param>
        <summary>Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <returns>The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MissingMethodException">Could not resolve a constructor.</exception>
        <block subset="none" type="overrides">
          <para>L'implementazione di base include una chiamata al supporto interno <c>ThrowIfUnknown</c>. Questo supporto genera sempre un'eccezione per i casi in cui un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basa sconosciuto <see cref="T:System.Xaml.XamlType" />, inclusi i casi nel <see cref="P:System.Xaml.XamlType.UnderlyingType" /> del <see cref="T:System.Xaml.XamlType" /> è <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAddMethod (contentType As XamlType) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod(System::Xaml::XamlType ^ contentType);" />
      <MemberSignature Language="F#" Value="abstract member GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo&#xA;override this.GetAddMethod : System.Xaml.XamlType -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetAddMethod contentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <see cref="T:System.Xaml.XamlType" /> for the item type that is used by the <see langword="Add" /> method.</param>
        <summary>Returns the relevant <see langword="Add" /> method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary.</summary>
        <returns>CLR <see cref="T:System.Reflection.MethodInfo" /> information for the <see langword="Add" /> method, or null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo deve restituire `null` nei casi in cui la <xref:System.Xaml.XamlType> per questo <xref:System.Xaml.Schema.XamlTypeInvoker> non è una raccolta scrivibile o un dizionario. In particolare, deve restituire `null` nei casi in cui <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> restituisce `None`.  
  
> [!IMPORTANT]
>  Se non si accede a un sistema di tipi XAML completamente attendibile, questo metodo ha la possibilità di false report <xref:System.Reflection.MethodInfo> informazioni ai chiamanti.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contentType" /> is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Restituisce l'implementazione di base <see langword="null" /> nei casi in cui un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> si basa su sconosciuto <see cref="T:System.Xaml.XamlType" />, che include i casi nel <see cref="P:System.Xaml.XamlType.UnderlyingType" /> del <see cref="T:System.Xaml.XamlType" /> è <see langword="null" />. L'operatore restituisce inoltre <see langword="null" /> se <see cref="P:System.Xaml.XamlType.ItemType" /> è <see langword="null" />.  Le raccolte XAML sono potenzialmente più <see langword="Add" /> metodo, perché una raccolta XAML potenzialmente può supportare più di un tipo di contenuto (vedere <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, oppure vedere <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> per informazioni su un'implementazione di questo concetto in WPF). L'implementazione predefinita utilizza la logica interna per restituire la migliore corrispondenza in base alle firme e il tipo dell'oggetto fornito <paramref name="contentType" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumeratorMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetEnumeratorMethod();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetEnumeratorMethod : unit -&gt; System.Reflection.MethodInfo" Usage="xamlTypeInvoker.GetEnumeratorMethod " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an object representing a method that can enumerate over items.</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deve restituire `null` nei casi in cui <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType> restituisce `None`.  
  
> [!IMPORTANT]
>  Se non si accede a un sistema di tipi XAML completamente attendibile, questo metodo ha la possibilità di false report <xref:System.Reflection.MethodInfo> informazioni ai chiamanti.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione di base chiama un metodo di supporto interno. Tale supporto restituisce <see langword="null" /> nei casi in cui un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> si basa su sconosciuto <see cref="T:System.Xaml.XamlType" />, che include i casi nel <see cref="P:System.Xaml.XamlType.UnderlyingType" /> del <see cref="T:System.Xaml.XamlType" /> è <see langword="null" />. L'operatore restituisce inoltre <see langword="null" /> nei casi in cui <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> restituisce <see langword="None" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItems (instance As Object) As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetItems(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetItems : obj -&gt; System.Collections.IEnumerator&#xA;override this.GetItems : obj -&gt; System.Collections.IEnumerator" Usage="xamlTypeInvoker.GetItems instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
        <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object, or <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.  **-or-**  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>L'implementazione di base include una chiamata al supporto interno <c>ThrowIfUnknown</c>. Questo supporto genera sempre un'eccezione per i casi in cui un <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> basa sconosciuto <see cref="T:System.Xaml.XamlType" />, inclusi i casi nel <see cref="P:System.Xaml.XamlType.UnderlyingType" /> del <see cref="T:System.Xaml.XamlType" /> è <see langword="null" />.  L'implementazione di base non necessariamente utilizza un proprio <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementazione. Innanzitutto, un cast di <paramref name="instance" /> a <see cref="T:System.Collections.IEnumerable" /> viene eseguito un tentativo. Se l'esito è positivo, una chiamata a <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> viene eseguita e il metodo restituisce che restituiscono valori. In caso contrario, l'implementazione di base utilizza CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> per richiamare sottostante <see langword="GetEnumerator" /> (metodo), così come ottenuto da una chiamata a <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> per questo <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetMarkupExtensionHandler As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ SetMarkupExtensionHandler { EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetMarkupExtensionHandler : EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <value>Implementazione del gestore che gestisce il caso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il gestore dell'evento basa <xref:System.EventHandler%601> vincolati con <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> dati dell'evento.  
  
 Il valore restituito richiama il <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> comportamento del <xref:System.Xaml.XamlType> che il <xref:System.Xaml.Schema.XamlTypeInvoker> base.  
  
 Il valore restituito sarà `null` per un <xref:System.Xaml.Schema.XamlTypeInvoker> basato su sconosciuto <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetTypeConverterHandler As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ SetTypeConverterHandler { EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetTypeConverterHandler : EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
        <value>Implementazione del gestore che gestisce il caso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il gestore dell'evento basa <xref:System.EventHandler%601> vincolati con <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> dati dell'evento.  
  
 Il valore restituito richiama il <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> comportamento del <xref:System.Xaml.XamlType> che il <xref:System.Xaml.Schema.XamlTypeInvoker> base.  
  
 Il valore restituito sarà `null` per un <xref:System.Xaml.Schema.XamlTypeInvoker> basato su sconosciuto <xref:System.Xaml.XamlType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UnknownInvoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xaml::Schema::XamlTypeInvoker ^ UnknownInvoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnknownInvoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
        <value>Un valore statico che rappresenta un sconosciuto, non è completamente implementato <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fornire questo valore per un <xref:System.Xaml.Schema.XamlTypeInvoker> API definita parametro di System. XAML in genere causerà il codice chiamato generare eccezioni.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>