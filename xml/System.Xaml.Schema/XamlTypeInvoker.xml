<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlTypeInvoker.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5504f5574033cb4de7a3c6a42e6208306d4dd86e5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">504f5574033cb4de7a3c6a42e6208306d4dd86e5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</source>
          <target state="translated">Fornisce un punto di estensione che può costruire le istanze di un tipo XAML con tecniche diverse dalla reflection e dai costruttori.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is to enable an extensible XAML type system, schema, and a working run time that does not rely as fully on CLR features such as CLR attributes, reflection information through <ph id="ph2">&lt;xref:System.Type&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">Lo scopo di <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> consiste nella possibilità di un sistema di tipi XAML estensibile, schema e un runtime che non si basa interamente sulle funzionalità di Common Language Runtime, ad esempio attributi CLR, informazioni sulla reflection tramite lavoro <ph id="ph2">&lt;xref:System.Type&gt;</ph> e <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>e così via.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> are used as input parameters for the alternate constructors of XAML schema classes such as <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">Le sottoclassi di <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> vengono utilizzati come parametri di input per i costruttori delle classi dello schema XAML alternativi, ad esempio <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>You subclass <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and pass the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> through to the base constructor.</source>
          <target state="translated">Si crea una sottoclasse <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> e passare il <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> tramite al costruttore di base.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Along with defining a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> for the constructor, you must also provide overrides for at least some of the <ph id="ph2">`Lookup`</ph> methods of <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">Oltre a definire un <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> per il costruttore, è necessario fornire anche le sostituzioni per almeno alcune delle <ph id="ph2">`Lookup`</ph> metodi di <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> has a default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> è un'implementazione predefinita.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>The default implementation follows a similar model to the default implementation of XAML schema types <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: the CLR type system is used for instantiation, values and lookups, including using CLR attributes, <ph id="ph3">&lt;xref:System.Type&gt;</ph> and <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, and so on.</source>
          <target state="translated">L'implementazione predefinita segue un modello simile per l'implementazione predefinita dei tipi dello schema XAML <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> e <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>: il sistema di tipi CLR viene utilizzato per la creazione di istanze, i valori e le ricerche, incluso l'utilizzo di attributi CLR, <ph id="ph3">&lt;xref:System.Type&gt;</ph> e <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph>e così via.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> provides methods for basic instantiation (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) and methods that are relevant for types where the <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a collection, dictionary or array (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>; <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>; <ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> fornisce metodi per la creazione di istanze di base (<ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A&gt;</ph>) e i metodi rilevanti per i tipi in cui il <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> rappresenta una raccolta, dizionario o una matrice (<ph id="ph4">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A&gt;</ph>; <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A&gt;</ph>; <ph id="ph8">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Xaml.Schema.XamlTypeInvoker">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>The default implementation is empty.</source>
          <target state="translated">L'implementazione predefinita è vuota.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>This constructor is invoked internally to provide a value for <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>.</source>
          <target state="translated">Questo costruttore viene richiamato internamente per fornire un valore per <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>For a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> subclass, it is expected that you either use the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> signature for construction or provide an override that calls <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> as base.</source>
          <target state="translated">Per un <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> sottoclasse, è previsto che utilizzi il <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> firma per la costruzione o fornire un override che chiama <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29&gt;</ph> come base.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
          <source>Providing the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implements a default pattern where <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is immutable.</source>
          <target state="translated">Fornire il <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implementa un modello predefinito in cui <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> non è modificabile.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> value for the specific XAML type relevant to this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Valore <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> per il tipo XAML specifico relativo all'oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> class, based on a provided <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> in base a un oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>This constructor is called internally based on the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> where the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is used for construction.</source>
          <target state="translated">Questo costruttore viene chiamato internamente in base il <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> in cui il <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> viene utilizzato per la costruzione.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source>The <ph id="ph1">`type`</ph> provided here is relevant to all other method calls for <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">`type`</ph> fornite di seguito è pertinente per tutte le altre chiamate al metodo per <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Istanza del tipo specificato da <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> per la costruzione di <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The item to add.</source>
          <target state="translated">Elemento da aggiungere.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Adds the provided item to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Aggiunge l'elemento fornito a un'istanza del tipo relativa all'oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a collection.</source>
          <target state="translated">È necessario chiamare questo metodo solo su un <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> che rappresenta una raccolta.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">Questo metodo viene richiamato su un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> basato su un oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> sconosciuto.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-oppure-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection.</source>
          <target state="translated">Questo metodo viene richiamato su un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> in cui il tipo rilevante non è una raccolta.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> per questo oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> restituisce <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">L'implementazione di base include una chiamata al supporto interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Questo supporto genera sempre un'eccezione per i casi in cui un <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> è basato su uno stato sconosciuto <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, inclusi i casi in cui il <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> del <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> è <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Internamente, l'implementazione di base chiama <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsCollection" /&gt;</ph>e genera un'eccezione se il risultato è <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">L'implementazione di base non necessariamente utilizza un proprio <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementazione.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is attempted.</source>
          <target state="translated">Innanzitutto, un cast di <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> a <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> viene eseguito un tentativo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">Se l'esito è positivo, una chiamata a <ph id="ph1">&lt;see cref="M:System.Collections.IList.Add(System.Object)" /&gt;</ph> viene eseguita e il metodo restituisce.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">In caso contrario, l'implementazione di base utilizza CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> per richiamare sottostante <ph id="ph2">&lt;see langword="Add" /&gt;</ph> (metodo), così come ottenuto da una chiamata a <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> per questo <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Nell'implementazione di base viene generata alcuna eccezione, questo livello se <ph id="ph1">&lt;paramref name="item" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">È comunque possibile che l'oggetto sottostante <ph id="ph1">&lt;see langword="Add" /&gt;</ph> metodo genererà un'eccezione quando viene richiamato.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">Sono possibili altre eccezioni in fase di esecuzione se <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> non restituisce un risultato valido.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Istanza del tipo specificato da <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> per la costruzione di <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Dictionary key for the item to add.</source>
          <target state="translated">Chiave del dizionario per l'elemento da aggiungere.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The item value to add.</source>
          <target state="translated">Valore dell'elemento da aggiungere.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Adds the provided key and item value to an instance of the type that is relevant to this <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Aggiunge la chiave e il valore dell'elemento forniti a un'istanza del tipo relativa all'oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>You should only call this method on a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that represents a dictionary.</source>
          <target state="translated">È necessario chiamare questo metodo solo su un <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> che rappresenta un dizionario.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">Questo metodo viene richiamato su un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> basato su un oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> sconosciuto.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-oppure-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a dictionary.</source>
          <target state="translated">Questo metodo viene richiamato su un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> in cui il tipo rilevante non è un dizionario.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> per questo oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> restituisce <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">L'implementazione di base include una chiamata al supporto interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Questo supporto genera sempre un'eccezione per i casi in cui un <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> è basato su uno stato sconosciuto <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, inclusi i casi in cui il <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> del <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> è <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Internally, the base implementation calls <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>, and throws if the result is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Internamente, l'implementazione di base chiama <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsDictionary" /&gt;</ph>e genera un'eccezione se il risultato è <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementation.</source>
          <target state="translated">L'implementazione di base non necessariamente utilizza un proprio <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> implementazione.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> is attempted.</source>
          <target state="translated">Innanzitutto, un cast di <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> a <ph id="ph2">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> viene eseguito un tentativo.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph> is made and the method returns.</source>
          <target state="translated">Se l'esito è positivo, una chiamata a <ph id="ph1">&lt;see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /&gt;</ph> viene eseguita e il metodo restituisce.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">In caso contrario, l'implementazione di base utilizza CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> per richiamare sottostante <ph id="ph2">&lt;see langword="Add" /&gt;</ph> (metodo), così come ottenuto da una chiamata a <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /&gt;</ph> per questo <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>In the base implementation no exception is raised at this level if <ph id="ph1">&lt;paramref name="item" /&gt;</ph> or <ph id="ph2">&lt;paramref name="key" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Nell'implementazione di base viene generata alcuna eccezione, questo livello se <ph id="ph1">&lt;paramref name="item" /&gt;</ph> o <ph id="ph2">&lt;paramref name="key" /&gt;</ph> sono <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>It is still possible that the underlying <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method will raise an exception when invoked.</source>
          <target state="translated">È comunque possibile che l'oggetto sottostante <ph id="ph1">&lt;see langword="Add" /&gt;</ph> metodo genererà un'eccezione quando viene richiamato.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
          <source>Other run time exceptions are possible if <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> does not return a valid result.</source>
          <target state="translated">Sono possibili altre eccezioni in fase di esecuzione se <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> non restituisce un risultato valido.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>An array of objects that supply the <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> for the instance.</source>
          <target state="translated">Matrice di oggetti che forniscono <ph id="ph1">&lt;see langword="x:ConstructorArgs" /&gt;</ph> per l'istanza.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for types that do not require or use <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>.</source>
          <target state="translated">Può essere <ph id="ph1">&lt;see langword="null" /&gt;</ph> per tipi che non richiedono né utilizzano <ph id="ph2">&lt;see langword="x:ConstructorArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Creates an object instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Crea un'istanza dell'oggetto in base all'oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> in costruzione per l'oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The created instance based on the construction-initiated <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Istanza creata in base all'oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> in costruzione per l'oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>Could not resolve a constructor.</source>
          <target state="translated">Impossibile risolvere un costruttore.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">L'implementazione di base include una chiamata al supporto interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Questo supporto genera sempre un'eccezione per i casi in cui un <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> è basato su uno stato sconosciuto <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, inclusi i casi in cui il <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> del <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> è <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the item type that is used by the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> per il tipo di elemento utilizzato dal metodo <ph id="ph2">&lt;see langword="Add" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Returns the relevant <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method for a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is relevant to a collection or dictionary.</source>
          <target state="translated">Restituisce il metodo <ph id="ph1">&lt;see langword="Add" /&gt;</ph> pertinente per un oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> relativo a un insieme o a un dizionario.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>CLR <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> information for the <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method, or null.</source>
          <target state="translated">Informazioni <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> CLR per il metodo <ph id="ph2">&lt;see langword="Add" /&gt;</ph> o null.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>This method should return <ph id="ph1">`null`</ph> for cases where the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> for this <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is not a writeable collection or dictionary.</source>
          <target state="translated">Questo metodo deve restituire <ph id="ph1">`null`</ph> per i casi in cui il <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> per questo <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> non è una raccolta modificabile o un dizionario.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>Specifically, should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">In particolare, deve restituire <ph id="ph1">`null`</ph> per i casi in cui <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> restituisce <ph id="ph3">`None`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">Se non si accede a un sistema di tipi XAML completamente attendibile, questo metodo è in grado di false report <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> informazioni ai chiamanti.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="contentType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The base implementation returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Restituisce l'implementazione di base <ph id="ph1">&lt;see langword="null" /&gt;</ph> per i casi in cui un <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> è basato su uno stato sconosciuto <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, inclusi i casi in cui il <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> del <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> è <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Restituisce inoltre <ph id="ph1">&lt;see langword="null" /&gt;</ph> se <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.ItemType" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>XAML collections potentially have more than one <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method, because a XAML collection can potentially support more than one content type (see <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>, or see <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph> for information about one implementation of this concept in WPF).</source>
          <target state="translated">Le raccolte XAML sono potenzialmente più <ph id="ph1">&lt;see langword="Add" /&gt;</ph> metodo, perché una raccolta XAML può supportare potenzialmente più di un tipo di contenuto (vedere <ph id="ph2">&lt;see cref="P:System.Xaml.XamlType.AllowedContentTypes" /&gt;</ph>, oppure vedere <ph id="ph3">&lt;see cref="T:System.Windows.Markup.ContentWrapperAttribute" /&gt;</ph> per informazioni su un'implementazione di questo concetto in WPF).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
          <source>The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>.</source>
          <target state="translated">L'implementazione predefinita utilizza la logica interna per restituire la migliore corrispondenza in base alle firme e il tipo dell'oggetto fornito <ph id="ph1">&lt;paramref name="contentType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Returns an object representing a method that can enumerate over items.</source>
          <target state="translated">Restituisce un oggetto che rappresenta un metodo che può enumerare gli elementi.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for an enumerator method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> per un metodo enumeratore o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>Should return <ph id="ph1">`null`</ph> for cases where <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> returns <ph id="ph3">`None`</ph>.</source>
          <target state="translated">Deve restituire <ph id="ph1">`null`</ph> per i casi in cui <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=nameWithType&gt;</ph> restituisce <ph id="ph3">`None`</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>If you are not accessing a fully trusted XAML type system, this method has the potential to report false <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> information to callers.</source>
          <target state="translated">Se non si accede a un sistema di tipi XAML completamente attendibile, questo metodo è in grado di false report <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> informazioni ai chiamanti.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>The base implementation calls an internal helper method.</source>
          <target state="translated">L'implementazione di base chiama un metodo di supporto interno.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>That helper returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Tale supporto restituisce <ph id="ph1">&lt;see langword="null" /&gt;</ph> per i casi in cui un <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> è basato su uno stato sconosciuto <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, inclusi i casi in cui il <ph id="ph4">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> del <ph id="ph5">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> è <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
          <source>It also returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> for cases where <ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph> returns <ph id="ph3">&lt;see langword="None" /&gt;</ph>.</source>
          <target state="translated">Restituisce inoltre <ph id="ph1">&lt;see langword="null" /&gt;</ph> per i casi in cui <ph id="ph2">&lt;see cref="M:System.Xaml.XamlType.LookupCollectionKind" /&gt;</ph> restituisce <ph id="ph3">&lt;see langword="None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An instance of the type specified by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> used for constructing this <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Istanza del tipo specificato da <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> per la costruzione di <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object representing the set of items.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> che rappresenta il set di elementi.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> object, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">Questo metodo viene richiamato su un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> basato su un oggetto <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> sconosciuto.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><bpt id="p1">**</bpt>-or-<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>-oppure-<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Invoked this method on a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> where the relevant type is not a collection or dictionary.</source>
          <target state="translated">Richiamato questo metodo su un <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> dove il tipo rilevante non è un insieme o un dizionario.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="instance" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation includes a call to the internal helper <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">L'implementazione di base include una chiamata al supporto interno <bpt id="p1">&lt;c&gt;</bpt>ThrowIfUnknown<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>This helper always throws for cases where a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> is based on an unknown <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, which includes cases where the <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> of the <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Questo supporto genera sempre un'eccezione per i casi in cui un <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> è basato su uno stato sconosciuto <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, inclusi i casi in cui il <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.UnderlyingType" /&gt;</ph> del <ph id="ph4">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> è <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>The base implementation does not necessarily use its own <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> implementation.</source>
          <target state="translated">L'implementazione di base non necessariamente utilizza un proprio <ph id="ph1">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> implementazione.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>First, a cast of <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> to <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> is attempted.</source>
          <target state="translated">Innanzitutto, un cast di <ph id="ph1">&lt;paramref name="instance" /&gt;</ph> a <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> viene eseguito un tentativo.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>If this succeeds, a call to <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> is made and the method returns that return value.</source>
          <target state="translated">Se l'esito è positivo, una chiamata a <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerable.GetEnumerator" /&gt;</ph> viene eseguita e il metodo restituisce che restituiscono valori.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
          <source>Otherwise, the base implementation uses CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> to invoke the underlying <ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph> method, as obtained from a call to <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> for this <ph id="ph4">&lt;paramref name="" /&gt;</ph><ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">In caso contrario, l'implementazione di base utilizza CLR <ph id="ph1">&lt;see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /&gt;</ph> per richiamare sottostante <ph id="ph2">&lt;see langword="GetEnumerator" /&gt;</ph> (metodo), così come ottenuto da una chiamata a <ph id="ph3">&lt;see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /&gt;</ph> per questo <ph id="ph4">&lt;paramref name="" /&gt;</ph> <ph id="ph5">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into an implemented <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph>.</source>
          <target state="translated">Ottiene il gestore da utilizzare quando un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> viene chiamato in un oggetto <ph id="ph2">&lt;see cref="T:System.Windows.Markup.MarkupExtension" /&gt;</ph> implementato.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">Implementazione del gestore che gestisce questo caso.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">Il gestore dell'evento è basato su <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vincolati con <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> dati dell'evento.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">Il valore restituito richiama il <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A&gt;</ph> comportamento del <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> che il <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> è basato su.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">Il valore restituito è <ph id="ph1">`null`</ph> per un <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> basato su uno stato sconosciuto <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>Gets the handler to use when a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> calls into a CLR-implemented <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>.</source>
          <target state="translated">Ottiene il gestore da utilizzare quando un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> viene chiamato in un oggetto <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> implementato da CLR.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>A handler implementation that handles this case.</source>
          <target state="translated">Implementazione del gestore che gestisce questo caso.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The event handler is based on <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> constrained with <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> event data.</source>
          <target state="translated">Il gestore dell'evento è basato su <ph id="ph1">&lt;xref:System.EventHandler%601&gt;</ph> vincolati con <ph id="ph2">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ph> dati dell'evento.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The value returned invokes the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph> behavior of the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that the <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> is based on.</source>
          <target state="translated">Il valore restituito richiama il <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A&gt;</ph> comportamento del <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> che il <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> è basato su.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
          <source>The return value is <ph id="ph1">`null`</ph> for a <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> that is based on an unknown <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">Il valore restituito è <ph id="ph1">`null`</ph> per un <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> basato su uno stato sconosciuto <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Provides a static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Fornisce un valore statico che rappresenta un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> sconosciuto non completamente implementato.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>A static value that represents an unknown, not fully implemented <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>.</source>
          <target state="translated">Valore statico che rappresenta un oggetto <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> sconosciuto non completamente implementato.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
          <source>Supplying this value for a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> parameter of System.Xaml defined API will typically cause the called code to throw exceptions.</source>
          <target state="translated">Questo valore per fornire un <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> parametro System. XAML definito API causa in genere il codice chiamato generare eccezioni.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>