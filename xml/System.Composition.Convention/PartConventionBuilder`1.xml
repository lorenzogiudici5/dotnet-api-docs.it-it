<Type Name="PartConventionBuilder&lt;T&gt;" FullName="System.Composition.Convention.PartConventionBuilder&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a62413061ae9ea9b00dd0f7b583eb2e4bf7fc979" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36699899" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PartConventionBuilder&lt;T&gt; : System.Composition.Convention.PartConventionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PartConventionBuilder`1&lt;T&gt; extends System.Composition.Convention.PartConventionBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Convention.PartConventionBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public Class PartConventionBuilder(Of T)&#xA;Inherits PartConventionBuilder" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class PartConventionBuilder : System::Composition::Convention::PartConventionBuilder" />
  <TypeSignature Language="F#" Value="type PartConventionBuilder&lt;'T&gt; = class&#xA;    inherit PartConventionBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Convention</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Composition.Convention.PartConventionBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="f53f0-101">Tipo della parte.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f53f0-101">The type of the part.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="f53f0-102">Configura un tipo come parte Managed Extensibility Framework (MEF) con i valori restituiti fortemente tipizzati.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f53f0-102">Configures a type as a Managed Extensibility Framework (MEF) part, with strongly typed return values.</span>
      </span>
    </summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName="ExportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberSignature Language="F#" Value="member this.ExportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ExportProperty propertySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector">
          <span data-ttu-id="f53f0-103">Funzione che seleziona la proprietà da esportare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-103">A function that selects the property to export.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-104">Esporta una proprietà specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-104">Exports a specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-105">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-105">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty (propertySelector As Expression(Of Func(Of T, Object)), exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; * Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ExportProperty (propertySelector, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector">
          <span data-ttu-id="f53f0-106">Funzione che seleziona la proprietà da esportare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-106">A function that selects the property to export.</span>
          </span>
        </param>
        <param name="exportConfiguration">
          <span data-ttu-id="f53f0-107">Azione che configura la proprietà esportata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-107">An action that configures the exported property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-108">Esporta una proprietà specificata con la configurazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-108">Exports a specified property with the specified configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-109">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-109">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="f53f0-110">L'espressione <paramref name="propertySelector" /> deve essere <see cref="T:System.Linq.Expressions.MemberExpression" /> per l'accesso a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-110">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberSignature Language="F#" Value="member this.ExportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ExportProperty propertySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="f53f0-111">Tipo di contratto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-111">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertySelector">
          <span data-ttu-id="f53f0-112">Funzione che seleziona la proprietà da esportare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-112">A function that selects the property to export.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-113">Esporta una proprietà specificata come tipo di contratto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-113">Exports a specified property as a specified contract type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-114">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-114">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="f53f0-115">L'espressione <paramref name="propertySelector" /> deve essere <see cref="T:System.Linq.Expressions.MemberExpression" /> per l'accesso a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-115">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ExportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ExportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ExportConventionBuilder&gt; exportConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ExportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object)), exportConfiguration As Action(Of ExportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ExportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ExportConventionBuilder ^&gt; ^ exportConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ExportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; * Action&lt;System.Composition.Convention.ExportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ExportProperty (propertySelector, exportConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="exportConfiguration" Type="System.Action&lt;System.Composition.Convention.ExportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="f53f0-116">Tipo di contratto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-116">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertySelector">
          <span data-ttu-id="f53f0-117">Funzione che seleziona la proprietà da esportare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-117">A function that selects the property to export.</span>
          </span>
        </param>
        <param name="exportConfiguration">
          <span data-ttu-id="f53f0-118">Azione che configura la proprietà esportata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-118">An action that configures the exported property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-119">Esporta una proprietà specificata come tipo di contratto specificato usando la configurazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-119">Exports a specified property as a specified contract type by using the specified configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-120">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-120">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberSignature Language="F#" Value="member this.ImportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ImportProperty propertySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector">
          <span data-ttu-id="f53f0-121">Funzione che seleziona la proprietà da importare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-121">A function that selects the property to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-122">Importa una proprietà specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-122">Imports a specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-123">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-123">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty (propertySelector As Expression(Of Func(Of T, Object)), importConfiguration As Action(Of ImportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ImportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; * Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ImportProperty (propertySelector, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="propertySelector">
          <span data-ttu-id="f53f0-124">Funzione che seleziona la proprietà da importare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-124">A function that selects the property to import.</span>
          </span>
        </param>
        <param name="importConfiguration">
          <span data-ttu-id="f53f0-125">Azione che configura la proprietà importata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-125">An action that configures the imported property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-126">Importa una proprietà specificata usando la configurazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-126">Imports a specified property by using the specified configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-127">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-127">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="f53f0-128">L'espressione <paramref name="propertySelector" /> deve essere <see cref="T:System.Linq.Expressions.MemberExpression" /> per l'accesso a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-128">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector);" />
      <MemberSignature Language="F#" Value="member this.ImportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ImportProperty propertySelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="f53f0-129">Tipo di contratto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-129">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertySelector">
          <span data-ttu-id="f53f0-130">Funzione che seleziona la proprietà da importare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-130">A function that selects the property to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-131">Importa una proprietà specificata con il tipo di contratto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-131">Imports a specified property with the specified contract type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-132">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-132">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportProperty&lt;TContract&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ImportProperty&lt;TContract&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; propertySelector, Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; ImportProperty&lt;TContract&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!T, object&gt;&gt; propertySelector, class System.Action`1&lt;class System.Composition.Convention.ImportConventionBuilder&gt; importConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.Composition.Convention.ImportConventionBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportProperty(Of TContract) (propertySelector As Expression(Of Func(Of T, Object)), importConfiguration As Action(Of ImportConventionBuilder)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ImportProperty(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ propertySelector, Action&lt;System::Composition::Convention::ImportConventionBuilder ^&gt; ^ importConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ImportProperty : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; * Action&lt;System.Composition.Convention.ImportConventionBuilder&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.ImportProperty (propertySelector, importConfiguration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
        <Parameter Name="importConfiguration" Type="System.Action&lt;System.Composition.Convention.ImportConventionBuilder&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="f53f0-133">Tipo di contratto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-133">The contract type.</span>
          </span>
        </typeparam>
        <param name="propertySelector">
          <span data-ttu-id="f53f0-134">Funzione che seleziona la proprietà da importare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-134">A function that selects the property to import.</span>
          </span>
        </param>
        <param name="importConfiguration">
          <span data-ttu-id="f53f0-135">Azione che configura la proprietà importata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-135">An action that configures the imported property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-136">Importa una proprietà specificata con tipo di contratto e configurazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-136">Imports a specified property with the specified contract type and configuration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-137">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-137">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="f53f0-138">L'espressione <paramref name="propertySelector" /> deve essere <see cref="T:System.Linq.Expressions.MemberExpression" /> per l'accesso a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-138">The <paramref name="propertySelector" /> expression must be a <see cref="T:System.Linq.Expressions.MemberExpression" /> for accessing a property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NotifyImportsSatisfied">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; NotifyImportsSatisfied (System.Linq.Expressions.Expression&lt;Action&lt;T&gt;&gt; methodSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; NotifyImportsSatisfied(class System.Linq.Expressions.Expression`1&lt;class System.Action`1&lt;!T&gt;&gt; methodSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.NotifyImportsSatisfied(System.Linq.Expressions.Expression{System.Action{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function NotifyImportsSatisfied (methodSelector As Expression(Of Action(Of T))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ NotifyImportsSatisfied(System::Linq::Expressions::Expression&lt;Action&lt;T&gt; ^&gt; ^ methodSelector);" />
      <MemberSignature Language="F#" Value="override this.NotifyImportsSatisfied : System.Linq.Expressions.Expression&lt;Action&lt;'T&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.NotifyImportsSatisfied methodSelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodSelector" Type="System.Linq.Expressions.Expression&lt;System.Action&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="methodSelector">
          <span data-ttu-id="f53f0-139">Azione che consente di selezionare il metodo da chiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-139">An action that selects the method to call.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-140">Selezionare un metodo da chiamare quando la composizione è completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-140">Selects a method to be called when composition is complete.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-141">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-141">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="f53f0-142">L'espressione <paramref name="methodSelector" /> deve essere un metodo <see langword="void" /> senza argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-142">The <paramref name="methodSelector" /> expression must be a <see langword="void" /> method with no arguments.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectConstructor">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; SelectConstructor (System.Linq.Expressions.Expression&lt;Func&lt;System.Composition.Convention.ParameterImportConventionBuilder,T&gt;&gt; constructorSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!T&gt; SelectConstructor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Composition.Convention.ParameterImportConventionBuilder, !T&gt;&gt; constructorSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.PartConventionBuilder`1.SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.Composition.Convention.ParameterImportConventionBuilder,`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectConstructor (constructorSelector As Expression(Of Func(Of ParameterImportConventionBuilder, T))) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ SelectConstructor(System::Linq::Expressions::Expression&lt;Func&lt;System::Composition::Convention::ParameterImportConventionBuilder ^, T&gt; ^&gt; ^ constructorSelector);" />
      <MemberSignature Language="F#" Value="override this.SelectConstructor : System.Linq.Expressions.Expression&lt;Func&lt;System.Composition.Convention.ParameterImportConventionBuilder, 'T&gt;&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="partConventionBuilder.SelectConstructor constructorSelector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Composition.Convention.ParameterImportConventionBuilder,T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="constructorSelector">
          <span data-ttu-id="f53f0-143">Funzione che seleziona un costruttore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-143">A function that selects a constructor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f53f0-144">Seleziona un costruttore da usare nella composizione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-144">Selects a constructor to be used in composition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f53f0-145">Oggetto che può essere usato per configurare ulteriormente la parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-145">An object that can be used to further configure the part.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.Argument">
          <span data-ttu-id="f53f0-146">L'espressione <paramref name="constructorSelector" /> deve usare l'operatore <see langword="new" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f53f0-146">The <paramref name="constructorSelector" /> expression must use the <see langword="new" /> operator.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>