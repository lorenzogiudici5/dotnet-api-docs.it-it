<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="02658955cbcea15b85a8fddda92f34a0084c05ea" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39987620" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce informazioni relative allo stato e ai dati che risultano da un'operazione <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> o <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.Ping> classe tenta di inviare una richiesta echo di Internet controllo Message Protocol (ICMP) da un computer remoto e ricevere informazioni dal computer tramite un messaggio di risposta echo ICMP. Il <xref:System.Net.NetworkInformation.Ping> classe utilizza le istanze del <xref:System.Net.NetworkInformation.PingReply> classe per restituire le informazioni sull'operazione, ad esempio lo stato e il tempo impiegato per inviare la richiesta e la ricezione della risposta.  
  
 Il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi restituiscono istanze del <xref:System.Net.NetworkInformation.PingReply> direttamente alla classe. Il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi restituiscono una <xref:System.Net.NetworkInformation.PingReply> nel <xref:System.Net.NetworkInformation.PingCompletedEventHandler> del metodo <xref:System.Net.NetworkInformation.PingCompletedEventArgs> parametro. Il <xref:System.Net.NetworkInformation.PingReply> è possibile accedere mediante il <xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A> proprietà.  
  
 Se il valore di <xref:System.Net.NetworkInformation.PingReply.Status%2A> non è <xref:System.Net.NetworkInformation.IPStatus.Success>, non è consigliabile usare i valori restituiti dai <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> o <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> proprietà. Il <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> proprietà restituirà zero, il <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> proprietà restituirà una matrice vuota e il <xref:System.Net.NetworkInformation.PingReply.Options%2A> proprietà restituirà `null`.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare <xref:System.Net.NetworkInformation.Ping> classe per inviare una richiesta echo ICMP in modo sincrono e Visualizza la risposta.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'indirizzo dell'host che invia la riposta echo del protocollo ICMP.</summary>
        <value>
          <see cref="T:System.Net.IPAddress" /> contenente la destinazione del messaggio echo del protocollo ICMP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.PingReply.Address%2A> restituiti da una del <xref:System.Net.NetworkInformation.Ping.Send%2A> gli overload possono provenire da un computer remoto non autorizzato. Non si connettono al computer remoto usando questo indirizzo. Usare DNS per determinare l'indirizzo IP del computer in cui si desidera connettersi.  
  
   
  
## Examples  
 Esempio di codice seguente invia una richiesta echo ICMP in modo sincrono e viene visualizzato il valore di questa proprietà.  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il buffer dei dati ricevuti in un messaggio di risposta echo del protocollo ICMP.</summary>
        <value>Matrice <see cref="T:System.Byte" /> contenente i dati ricevuti in un messaggio di risposta echo del protocollo ICMP, oppure matrice vuota nel caso in cui non sia stato ricevuto alcun messaggio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il buffer dei dati inviato con la richiesta echo ICMP viene restituito al mittente nella risposta echo in modo che è possibile calcolare il tempo di viaggio round trip di un pacchetto di dimensioni note. Buffer di dati, combinati con i <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> opzione, può essere usato per individuare l'unità massima di trasmissione per il percorso di rete tra il computer di origine e destinazione. Per altre informazioni, vedere "Traceroute" in 1574 RFC, sezione 3.2, disponibile all'indirizzo [ https://www.ietf.org ](https://www.ietf.org).  
  
 Il buffer predefinito utilizzato con <xref:System.Net.NetworkInformation.Ping.Send%2A> e <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> contiene 32 byte di dati.  
  
   
  
## Examples  
 Esempio di codice seguente invia una richiesta echo ICMP in modo sincrono e Visualizza la dimensione del buffer restituito da questa proprietà.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le opzioni utilizzate per trasmettere la risposta a una richiesta echo del protocollo ICMP.</summary>
        <value>Oggetto <see cref="T:System.Net.NetworkInformation.PingOptions" /> che contiene la durata (TTL, Time to Live) e la direttiva di frammentazione usata per trasmettere la risposta se la proprietà <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> e <see cref="F:System.Net.NetworkInformation.IPStatus.Success" />; altrimenti, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La durata (TTL) definisce il numero di volte in cui i nodi possono inoltrare un pacchetto durante la trasmissione tra l'origine e destinazione. Se il numero di inoltro, noto anche come hop, supera il valore specificato per la durata (TTL), il pacchetto viene considerato non recapitabile e viene ignorato.  
  
 Il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> valore specificato nella richiesta echo di ICMP controlla la frammentazione del pacchetto. Se <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> viene `true` e le dimensioni del pacchetto superano le unità di trasmissione massima del percorso di rete del pacchetto, questo viene scartato e <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig> viene restituito l'errore.  
  
   
  
## Examples  
 Esempio di codice seguente invia una richiesta echo ICMP in modo sincrono e vengono visualizzati i valori archiviati nel <xref:System.Net.NetworkInformation.PingOptions> oggetto restituito da questa proprietà.  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di millisecondi impiegati per inviare una richiesta echo ICMP (Internet Control Message Protocol) e per ricevere il messaggio di risposta echo ICMP corrispondente.</summary>
        <value>Oggetto <see cref="T:System.Int64" /> che specifica il tempo di round trip in millisecondi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la richiesta Echo non riesce, il <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> volta che viene segnalato come 0, che è anche un valore valido quando la richiesta ha esito positivo. È necessario controllare il <xref:System.Net.NetworkInformation.PingReply.Status%2A> per determinare se il valore restituito da questa proprietà deve essere ignorato.  
  
   
  
## Examples  
 Esempio di codice seguente invia una richiesta echo ICMP in modo sincrono e Visualizza la dimensione del buffer restituito da questa proprietà.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene lo stato di un tentativo di inviare una richiesta echo del protocollo ICMP e ricevere il rispettivo messaggio di risposta echo del protocollo ICMP.</summary>
        <value>Valore <see cref="T:System.Net.NetworkInformation.IPStatus" /> che indica il risultato della richiesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore di <xref:System.Net.NetworkInformation.PingReply.Status%2A> non è <xref:System.Net.NetworkInformation.IPStatus.Success>, non è consigliabile usare i valori restituiti dai <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> o <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> proprietà. Il <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> e <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> proprietà restituiranno zero e il <xref:System.Net.NetworkInformation.PingReply.Options%2A> proprietà restituirà `null`.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare <xref:System.Net.NetworkInformation.Ping> classe per inviare una richiesta echo ICMP in modo sincrono e Visualizza la risposta.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>