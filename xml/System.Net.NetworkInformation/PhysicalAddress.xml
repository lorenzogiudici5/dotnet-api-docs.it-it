<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PhysicalAddress.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac560936bae143ea68d22d99243f51e63e4ba126f83.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60936bae143ea68d22d99243f51e63e4ba126f83</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.NetworkInformation.PhysicalAddress">
          <source>Provides the Media Access Control (MAC) address for a network interface (adapter).</source>
          <target state="translated">Fornisce l'indirizzo MAC (Media Access Control) dell'interfaccia di rete, o scheda.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.NetworkInformation.PhysicalAddress">
          <source>The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.</source>
          <target state="translated">L'indirizzo MAC o un indirizzo fisico, è un indirizzo di hardware che identifica in modo univoco ogni nodo, ad esempio un computer o una stampante, in una rete.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.NetworkInformation.PhysicalAddress">
          <source>Instances of this class are returned by the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Le istanze di questa classe vengono restituite dal <ph id="ph1">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.NetworkInformation.PhysicalAddress">
          <source>The following code example displays the physical addresses of all interfaces on the local computer.</source>
          <target state="translated">Esempio di codice seguente consente di visualizzare gli indirizzi fisici di tutte le interfacce del computer locale.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> array containing the address.</source>
          <target state="translated">Matrice <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> contenente l'indirizzo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A&gt;</ph> method.</source>
          <target state="translated">In comune, scenari di applicazioni non è necessario chiamare questo costruttore. le istanze di questa classe vengono restituite dal <ph id="ph1">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>Note that you can also use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> method to create a new instance of <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph>.</source>
          <target state="translated">Si noti che è anche possibile usare il <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> metodo per creare una nuova istanza della <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>The following code example creates a new <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> object.</source>
          <target state="translated">Esempio di codice seguente crea un nuovo <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> to compare to the current instance.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> da confrontare con l'istanza corrente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
          <source>Compares two <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> instances.</source>
          <target state="translated">Confronta due istanze di <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this instance and the specified instance contain the same address; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se questa istanza e l'istanza specificata contengono lo stesso indirizzo; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
          <source>The following code example compares two <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instances.</source>
          <target state="translated">Esempio di codice seguente vengono confrontate due <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> istanze.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
          <source>Returns the address of the current instance.</source>
          <target state="translated">Restituisce l'indirizzo dell'istanza corrente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> array containing the address.</source>
          <target state="translated">Matrice <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> contenente l'indirizzo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
          <source>The following code example calls this method to retrieve the address of a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> and formats the address for display.</source>
          <target state="translated">Esempio di codice seguente chiama questo metodo per recuperare l'indirizzo di un <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> e formatta l'indirizzo per la visualizzazione.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode">
          <source>Returns the hash value of a physical address.</source>
          <target state="translated">Restituisce il valore hash di un indirizzo fisico.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode">
          <source>An integer hash value.</source>
          <target state="translated">Valore hash intero.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Net.NetworkInformation.PhysicalAddress.None">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> instance with a zero length address.</source>
          <target state="translated">Restituisce una nuova istanza <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> con un indirizzo a lunghezza zero.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Net.NetworkInformation.PhysicalAddress.None">
          <source>This field is read-only.</source>
          <target state="translated">Questo campo è di sola lettura.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.NetworkInformation.PhysicalAddress.None">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> method returns <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.None&gt;</ph> if you specify <ph id="ph3">`null`</ph> address.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> restituisce <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.None&gt;</ph> se si specifica <ph id="ph3">`null`</ph> indirizzo.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.NetworkInformation.PhysicalAddress.None">
          <source>The following code example demonstrates using this field to test the result of parsing an address.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo di questo campo per verificare il risultato dell'analisi di un indirizzo.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the address that will be used to initialize the <ph id="ph2">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> instance returned by this method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> contenente l'indirizzo che verrà utilizzato per inizializzare l'istanza <ph id="ph2">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> restituita da questo metodo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>Parses the specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> and stores its contents as the address bytes of the <ph id="ph2">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> returned by this method.</source>
          <target state="translated">Analizza <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> specificato e ne memorizza il contenuto come byte dell'indirizzo di classe <ph id="ph2">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> restituito da questo metodo.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> instance with the specified address.</source>
          <target state="translated">Istanza <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> con l'indirizzo specificato.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>The <ph id="ph1">`address`</ph> parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.</source>
          <target state="translated">Il <ph id="ph1">`address`</ph> parametro deve contenere una stringa che può contenere solo numeri e lettere maiuscole come cifre esadecimali.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>Some examples of string formats that are acceptable are as follows:</source>
          <target state="translated">Alcuni esempi di formati di stringa accettabili sono come segue:</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>Note that an address that contains <ph id="ph1">`f0-e1-d2-c3-b4-a5`</ph> will fail to parse and throw an exception.</source>
          <target state="translated">Si noti che un indirizzo che contiene <ph id="ph1">`f0-e1-d2-c3-b4-a5`</ph> avrà esito negativo analizzare e generare un'eccezione.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A&gt;</ph> method to retrieve the address from an existing <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instance.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A&gt;</ph> metodo per recuperare l'indirizzo da un oggetto esistente <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> istanza.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instance by calling the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> method.</source>
          <target state="translated">L'esempio di codice seguente crea un <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> istanza chiamando il <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="address" /&gt;</ph> parameter contains an illegal hardware address.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="address" /&gt;</ph> contiene un indirizzo hardware non valido.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>This exception also occurs if the <ph id="ph1">&lt;paramref name="address" /&gt;</ph> parameter contains a string in the incorrect format.</source>
          <target state="translated">Questa eccezione si verifica anche se il parametro <ph id="ph1">&lt;paramref name="address" /&gt;</ph> contiene una stringa in formato non corretto.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> representation of the address of this instance.</source>
          <target state="translated">Restituisce la rappresentazione <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> dell'indirizzo di questa istanza.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the address contained in this instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> contenente l'indirizzo contenuto in questa istanza.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
          <source>The following code example demonstrates displaying the address in a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instance.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come visualizzare l'indirizzo in un <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> istanza.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>