<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="964d3143e4c0a1054b825d4c6caea94d0f45f70b" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46597643" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Consente a un'applicazione di determinare se un computer remoto è accessibile sulla rete.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le applicazioni utilizzano il <xref:System.Net.NetworkInformation.Ping> classe per determinare se un computer remoto è raggiungibile.  
  
 Topologia di rete è possibile determinare se <xref:System.Net.NetworkInformation.Ping> in grado di contattare un host remoto. La presenza e la configurazione del proxy, apparecchiature translation (NAT) indirizzo di rete o firewall può impedire <xref:System.Net.NetworkInformation.Ping> dai successivi. Una corretta <xref:System.Net.NetworkInformation.Ping> indica solo che il computer remoto host sia raggiungibile in rete, la presenza di servizi di livello superiore (ad esempio, un server Web) nell'host remoto non è garantita.  
  
 Questa classe fornisce funzionalità simili per lo strumento da riga di comando Ping.exe. Il <xref:System.Net.NetworkInformation.Ping.Send%2A> e <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi inviano un messaggio di richiesta echo di Internet controllo Message Protocol (ICMP) da un computer remoto e attende un messaggio di risposta echo ICMP da quel computer. Per una descrizione dettagliata dei messaggi ICMP, vedere il documento RFC 792, disponibile all'indirizzo [ https://www.ietf.org ](https://www.ietf.org/).  
  
 I tipi seguenti vengono usati con il <xref:System.Net.NetworkInformation.Ping> classe e sono descritti in dettaglio di seguito.  
  
|**Nome del tipo**|**Descrizione**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|Definisce i codici di stato che descrivono il risultato di un messaggio di richiesta echo ICMP.|  
|<xref:System.Net.NetworkInformation.PingOptions>|Consente di configurare o recuperare le impostazioni che controllano il numero di volte il pacchetto di richiesta possono essere inoltrate (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>), e se è possibile frammentare (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|  
|<xref:System.Net.NetworkInformation.PingReply>|Contiene i risultati di una richiesta echo ICMP.|  
|<xref:System.Net.NetworkInformation.PingException>|Generata se si verifica un errore irreversibile.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Contiene i dati associati <xref:System.Net.NetworkInformation.Ping.PingCompleted> gli eventi di eccezione generata quando un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamata viene completata o annullata.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|Il delegato che fornisce il metodo di callback richiamato quando un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamata viene completata o annullata.|  
  
 Il <xref:System.Net.NetworkInformation.Ping.Send%2A> e <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi restituiscono la risposta in un <xref:System.Net.NetworkInformation.PingReply> oggetto. Il <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType> proprietà restituisce un <xref:System.Net.NetworkInformation.IPStatus> valore per indicare il risultato della richiesta.  
  
 Quando si invia la richiesta, è necessario specificare il computer remoto. È possibile farlo, fornendo la stringa del nome e un indirizzo IP in formato stringa, un host o un <xref:System.Net.IPAddress> oggetto.  
  
 È inoltre possibile specificare uno dei seguenti tipi di informazioni:  
  
-   Dati da associare alla richiesta. Specificando `buffer` , è possibile conoscere la quantità di tempo necessario per un pacchetto di una determinata dimensione da e verso l'host remoto e l'unità di trasmissione massima del percorso di rete. (Vedere la <xref:System.Net.NetworkInformation.Ping.Send%2A> oppure <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> esegue l'overload che accettano un `buffer` parametro.)  
  
-   Se il pacchetto ICMP Echo può essere frammentato in transito. (Vedere la <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà e il <xref:System.Net.NetworkInformation.Ping.Send%2A> oppure <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload che accettano un `options` parametro.)  
  
-   Quante volte ai nodi di routing, ad esempio i router o gateway per inoltrare il pacchetto prima che raggiunga il computer di destinazione o viene eliminato. (Vedere <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> e il <xref:System.Net.NetworkInformation.Ping.Send%2A> oppure <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload che accettano un `options` parametro.)  
  
-   Il limite di tempo entro il quale deve essere ricevuta la risposta. (Vedere la <xref:System.Net.NetworkInformation.Ping.Send%2A> oppure <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> esegue l'overload che accettano un `timeout` parametro.  
  
 Il <xref:System.Net.NetworkInformation.Ping> classe offre metodi sincroni e asincroni per l'invio della richiesta. Se l'applicazione si blocchi durante l'attesa di una risposta, utilizzare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni. Se l'applicazione non deve bloccare, usare asincrona <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi. Una chiamata a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Le applicazioni usano un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato per specificare il metodo che viene chiamato per <xref:System.Net.NetworkInformation.Ping.PingCompleted> gli eventi. È necessario aggiungere un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
 Non è possibile utilizzare la stessa istanza del <xref:System.Net.NetworkInformation.Ping> classe per cui generare più richieste Echo ICMP contemporaneamente. La chiamata <xref:System.Net.NetworkInformation.Ping.Send%2A> mentre un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamata è in corso o chiamare il metodo <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> più volte prima di tutte le chiamate precedenti sono completate, verrà generata un' <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 Esempio di codice seguente illustra l'uso di <xref:System.Net.NetworkInformation.Ping> classe in modo sincrono.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 Esempio di codice seguente illustra l'uso di <xref:System.Net.NetworkInformation.Ping> classe in modo asincrono.  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/how-to-ping-a-host.md">Procedura: Eseguire il ping di un host</related>
    <related type="Article" href="~/docs/framework/network-programming/index.md">Programmazione di rete in .NET Framework</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">Esempi di programmazione di rete</related>
    <related type="Article" href="~/docs/framework/network-programming/networkinformation.md">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.NetworkInformation.Ping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrata la creazione un <xref:System.Net.NetworkInformation.Ping> istanza. L'esempio completo è disponibile nel <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate dall'oggetto <see cref="T:System.Net.NetworkInformation.Ping" /> ed eventualmente elimina le risorse gestite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato da parte del pubblico `Dispose()` metodo e <xref:System.ComponentModel.Component.Finalize%2A> (metodo). Pubblico `Dispose()` metodo richiama il metodo protetto <xref:System.Net.NetworkInformation.Ping.Dispose%2A> metodo con il `disposing` parametro impostato su `true`. <xref:System.ComponentModel.Component.Finalize%2A> richiama `Dispose` con `disposing` impostato su `false`.  
  
 Quando la `disposing` parametro è `true`, questo metodo rilascia tutte le risorse utilizzate da qualsiasi oggetto gestito da questo <xref:System.Net.NetworkInformation.Ping> riferimenti a oggetti. Il metodo richiama il metodo `Dispose()` di ciascun oggetto cui viene fatto riferimento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> contenente i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classi che ereditano dal <xref:System.Net.NetworkInformation.Ping> può eseguire l'override di questo metodo per eseguire attività aggiuntive, ad esempio la registrazione dei dati contenuti nella classe di `e` parametro.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> in una classe derivata, accertarsi di chiamare la classe di base <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un'operazione di l'invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) e relativa ricezione di un messaggio di risposta echo ICMP viene completata o annullata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le applicazioni utilizzano le <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventi per ottenere informazioni sullo stato di completamento e i dati raccolti da una chiamata a uno del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi. Il <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato fornisce la chiamata al metodo di callback richiamato quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera questo evento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata la specifica di un metodo di callback per il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. L'esempio completo è disponibile nel <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) a un computer remoto e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'indirizzo IP restituito da uno qualsiasi del <xref:System.Net.NetworkInformation.Ping.Send%2A> gli overload possono provenire da un computer remoto non autorizzato. Non si connettono al computer remoto usando questo. Usare DNS per determinare l'indirizzo IP del computer in cui si desidera connettersi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">Oggetto <see cref="T:System.Net.IPAddress" /> che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) a un computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer.</summary>
        <returns>Oggetto <see cref="T:System.Net.NetworkInformation.PingReply" /> che fornisce informazioni sul messaggio di risposta echo ICMP, se ne è stato ricevuto uno, o descrive il motivo dell'esito negativo in caso contrario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo invia all'host specificato da `address` un 32 <xref:System.Byte> buffer dei dati con il messaggio echo ICMP. Il metodo attende cinque secondi per un messaggio di risposta echo ICMP. Se non riceve una risposta in quel momento, il metodo viene restituito e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Il pacchetto o i frammenti di pacchetto (se frammentati) possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.Send%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare questo metodo.  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Oggetto <see cref="T:System.String" /> che identifica il computer di destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo.</summary>
        <returns>Oggetto <see cref="T:System.Net.NetworkInformation.PingReply" /> che fornisce informazioni sul messaggio di risposta echo ICMP, se ne è stato ricevuto uno, o descrive il motivo dell'esito negativo in caso contrario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo invia un 32 <xref:System.Byte> buffer dei dati con il messaggio echo ICMP. Il metodo attende cinque secondi per un messaggio di risposta echo ICMP. Se non riceve una risposta in quel momento, il metodo viene restituito e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Il pacchetto o i frammenti di pacchetto (se frammentati) possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.Send%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare questo metodo.  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> è <see langword="null" /> o è una stringa vuota ("").</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP. Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">Oggetto <see cref="T:System.Net.IPAddress" /> che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer. Questo metodo consente di specificare un valore di timeout per l'operazione.</summary>
        <returns>Oggetto <see cref="T:System.Net.NetworkInformation.PingReply" /> che fornisce informazioni sul messaggio di risposta echo ICMP, se ne è stato ricevuto uno, o descrive il motivo dell'esito negativo in caso contrario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato nella `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Il pacchetto o i frammenti di pacchetto possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.Send%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Per un esempio in cui viene illustrato come chiamare una <xref:System.Net.NetworkInformation.Ping.Send%2A> metodo, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Oggetto <see cref="T:System.String" /> che identifica il computer di destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo. Questo metodo consente di specificare un valore di timeout per l'operazione.</summary>
        <returns>Oggetto <see cref="T:System.Net.NetworkInformation.PingReply" /> che fornisce informazioni sul messaggio di risposta echo ICMP, se ne è stato ricevuto uno, o descrive il motivo dell'esito negativo in caso contrario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato nella `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Il pacchetto o i frammenti di pacchetto (se frammentati) possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.Send%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Per un esempio in cui viene illustrato come chiamare una <xref:System.Net.NetworkInformation.Ping.Send%2A> metodo, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> è <see langword="null" /> o è una stringa vuota ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Oggetto <see cref="T:System.Net.IPAddress" /> che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer. Questo overload consente di specificare un valore di timeout per l'operazione.</summary>
        <returns>Oggetto <see cref="T:System.Net.NetworkInformation.PingReply" /> che fornisce informazioni sul messaggio di risposta echo ICMP, se ne è stato ricevuto uno, o descrive il motivo dell'esito negativo in caso contrario. Il metodo restituisce il valore <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> se il pacchetto supera l'unità di trasmissione massima (MTU, Maximum Transmission Unit).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato nella `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Il pacchetto o i frammenti di pacchetto possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.Send%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare questo metodo.  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano i 65.500 byte.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" /> o la dimensione di <paramref name="buffer" /> è superiore a 65.500 byte.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Oggetto <see cref="T:System.String" /> che identifica il computer di destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo. Questo overload consente di specificare un valore di timeout per l'operazione.</summary>
        <returns>Oggetto <see cref="T:System.Net.NetworkInformation.PingReply" /> che fornisce informazioni sul messaggio di risposta echo ICMP, se ne è stato ricevuto uno, o descrive il motivo dell'esito negativo in caso contrario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato nella `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Il pacchetto o i frammenti di pacchetto possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.Send%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Per un esempio che illustra come chiamare una <xref:System.Net.NetworkInformation.Ping.Send%2A> di overload, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano i 65.500 byte.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> è <see langword="null" /> o è una stringa vuota ("").  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" /> o la dimensione di <paramref name="buffer" /> è superiore a 65.500 byte.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">Oggetto <see cref="T:System.Net.IPAddress" /> che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <param name="options">Oggetto <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilizzato per controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</param>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer. Questo overload consente di specificare un valore di timeout per l'operazione e di controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</summary>
        <returns>Oggetto <see cref="T:System.Net.NetworkInformation.PingReply" /> che fornisce informazioni sul messaggio di risposta echo ICMP, se ne è stato ricevuto uno, o descrive il motivo dell'esito negativo in caso contrario. Il metodo restituisce il valore <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> se il pacchetto supera l'unità di trasmissione massima (MTU, Maximum Transmission Unit).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato dal `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Se il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è di proprietà `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Usare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà per specificare il numero massimo di volte in cui può essere inoltrato prima di raggiungere la destinazione del messaggio echo ICMP. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare questo metodo.  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano i 65.500 byte.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" /> o la dimensione di <paramref name="buffer" /> è superiore a 65.500 byte.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Oggetto <see cref="T:System.String" /> che identifica il computer di destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <param name="options">Oggetto <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilizzato per controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</param>
        <summary>Esegue un tentativo di invio di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo. Questo overload consente di specificare un valore di timeout per l'operazione e di controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto ICMP.</summary>
        <returns>Oggetto <see cref="T:System.Net.NetworkInformation.PingReply" /> che fornisce informazioni sul messaggio di risposta echo ICMP, se ne è stato ricevuto uno, o descrive il motivo dell'esito negativo in caso contrario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato dal `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Se il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è di proprietà `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Usare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà per specificare il numero massimo di volte in cui può essere inoltrato prima di raggiungere la destinazione del messaggio echo ICMP. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare questo metodo.  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano i 65.500 byte.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> è <see langword="null" /> o è una stringa di lunghezza zero.  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" /> o la dimensione di <paramref name="buffer" /> è superiore a 65.500 byte.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) a un computer remoto e riceve il messaggio di risposta echo ICMP corrispondente dal quel computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questi metodi non bloccano thread principale dell'applicazione bloccare. Se si desidera bloccare il thread in attesa del messaggio di risposta echo ICMP, usare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi.  
  
> [!NOTE]
>  L'indirizzo IP restituito da uno qualsiasi del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi possono provenire da un computer remoto non autorizzato. Non si connettono al computer remoto usando questo. Usare DNS per determinare l'indirizzo IP del computer in cui si desidera connettersi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Oggetto <see cref="T:System.Net.IPAddress" /> che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="userToken">Oggetto passato al metodo richiamato al completamento dell'operazione asincrona.</param>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) a un computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo invia un messaggio echo in modo asincrono e, al termine dell'operazione (con esito positivo o negativo), restituisce lo stato all'applicazione. Chiamare il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo quando l'applicazione non deve bloccare. Ogni chiamata a questo metodo viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Per specificare il metodo che viene chiamato quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera l'evento, è necessario aggiungere un' <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare. Il <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto eredita le <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> proprietà. Questa proprietà contiene il `userToken` oggetto passato nel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
> [!NOTE]
>  Se l'applicazione si blocchi durante l'attesa di una risposta, utilizzare uno del <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni.  
  
 Questo metodo invia un 32 <xref:System.Byte> buffer dei dati con il messaggio echo ICMP. Il metodo attende cinque secondi per un messaggio di risposta echo ICMP. Se non riceve una risposta in quel momento, il metodo viene restituito e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Il pacchetto o i frammenti di pacchetto possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Per un esempio di codice che viene illustrato come chiamare una <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata al metodo <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> non è un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Oggetto <see cref="T:System.String" /> che identifica il computer di destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="userToken">Oggetto passato al metodo richiamato al completamento dell'operazione asincrona.</param>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo invia un messaggio echo in modo asincrono e, al termine dell'operazione (con esito positivo o negativo), restituisce lo stato all'applicazione. Chiamare il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo quando l'applicazione non deve bloccare. Ogni chiamata a questo metodo viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Per specificare il metodo che viene chiamato quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera l'evento, è necessario aggiungere un' <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare. Il <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto eredita le <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> proprietà. Questa proprietà contiene il `userToken` oggetto passato nel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
> [!NOTE]
>  Se l'applicazione si blocchi durante l'attesa di una risposta, utilizzare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni.  
  
 Questo metodo invia un 32 <xref:System.Byte> buffer dei dati con il messaggio echo ICMP. Il metodo attende cinque secondi per un messaggio di risposta echo ICMP. Se non riceve una risposta in quel momento il metodo viene restituito e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Il pacchetto o i frammenti di pacchetto possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Per un esempio di codice che viene illustrato come chiamare le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> è <see langword="null" /> o è una stringa vuota ("").</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata al metodo <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Non è possibile risolvere <paramref name="hostNameOrAddress" /> in un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Oggetto <see cref="T:System.Net.IPAddress" /> che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="userToken">Oggetto passato al metodo richiamato al completamento dell'operazione asincrona.</param>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) a un computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer. Questo overload consente di specificare un valore di timeout per l'operazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo invia un messaggio Echo in modo asincrono e, al termine dell'operazione (con esito positivo o negativo), restituisce lo stato all'applicazione. Chiamare il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo quando l'applicazione non deve bloccare. Ogni chiamata viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Le applicazioni usano un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato per specificare il metodo da chiamata quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera l'evento. È necessario aggiungere un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare. Il <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto eredita le <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> proprietà. Questa proprietà contiene il `userToken` oggetto passato nel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
 Se l'applicazione si blocchi durante l'attesa di una risposta, utilizzare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni.  
  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato dal `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Il pacchetto o i frammenti di pacchetto (se frammentati) possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Per un esempio di codice che viene illustrato come chiamare una <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> di overload, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata al metodo <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> non è un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Oggetto <see cref="T:System.String" /> che identifica il computer di destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="userToken">Oggetto passato al metodo richiamato al completamento dell'operazione asincrona.</param>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo. Questo overload consente di specificare un valore di timeout per l'operazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo invia un messaggio Echo in modo asincrono e, al termine dell'operazione (con esito positivo o negativo), restituisce lo stato all'applicazione. Chiamare il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo quando l'applicazione non deve bloccare. Ogni chiamata viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Le applicazioni usano un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato per specificare il metodo da chiamata quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera l'evento. È necessario aggiungere un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare. Il <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto eredita le <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> proprietà. Questa proprietà contiene il `userToken` oggetto passato nel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
 Se l'applicazione si blocchi durante l'attesa di una risposta, utilizzare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni.  
  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato dal `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Il pacchetto o i frammenti di pacchetto (se frammentati) possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Per un esempio di codice che viene illustrato come chiamare le <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> è <see langword="null" /> o è una stringa vuota ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Non è possibile risolvere <paramref name="hostNameOrAddress" /> in un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Oggetto <see cref="T:System.Net.IPAddress" /> che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <param name="userToken">Oggetto passato al metodo richiamato al completamento dell'operazione asincrona.</param>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer. Questo overload consente di specificare un valore di timeout per l'operazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo invia un messaggio echo in modo asincrono e, al termine dell'operazione (con esito positivo o negativo), restituisce lo stato all'applicazione. Chiamare il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo quando l'applicazione non deve bloccare. Ogni chiamata viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Per specificare il metodo che viene chiamato quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera l'evento, è necessario aggiungere un' <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare. Il <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto eredita le <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> proprietà. Questa proprietà contiene il `userToken` oggetto passato nel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
> [!NOTE]
>  Se l'applicazione si blocca durante l'attesa di una risposta, usare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni.  
  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato dal `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Il pacchetto o i frammenti di pacchetto (se frammentati) possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Per un esempio di codice che viene illustrato come chiamare una <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> di overload, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> non è un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano i 65.500 byte.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Oggetto <see cref="T:System.String" /> che identifica il computer di destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <param name="userToken">Oggetto passato al metodo richiamato al completamento dell'operazione asincrona.</param>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo. Questo overload consente di specificare un valore di timeout per l'operazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo invia un messaggio Echo in modo asincrono e, al termine dell'operazione (con esito positivo o negativo), restituisce lo stato all'applicazione. Chiamare il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo quando l'applicazione non deve bloccare. Ogni chiamata viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Le applicazioni usano un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato per specificare il metodo da chiamata quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera l'evento. È necessario aggiungere un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare. Il <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto eredita le <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> proprietà. Questa proprietà contiene il `userToken` oggetto passato nel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
 Se l'applicazione si blocchi durante l'attesa di una risposta, utilizzare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni.  
  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato dal `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Questo overload utilizza impostazioni predefinite per la frammentazione e l'inoltro del pacchetto. Il pacchetto che contiene il messaggio echo ICMP è possibile frammentare in transito se le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi da uno dei nodi di routing tra il computer locale e remoto. Per evitare la frammentazione, usare uno dei <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodi che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> proprietà `true`. Quando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. Il pacchetto o i frammenti di pacchetto (se frammentati) possono essere inoltrati dai nodi di routing 128 volte prima di essere eliminato. Per modificare questa impostazione, utilizzare un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> overload che accetta un `options` parametro e impostare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà sul valore desiderato. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare una <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> di overload, vedere il <xref:System.Net.NetworkInformation.Ping> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> è <see langword="null" /> o è una stringa vuota ("").  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Non è possibile risolvere <paramref name="hostNameOrAddress" /> in un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano i 65.500 byte.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Oggetto <see cref="T:System.Net.IPAddress" /> che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <param name="options">Oggetto <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilizzato per controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</param>
        <param name="userToken">Oggetto passato al metodo richiamato al completamento dell'operazione asincrona.</param>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer. Questo overload consente di specificare un valore di timeout per l'operazione e di controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo invia un messaggio Echo in modo asincrono e, al termine dell'operazione (con esito positivo o negativo), restituisce lo stato all'applicazione. Chiamare il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo quando l'applicazione non deve bloccarsi. Ogni chiamata viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Le applicazioni usano un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato per specificare il metodo da chiamata quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera l'evento. È necessario aggiungere un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare. Il <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto eredita le <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> proprietà. Questa proprietà contiene il `userToken` oggetto passato nel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
 Se l'applicazione si blocca durante l'attesa di una risposta, usare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni.  
  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato dal `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Se il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è di proprietà `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Usare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà per specificare il numero massimo di volte in cui può essere inoltrato prima di raggiungere la destinazione del messaggio echo ICMP. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare questo metodo. Per un'implementazione del metodo di callback, vedere il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sezione esempio overload del metodo.  
  
 Esempio di codice seguente richiede spazi dei nomi seguenti:  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 Esempio di codice seguente invia un messaggio echo ICMP in modo asincrono.  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> non è un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano i 65.500 byte.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Oggetto <see cref="T:System.String" /> che identifica il computer di destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <param name="buffer">Valore <see cref="T:System.Int32" /> che specifica il numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="options">Oggetto <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilizzato per controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</param>
        <param name="userToken">Oggetto passato al metodo richiamato al completamento dell'operazione asincrona.</param>
        <summary>Esegue un tentativo di invio in modalità asincrona di un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo. Questo overload consente di specificare un valore di timeout per l'operazione e di controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo invia un messaggio Echo in modo asincrono e, al termine dell'operazione (con esito positivo o negativo), restituisce lo stato all'applicazione. Chiamare il <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> metodo quando l'applicazione non deve bloccarsi. Ogni chiamata viene eseguita in un thread separato che viene allocato automaticamente dal pool di thread. Al termine dell'operazione asincrona, genera il <xref:System.Net.NetworkInformation.Ping.PingCompleted> evento. Le applicazioni usano un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato per specificare il metodo da chiamata quando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> genera l'evento. È necessario aggiungere un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegato all'evento prima di chiamare <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. Il metodo del delegato riceve un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto che contiene un <xref:System.Net.NetworkInformation.PingReply> che descrive il risultato del <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare. Il <xref:System.Net.NetworkInformation.PingCompletedEventArgs> oggetto eredita le <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> proprietà. Questa proprietà contiene il `userToken` oggetto passato nel <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> chiamare.  
  
 Se l'applicazione si blocchi durante l'attesa di una risposta, utilizzare il <xref:System.Net.NetworkInformation.Ping.Send%2A> metodi; questi metodi sono sincroni.  
  
 Se il messaggio di risposta echo ICMP non viene ricevuto entro il tempo specificato dal `timeout` parametro, l'echo ICMP non riesce e il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Quando si specifica un numero molto limitato per `timeout`, la risposta del Ping può essere ricevuta anche se `timeout` millisecondi trascorsi.  
  
 Se il <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> è di proprietà `true` e le dimensioni del pacchetto complessivo superano le dimensioni massime che possono essere trasmessi tramite uno dei nodi di routing tra il computer locale e remoto, la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Usare il <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> proprietà per specificare il numero massimo di volte in cui può essere inoltrato prima di raggiungere la destinazione del messaggio echo ICMP. Se il pacchetto non raggiunge la destinazione dopo essere stato inoltrato il numero di volte specificato, questo viene scartato e la richiesta echo ICMP non riesce. In questo caso, il <xref:System.Net.NetworkInformation.PingReply.Status%2A> è impostata su <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come chiamare questo metodo.  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> è <see langword="null" /> o è una stringa vuota ("").  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> è un indirizzo IPv6 e il computer locale esegue un sistema operativo precedente a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Non è possibile risolvere <paramref name="hostNameOrAddress" /> in un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano i 65.500 byte.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Per inviare un messaggio echo ICMP.  
  
Enumerazione associata: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Annulla tutte le richieste di invio in modalità asincrona di messaggi echo ICMP (Internet Control Message Protocol) in sospeso e riceve un messaggio di risposta echo ICMP corrispondente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per terminare tutte le chiamate a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> che non sono state completate.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) a un computer remoto e riceve il messaggio di risposta echo ICMP corrispondente dal quel computer come operazione asincrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">Indirizzo IP che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer come operazione asincrona.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che il pacchetto ICMP è stato inviato e la risposta è stata ricevuta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> non è un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Computer che è la destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo come operazione asincrona.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che il pacchetto ICMP è stato inviato e la risposta è stata ricevuta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">Indirizzo IP che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer come operazione asincrona. Questo overload consente di specificare un valore di timeout per l'operazione.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che il pacchetto ICMP è stato inviato e la risposta è stata ricevuta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Computer che è la destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo come operazione asincrona. Questo overload consente di specificare un valore di timeout per l'operazione.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che il pacchetto ICMP è stato inviato e la risposta è stata ricevuta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Indirizzo IP che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer come operazione asincrona. Questo overload consente di specificare un valore di timeout per l'operazione e un buffer da utilizzare per inviare e ricevere.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che il pacchetto ICMP è stato inviato e la risposta è stata ricevuta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> non è un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano 65.500 byte.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Computer che è la destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo come operazione asincrona. Questo overload consente di specificare un valore di timeout per l'operazione e un buffer da utilizzare per inviare e ricevere.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che il pacchetto ICMP è stato inviato e la risposta è stata ricevuta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">Indirizzo IP che identifica il computer di destinazione del messaggio echo ICMP.</param>
        <param name="timeout">Numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <param name="options">Oggetto <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilizzato per controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</param>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer con il <see cref="T:System.Net.IPAddress" /> specificato e riceve il messaggio di risposta echo ICMP corrispondente da quel computer come operazione asincrona. Questo overload consente di specificare un valore di timeout per l'operazione, un buffer da utilizzare per inviare, ricevere e controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che il pacchetto ICMP è stato inviato e la risposta è stata ricevuta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> è <see langword="null" />.  
  
oppure 
 <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> è minore di zero.</exception>
        <exception cref="T:System.InvalidOperationException">È in corso una chiamata a <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">È stata generata un'eccezione durante l'invio o la ricezione di messaggi ICMP. Per conoscere l'eccezione esatta generata, vedere l'eccezione interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> non è un indirizzo IP valido.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato eliminato.</exception>
        <exception cref="T:System.ArgumentException">Le dimensioni di <paramref name="buffer" /> superano 65.500 byte.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">Computer che è la destinazione del messaggio echo ICMP. Il valore specificato per il parametro può essere un nome host o una rappresentazione in forma di stringa di un indirizzo IP.</param>
        <param name="timeout">Numero massimo di millisecondi durante i quali attendere il messaggio di risposta echo ICMP dopo l'invio del messaggio echo.</param>
        <param name="buffer">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare con il messaggio echo ICMP e restituiti nel messaggio di risposta echo ICMP. La matrice non può contenere più di 65.500 byte.</param>
        <param name="options">Oggetto <see cref="T:System.Net.NetworkInformation.PingOptions" /> utilizzato per controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</param>
        <summary>Invia un messaggio echo ICMP (Internet Control Message Protocol) con il buffer di dati specificato al computer remoto specificato e riceve il messaggio di risposta echo ICMP corrispondente da quest'ultimo come operazione asincrona. Questo overload consente di specificare un valore di timeout per l'operazione, un buffer da utilizzare per inviare, ricevere e controllare la frammentazione e i valori TTL (Time-to-Live) per il pacchetto del messaggio echo ICMP.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che il pacchetto ICMP è stato inviato e la risposta è stata ricevuta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>