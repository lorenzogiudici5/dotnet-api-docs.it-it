<Type Name="SemaphoreAccessRule" FullName="System.Security.AccessControl.SemaphoreAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f67fa043ffb0f46a4bb100dbb1f2ec2ced875e46" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36627577" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemaphoreAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type SemaphoreAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.AccessControl.SemaphoreAccessRule> classe fa parte di un set di classi .NET Framework fornisce per la gestione del controllo di accesso di Windows sui semafori di sistema denominato. Per una panoramica di queste classi e la loro relazione con le strutture di controllo di accesso Windows, vedere <xref:System.Security.AccessControl.SemaphoreSecurity>.  
  
> [!NOTE]
>  Controllo di accesso di Windows è significativo solo per i semafori di sistema denominato. Se un <xref:System.Threading.Semaphore> oggetto rappresenta un semaforo locale, il controllo di accesso è irrilevante.  
  
 Per ottenere un elenco delle regole applicate ad un semaforo denominato, usare il <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> metodo per ottenere un <xref:System.Security.AccessControl.SemaphoreSecurity> dell'oggetto, quindi usare il relativo <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> metodo per ottenere una raccolta di <xref:System.Security.AccessControl.SemaphoreAccessRule> oggetti.  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> gli oggetti non eseguano il mapping uno a uno con voci di controllo di accesso nell'elenco di controllo di accesso discrezionale (DACL) sottostante. Quando si ottiene il set di tutte le regole di accesso per un semaforo, il set contiene il numero minimo di regole necessarie per esprimere tutte le voci di controllo di accesso.  
  
> [!NOTE]
>  Voci di controllo di accesso sottostante è stata modificata è applicare e rimuovere le regole. Le informazioni nelle regole vengono unite se possibile, per mantenere il più piccolo numero di voci di controllo di accesso. Pertanto, quando si legge l'elenco corrente delle regole, potrebbe non apparire esattamente come l'elenco di tutte le regole che è stato aggiunto.  
  
 Utilizzare <xref:System.Security.AccessControl.SemaphoreAccessRule> oggetti per specificare i diritti di accesso per consentire o negare a un utente o gruppo. Oggetto <xref:System.Security.AccessControl.SemaphoreAccessRule> oggetto sempre rappresenta l'accesso consentito o negato l'accesso, non entrambi.  
  
 Per applicare una regola a una classe semaforo di sistema denominato, usare il <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> metodo per ottenere il <xref:System.Security.AccessControl.SemaphoreSecurity> oggetto. Modificare il <xref:System.Security.AccessControl.SemaphoreSecurity> oggetto mediante i metodi per aggiungere la regola e quindi usare il <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> metodo per ricollegare l'oggetto di sicurezza.  
  
> [!IMPORTANT]
>  Le modifiche apportate a un <xref:System.Security.AccessControl.SemaphoreSecurity> oggetto non influiscono sui livelli di accesso del semaforo denominato finché non si chiama il <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> metodo a cui assegnare l'oggetto di sicurezza modificato per il semaforo denominato.  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> gli oggetti non sono modificabili. Per modificare la protezione per un semaforo utilizzano i metodi del <xref:System.Security.AccessControl.SemaphoreSecurity> classe per aggiungere o rimuovere le regole; in tal caso, le voci di controllo di accesso sottostanti vengono modificate.  
  
> [!NOTE]
>  Sicurezza degli oggetti di sincronizzazione non è supportata per Windows 98 o Windows Millennium Edition.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra la separazione tra <xref:System.Security.AccessControl.AccessControlType.Allow> regole e <xref:System.Security.AccessControl.AccessControlType.Deny> regole e Mostra la combinazione di diritti nelle regole compatibili. Nell'esempio viene creato un <xref:System.Security.AccessControl.SemaphoreSecurity> oggetto, vengono aggiunte regole che consentano e negano i vari diritti per l'utente corrente e consente di visualizzare la coppia di regole risultante. Nell'esempio viene quindi consente nuovi diritti per l'utente corrente e viene visualizzato il risultato, che mostra che i nuovi diritti uniti esistente <xref:System.Security.AccessControl.AccessControlType.Allow> regola.  
  
> [!NOTE]
>  Questo esempio non viene associato l'oggetto di sicurezza per un <xref:System.Threading.Semaphore> oggetto. Esempi di allegare oggetti di sicurezza possono essere individuati <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As SemaphoreRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::SemaphoreRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.SemaphoreRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.SemaphoreAccessRule" Usage="new System.Security.AccessControl.SemaphoreAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">The user or group the rule applies to. Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights" /> values specifying the rights allowed or denied.</param>
        <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Immettere un <xref:System.Threading.Semaphore>, ad esempio chiamando il <xref:System.Threading.WaitHandle.WaitOne%2A> metodo, un utente deve avere <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> l'accesso. Per uscire dal semaforo chiamando il <xref:System.Threading.Semaphore.Release%2A> metodo, l'utente deve disporre <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> l'accesso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> specifies an invalid value.  -or-  <paramref name="type" /> specifies an invalid value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> is <see langword="null" />.  -or-  <paramref name="eventRights" /> is zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As SemaphoreRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreAccessRule(System::String ^ identity, System::Security::AccessControl::SemaphoreRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreAccessRule : string * System.Security.AccessControl.SemaphoreRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.SemaphoreAccessRule" Usage="new System.Security.AccessControl.SemaphoreAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">The name of the user or group the rule applies to.</param>
        <param name="eventRights">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights" /> values specifying the rights allowed or denied.</param>
        <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Immettere un <xref:System.Threading.Semaphore>, ad esempio chiamando il <xref:System.Threading.WaitHandle.WaitOne%2A> metodo, un utente deve avere <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> l'accesso. Per uscire dal semaforo chiamando il <xref:System.Threading.Semaphore.Release%2A> metodo, l'utente deve disporre <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> l'accesso.  
  
 Questo costruttore è equivalente alla creazione di un <xref:System.Security.Principal.NTAccount> oggetto passando `identity` per il <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> costruttore e il passaggio appena creato <xref:System.Security.Principal.NTAccount> dell'oggetto per il <xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29> costruttore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo costruttore per creare <xref:System.Security.AccessControl.SemaphoreAccessRule> oggetti. Nell'esempio viene creato un <xref:System.Security.AccessControl.SemaphoreSecurity> oggetto, vengono aggiunte regole che consentano e negano i vari diritti per l'utente corrente e consente di visualizzare la coppia di regole risultante. Nell'esempio viene quindi consente nuovi diritti per l'utente corrente e viene visualizzato il risultato, che mostra che i nuovi diritti uniti esistente <xref:System.Security.AccessControl.AccessControlType.Allow> regola.  
  
> [!NOTE]
>  Questo esempio non viene associato l'oggetto di sicurezza per un <xref:System.Threading.Semaphore> oggetto. Esempi di allegare oggetti di sicurezza possono essere individuati <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> specifies an invalid value.  -or-  <paramref name="type" /> specifies an invalid value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> is zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> is <see langword="null" />.  -or-  <paramref name="identity" /> is a zero-length string.  -or-  <paramref name="identity" /> is longer than 512 characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="SemaphoreRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.SemaphoreRights SemaphoreRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SemaphoreRights As SemaphoreRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::SemaphoreRights SemaphoreRights { System::Security::AccessControl::SemaphoreRights get(); };" />
      <MemberSignature Language="F#" Value="member this.SemaphoreRights : System.Security.AccessControl.SemaphoreRights" Usage="System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rights allowed or denied by the access rule.</summary>
        <value>Una combinazione bit per bit di <see cref="T:System.Security.AccessControl.SemaphoreRights" /> valori che indicano i diritti consentito o negato dalla regola di accesso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> gli oggetti non sono modificabili. È possibile creare una nuova regola di accesso che rappresenta un utente diverso, diritti differenti o un altro <xref:System.Security.AccessControl.AccessControlType>, ma non è possibile modificare una regola di accesso esistente.  
  
   
  
## Examples  
 Esempio di codice seguente illustra l'uso della <xref:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights%2A> proprietà per visualizzare i diritti nel set di regole contenute un <xref:System.Security.AccessControl.SemaphoreSecurity> oggetto. Nell'esempio viene creato un <xref:System.Security.AccessControl.SemaphoreSecurity> oggetto, vengono aggiunte regole che consentano e negano i vari diritti per l'utente corrente e consente di visualizzare la coppia di regole risultante. Nell'esempio viene quindi consente nuovi diritti per l'utente corrente e viene visualizzato il risultato, che mostra che i nuovi diritti uniti esistente <xref:System.Security.AccessControl.AccessControlType.Allow> regola.  
  
> [!NOTE]
>  Questo esempio non viene associato l'oggetto di sicurezza per un <xref:System.Threading.Semaphore> oggetto. Esempi di allegare oggetti di sicurezza possono essere individuati <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>