<Type Name="EventWaitHandleAccessRule" FullName="System.Security.AccessControl.EventWaitHandleAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f9b17a084af70636af63ec9df06b2f24148e87e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30489995" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta un insieme di diritti di accesso concessi o negati per un utente o gruppo. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Security.AccessControl.EventWaitHandleAccessRule> classe fa parte di un set di classi .NET Framework fornisce per la gestione del controllo di accesso di Windows gli eventi di sistema denominato. Per una panoramica di queste classi e la loro relazione con le strutture di controllo di accesso Windows, vedere <xref:System.Security.AccessControl.EventWaitHandleSecurity>.  
  
> [!NOTE]
>  Controllo di accesso di Windows è significativo solo per gli eventi di sistema denominato. Se un <xref:System.Threading.EventWaitHandle> oggetto rappresenta un evento locale, il controllo di accesso è irrilevante.  
  
 Per ottenere un elenco di regole attualmente applicate a un evento denominato, usare il <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> metodo per ottenere un <xref:System.Security.AccessControl.EventWaitHandleSecurity> oggetto, quindi utilizzare il relativo <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> per ottenere una raccolta di <xref:System.Security.AccessControl.EventWaitHandleAccessRule> oggetti.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> gli oggetti non eseguano il mapping uno a uno con le voci di controllo di accesso nell'elenco di controllo di accesso discrezionale (DACL) sottostante. Quando si ottiene il set di tutte le regole di accesso per un evento, il set contiene il numero minimo di regole necessarie per esprimere tutte le voci di controllo di accesso.  
  
> [!NOTE]
>  Le voci di controllo accesso modificare quando si applicano e rimuovere le regole. Le informazioni nelle regole vengono unite, se possibile, per mantenere il più piccolo numero di voci di controllo di accesso. Pertanto, quando si ottiene l'elenco corrente delle regole, potrebbe non apparire esattamente come l'elenco di tutte le regole di cui che è stato aggiunto.  
  
 Utilizzare <xref:System.Security.AccessControl.EventWaitHandleAccessRule> gli oggetti per specificare i diritti di accesso per consentire o negare a un utente o gruppo. Un <xref:System.Security.AccessControl.EventWaitHandleAccessRule> oggetto sempre rappresenta l'accesso consentito o negato l'accesso, non entrambi.  
  
 Per applicare una regola a un evento di sistema denominato, utilizzare il <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> metodo per ottenere il <xref:System.Security.AccessControl.EventWaitHandleSecurity> oggetto. Modificare il <xref:System.Security.AccessControl.EventWaitHandleSecurity> oggetto mediante i metodi per aggiungere la regola e quindi usare il <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> metodo per ricollegare l'oggetto di sicurezza.  
  
> [!IMPORTANT]
>  Le modifiche apportate a un <xref:System.Security.AccessControl.EventWaitHandleSecurity> oggetto non influiscono sui livelli di accesso dell'evento denominato finché non si chiama il <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> metodo a cui assegnare l'oggetto di sicurezza modificato per l'evento.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> gli oggetti non sono modificabili. Per modificare la protezione per un evento tramite i metodi del <xref:System.Security.AccessControl.EventWaitHandleSecurity> classe per aggiungere o rimuovere regole; in tal caso, le voci di controllo di accesso vengono modificate.  
  
> [!NOTE]
>  Sicurezza degli oggetti di sincronizzazione non è supportata per Windows 98 o Windows Millennium Edition.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata la creazione e utilizzo di <xref:System.Security.AccessControl.EventWaitHandleAccessRule> oggetti. Nell'esempio viene creato un <xref:System.Security.AccessControl.EventWaitHandleSecurity> oggetto, vengono aggiunte regole che concedono e negano diversi diritti per l'utente corrente e consente di visualizzare la coppia di regole risultante. Nell'esempio viene quindi concessi nuovi diritti per l'utente corrente e viene visualizzato il risultato, che mostra i nuovi diritti vengono uniti con esistente <xref:System.Security.AccessControl.AccessControlType.Allow> regola.  
  
> [!NOTE]
>  Questo esempio non viene associato l'oggetto di sicurezza per un <xref:System.Threading.EventWaitHandle> oggetto. Esempi di oggetti di sicurezza possono essere individuati <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Utente o gruppo a cui viene applicata la regola. Deve essere di tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> o di un tipo quale <see cref="T:System.Security.Principal.NTAccount" /> che può essere convertito nel tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">Combinazione bit per bit di valori <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> che specificano i diritti concessi o negati.</param>
        <param name="type">Uno dei valori di <see cref="T:System.Security.AccessControl.AccessControlType" /> che specificano se i diritti sono concessi o negati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> specificando l'utente o il gruppo a cui la regola viene applicata, i diritti di accesso e se i diritti di accesso specificati sono concessi o negati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In attesa di un <xref:System.Threading.EventWaitHandle> (chiamando il <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> o <xref:System.Threading.WaitHandle.WaitAll%2A> metodo), un utente deve disporre <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> accesso. Per segnalare un evento chiamando il <xref:System.Threading.EventWaitHandle.Set%2A> metodo, o per ripristinarlo allo stato segnalato chiamando il <xref:System.Threading.EventWaitHandle.Reset%2A> metodo, un utente deve avere <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> accesso. Per segnalare un <xref:System.Threading.EventWaitHandle> dell'oggetto e quindi l'attesa chiamando il <xref:System.Threading.WaitHandle.SignalAndWait%2A> metodo, un utente deve avere <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> e <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> accesso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> specifica un valore non valido.  
  
 oppure  
  
 <paramref name="type" /> specifica un valore non valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="eventRights" /> è zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> non è di tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> né di un tipo quale <see cref="T:System.Security.Principal.NTAccount" /> che può essere convertito nel tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::String ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nome dell'utente o del gruppo a cui la regola viene applicata.</param>
        <param name="eventRights">Combinazione bit per bit di valori <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> che specificano i diritti concessi o negati.</param>
        <param name="type">Uno dei valori di <see cref="T:System.Security.AccessControl.AccessControlType" /> che specificano se i diritti sono concessi o negati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> specificando il nome dell'utente o del gruppo a cui la regola viene applicata, i diritti di accesso e se i diritti di accesso specificati sono concessi o negati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In attesa di un <xref:System.Threading.EventWaitHandle> (chiamando il <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> o <xref:System.Threading.WaitHandle.WaitAll%2A> metodo), un utente deve disporre <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> accesso. Per segnalare un evento chiamando il <xref:System.Threading.EventWaitHandle.Set%2A> metodo, o per ripristinarlo allo stato segnalato chiamando il <xref:System.Threading.EventWaitHandle.Reset%2A> metodo, un utente deve avere <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> accesso. Per segnalare un <xref:System.Threading.EventWaitHandle> dell'oggetto e quindi l'attesa chiamando il <xref:System.Threading.WaitHandle.SignalAndWait%2A> metodo, un utente deve avere <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> e <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> accesso.  
  
 Questo costruttore è equivalente alla creazione di un <xref:System.Security.Principal.NTAccount> oggetto, passando `identity` per il <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> costruttore e passando l'oggetto appena creato <xref:System.Security.Principal.NTAccount> dell'oggetto per il <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> costruttore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di questo costruttore per creare <xref:System.Security.AccessControl.EventWaitHandleAccessRule> oggetti. Nell'esempio viene creato un <xref:System.Security.AccessControl.EventWaitHandleSecurity> oggetto, vengono aggiunte regole che concedono e negano diversi diritti per l'utente corrente e consente di visualizzare la coppia di regole risultante. Nell'esempio viene quindi concessi nuovi diritti per l'utente corrente e viene visualizzato il risultato, che mostra i nuovi diritti vengono uniti con esistente <xref:System.Security.AccessControl.AccessControlType.Allow> regola.  
  
> [!NOTE]
>  Questo esempio non viene associato l'oggetto di sicurezza per un <xref:System.Threading.EventWaitHandle> oggetto. Esempi di oggetti di sicurezza possono essere individuati <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> specifica un valore non valido.  
  
 oppure  
  
 <paramref name="type" /> specifica un valore non valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> è zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="identity" /> è una stringa di lunghezza zero.  
  
 oppure  
  
 La lunghezza di <paramref name="identity" /> supera i 512 caratteri.</exception>
      </Docs>
    </Member>
    <Member MemberName="EventWaitHandleRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::EventWaitHandleRights EventWaitHandleRights { System::Security::AccessControl::EventWaitHandleRights get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i diritti concessi o negati dalla regola di accesso.</summary>
        <value>Combinazione bit per bit di valori <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> che indicano i diritti concessi o negati dalla regola di accesso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> gli oggetti non sono modificabili. È possibile creare una nuova regola di accesso che rappresenta un utente diverso, diritti diversi o un altro <xref:System.Security.AccessControl.AccessControlType>, ma non è possibile modificare una regola di accesso esistente.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A> proprietà per visualizzare i diritti nel set di regole contenute un <xref:System.Security.AccessControl.EventWaitHandleSecurity> oggetto. Nell'esempio viene creato un <xref:System.Security.AccessControl.EventWaitHandleSecurity> oggetto, vengono aggiunte regole che concedono e negano diversi diritti per l'utente corrente e consente di visualizzare la coppia di regole risultante. Nell'esempio viene quindi concessi nuovi diritti per l'utente corrente e viene visualizzato il risultato, che mostra i nuovi diritti vengono uniti con esistente <xref:System.Security.AccessControl.AccessControlType.Allow> regola.  
  
> [!NOTE]
>  Questo esempio non viene associato l'oggetto di sicurezza per un <xref:System.Threading.EventWaitHandle> oggetto. Esempi di oggetti di sicurezza possono essere individuati <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> e <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>