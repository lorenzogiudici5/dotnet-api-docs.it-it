<Type Name="RegistryAuditRule" FullName="System.Security.AccessControl.RegistryAuditRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f9a178fd0f55f115855c943b600490aac66f873" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36532323" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistryAuditRule : System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAuditRule extends System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAuditRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAuditRule&#xA;Inherits AuditRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAuditRule sealed : System::Security::AccessControl::AuditRule" />
  <TypeSignature Language="F#" Value="type RegistryAuditRule = class&#xA;    inherit AuditRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AuditRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a set of access rights to be audited for a user or group. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.AccessControl.RegistryAuditRule> classe fa parte di un set di classi .NET Framework fornisce per la gestione del controllo di accesso di Windows nelle chiavi del Registro di sistema. Per una panoramica di queste classi e la loro relazione con le strutture di controllo di accesso Windows, vedere <xref:System.Security.AccessControl.RegistrySecurity>.  
  
> [!NOTE]
>  Controllo di accesso di Windows può essere applicato solo alle chiavi del Registro di sistema. Non può essere applicato alle coppie chiave/valore singoli archiviate in una chiave.  
  
 Per ottenere un elenco delle regole di controllo attualmente applicate a una chiave del Registro di sistema, usare il <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodo per ottenere un <xref:System.Security.AccessControl.RegistrySecurity> dell'oggetto e quindi utilizzare il relativo <xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A> metodo per ottenere una raccolta di <xref:System.Security.AccessControl.RegistryAuditRule> oggetti.  
  
 <xref:System.Security.AccessControl.RegistryAuditRule> gli oggetti non eseguano il mapping uno a uno con voci di controllo di accesso nell'elenco di controllo di accesso discrezionale (DACL) sottostante. Una volta ottenuto il set di tutte le regole per una chiave del Registro di sistema di controllo, il set contiene il numero minimo di regole necessarie per esprimere tutte le voci di controllo di accesso.  
  
> [!NOTE]
>  Voci di controllo di accesso sottostante è stata modificata è applicare e rimuovere le regole. Le informazioni nelle regole vengono unite se possibile, per mantenere il più piccolo numero di voci di controllo di accesso. Pertanto, quando si legge l'elenco corrente delle regole, potrebbe non apparire esattamente come l'elenco di tutte le regole che è stato aggiunto.  
  
 Utilizzare <xref:System.Security.AccessControl.RegistryAuditRule> oggetti per specificare i diritti di accesso per un utente o gruppo da controllare. Per applicare una regola a una chiave del Registro di sistema, usare il <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodo per ottenere il <xref:System.Security.AccessControl.RegistrySecurity> oggetto. Modificare il <xref:System.Security.AccessControl.RegistrySecurity> oggetto mediante i metodi per aggiungere la regola e quindi usare il <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodo per ricollegare l'oggetto di sicurezza.  
  
> [!IMPORTANT]
>  Le modifiche apportate a un <xref:System.Security.AccessControl.RegistrySecurity> oggetto non influiscono sui livelli di accesso della chiave del Registro di sistema finché non si chiama il <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodo a cui assegnare l'oggetto di sicurezza modificato per la chiave del Registro di sistema.  
  
 <xref:System.Security.AccessControl.RegistryAuditRule> gli oggetti non sono modificabili. Sicurezza per una chiave del Registro di sistema viene modificata utilizzando i metodi del <xref:System.Security.AccessControl.RegistrySecurity> classe per aggiungere o rimuovere le regole; in tal caso, le voci di controllo di accesso sottostanti vengono modificate.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAuditRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAuditRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.RegistryAuditRule" Usage="new System.Security.AccessControl.RegistryAuditRule (identity, registryRights, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">The user or group the rule applies to. Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the kinds of access to audit.</param>
        <param name="inheritanceFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values specifying whether the audit rule applies to subkeys of the current key.</param>
        <param name="propagationFlags">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that affect the way an inherited audit rule is propagated to subkeys of the current key.</param>
        <param name="flags">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit success, failure, or both.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class, specifying the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutte le chiavi del Registro di sistema sono contenitori, pertanto è l'unico flag di ereditarietà che è significativo per le chiavi del Registro di sistema di <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flag. Se questo flag non è specificato, i flag di propagazione sono ignorati, ed è interessata solo la chiave immediata. Se il flag è presente, la regola viene propagata come illustrato nella tabella seguente. Nella tabella si presuppone una sottochiave S con sottochiave figlio CS e sottochiave nipote GS. Il percorso della sottochiave nipote è S\CS\GS.  
  
|Flag di propagazione|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|x|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x||  
  
 Il modello per la sottochiave nipote regola tutte le sottochiavi in essa contenute.  
  
 Ad esempio, se il <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> viene specificato il flag `inheritanceFlags` e il <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> viene specificato il flag di propagazione `propagationFlags`, questa regola non è valida per la sottochiave immediata, ma si applicano a tutte le relative sottochiavi figlio diretti e a tutte le sottochiavi in essi contenuti.  
  
> [!NOTE]
>  Sebbene sia possibile specificare il <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag per `inheritanceFlags`, nessun punto a tale scopo. Ai fini di controllo di accesso, le coppie nome/valore in una sottochiave non sono oggetti separati. Diritti di accesso alle coppie nome/valore sono controllati dai diritti della sottochiave. Inoltre, poiché tutte le sottochiavi sono contenitori (vale a dire, contengono altre sottochiavi), non vengono influenzati dal <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Infine, se si specifica il <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag inutilmente complica la gestione delle regole, perché interferisce con la combinazione normale di regole compatibili.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> specifies an invalid value.  -or-  <paramref name="flags" /> specifies an invalid value.  -or-  <paramref name="inheritanceFlags" /> specifies an invalid value.  -or-  <paramref name="propagationFlags" /> specifies an invalid value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> is <see langword="null" />.  -or-  <paramref name="registryRights" /> is zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAuditRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AuditFlags flags);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAuditRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AuditFlags -&gt; System.Security.AccessControl.RegistryAuditRule" Usage="new System.Security.AccessControl.RegistryAuditRule (identity, registryRights, inheritanceFlags, propagationFlags, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">The name of the user or group the rule applies to.</param>
        <param name="registryRights">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the kinds of access to audit.</param>
        <param name="inheritanceFlags">A combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flags that specifies whether the audit rule applies to subkeys of the current key.</param>
        <param name="propagationFlags">A combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> flags that affect the way an inherited audit rule is propagated to subkeys of the current key.</param>
        <param name="flags">A bitwise combination of <see cref="T:System.Security.AccessControl.AuditFlags" /> values specifying whether to audit success, failure, or both.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> class, specifying the name of the user or group to audit, the rights to audit, whether to take inheritance into account, and whether to audit success, failure, or both.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutte le chiavi del Registro di sistema sono contenitori, pertanto è l'unico flag di ereditarietà che è significativo per le chiavi del Registro di sistema di <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flag. Se questo flag non è specificato, i flag di propagazione sono ignorati, ed è interessata solo la chiave immediata. Se il flag è presente, la regola viene propagata come illustrato nella tabella seguente. Nella tabella si presuppone una sottochiave S con sottochiave figlio CS e sottochiave nipote GS. Il percorso della sottochiave nipote è S\CS\GS.  
  
|Flag di propagazione|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|x|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x||  
  
 Il modello per la sottochiave nipote regola tutte le sottochiavi in essa contenute.  
  
 Ad esempio, se il <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> viene specificato il flag `inheritanceFlags` e il <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> viene specificato il flag di propagazione `propagationFlags`, questa regola non è valida per la sottochiave immediata, ma si applicano a tutte le relative sottochiavi figlio diretti e a tutte le sottochiavi in essi contenuti.  
  
> [!NOTE]
>  Sebbene sia possibile specificare il <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag per `inheritanceFlags`, nessun punto a tale scopo. Ai fini di controllo di accesso, le coppie nome/valore in una sottochiave non sono oggetti separati. Diritti di accesso alle coppie nome/valore sono controllati dai diritti della sottochiave. Inoltre, poiché tutte le sottochiavi sono contenitori (vale a dire, contengono altre sottochiavi), non vengono influenzati dal <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Infine, se si specifica il <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag inutilmente complica la gestione delle regole, perché interferisce con la combinazione normale di regole compatibili.  
  
 Questo costruttore è equivalente alla creazione di un <xref:System.Security.Principal.NTAccount> oggetto passando `identity` per il <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> costruttore e il passaggio appena creato <xref:System.Security.Principal.NTAccount> dell'oggetto per il <xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29> costruttore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> specifies an invalid value.  -or-  <paramref name="flags" /> specifies an invalid value.  -or-  <paramref name="inheritanceFlags" /> specifies an invalid value.  -or-  <paramref name="propagationFlags" /> specifies an invalid value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="registryRights" /> is zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> is <see langword="null" />.  -or-  <paramref name="identity" /> is a zero-length string.  -or-  <paramref name="identity" /> is longer than 512 characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAuditRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAuditRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the access rights affected by the audit rule.</summary>
        <value>Una combinazione bit per bit di <see cref="T:System.Security.AccessControl.RegistryRights" /> valori che indica i diritti interessati dalla regola di controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAuditRule> gli oggetti non sono modificabili. È possibile creare una nuova regola di controllo che rappresenta un utente diverso, diritti differenti o una combinazione diversa di <xref:System.Security.AccessControl.AuditFlags> flag, ma non è possibile modificare una regola di controllo esistente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>