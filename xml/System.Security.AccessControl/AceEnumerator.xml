<Type Name="AceEnumerator" FullName="System.Security.AccessControl.AceEnumerator">
  <TypeSignature Language="C#" Value="public sealed class AceEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AceEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.AceEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AceEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class AceEnumerator sealed : System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="d0005-101">Consente di eseguire l'iterazione delle voci di controllo di accesso (ACE) in un elenco di controllo di accesso (ACL).</span><span class="sxs-lookup"><span data-stu-id="d0005-101">Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.GenericAce Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.AccessControl.GenericAce Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As GenericAce" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::GenericAce ^ Current { System::Security::AccessControl::GenericAce ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d0005-102">Ottiene l'elemento corrente dell'insieme <see cref="T:System.Security.AccessControl.GenericAce" />.</span><span class="sxs-lookup"><span data-stu-id="d0005-102">Gets the current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span> <span data-ttu-id="d0005-103">Questa proprietà consente di ottenere la versione descrittiva del tipo dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="d0005-103">This property gets the type-friendly version of the object.</span></span></summary>
        <value><span data-ttu-id="d0005-104">Elemento corrente nell'insieme <see cref="T:System.Security.AccessControl.GenericAce" />.</span><span class="sxs-lookup"><span data-stu-id="d0005-104">The current element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d0005-105">Sposta l'enumeratore all'elemento successivo della raccolta <see cref="T:System.Security.AccessControl.GenericAce" />.</span><span class="sxs-lookup"><span data-stu-id="d0005-105">Advances the enumerator to the next element of the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></summary>
        <returns>
          <span data-ttu-id="d0005-106"><see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <see langword="false" /> se l'enumeratore ha superato la fine della raccolta.</span><span class="sxs-lookup"><span data-stu-id="d0005-106"><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0005-107">Dopo la creazione di un enumeratore o dopo una chiamata al <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> metodo, l'enumeratore è posizionato davanti al primo elemento della raccolta e la prima chiamata al <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> metodo sposta l'enumeratore sul primo elemento della raccolta.</span><span class="sxs-lookup"><span data-stu-id="d0005-107">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, an enumerator is positioned before the first element of the collection, and the first call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method moves the enumerator over the first element of the collection.</span></span>  
  
 <span data-ttu-id="d0005-108">Dopo la fine della raccolta è passate, le chiamate successive a <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> restituire `false` fino a quando non <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="d0005-108">After the end of the collection is passed, subsequent calls to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> return `false` until <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="d0005-109">Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche.</span><span class="sxs-lookup"><span data-stu-id="d0005-109">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="d0005-110">Se, ad esempio aggiungendo, modificando o eliminando elementi, vengono apportate modifiche alla raccolta, l'enumeratore viene invalidato e la successiva chiamata al <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> genera un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="d0005-110">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d0005-111">La raccolta è stata modificata dopo la creazione dell'enumeratore.</span><span class="sxs-lookup"><span data-stu-id="d0005-111">The collection was modified after the enumerator was created.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.AceEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d0005-112">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nell'insieme <see cref="T:System.Security.AccessControl.GenericAce" />.</span><span class="sxs-lookup"><span data-stu-id="d0005-112">Sets the enumerator to its initial position, which is before the first element in the <see cref="T:System.Security.AccessControl.GenericAce" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0005-113">Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche.</span><span class="sxs-lookup"><span data-stu-id="d0005-113">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="d0005-114">Se, ad esempio aggiungendo, modificando o eliminando elementi, viene apportata alla raccolta, l'enumeratore viene invalidato e la successiva chiamata al <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> metodo o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> metodo genera un <xref:System.InvalidOperationException></span><span class="sxs-lookup"><span data-stu-id="d0005-114">If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method or the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method throws an <xref:System.InvalidOperationException></span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d0005-115">La raccolta è stata modificata dopo la creazione dell'enumeratore.</span><span class="sxs-lookup"><span data-stu-id="d0005-115">The collection was modified after the enumerator was created.</span></span></exception>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="d0005-116">Tutte le chiamate a <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> deve restituire lo stesso stato per l'enumeratore.</span><span class="sxs-lookup"><span data-stu-id="d0005-116">All calls to <see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /> must result in the same state for the enumerator.</span></span> <span data-ttu-id="d0005-117">L'implementazione consigliata consiste nello spostare l'enumeratore all'inizio della raccolta, prima del primo elemento.</span><span class="sxs-lookup"><span data-stu-id="d0005-117">The preferred implementation is to move the enumerator to the beginning of the collection, before the first element.</span></span> <span data-ttu-id="d0005-118">Questa operazione invalida l'enumeratore se la raccolta è stata modificata dopo la creazione dell'enumeratore, che è coerente con <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> e <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />.</span><span class="sxs-lookup"><span data-stu-id="d0005-118">This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /> and <see cref="P:System.Security.AccessControl.AceEnumerator.Current" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d0005-119">Ottiene l'elemento corrente della raccolta.</span><span class="sxs-lookup"><span data-stu-id="d0005-119">Gets the current element in the collection.</span></span></summary>
        <value><span data-ttu-id="d0005-120">Restituisce l'elemento corrente della raccolta.</span><span class="sxs-lookup"><span data-stu-id="d0005-120">Returns the current element in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d0005-121">Dopo la creazione di un enumeratore o dopo una chiamata al <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> (metodo), è necessario chiamare il <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> metodo per passare l'enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>; in caso contrario, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> è definito .</span><span class="sxs-lookup"><span data-stu-id="d0005-121">After an enumerator is created or after a call to the <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> method, you must call the <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>; otherwise, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="d0005-122"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> Inoltre, genera un'eccezione se l'ultima chiamata a <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> restituito `false`, che indica la fine della raccolta.</span><span class="sxs-lookup"><span data-stu-id="d0005-122"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> also throws an exception if the last call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="d0005-123"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> non modifica la posizione dell'enumeratore e le chiamate successive a <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> restituiscono lo stesso oggetto finché non <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="d0005-123"><xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> return the same object until either <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="d0005-124">Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche.</span><span class="sxs-lookup"><span data-stu-id="d0005-124">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="d0005-125">Se, ad esempio aggiungendo, modificando o eliminando elementi, vengono apportate modifiche alla raccolta, l'enumeratore viene invalidato e la successiva chiamata al <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> genera un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="d0005-125">If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> or <xref:System.Security.AccessControl.AceEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="d0005-126">Se la raccolta viene modificata tra <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> e <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> restituisce l'elemento su cui è stata impostata, anche se l'enumeratore risulta già invalidato.</span><span class="sxs-lookup"><span data-stu-id="d0005-126">If the collection is modified between <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> and <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A>, <xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d0005-127">La raccolta è stata modificata dopo la creazione dell'enumeratore.</span><span class="sxs-lookup"><span data-stu-id="d0005-127">The collection was modified after the enumerator was created.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>