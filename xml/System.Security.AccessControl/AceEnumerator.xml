<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AceEnumerator.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57a8e9039c23d2f0f3c47000c69c62c5dfce609f6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a8e9039c23d2f0f3c47000c69c62c5dfce609f6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.AceEnumerator">
          <source>Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</source>
          <target state="translated">Consente di eseguire l'iterazione delle voci di controllo di accesso (ACE) in un elenco di controllo di accesso (ACL).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.AceEnumerator.Current">
          <source>Gets the current element in the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> collection.</source>
          <target state="translated">Ottiene l'elemento corrente dell'insieme <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.AceEnumerator.Current">
          <source>This property gets the type-friendly version of the object.</source>
          <target state="translated">Questa proprietà consente di ottenere la versione descrittiva del tipo dell'oggetto.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.Current">
          <source>The current element in the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> collection.</source>
          <target state="translated">Elemento corrente nell'insieme <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>Advances the enumerator to the next element of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> collection.</source>
          <target state="translated">Sposta l'enumeratore all'elemento successivo della raccolta <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator was successfully advanced to the next element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has passed the end of the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <ph id="ph2">&lt;see langword="false" /&gt;</ph> se l'enumeratore ha superato la fine della raccolta.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>After an enumerator is created or after a call to the <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> method, an enumerator is positioned before the first element of the collection, and the first call to the <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> method moves the enumerator over the first element of the collection.</source>
          <target state="translated">Dopo la creazione di un enumeratore o dopo una chiamata al <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> metodo, l'enumeratore è posizionato davanti al primo elemento della raccolta e la prima chiamata al <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> metodo sposta l'enumeratore sul primo elemento della raccolta.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>After the end of the collection is passed, subsequent calls to <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> return <ph id="ph2">`false`</ph> until <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">Dopo la fine della raccolta è passate, le chiamate successive a <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> restituire <ph id="ph2">`false`</ph> fino a quando non <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> viene chiamato.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Se, ad esempio aggiungendo, modificando o eliminando elementi, vengono apportate modifiche alla raccolta, l'enumeratore viene invalidato e la successiva chiamata al <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> genera un <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">La raccolta è stata modificata dopo la creazione dell'enumeratore.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>Sets the enumerator to its initial position, which is before the first element in the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> collection.</source>
          <target state="translated">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nell'insieme <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> method throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph></source>
          <target state="translated">Se, ad esempio aggiungendo, modificando o eliminando elementi, viene apportata alla raccolta, l'enumeratore viene invalidato e la successiva chiamata al <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> metodo o <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> metodo genera un <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">La raccolta è stata modificata dopo la creazione dell'enumeratore.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>All calls to <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /&gt;</ph> must result in the same state for the enumerator.</source>
          <target state="translated">Tutte le chiamate a <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /&gt;</ph> deve restituire lo stesso stato per l'enumeratore.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>The preferred implementation is to move the enumerator to the beginning of the collection, before the first element.</source>
          <target state="translated">L'implementazione consigliata consiste nello spostare l'enumeratore all'inizio della raccolta, prima del primo elemento.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Security.AccessControl.AceEnumerator.Current" /&gt;</ph>.</source>
          <target state="translated">Questa operazione invalida l'enumeratore se la raccolta è stata modificata dopo la creazione dell'enumeratore, che è coerente con <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /&gt;</ph> e <ph id="ph2">&lt;see cref="P:System.Security.AccessControl.AceEnumerator.Current" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>Gets the current element in the collection.</source>
          <target state="translated">Ottiene l'elemento corrente della raccolta.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>Returns the current element in the collection.</source>
          <target state="translated">Restituisce l'elemento corrente della raccolta.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>After an enumerator is created or after a call to the <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> method, you must call the <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph>; otherwise, <ph id="ph4">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Dopo la creazione di un enumeratore o dopo una chiamata al <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> (metodo), è necessario chiamare il <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> metodo per passare l'enumeratore al primo elemento della raccolta prima di leggere il valore di <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph>; in caso contrario, <ph id="ph4">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> è definito .</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> also throws an exception if the last call to <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph3">`false`</ph>, which indicates the end of the collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> Inoltre, genera un'eccezione se l'ultima chiamata a <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> restituito <ph id="ph3">`false`</ph>, che indica la fine della raccolta.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> does not move the position of the enumerator, and consecutive calls to <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> return the same object until either <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> non modifica la posizione dell'enumeratore e le chiamate successive a <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> restituiscono lo stesso oggetto finché non <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> viene chiamato.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Se, ad esempio aggiungendo, modificando o eliminando elementi, vengono apportate modifiche alla raccolta, l'enumeratore viene invalidato e la successiva chiamata al <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> genera un <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>If the collection is modified between <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">Se la raccolta viene modificata tra <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> restituisce l'elemento su cui è stata impostata, anche se l'enumeratore risulta già invalidato.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">La raccolta è stata modificata dopo la creazione dell'enumeratore.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>