<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="38b1b85fe4be52cde503ca221369ec7e8192189a" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39756788" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un insieme di diritti di accesso concessi o negati per un utente o gruppo. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.AccessControl.RegistryAccessRule> classe fa parte di un set di classi .NET Framework fornisce per la gestione del controllo di accesso di Windows nelle chiavi del Registro di sistema. Per una panoramica di queste classi e la loro relazione con le strutture di controllo di accesso Windows, vedere <xref:System.Security.AccessControl.RegistrySecurity>.  
  
> [!NOTE]
>  Controllo di accesso di Windows è applicabile solo alle chiavi del Registro di sistema. Non può essere applicato alle coppie chiave/valore singoli archiviate in una chiave.  
  
 Per ottenere un elenco delle regole attualmente applicato a una chiave del Registro di sistema, usare il <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodo per ottenere un <xref:System.Security.AccessControl.RegistrySecurity> dell'oggetto e quindi usare relativo <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> metodo per ottenere una raccolta di <xref:System.Security.AccessControl.RegistryAccessRule> oggetti.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> gli oggetti non viene eseguito il mapping uno a uno con voci di controllo di accesso nell'elenco di accesso di controllo discrezionale (DACL) sottostante. Quando si ottiene l'insieme di tutte le regole di accesso per una chiave del Registro di sistema, il set contiene il numero minimo di regole necessarie per esprimere tutte le voci di controllo di accesso.  
  
> [!NOTE]
>  Le voci di controllo accesso cambiano durante l'applicazione e rimuovere le regole. Le informazioni nelle regole vengono unite se possibile, per mantenere il minor numero di voci di controllo di accesso. Di conseguenza, quando si legge l'elenco corrente delle regole, potrebbe non apparire esattamente come l'elenco di tutte le regole di cui che è stato aggiunto.  
  
 Usare <xref:System.Security.AccessControl.RegistryAccessRule> oggetti per specificare i diritti di accesso per consentire o negare a un utente o gruppo. Oggetto <xref:System.Security.AccessControl.RegistryAccessRule> oggetto sempre rappresenta l'accesso consentito o negato l'accesso, non entrambi.  
  
 Per applicare una regola a una chiave del Registro di sistema, usare il <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> metodo per ottenere il <xref:System.Security.AccessControl.RegistrySecurity> oggetto. Modificare il <xref:System.Security.AccessControl.RegistrySecurity> oggetto usando i metodi per aggiungere la regola e quindi usare il <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodo riconnettere l'oggetto di sicurezza.  
  
> [!IMPORTANT]
>  Le modifiche apportate a un <xref:System.Security.AccessControl.RegistrySecurity> oggetto non influiscono sui livelli di accesso della chiave del Registro di sistema finché non si chiama il <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> metodo a cui assegnare l'oggetto di sicurezza modificato per la chiave del Registro di sistema.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> gli oggetti non sono modificabili. Modificare la protezione per una chiave del Registro di sistema usando i metodi del <xref:System.Security.AccessControl.RegistrySecurity> classe per aggiungere o rimuovere le regole, come in questo caso, le voci di controllo di accesso sottostante vengono modificate.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra le regole di accesso con ereditarietà e propagazione. Nell'esempio viene creata una <xref:System.Security.AccessControl.RegistrySecurity> dell'oggetto, quindi crea e aggiunge due regole contenenti il <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag. La prima regola non dispone di alcun flag di propagazione, mentre il secondo contiene <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> e <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 Il programma visualizza le regole nel <xref:System.Security.AccessControl.RegistrySecurity> dell'oggetto e quindi Usa l'oggetto per creare una sottochiave. Il programma crea un elemento figlio sottochiave e una sottochiave nipote e quindi Visualizza la sicurezza per ogni sottochiave. Infine, il programma Elimina le chiavi di prova.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.AccessControl.RegistryAccessRule" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Utente o gruppo a cui viene applicata la regola. Deve essere di tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> o di un tipo quale <see cref="T:System.Security.Principal.NTAccount" /> che può essere convertito nel tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Combinazione bit per bit di valori <see cref="T:System.Security.AccessControl.RegistryRights" /> che indicano i diritti concessi o negati.</param>
        <param name="type">Uno dei valori <see cref="T:System.Security.AccessControl.AccessControlType" /> che indica se i diritti sono concessi o negati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> specificando l'utente o il gruppo a cui la regola viene applicata, i diritti di accesso e se i diritti di accesso specificati sono concessi o negati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore viene specificato l'ereditarietà e propagazione predefinito. Vale a dire <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> e <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> specifica un valore non valido.  
  
oppure 
 <paramref name="type" /> specifica un valore non valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> è <see langword="null" />.  
  
oppure 
 <paramref name="eventRights" /> è zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> non è di tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> né di un tipo quale <see cref="T:System.Security.Principal.NTAccount" /> che può essere convertito nel tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nome dell'utente o del gruppo a cui la regola viene applicata.</param>
        <param name="registryRights">Combinazione bit per bit di valori <see cref="T:System.Security.AccessControl.RegistryRights" /> che indicano i diritti concessi o negati.</param>
        <param name="type">Uno dei valori <see cref="T:System.Security.AccessControl.AccessControlType" /> che indica se i diritti sono concessi o negati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> specificando il nome dell'utente o del gruppo a cui la regola viene applicata, i diritti di accesso e se i diritti di accesso specificati sono concessi o negati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore viene specificato l'ereditarietà e propagazione predefinito. Vale a dire <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> e <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 Questo costruttore è equivalente alla creazione di un <xref:System.Security.Principal.NTAccount> oggetti, passando `identity` per il <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> costruttore e passando l'oggetto appena creato <xref:System.Security.Principal.NTAccount> dell'oggetto per il <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> costruttore.  
  
   
  
## Examples  
 Esempio di codice seguente crea le regole di accesso del Registro di sistema e li aggiunge a un <xref:System.Security.AccessControl.RegistrySecurity> oggetto, mostrando come le regole che consentono la negano di diritti restano separate, mentre le regole compatibili dello stesso tipo viene unito.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> specifica un valore non valido.  
  
oppure 
 <paramref name="type" /> specifica un valore non valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="registryRights" /> è zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> è <see langword="null" />.  
  
oppure 
 <paramref name="identity" /> è una stringa di lunghezza zero.  
  
oppure 
 La lunghezza di <paramref name="identity" /> supera i 512 caratteri.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Utente o gruppo a cui viene applicata la regola. Deve essere di tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> o di un tipo quale <see cref="T:System.Security.Principal.NTAccount" /> che può essere convertito nel tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Combinazione bit per bit di valori <see cref="T:System.Security.AccessControl.RegistryRights" /> che specificano i diritti concessi o negati.</param>
        <param name="inheritanceFlags">Combinazione bit per bit di flag <see cref="T:System.Security.AccessControl.InheritanceFlags" /> che specificano come i diritti di accesso sono ereditati da altri oggetti.</param>
        <param name="propagationFlags">Combinazione bit per bit di flag <see cref="T:System.Security.AccessControl.PropagationFlags" /> che specificano come i diritti di accesso sono propagati ad altri oggetti.</param>
        <param name="type">Uno dei valori di <see cref="T:System.Security.AccessControl.AccessControlType" /> che specificano se i diritti sono concessi o negati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> specificando l'utente o il gruppo a cui la regola viene applicata, i diritti di accesso, i flag di ereditarietà, i flag di propagazione e se i diritti di accesso specificati sono concessi o negati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutte le chiavi del Registro di sistema sono contenitori, pertanto è l'unico flag di ereditarietà significativo per le chiavi del Registro di sistema di <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flag. Se questo flag non è specificato, il flag di propagazione sono ignorati ed è interessata solo la chiave di controllo immediata. Se il flag è presente, la regola viene propagata come illustrato nella tabella seguente. La tabella presuppone sia presente una sottochiave S con sottochiave figlio CS e sottochiave nipote GS. Il percorso della sottochiave nipote è S\CS\GS.  
  
|Flag di propagazione|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|x|x|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|x|x||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x||  
  
 Il modello predefinito della sottochiave nipote gestisce tutte le sottochiavi della sottochiave nipote contenute.  
  
 Ad esempio, se il <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> viene specificato il flag `inheritanceFlags` e il <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> viene specificato il flag di propagazione `propagationFlags`, questa regola non è valida per la sottochiave immediata, ma si applicano a tutte le relative sottochiavi figlio immediati e a tutte le sottochiavi Queste immagini contengono.  
  
> [!NOTE]
>  Sebbene sia possibile specificare il <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag per `inheritanceFlags`, non ha senso in questo modo. Ai fini di controllo di accesso, le coppie nome/valore in una sottochiave non sono oggetti separati. Diritti di accesso alle coppie nome/valore vengono controllati in base ai diritti della sottochiave. Inoltre, poiché tutte le sottochiavi sono contenitori (vale a dire possono contenere altri sottochiavi), non vengono influenzati dal <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Infine, se si specifica il <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag inutilmente complica la gestione delle regole, perché interferisce con la combinazione di regole in caso contrario compatibile.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> specifica un valore non valido.  
  
oppure 
 <paramref name="type" /> specifica un valore non valido.  
  
oppure 
 <paramref name="inheritanceFlags" /> specifica un valore non valido.  
  
oppure 
 <paramref name="propagationFlags" /> specifica un valore non valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> è <see langword="null" />.  
  
oppure 
 <paramref name="registryRights" /> è zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> non è di tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> né di un tipo quale <see cref="T:System.Security.Principal.NTAccount" /> convertibile nel tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nome dell'utente o del gruppo a cui la regola viene applicata.</param>
        <param name="registryRights">Combinazione bit per bit di valori <see cref="T:System.Security.AccessControl.RegistryRights" /> che indicano i diritti concessi o negati.</param>
        <param name="inheritanceFlags">Combinazione bit per bit di flag <see cref="T:System.Security.AccessControl.InheritanceFlags" /> che specificano come i diritti di accesso sono ereditati da altri oggetti.</param>
        <param name="propagationFlags">Combinazione bit per bit di flag <see cref="T:System.Security.AccessControl.PropagationFlags" /> che specificano come i diritti di accesso sono propagati ad altri oggetti.</param>
        <param name="type">Uno dei valori di <see cref="T:System.Security.AccessControl.AccessControlType" /> che specificano se i diritti sono concessi o negati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> specificando il nome dell'utente o del gruppo a cui la regola viene applicata, i diritti di accesso, i flag di ereditarietà, i flag di propagazione e se i diritti di accesso specificati sono concessi o negati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutte le chiavi del Registro di sistema sono contenitori, pertanto è l'unico flag di ereditarietà significativo per le chiavi del Registro di sistema di <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flag. Se questo flag non è specificato, il flag di propagazione sono ignorati ed è interessata solo la chiave di controllo immediata. Se il flag è presente, la regola viene propagata come illustrato nella tabella seguente. La tabella presuppone sia presente una sottochiave S con sottochiave figlio CS e sottochiave nipote GS. Il percorso della sottochiave nipote è S\CS\GS.  
  
|Flag di propagazione|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|x|x|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|x|x||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x|x|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||x||  
  
 Il modello predefinito della sottochiave nipote gestisce tutte le sottochiavi della sottochiave nipote contenute.  
  
 Ad esempio, se il <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> viene specificato il flag `inheritanceFlags` e il <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> viene specificato il flag di propagazione `propagationFlags`, questa regola non è valida per la sottochiave immediata, ma si applicano a tutte le relative sottochiavi figlio immediati e a tutte le sottochiavi Queste immagini contengono.  
  
> [!NOTE]
>  Sebbene sia possibile specificare il <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag per `inheritanceFlags`, non ha senso in questo modo. Ai fini di controllo di accesso, le coppie nome/valore in una sottochiave non sono oggetti separati. Diritti di accesso alle coppie nome/valore vengono controllati in base ai diritti della sottochiave. Inoltre, poiché tutte le sottochiavi sono contenitori (vale a dire possono contenere altri sottochiavi), non vengono influenzati dal <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag. Infine, se si specifica il <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag inutilmente complica la gestione delle regole, perché interferisce con la combinazione di regole in caso contrario compatibile.  
  
 Questo costruttore è equivalente alla creazione di un <xref:System.Security.Principal.NTAccount> oggetti, passando `identity` per il <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> costruttore e passando l'oggetto appena creato <xref:System.Security.Principal.NTAccount> dell'oggetto per il <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> costruttore.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra le regole di accesso con ereditarietà e propagazione. Nell'esempio viene creata una <xref:System.Security.AccessControl.RegistrySecurity> dell'oggetto, quindi crea e aggiunge due regole contenenti il <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag. La prima regola non dispone di alcun flag di propagazione, mentre il secondo contiene <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> e <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 Il programma visualizza le regole nel <xref:System.Security.AccessControl.RegistrySecurity> oggetto e quindi Usa il <xref:System.Security.AccessControl.RegistrySecurity> oggetto per creare una sottochiave. Il programma crea un elemento figlio sottochiave e una sottochiave nipote e quindi Visualizza le regole per ogni sottochiave. Infine, il programma Elimina le chiavi di prova.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> specifica un valore non valido.  
  
oppure 
 <paramref name="type" /> specifica un valore non valido.  
  
oppure 
 <paramref name="inheritanceFlags" /> specifica un valore non valido.  
  
oppure 
 <paramref name="propagationFlags" /> specifica un valore non valido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> è zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> è <see langword="null" />.  
  
oppure 
 <paramref name="identity" /> è una stringa di lunghezza zero.  
  
oppure 
 La lunghezza di <paramref name="identity" /> supera i 512 caratteri.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i diritti concessi o negati dalla regola di accesso.</summary>
        <value>Combinazione bit per bit di valori <see cref="T:System.Security.AccessControl.RegistryRights" /> che indicano i diritti concessi o negati dalla regola di accesso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> gli oggetti non sono modificabili. È possibile creare una nuova regola di accesso che rappresenta un utente diverso, diritti differenti o un altro <xref:System.Security.AccessControl.AccessControlType>, ma non è possibile modificare una regola di accesso esistente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>