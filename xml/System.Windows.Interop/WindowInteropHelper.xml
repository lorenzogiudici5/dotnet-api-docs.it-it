<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6b334d8e64269faed6c0ba3c5e53bcfa50572945" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39949676" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supporta l'interoperatività tra Windows Presentation Foundation (WPF) e il codice Win32.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I membri di questa classe consente al chiamante di avere accesso al [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND e l'elemento padre HWND di una [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  Da questi membri vengono eseguiti i controlli di sicurezza appropriate.  
  
 Utilizzare questa classe ogni volta che è necessario un oggetto più specifico basato su HWND.  
  
 Uno scenario di esempio è se è necessario ospitare un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] nella finestra di dialogo un [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] dell'applicazione. Inizializzare il <xref:System.Windows.Interop.WindowInteropHelper> con un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] oggetto finestra di dialogo. È quindi possibile ottenere il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] handle della finestra (HWND) dal <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> proprietà e specificare il proprietario per il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] finestra con il <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> proprietà. Esempio di codice seguente viene illustrato come utilizzare <xref:System.Windows.Interop.WindowInteropHelper> quando si ospita un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] nella finestra di dialogo un [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] dell'applicazione.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 Un altro scenario supportato da questa classe è per ottenere un <xref:System.Windows.Interop.HwndSource> dell'oggetto da un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> oggetto. Il <xref:System.Windows.Interop.HwndSource> Abilita l'elaborazione di diretta [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messaggi tramite il <xref:System.Windows.Interop.HwndSource.AddHook%2A> (metodo). Usando <xref:System.Windows.Interop.HwndSource> e <xref:System.Windows.Interop.HwndSource.AddHook%2A> al posto di un <xref:System.Windows.Window> è ancora possibile gestire i messaggi in cui non è equivalente o gestione in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Creare un <xref:System.Windows.Interop.WindowInteropHelper> con il <xref:System.Windows.Window> di origine, quindi chiamare <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> sul <xref:System.Windows.Interop.WindowInteropHelper> per ottenere da HWND <xref:System.Windows.Interop.HwndSource>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">Oggetto finestra di [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interop.WindowInteropHelper" /> per la finestra specificata di [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La finestra può essere una finestra di dialogo o una finestra che in caso contrario, non è adatta a essere ospitata all'interno di un [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] dell'applicazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea l'handle della finestra (HWND) se non è ancora stato creato.</summary>
        <returns>Oggetto <see cref="T:System.IntPtr" /> che rappresenta l'handle della finestra (HWND).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> metodo quando si desidera separare la creazione di handle (HWND) della finestra di visualizzazione effettivo di managed <xref:System.Windows.Window>. Ciò è utile quando si dispone di un client di automazione che possa portare a termine le attività senza la necessità per visualizzare una finestra.  
  
 Se la finestra nativa non è ancora stata creata, questo metodo crea la finestra nativa, i set di <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> proprietà e restituisce l'oggetto HWND. Se la finestra nativa è stata creata già, viene restituito l'handle della finestra nativa esistente.  
  
 Se la finestra nativa viene creata come risultato di questo metodo, il <xref:System.Windows.Window.SourceInitialized> viene generato l'evento.  
  
 L'esecuzione di query di <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> proprietà dopo la <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> viene chiamato il metodo restituisce l'handle di finestra esistente. La struttura ad albero visuale non è collegata alla finestra fino a dopo il <xref:System.Windows.Window.Show%2A> viene chiamato il metodo.  
  
 La chiamata di <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> metodo più volte non crea nuovi handle di finestra. Chiama il <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> metodo quando l'handle è già stato creato da una chiamata al <xref:System.Windows.Window.Show%2A> metodo non crea un nuovo handle di finestra. Una finestra nativa viene creata solo quando non esiste alcun handle quando il <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> viene chiamato il metodo.  
  
 Le proprietà della finestra che vengono impostate utilizzando la finestra nativa le API tramite p/invoke non venga visualizzato nella API gestite della finestra. Ad esempio, se si imposta la finestra in primo piano usando il flag MS_EX_TOPMOST nativo dopo il <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> viene chiamato il metodo di <xref:System.Windows.Window.Topmost%2A> proprietà non è garantito che riflettono l'impostazione nativo.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Per creare e accedere a un handle di finestra. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'handle di finestra per una finestra di [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] usata per creare questo oggetto <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</summary>
        <value>Handle di finestra [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] (HWND).</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Per ottenere un handle di finestra. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'handle della finestra proprietaria di [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <value>Handle di finestra proprietaria (HWND).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile assegnare un nuovo elemento windows impostando questa proprietà. Così come sono true per uso generale [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] di programmazione, non assegnare un nuovo elemento finestre che sono già in uso.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Per ottenere o impostare il valore della proprietà. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>