<Type Name="IsSignUnspecifiedByte" FullName="System.Runtime.CompilerServices.IsSignUnspecifiedByte">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="47dbaea5744a3bb0b065a4afbb61b524826d8d86" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37639173" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsSignUnspecifiedByte" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsSignUnspecifiedByte extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsSignUnspecifiedByte" />
  <TypeSignature Language="VB.NET" Value="Public Class IsSignUnspecifiedByte" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsSignUnspecifiedByte abstract sealed" />
  <TypeSignature Language="F#" Value="type IsSignUnspecifiedByte = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="96da3-101">Indica che un modificatore non è né con segno né senza segno.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96da3-101">Indicates that a modifier is neither signed nor unsigned.</span>
      </span>
      <span data-ttu-id="96da3-102">Questa classe non può essere ereditata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="96da3-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="96da3-103">Alcuni linguaggi di programmazione, ad esempio C++ riconoscono tre distinti `char` valori: `signed char`, `unsigned char`, e `char`.</span><span class="sxs-lookup"><span data-stu-id="96da3-103">Some programming languages, such as C++, recognize three distinct `char` values: `signed char`, `unsigned char`, and `char`.</span></span>  <span data-ttu-id="96da3-104">Per distinguere invariato `char` digitare dagli altri, il compilatore Microsoft C++ aggiunge le <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modificatore della ognuno `char` tipo inviati a un assembly.</span><span class="sxs-lookup"><span data-stu-id="96da3-104">To distinguish the unmodified `char` type from the others, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier to each `char` type emitted to an assembly.</span></span>  
  
 <span data-ttu-id="96da3-105">I compilatori creano i modificatori personalizzati all'interno dei metadati per modificare il modo in cui il compilatore JIT just-in-time gestisce i valori quando il comportamento predefinito non è appropriato.</span><span class="sxs-lookup"><span data-stu-id="96da3-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="96da3-106">Quando il compilatore JIT rileva un modificatore personalizzato, che gestisce il valore in modo che il modificatore specifica.</span><span class="sxs-lookup"><span data-stu-id="96da3-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="96da3-107">I compilatori possono applicare i modificatori personalizzati a metodi e parametri e valori restituiti.</span><span class="sxs-lookup"><span data-stu-id="96da3-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="96da3-108">Il compilatore JIT deve rispondere ai modificatori necessari, ma possa ignorare i modificatori facoltativi.</span><span class="sxs-lookup"><span data-stu-id="96da3-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="96da3-109">È possibile generare modificatori personalizzati nei metadati tramite una delle tecniche seguenti:</span><span class="sxs-lookup"><span data-stu-id="96da3-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="96da3-110">Utilizzo dei metodi di <xref:System.Reflection.Emit.TypeBuilder> classe, ad esempio <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, e <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="96da3-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="96da3-111">Generazione di un file di istruzioni di Microsoft intermediate language (MSIL) che contiene le chiamate a `modopt` e `modreq`e assemblare il file con il [Ilasm.exe (Assembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="96da3-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="96da3-112">Usando l'API di reflection non gestita.</span><span class="sxs-lookup"><span data-stu-id="96da3-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="96da3-113">Esempio di codice seguente crea un assembly mediante le classi nel <xref:System.Reflection.Emit> dello spazio dei nomi ed emette le <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modificatore in tale assembly.</span><span class="sxs-lookup"><span data-stu-id="96da3-113">The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the <xref:System.Runtime.CompilerServices.IsSignUnspecifiedByte> modifier into that assembly.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsSignUnspecifiedByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsSignUnspecifiedByte/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>