<Type Name="RuntimeCompatibilityAttribute" FullName="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc84f94b04c6496f7a52e6bc2fe9132d7ec4cdf9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36636326" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RuntimeCompatibilityAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit RuntimeCompatibilityAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RuntimeCompatibilityAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class RuntimeCompatibilityAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type RuntimeCompatibilityAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="23290-101">Specifica se incapsulare le eccezioni che non derivano dalla classe <see cref="T:System.Exception" /> con un oggetto <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="23290-101">Specifies whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</span>
      </span>
      <span data-ttu-id="23290-102">Questa classe non può essere ereditata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="23290-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23290-103">Alcuni linguaggi, ad esempio C++, consentono di generare eccezioni di qualsiasi tipo.</span><span class="sxs-lookup"><span data-stu-id="23290-103">Some languages, such as C++, allow you to throw exceptions of any type.</span></span>  <span data-ttu-id="23290-104">Altri linguaggi, ad esempio Microsoft c# e Visual Basic, è necessario che ogni eccezione generata sia derivata dal <xref:System.Exception> classe.</span><span class="sxs-lookup"><span data-stu-id="23290-104">Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class.</span></span>  <span data-ttu-id="23290-105">Per mantenere la compatibilità tra i linguaggi, common language runtime (CLR) esegue il wrapping di oggetti che non derivano da <xref:System.Exception> in un <xref:System.Runtime.CompilerServices.RuntimeWrappedException> oggetto.</span><span class="sxs-lookup"><span data-stu-id="23290-105">To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.</span></span>  
  
 <span data-ttu-id="23290-106">È possibile utilizzare il <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> classe per specificare se le eccezioni devono apparire incapsulate in blocchi catch e i filtri eccezioni per un assembly.</span><span class="sxs-lookup"><span data-stu-id="23290-106">You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.</span></span>  <span data-ttu-id="23290-107">Molti compilatori di linguaggio, inclusi i compilatori Microsoft c# e Visual Basic, applicano questo attributo per impostazione predefinita per specificare il comportamento di ritorno a capo.</span><span class="sxs-lookup"><span data-stu-id="23290-107">Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.</span></span>  
  
 <span data-ttu-id="23290-108">Si noti che il runtime esegue l'incapsulamento delle eccezioni anche se si usa il <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> classe per specificare che non devono essere incapsulate.</span><span class="sxs-lookup"><span data-stu-id="23290-108">Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped.</span></span>  <span data-ttu-id="23290-109">In questo caso, le eccezioni sono annullato il wrapping solo all'interno di blocchi catch o i filtri eccezioni.</span><span class="sxs-lookup"><span data-stu-id="23290-109">In this case, exceptions are unwrapped only inside catch blocks or exception filters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23290-110">Esempio di codice seguente viene illustrato come applicare il <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> classe a un assembly che genera una <xref:System.String> oggetto come un'eccezione in C++ e intercetta utilizzando un <xref:System.Runtime.CompilerServices.RuntimeWrappedException> oggetto.</span><span class="sxs-lookup"><span data-stu-id="23290-110">The following code example demonstrates how to apply the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to an assembly that throws a <xref:System.String> object as an exception in C++ and catches it using a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.RuntimeWrappedException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Runtime.CompilerServices.RuntimeWrappedException/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RuntimeCompatibilityAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RuntimeCompatibilityAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="23290-111">Inizializza una nuova istanza della classe <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23290-111">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="23290-112">L'esempio di codice seguente applica il <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attributo a un assembly per disabilitare il ritorno a capo (eccezione).</span><span class="sxs-lookup"><span data-stu-id="23290-112">The following code example applies the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute to an assembly to disable exception wrapping.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.RuntimeCompatibilityAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Runtime.CompilerServices.RuntimeCompatibilityAttribute/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapNonExceptionThrows">
      <MemberSignature Language="C#" Value="public bool WrapNonExceptionThrows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WrapNonExceptionThrows" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapNonExceptionThrows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WrapNonExceptionThrows { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WrapNonExceptionThrows : bool with get, set" Usage="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="23290-113">Ottiene o imposta un valore che indica se incapsulare le eccezioni che non derivano dalla classe <see cref="T:System.Exception" /> con un oggetto <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23290-113">Gets or sets a value that indicates whether to wrap exceptions that do not derive from the <see cref="T:System.Exception" /> class with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="23290-114">
            <see langword="true" /> se le eccezioni che non derivano dalla classe <see cref="T:System.Exception" /> devono apparire incapsulate con un oggetto <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="23290-114">
              <see langword="true" /> if exceptions that do not derive from the <see cref="T:System.Exception" /> class should appear wrapped with a <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="23290-115">L'esempio di codice seguente applica il <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attributo a un assembly per disabilitare il ritorno a capo (eccezione).</span><span class="sxs-lookup"><span data-stu-id="23290-115">The following code example applies the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute to an assembly to disable exception wrapping.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.RuntimeCompatibilityAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Runtime.CompilerServices.RuntimeCompatibilityAttribute/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>