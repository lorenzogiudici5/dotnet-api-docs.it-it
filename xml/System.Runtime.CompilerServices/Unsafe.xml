<Type Name="Unsafe" FullName="System.Runtime.CompilerServices.Unsafe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa189dfcb0f0fe8d638489e125da34f3f9cc8e48" />
    <Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="12/05/2018" />
    <Meta Name="ms.locfileid" Value="52904694" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Unsafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Unsafe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.Unsafe" />
  <TypeSignature Language="VB.NET" Value="Public Class Unsafe" />
  <TypeSignature Language="C++ CLI" Value="public ref class Unsafe abstract sealed" />
  <TypeSignature Language="F#" Value="type Unsafe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a6094-101">Contiene funzionalit√† generiche di basso livello per la modifica dei puntatori.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a6094-101">Contains generic, low-level functionality for manipulating pointers.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Add&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Add&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Add(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="elementOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-102">Il tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-102">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-103">Riferimento a cui aggiungere l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-103">The reference to add the offset to.</span>
          </span>
        </param>
        <param name="elementOffset">
          <span data-ttu-id="a6094-104">Offset da aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-104">The offset to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-105">Aggiunge un offset di elemento al riferimento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-105">Adds an element offset to the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-106">Nuovo riferimento che riflette l'aggiunta dell'offset al puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-106">A new reference that reflects the addition of offset to pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Add :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Add (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-107">Il tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-107">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-108">Riferimento a cui aggiungere l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-108">The reference to add the offset to.</span>
          </span>
        </param>
        <param name="elementOffset">
          <span data-ttu-id="a6094-109">Offset da aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-109">The offset to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-110">Aggiunge un offset di elemento al riferimento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-110">Adds an element offset to the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-111">Nuovo riferimento che riflette l'aggiunta dell'offset al puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-111">A new reference that reflects the addition of offset to pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AddByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AddByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AddByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member AddByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AddByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-112">Il tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-112">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-113">Riferimento a cui aggiungere l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-113">The reference to add the offset to.</span>
          </span>
        </param>
        <param name="byteOffset">
          <span data-ttu-id="a6094-114">Offset da aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-114">The offset to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-115">Aggiunge un offset di byte al riferimento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-115">Adds a byte offset to the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-116">Nuovo riferimento che riflette l'aggiunta dell'offset di byte al puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-116">A new reference that reflects the addition of byte offset to pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool AreSame&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreSame&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreSame(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool AreSame(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member AreSame :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.AreSame (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" />
        <Parameter Name="right" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-117">Il tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-117">The type of reference.</span>
          </span>
        </typeparam>
        <param name="left">
          <span data-ttu-id="a6094-118">Primo riferimento da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-118">The first reference to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="a6094-119">Secondo riferimento da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-119">The second reference to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-120">Determina se i riferimenti specificati puntano alla stessa posizione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-120">Determines whether the specified references point to the same location.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-121">
            <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> puntano alla stessa posizione; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-121">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T As&lt;T&gt; (object o) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T As&lt;class T&gt;(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of T As Class) (o As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T As(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member As : obj -&gt; 'T (requires 'T : null)" Usage="System.Runtime.CompilerServices.Unsafe.As o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-122">Il tipo di cui l'oggetto sar√† possibile eseguire il cast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-122">The type which the object will be cast to.</span>
          </span>
        </typeparam>
        <param name="o">
          <span data-ttu-id="a6094-123">Oggetto di cui eseguire il cast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-123">The object to cast.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-124">Eseguire il cast dell'oggetto specificato al tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-124">Casts the given object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-125">Oggetto originale, di cui viene eseguito il cast al tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-125">The original object, casted to the given type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static TTo As&lt;TFrom,TTo&gt; (ref TFrom source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TTo As&lt;TFrom, TTo&gt;(!!TFrom&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of TFrom, TTo) (ByRef source As TFrom) As TTo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; static TTo % As(TFrom % source);" />
      <MemberSignature Language="F#" Value="static member As :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.As source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTo@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom" />
        <TypeParameter Name="TTo" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="TFrom&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="a6094-126">Il tipo di riferimento da reinterpretare...</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-126">The type of reference to reinterpret..</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="a6094-127">Il tipo desiderato di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-127">The desired type of the reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-128">Riferimento da reinterpretare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-128">The reference to reinterpret.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-129">Reinterpreta il riferimento specificato come riferimento a un valore di tipo <typeparamref name="TTo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-129">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-130">Riferimento a un valore di tipo <typeparamref name="TTo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-130">A reference to a value of type <typeparamref name="TTo" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPointer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* AsPointer&lt;T&gt; (ref T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* AsPointer&lt;T&gt;(!!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* AsPointer(T % value);" />
      <MemberSignature Language="F#" Value="static member AsPointer :  -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.AsPointer value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-131">Tipo di oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-131">The type of object.</span>
          </span>
        </typeparam>
        <param name="value">
          <span data-ttu-id="a6094-132">Oggetto di cui viene ottenuto il puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-132">The object whose pointer is obtained.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-133">Restituisce un puntatore al parametro per riferimento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-133">Returns a pointer to the given by-ref parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-134">Puntatore al valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-134">A pointer to the given value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(void* source);" />
      <MemberSignature Language="F#" Value="static member AsRef : nativeptr&lt;unit&gt; -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-135">Il tipo di percorso interpretato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-135">The type of the interpreted location.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-136">Posizione del valore a cui fare riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-136">The location of the value to reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-137">Reinterpreta la posizione specificata come riferimento a un valore di tipo <typeparamref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-137">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-138">Riferimento a un valore di tipo <typeparamref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-138">A reference to a value of type <typeparamref name="T" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;([in]!!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T) (ByRef source As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(T % source);" />
      <MemberSignature Language="F#" Value="static member AsRef :  -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.AsRef source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr ByteOffset&lt;T&gt; (ref T origin, ref T target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ByteOffset&lt;T&gt;(!!T&amp; origin, !!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ByteOffset(Of T) (ByRef origin As T, ByRef target As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr ByteOffset(T % origin, T % target);" />
      <MemberSignature Language="F#" Value="static member ByteOffset :  *  -&gt; nativeint" Usage="System.Runtime.CompilerServices.Unsafe.ByteOffset (origin, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="origin" Type="T" RefType="ref" />
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-139">Il tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-139">The type of reference.</span>
          </span>
        </typeparam>
        <param name="origin">
          <span data-ttu-id="a6094-140">Riferimento all'origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-140">The reference to origin.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="a6094-141">Riferimento alla destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-141">The reference to target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-142">Determina l'offset di byte dall'origine alla destinazione dai riferimenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-142">Determines the byte offset from origin to target from the given references.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-143">Offset di byte dall'origine di destinazione, ovvero <paramref name="target" />  -  <paramref name="origin" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-143">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (void* destination, ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(void* destination, !!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(void* destination, T % source);" />
      <MemberSignature Language="F#" Value="static member Copy : nativeptr&lt;unit&gt; *  -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-144">Tipo di valore da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-144">The type of value to copy.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="a6094-145">Posizione di destinazione della copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-145">The location to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="a6094-146">Riferimento al valore da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-146">A reference to the value to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-147">Copia un valore di tipo <typeparamref name="T" /> nella posizione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-147">Copies a value of type <typeparamref name="T" /> to the given location.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (ref T destination, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(!!T&amp; destination, void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(T % destination, void* source);" />
      <MemberSignature Language="F#" Value="static member Copy :  * nativeptr&lt;unit&gt; -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Copy (destination, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="T" RefType="ref" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-148">Tipo di valore da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-148">The type of value to copy.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="a6094-149">Posizione di destinazione della copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-149">The location to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="a6094-150">Puntatore al valore da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-150">A pointer to the value to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-151">Copia un valore di tipo <typeparamref name="T" /> nella posizione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-151">Copies a value of type <typeparamref name="T" /> to the given location.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlock (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="a6094-152">Indirizzo di destinazione in cui eseguire la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-152">The destination address to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="a6094-153">Indirizzo di origine da cui eseguire la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-153">The source address to copy from.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="a6094-154">Il numero di byte da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-154">The number of bytes to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-155">Copia i byte dall'indirizzo di origine all'indirizzo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-155">Copies bytes from the source address to the destination address.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlock : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlock (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="a6094-156">Indirizzo di destinazione in cui eseguire la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-156">The destination address to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="a6094-157">Indirizzo di origine da cui eseguire la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-157">The source address to copy from.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="a6094-158">Il numero di byte da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-158">The number of bytes to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-159">Copia i byte dall'indirizzo di origine all'indirizzo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-159">Copies bytes from the source address to the destination address.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlockUnaligned (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned :  *  * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" />
        <Parameter Name="source" Type="System.Byte" RefType="ref" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="a6094-160">Indirizzo di destinazione in cui eseguire la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-160">The destination address to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="a6094-161">Indirizzo di origine da cui eseguire la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-161">The source address to copy from.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="a6094-162">Il numero di byte da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-162">The number of bytes to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-163">Copia i byte dall'indirizzo di origine all'indirizzo di destinazione senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-163">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member CopyBlockUnaligned : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned (destination, source, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="a6094-164">Indirizzo di destinazione in cui eseguire la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-164">The destination address to copy to.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="a6094-165">Indirizzo di origine da cui eseguire la copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-165">The source address to copy from.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="a6094-166">Il numero di byte da copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-166">The number of bytes to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-167">Copia i byte dall'indirizzo di origine all'indirizzo di destinazione senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-167">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlock (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress">
          <span data-ttu-id="a6094-168">Indirizzo dell'inizio del blocco di memoria da inizializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-168">The address of the start of the memory block to initialize.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a6094-169">Valore di inizializzazione del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-169">The value to initialize the block to.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="a6094-170">Numero di byte da inizializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-170">The number of bytes to initialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-171">Inizializza un blocco di memoria in corrispondenza della posizione specificata con un valore iniziale specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-171">Initializes a block of memory at the given location with a given initial value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlock : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlock (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress">
          <span data-ttu-id="a6094-172">Indirizzo dell'inizio del blocco di memoria da inizializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-172">The address of the start of the memory block to initialize.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a6094-173">Valore di inizializzazione del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-173">The value to initialize the block to.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="a6094-174">Numero di byte da inizializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-174">The number of bytes to initialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-175">Inizializza un blocco di memoria in corrispondenza della posizione specificata con un valore iniziale specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-175">Initializes a block of memory at the given location with a given initial value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlockUnaligned (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned :  * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress">
          <span data-ttu-id="a6094-176">Indirizzo dell'inizio del blocco di memoria da inizializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-176">The address of the start of the memory block to initialize.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a6094-177">Valore di inizializzazione del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-177">The value to initialize the block to.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="a6094-178">Numero di byte da inizializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-178">The number of bytes to initialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-179">Inizializza un blocco di memoria in corrispondenza della posizione specificata con un valore iniziale specificato senza presupporre l'allineamento dipendente dall'architettura dell'indirizzo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-179">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberSignature Language="F#" Value="static member InitBlockUnaligned : nativeptr&lt;unit&gt; * byte * uint32 -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned (startAddress, value, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress">
          <span data-ttu-id="a6094-180">Indirizzo dell'inizio del blocco di memoria da inizializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-180">The address of the start of the memory block to initialize.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a6094-181">Valore di inizializzazione del blocco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-181">The value to initialize the block to.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="a6094-182">Numero di byte da inizializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-182">The number of bytes to initialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-183">Inizializza un blocco di memoria in corrispondenza della posizione specificata con un valore iniziale specificato senza presupporre l'allineamento dipendente dall'architettura dell'indirizzo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-183">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressGreaterThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressGreaterThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressGreaterThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressGreaterThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressGreaterThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressGreaterThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" />
        <Parameter Name="right" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddressLessThan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool IsAddressLessThan&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAddressLessThan&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsAddressLessThan(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool IsAddressLessThan(T % left, T % right);" />
      <MemberSignature Language="F#" Value="static member IsAddressLessThan :  *  -&gt; bool" Usage="System.Runtime.CompilerServices.Unsafe.IsAddressLessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T" RefType="ref" />
        <Parameter Name="right" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Read(void* source);" />
      <MemberSignature Language="F#" Value="static member Read : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-184">Il tipo da leggere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-184">The type to read.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-185">Posizione da cui leggere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-185">The location to read from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-186">Legge un valore di tipo <typeparamref name="T" /> dalla posizione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-186">Reads a value of type <typeparamref name="T" /> from the given location.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-187">Oggetto di tipo <typeparamref name="T" /> letto dalla posizione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-187">An object of type <typeparamref name="T" /> read from the given location.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (ref byte source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(unsigned int8&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUnaligned(Of T) (ByRef source As Byte) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(System::Byte % source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned :  -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-188">Il tipo da leggere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-188">The type to read.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-189">Posizione da cui leggere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-189">The location to read from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-190">Legge un valore di tipo <typeparamref name="T" /> dalla posizione specificata senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-190">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-191">Oggetto di tipo <typeparamref name="T" /> letto dalla posizione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-191">An object of type <typeparamref name="T" /> read from the given location.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(void* source);" />
      <MemberSignature Language="F#" Value="static member ReadUnaligned : nativeptr&lt;unit&gt; -&gt; 'T" Usage="System.Runtime.CompilerServices.Unsafe.ReadUnaligned source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-192">Il tipo da leggere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-192">The type to read.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-193">Posizione da cui leggere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-193">The location to read from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-194">Legge un valore di tipo <typeparamref name="T" /> dalla posizione specificata senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-194">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-195">Oggetto di tipo <typeparamref name="T" /> letto dalla posizione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-195">An object of type <typeparamref name="T" /> read from the given location.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberSignature Language="F#" Value="static member SizeOf : unit -&gt; int" Usage="System.Runtime.CompilerServices.Unsafe.SizeOf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-196">Il tipo di oggetto le cui dimensioni viene recuperato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-196">The type of object whose size is retrieved.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="a6094-197">Restituisce le dimensioni di un oggetto del parametro di tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-197">Returns the size of an object of the given type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-198">Dimensioni di un oggetto di tipo <typeparamref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-198">The size of an object of type <typeparamref name="T" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* Subtract&lt;T&gt; (void* source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* Subtract&lt;T&gt;(void* source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* Subtract(void* source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract : nativeptr&lt;unit&gt; * int -&gt; nativeptr&lt;unit&gt;" Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="elementOffset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, int elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * int -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-199">Il tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-199">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-200">Riferimento da cui sottrarre l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-200">The reference to subtract the offset from.</span>
          </span>
        </param>
        <param name="elementOffset">
          <span data-ttu-id="a6094-201">Offset da sottrarre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-201">The offset to subtract.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-202">Sottrae un offset di elemento dal riferimento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-202">Subtracts an element offset from the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-203">Nuovo riferimento che riflette la sottrazione dell'offset dal puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-203">A new reference that reflects the subraction of offset from pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, IntPtr elementOffset);" />
      <MemberSignature Language="F#" Value="static member Subtract :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.Subtract (source, elementOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-204">Il tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-204">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-205">Riferimento da cui sottrarre l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-205">The reference to subtract the offset from.</span>
          </span>
        </param>
        <param name="elementOffset">
          <span data-ttu-id="a6094-206">Offset da sottrarre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-206">The offset to subtract.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-207">Sottrae un offset di elemento dal riferimento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-207">Subtracts an element offset from the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-208">Nuovo riferimento che riflette la sottrazione dell'offset dal puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-208">A new reference that reflects the subraction of offset from pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SubtractByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SubtractByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % SubtractByteOffset(T % source, IntPtr byteOffset);" />
      <MemberSignature Language="F#" Value="static member SubtractByteOffset :  * nativeint -&gt; " Usage="System.Runtime.CompilerServices.Unsafe.SubtractByteOffset (source, byteOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-209">Il tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-209">The type of reference.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="a6094-210">Riferimento da cui sottrarre l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-210">The reference to subtract the offset from.</span>
          </span>
        </param>
        <param name="bytesOffset">
          <span data-ttu-id="a6094-211">Offset da sottrarre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-211">The offset to subtract.</span>
          </span>
        </param>
        <param name="byteOffset">To be added.</param>
        <summary>
          <span data-ttu-id="a6094-212">Sottrae un offset di byte dal riferimento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-212">Subtracts a byte offset from the given reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6094-213">Nuovo riferimento che riflette la sottrazione dell'offset di byte dal puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-213">A new reference that reflects the subraction of byte offset from pointer.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Write(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member Write : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-214">Tipo di valore da scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-214">The type of value to write.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="a6094-215">Posizione in cui scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-215">The location to write to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a6094-216">Valore da scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-216">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-217">Scrive un valore di tipo <typeparamref name="T" /> nella posizione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-217">Writes a value of type <typeparamref name="T" /> to the given location.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (ref byte destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(unsigned int8&amp; destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUnaligned(Of T) (ByRef destination As Byte, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(System::Byte % destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned :  * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-218">Tipo di valore da scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-218">The type of value to write.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="a6094-219">Posizione in cui scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-219">The location to write to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a6094-220">Valore da scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-220">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-221">Scrive un valore di tipo <typeparamref name="T" /> nella posizione specificata senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-221">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(void* destination, T value);" />
      <MemberSignature Language="F#" Value="static member WriteUnaligned : nativeptr&lt;unit&gt; * 'T -&gt; unit" Usage="System.Runtime.CompilerServices.Unsafe.WriteUnaligned (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="a6094-222">Tipo di valore da scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-222">The type of value to write.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="a6094-223">Posizione in cui scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-223">The location to write to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a6094-224">Valore da scrivere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-224">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6094-225">Scrive un valore di tipo <typeparamref name="T" /> nella posizione specificata senza presupporre l'allineamento dipendente dall'architettura degli indirizzi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6094-225">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>