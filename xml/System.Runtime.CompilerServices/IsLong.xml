<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="000be-101">Indica che un Integer modificato è un valore <see langword="long" /> C++ standard.</span><span class="sxs-lookup"><span data-stu-id="000be-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span></span> <span data-ttu-id="000be-102">Questa classe non può essere ereditata.</span><span class="sxs-lookup"><span data-stu-id="000be-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="000be-103">Lo standard C++ indica che un `long` e un valore integer sono tipi distinti.</span><span class="sxs-lookup"><span data-stu-id="000be-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="000be-104">Tuttavia, sono entrambi rappresentati utilizzando `ELEMENT_TYPE_I4` in un assembly.</span><span class="sxs-lookup"><span data-stu-id="000be-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="000be-105">Per distinguere un `long` da un valore integer in C++, il compilatore Microsoft C++ aggiunge il <xref:System.Runtime.CompilerServices.IsLong> modificatore in qualsiasi istanza di un `long` caso di generazione dell'istanza.</span><span class="sxs-lookup"><span data-stu-id="000be-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="000be-106">Questo processo è molto importante per mantenere l'indipendenza dai tipi a livello di linguaggio.</span><span class="sxs-lookup"><span data-stu-id="000be-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="000be-107">I compilatori creano modificatori personalizzati all'interno dei metadati per modificare il modo in cui il compilatore JIT just-in-time gestisce valori quando il comportamento predefinito non è appropriato.</span><span class="sxs-lookup"><span data-stu-id="000be-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="000be-108">Quando il compilatore JIT rileva un modificatore personalizzato, gestisce il valore in modo che specifica il modificatore.</span><span class="sxs-lookup"><span data-stu-id="000be-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="000be-109">Compilatori possono applicare modificatori personalizzati a metodi, parametri e valori restituiti.</span><span class="sxs-lookup"><span data-stu-id="000be-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="000be-110">Il compilatore JIT deve rispondere ai modificatori obbligatori, ma possa ignorare i modificatori facoltativi.</span><span class="sxs-lookup"><span data-stu-id="000be-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="000be-111">È possibile creare i modificatori personalizzati nei metadati tramite una delle tecniche seguenti:</span><span class="sxs-lookup"><span data-stu-id="000be-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="000be-112">Utilizzo dei metodi di <xref:System.Reflection.Emit.TypeBuilder> classe, ad esempio <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, e <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="000be-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="000be-113">Generazione di un file di istruzioni di Microsoft intermediate language (MSIL) che contiene chiamate a `modopt` e `modreq`e l'assemblaggio del file con il [Ilasm.exe (Assembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="000be-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="000be-114">Usando l'API di reflection non gestita.</span><span class="sxs-lookup"><span data-stu-id="000be-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="000be-115">Nell'esempio riportato di seguito viene illustrato come creare un <xref:System.Runtime.CompilerServices.IsLong> oggetto in un assembly tramite reflection.</span><span class="sxs-lookup"><span data-stu-id="000be-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>