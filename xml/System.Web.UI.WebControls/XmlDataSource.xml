<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c393e577e4867ed73969b857155f8f0c054aa059" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30601365" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un'origine dati XML per i controlli associati a dati.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#introduction)  
  
-   [Origini dei dati XML](#source_of_xml_data)  
  
-   [Aggiornamento dei dati XML](#updating_xml_data)  
  
-   [Specifica una trasformazione XSL](#specifying_an_xsl_transformation)  
  
-   [Il filtro utilizzando un'espressione XPath](#filtering_using_an_xpath_expression)  
  
-   [Memorizzazione nella cache](#caching)  
  
-   [Funzionalità aggiuntive](#additional_features)  
  
-   [Oggetto visualizzazione dati](#data_view_object)  
  
-   [Sintassi dichiarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo è un controllo origine dati che presenta i dati XML per i controlli con associazione a dati. Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo può essere utilizzato dai controlli con associazione a dati per visualizzare i dati gerarchici e tabulari. Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo viene in genere utilizzato per visualizzare i dati XML gerarchici in scenari di sola lettura. Poiché il <xref:System.Web.UI.WebControls.XmlDataSource> controllo si estende il <xref:System.Web.UI.HierarchicalDataSourceControl> (classe), funziona con dati gerarchici. Il <xref:System.Web.UI.WebControls.XmlDataSource> implementa anche di controllare il <xref:System.Web.UI.IDataSource> interfaccia e funziona con tabulare, o elenco i dati.  
  
> [!NOTE]
>  Per motivi di sicurezza, nessuno del <xref:System.Web.UI.WebControls.XmlDataSource> le proprietà del controllo vengono archiviate nello stato di visualizzazione. Poiché si tratta tecnicamente possibile decodificare il contenuto dello stato di visualizzazione sul client, l'archiviazione di informazioni riservate riguardanti la struttura dei dati o il relativo contenuto potrebbe esporre l'utente a una minaccia di diffusione di informazioni. Si noti che se è necessario archiviare informazioni quali <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà nello stato di visualizzazione, è possibile abilitare la crittografia proteggere il contenuto impostando <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> sul `@ Page` direttiva.  
  
 Pagina usare gli sviluppatori di <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati XML con i controlli associati a dati.  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>Origini dei dati XML  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> in genere carica i dati XML da un file XML, specificata dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà. Dati XML possono essere archiviati anche direttamente dal controllo origine dati in forma di stringa utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà. Se si desidera trasformare i dati XML prima che venga visualizzato da un controllo con associazione a dati, è possibile fornire un foglio di stile del foglio di stile XSL (Extensible Language) per la trasformazione. Come con i dati XML, in genere è necessario caricare il foglio di stile da un file, indicata dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà, ma è anche possibile archiviarlo in forma di stringa direttamente utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà.  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>Aggiornamento dei dati XML  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo è in genere utilizzato negli scenari di dati di sola lettura in cui un controllo con associazione a dati consente di visualizzare dati XML. Tuttavia, è inoltre possibile utilizzare il <xref:System.Web.UI.WebControls.XmlDataSource> per modificare i dati XML. Per modificare i dati XML, chiamare il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo per recuperare un <xref:System.Xml.XmlDataDocument> oggetto che è una rappresentazione in memoria dei dati XML. È possibile utilizzare il modello a oggetti esposto dal <xref:System.Xml.XmlDataDocument> e <xref:System.Xml.XmlNode> oggetti contiene o utilizzare un'espressione di filtro XPath per modificare i dati del documento. Dopo aver effettuato le modifiche alla rappresentazione in memoria dei dati XML, è possibile salvarlo sul disco chiamando il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo.  
  
 Esistono alcune restrizioni per le funzionalità di modifica di <xref:System.Web.UI.WebControls.XmlDataSource> controllo:  
  
-   I dati XML devono essere caricati da un file XML indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà, non da XML inline specificato la <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà.  
  
-   Può essere specificata alcuna trasformazione XSLT il <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> o <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà.  
  
-   Il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo gestisce simultanee operazioni di salvataggio da richieste diverse. Se più di un utente sta modificando un file XML tramite il <xref:System.Web.UI.WebControls.XmlDataSource>, non c'è garanzia che tutti gli utenti operano con gli stessi dati. È inoltre possibile per un <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> esito negativo a causa di questi stessi problemi di concorrenza dell'operazione.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>Specifica una trasformazione XSL  
 Un'operazione comune eseguita con dati XML è la trasformazione, da un set di dati XML in un altro. Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo supporta le trasformazioni XML con il <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> che specificano un foglio di stile XSL da applicare ai dati XML prima di essere passato a un controllo con associazione a dati, e <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> proprietà, che consente di specificare argomenti del foglio di stile XSLT dinamici utilizzabile da un foglio di stile XSL durante la trasformazione. Se si specifica un'espressione di filtro utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà, viene applicato al termine della trasformazione.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.XmlDataSource> classe utilizza deprecate <xref:System.Xml.Xsl.XslTransform> classe per eseguire trasformazioni XSL. Se si desidera utilizzare le funzionalità del foglio di stile che sono stati introdotti dopo il <xref:System.Xml.Xsl.XslTransform> classe è stata deprecata, applicare manualmente le trasformazioni utilizzando la <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>Il filtro utilizzando un'espressione XPath  
 Per impostazione predefinita, il <xref:System.Web.UI.WebControls.XmlDataSource> controllo carica tutti i dati XML nel file XML identificato dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà o trovato inline nella <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà, ma è possibile filtrare i dati utilizzando un'espressione XPath. Il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà supporta un filtro XPath sintassi che viene applicato dopo il caricamento e trasformare dati XML.  
  
<a name="caching"></a>   
## <a name="caching"></a>Memorizzazione nella cache  
 Per motivi di prestazioni, la memorizzazione nella cache è abilitata per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo per impostazione predefinita. Apertura e la lettura di un file XML nel server ogni volta che viene richiesta una pagina può ridurre le prestazioni dell'applicazione. La memorizzazione nella cache consente di ridurre il carico di elaborazione sul server a scapito della memoria sul server Web. Nella maggior parte dei casi si tratta di un buon compromesso. Il <xref:System.Web.UI.WebControls.XmlDataSource> memorizza automaticamente i dati quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true`e <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> proprietà è impostata per il numero di secondi che la cache memorizza i dati prima che venga invalidata. È possibile utilizzare il <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> per ottimizzare ulteriormente il comportamento di memorizzazione nella cache del controllo origine dati.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>Funzionalità aggiuntive  
 Nella tabella seguente sono elencate le funzionalità aggiuntive supportate dal <xref:System.Web.UI.WebControls.XmlDataSource> controllo.  
  
|Funzionalità|Descrizione|  
|----------------|-----------------|  
|Ordinamento|Non supportato per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo.|  
|Filtro|Il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà può essere utilizzata per filtrare i dati XML utilizzando un'espressione XPath appropriata.|  
|Paging|Non supportato per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo.|  
|Updating|Supportato modificando il <xref:System.Xml.XmlDataDocument> direttamente e chiamando quindi il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo.|  
|Eliminazione|Supportato modificando il <xref:System.Xml.XmlDataDocument> direttamente e chiamando quindi il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo.|  
|Inserimento|Supportato modificando il <xref:System.Xml.XmlDataDocument> direttamente e chiamando quindi il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo.|  
|Memorizzazione nella cache|Abilitato per impostazione predefinita, con la <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> proprietà è impostata su 0 (infinito) e <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> proprietà impostata su <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>.|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>Oggetto visualizzazione dati  
 Poiché il <xref:System.Web.UI.WebControls.XmlDataSource> controllo supporta i controlli associati a dati che visualizzano dati gerarchici e i controlli che visualizzano dati tabulari, il controllo origine dati supporta più tipi di oggetti vista origine dati nei relativi dati XML sottostanti. Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo recupera un singolo denominato <xref:System.Web.UI.WebControls.XmlDataSourceView> oggetto quando viene utilizzato con un controllo con associazione a dati che visualizza dati tabulari. Il <xref:System.Web.UI.IDataSource.GetViewNames%2A> metodo identifica questa unica visualizzazione denominata. Se usato con un controllo con associazione a dati che visualizza i dati gerarchici, il <xref:System.Web.UI.WebControls.XmlDataSource> controllo recupera un <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> per qualsiasi percorso gerarchico univoco passato al <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> metodo.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 In questa sezione contiene due esempi di codice. Nel primo esempio di codice viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML da file XML di esempio. Nel secondo esempio viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare i dati XML.  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML. Il <xref:System.Web.UI.WebControls.XmlDataSource> carica i dati XML dal file XML identificato dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare i dati XML. Il <xref:System.Web.UI.WebControls.Repeater> controllo utilizza un'espressione di associazione di dati XPath per associare i dati degli elementi del file XML del documento che la <xref:System.Web.UI.WebControls.XmlDataSource> rappresenta. Per ulteriori informazioni su `XPath` e `XPathSelect` sintassi di associazione dati, vedere la <xref:System.Web.UI.XPathBinder> classe.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero di secondi durante i quali il controllo origine dati memorizza nella cache i dati che ha recuperato.</summary>
        <value>Numero di secondi durante i quali il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> memorizza nella cache i risultati di un'operazione di recupero dei dati. Il valore predefinito è 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo memorizza automaticamente i dati quando si applica quanto segue:  
  
-   La proprietà <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true`.  
  
-   Il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostata su un valore maggiore di 0, che indica il numero di secondi durante i quali la cache memorizza i dati prima che venga invalidata.  
  
 Qualsiasi modifica di <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà o il contenuto del file che contiene i dati XML provoca l'invalidamento della cache.  
  
 Per impostazione predefinita, il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostata su 0, che indica una cache indefinita, e l'origine dati verrà memorizzati nella cache dati fino a quando non viene modificato il file XML da cui dipende.  
  
 Il comportamento della cache è determinato da una combinazione della durata e <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> impostazione. Se <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> è impostato su <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, <xref:System.Web.UI.WebControls.XmlDataSource> controllo memorizza nella cache di dati nella prima operazione di recupero di dati, li mantiene in memoria per la quantità di tempo specificato da <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>e invalida il tempo trascorso. La cache viene quindi aggiornata durante l'operazione successiva. Se <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> è impostato su <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, il controllo origine dati memorizza i dati nella prima operazione di recupero di dati, ma reimposta l'intervallo di tempo che vengono mantenuti nella cache per ogni operazione successiva. La cache scadrà solo se è presente alcuna attività per un periodo di tempo uguale al <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> dall'ultimo recupero dei dati.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come abilitare la memorizzazione nella cache quando si utilizza il <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati contenuti in un file XML. La memorizzazione nella cache è abilitata quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostato sul numero di secondi che viene memorizzato nella cache i dati dal controllo origine dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta i criteri di scadenza della cache che vengono combinati con la durata della cache per descrivere il comportamento di memorizzazione nella cache utilizzata dal controllo origine dati.</summary>
        <value>Uno dei valori di <see cref="T:System.Web.UI.DataSourceCacheExpiry" />. L'impostazione dei criteri di scadenza della cache predefinita è <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento della cache è determinato da una combinazione di <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> impostazioni. Se il <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> è impostato su <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, <xref:System.Web.UI.WebControls.XmlDataSource> memorizza nella cache di dati nella prima operazione di recupero di dati, li mantiene in memoria per la quantità di tempo specificato da <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>e invalida il tempo trascorso. La cache viene quindi aggiornata durante l'operazione successiva. Se il <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> è impostato su <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, il controllo origine dati memorizza i dati nella prima operazione di recupero di dati, ma reimposta l'intervallo di tempo che vengono mantenuti nella cache per ogni operazione successiva. Solo se è presente alcuna attività per un periodo di tempo uguale alla scadenza della cache di <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> dall'ultimo recupero dei dati.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come abilitare la memorizzazione nella cache quando si utilizza il <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati contenuti in un file XML. La memorizzazione nella cache è abilitata quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostato sul numero di secondi che viene memorizzato nella cache i dati dal controllo origine dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della chiave di cache per il controllo origine dati dallo stato di visualizzazione o aggiunge la chiave di cache allo stato di visualizzazione.</summary>
        <value>Valore della chiave di cache o stringa vuota se la chiave di cache non è in uno stato di visualizzazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> proprietà consente di creare manualmente una chiave di cache per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo. Ciò è necessario solo se si assegna un oggetto che contiene i dati XML o XSLT per il controllo anziché specificare un file che contiene i dati. Quando si assegnano dati al controllo, i dati non viene utilizzati per generare la chiave di cache. In alternativa, è necessario generare una chiave di cache univoco manualmente se si prevede di aggiornare l'oggetto dati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta una dipendenza di chiave definita dall'utente collegata a tutti gli oggetti cache dati creati dal controllo origine dati. Tutti gli oggetti cache scadono in modo esplicito quando scade la chiave.</summary>
        <value>Chiave che identifica tutti gli oggetti cache creati dal controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo supporta la memorizzazione nella cache di dati. Mentre vengono memorizzati i dati, il <xref:System.Web.UI.WebControls.XmlDataSource> recupera i dati dalla cache piuttosto che dal file di dati sottostante. Alla scadenza della cache, recupera i dati dal file sottostante e nuovamente memorizza nella cache i dati.  
  
 È possibile impostare il <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> proprietà per creare una dipendenza tra tutte le voci di cache creati il <xref:System.Web.UI.WebControls.XmlDataSource> controllo e la chiave. A livello di codice, si possono invalidare tutte le voci di cache in qualsiasi momento per la scadenza della chiave.  
  
 A causa delle proprietà utilizzate per creare il <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>, è possibile che più <xref:System.Web.UI.WebControls.XmlDataSource> controlli possono utilizzare la stessa cache negli scenari in cui vengono caricati gli stessi dati allo stesso file XML e file di trasformazione e avere lo stesso <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>impostato.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un blocco di dati XML a cui si associa il controllo origine dati.</summary>
        <value>Stringa di dati XML inline a cui si associa il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Negli scenari dichiarativi, la <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà viene specificata come una proprietà interna multilinea del <xref:System.Web.UI.WebControls.XmlDataSource> oggetto. Una proprietà interna è compatibile con i dati XML, perché consente di formattare i dati XML in alcun modo e ignorare i problemi di spaziatura interna di caratteri, ad esempio padding di virgolette singole.  
  
 Se entrambi i <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> sono impostate, il <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà ha la precedenza e i dati nel file XML vengono utilizzati invece i dati XML specificati nel <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà.  
  
 Se si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà, il <xref:System.Web.UI.IDataSource.DataSourceChanged> evento viene generato. Se è abilitata la memorizzazione nella cache e si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>, la cache viene invalidata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati XML contenuti di <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà con un <xref:System.Web.UI.WebControls.TreeView> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È in corso il caricamento del documento.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica il nome file di un file XML a cui si associa il controllo origine dati.</summary>
        <value>Percorso fisico assoluto o relativo del file XML contenente i dati rappresentati dal controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se entrambi i <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> sono impostate, il <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà ha la precedenza e i dati nel file XML vengono utilizzati invece i dati XML specificati nel <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà.  
  
 Se si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà, il <xref:System.Web.UI.IDataSource.DataSourceChanged> evento viene generato. Se è abilitata la memorizzazione nella cache e si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>, la cache viene invalidata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati XML contenuti in un file con un <xref:System.Web.UI.WebControls.TreeView> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È in corso il caricamento del documento.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore indicante se la memorizzazione di dati nella cache è abilitata nel controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</summary>
        <value>
          <see langword="true" /> se la memorizzazione di dati nella cache è abilitata per il controllo origine dati; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo memorizza automaticamente i dati quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true`. Per impostazione predefinita, il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostata su 0, che indica una cache indefinita, e l'origine dati verrà memorizzati nella cache dati fino a quando non viene modificato il file XML da cui dipende. Se si imposta la <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> proprietà su un valore maggiore di 0, la cache memorizza i dati per questo numero di secondi prima del recupero di un nuovo set.  
  
 Se il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> è impostata, le voci della cache non vengono invalidate automaticamente quando si modificano i parametri nell'elenco di argomenti di trasformazioni. In tal caso, è necessario scrivere codice per invalidare la cache impostando la <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come abilitare la memorizzazione nella cache quando si utilizza il <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati contenuti in un file XML. La memorizzazione nella cache è abilitata quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostato sul numero di secondi che viene memorizzato nella cache i dati dal controllo origine dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">Espressione XPath che identifica il nodo da cui è stata compilata la visualizzazione gerarchica corrente.</param>
        <summary>Ottiene l'oggetto visualizzazione origine dati per il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />. Il parametro <paramref name="viewPath" /> può essere un'espressione XPath.</summary>
        <returns>Restituisce un oggetto <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> che rappresenta una visualizzazione singola dei dati a partire dal nodo di dati identificato da <paramref name="viewPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile chiamare il <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> metodo per recuperare un <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> oggetto associato di <xref:System.Web.UI.WebControls.XmlDataSource> controllo. Se si specifica `viewPath` valore, il <xref:System.Web.UI.WebControls.XmlDataSource> il controllo viene restituito un oggetto vista origine dati che rappresenta la visualizzazione nel nodo identificato da `viewPath`, insieme a tutti i relativi nodi figlio. Se si imposta `viewPath` a <xref:System.String.Empty?displayProperty=nameWithType>, <xref:System.Web.UI.WebControls.XmlDataSource> controllare controlli il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà per determinare il nodo radice da cui compilare la vista origine dati. Se il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> è impostata, il <xref:System.Web.UI.WebControls.XmlDataSource> controllo viene utilizzato per restituire una vista origine dati nello stesso modo `viewPath` viene utilizzata l'espressione. Se il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> non è impostata, il <xref:System.Web.UI.WebControls.XmlDataSource> controllo restituisce una visualizzazione di tutti i nodi di dati nei dati XML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Carica in memoria i dati XML, direttamente dall'archivio dati sottostante o dalla cache, e li restituisce nella forma di un oggetto <see cref="T:System.Xml.XmlDataDocument" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlDataDocument" /> che rappresenta l'XML specificato nella proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> o nel file identificato dalla proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> con l'applicazione di eventuali trasformazioni e query della proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo per l'accesso diretto a una rappresentazione in memoria dei dati XML sottostanti.  
  
 È possibile modificare l'oggetto restituito <xref:System.Xml.XmlDataDocument> e quindi chiamare <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> per mantenere le modifiche apportate al file XML specificato per il <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà. Alcuni requisiti devono essere soddisfatti prima di <xref:System.Xml.XmlDataDocument> oggetto può essere salvato correttamente. Per altre informazioni, vedere il metodo <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>.  
  
   
  
## Examples  
 In questa sezione contiene due esempi di codice. Nel primo esempio viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare e modificare i dati XML contenuti in un file XML. Nel secondo esempio viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare e modificare i dati XML contenuti in un file XML.  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare e modificare i dati XML contenuti in un file XML. I dati vengono modificati in memoria utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo ogni volta che si seleziona un <xref:System.Web.UI.WebControls.TreeView> nodo ed è salvato il file XML. Infine, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> viene chiamato sul <xref:System.Web.UI.WebControls.TreeView> controllo per aggiornare i dati che vengono visualizzati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare e modificare i dati XML contenuti in un file XML. Come nell'esempio precedente, i dati vengono modificati in memoria usando il <xref:System.Xml.XmlDataDocument> recuperati tramite il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo. Infine, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> viene chiamato sul <xref:System.Web.UI.WebControls.TreeView> controllo per aggiornare i dati che vengono visualizzati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Il file XML negli esempi di codice presenta i seguenti dati:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Un URL viene specificato per la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />. Il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> tuttavia non dispone delle autorizzazioni corrette per la risorsa Web.</exception>
        <exception cref="T:System.NotSupportedException">Un URL è specificato per la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />; tuttavia, non è un URL basato su HTTP.  
  
 \- oppure -  
  
 Nella finestra di progettazione non è stato eseguito in modo corretto il mapping di un percorso relativo alla fase di progettazione prima di utilizzare il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.  
  
 \- oppure -  
  
 Sono abilitate sia la memorizzazione nella cache che la rappresentazione del client. Il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> non supporta la memorizzazione nella cache quando è abilitata la rappresentazione del client.</exception>
        <exception cref="T:System.Web.HttpException">L'accesso al percorso specificato per la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> viene negato.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> prima che il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> esegua una trasformazione XSLT sui suoi dati XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 Il metodo <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML trasformati. La trasformazione XML viene eseguita utilizzando il foglio di stile indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà. Inoltre, il foglio di stile utilizza gli argomenti di trasformazione che vengono passati al controllo origine dati in un <xref:System.Xml.Xsl.XsltArgumentList> oggetto in fase di esecuzione. L'esempio di codice viene illustrato come passare il <xref:System.Xml.Xsl.XsltArgumentList> oggetto per il controllo origine dati mediante la gestione di <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> set di eventi con un gestore dell'evento personalizzato, identificato dal nome del metodo per il <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> metodo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La trasformazione XML viene eseguita utilizzando il seguente foglio di stile.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare il <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> metodo della classe di base in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Salva i dati XML al momento in memoria utilizzando il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> su disco se è impostata la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mentre il <xref:System.Web.UI.WebControls.XmlDataSource> controllo viene in genere utilizzato negli scenari di associazione di dati di sola lettura, è possibile utilizzare il <xref:System.Web.UI.WebControls.XmlDataSource> per modificare i dati XML nel file di dati XML sottostante. In questi scenari, i dati XML vengono caricati da un file XML per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo. Si modifica il <xref:System.Xml.XmlDataDocument> in memoria utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> (metodo) e quindi salvare il file di dati XML tramite la chiamata di <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> (metodo). Questo scenario XML modificabile è possibile quando vengono soddisfatte le condizioni seguenti:  
  
-   I dati XML vengono caricati da un file XML indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> non dai dati XML inline specificati nella proprietà di <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà.  
  
-   Viene specificata alcuna trasformazione XSLT nel <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> o <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà.  
  
 Il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo gestisce simultanee operazioni di salvataggio da richieste diverse. Se più di un utente sta modificando un file XML tramite il <xref:System.Web.UI.WebControls.XmlDataSource> di controllo, non c'è garanzia che tutti gli utenti operano con gli stessi dati. È inoltre possibile per un <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> esito negativo a causa di questi stessi problemi di concorrenza dell'operazione.  
  
   
  
## Examples  
 In questa sezione contiene due esempi di codice. Nel primo esempio di codice viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare e modificare i dati XML contenuti in un file XML. Nel secondo esempio di codice viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare e modificare i dati XML contenuti in un file XML.  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare e modificare i dati XML contenuti in un file XML. I dati vengono modificati in memoria utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo ogni volta che si seleziona un <xref:System.Web.UI.WebControls.TreeView> nodo ed è salvato il file XML. Infine, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> viene chiamato sul <xref:System.Web.UI.WebControls.TreeView> controllo per aggiornare i dati che vengono visualizzati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare e modificare i dati XML contenuti in un file XML. Come nell'esempio precedente, i dati vengono modificati in memoria usando il <xref:System.Xml.XmlDataDocument> oggetto recuperato dal <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo. Infine, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> viene chiamato sul <xref:System.Web.UI.WebControls.TreeView> controllo per aggiornare i dati che vengono visualizzati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Il file XML negli esempi di codice presenta i seguenti dati:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">I dati XML sono stati caricati utilizzando la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> anziché la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />.  
  
 \- oppure -  
  
 Un URL viene specificato per la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />. Il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> tuttavia non dispone delle autorizzazioni corrette per la risorsa Web.</exception>
        <exception cref="T:System.NotSupportedException">Un URL è specificato per la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />; tuttavia, non è un URL basato su HTTP.  
  
 \- oppure -  
  
 Nella finestra di progettazione non è stato eseguito in modo corretto il mapping di un percorso relativo alla fase di progettazione prima di utilizzare il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</exception>
        <exception cref="T:System.Web.HttpException">L'accesso al percorso specificato per la proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> viene negato.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
        <value>
          <see langword="true" /> se l'insieme è costituito da oggetti <see cref="T:System.Collections.IList" />, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. E può essere utilizzato solo quando il <xref:System.Web.UI.WebControls.XmlDataSource> esegue il cast dell'istanza per il <xref:System.ComponentModel.IListSource> interfaccia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
        <returns>Oggetto che implementa l'oggetto <see cref="T:System.Collections.IList" /> che può essere associato a un'origine dati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. E può essere utilizzato solo quando il <xref:System.Web.UI.WebControls.XmlDataSource> esegue il cast dell'istanza per il <xref:System.ComponentModel.IListSource> interfaccia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">Nome della visualizzazione da recuperare. Se viene specificato <see cref="F:System.String.Empty" />, viene recuperata la visualizzazione predefinita per il controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</param>
        <summary>Ottiene la visualizzazione origine dati denominata associata al controllo origine dati.</summary>
        <returns>Restituisce l'oggetto <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> denominato associato al controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="M:System.Web.UI.IDataSource.GetViewNames" />.</summary>
        <returns>Oggetto che implementa l'oggetto <see cref="T:System.Collections.ICollection" /> contenente i nomi che rappresentano l'elenco di oggetti visualizzazione associati all'oggetto <see cref="T:System.Web.UI.IDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. E può essere utilizzato solo quando il <xref:System.Web.UI.WebControls.XmlDataSource> esegue il cast dell'istanza per il <xref:System.Web.UI.IDataSource> interfaccia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un blocco di dati XSL (Extensible Stylesheet Language) che definisce una trasformazione XSLT da eseguire sui dati XML gestiti dal controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</summary>
        <value>Stringa di codice XSL inline che definisce una trasformazione XML da eseguire sui dati contenuti nelle proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> o <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Negli scenari dichiarativi, la <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà viene specificata come una proprietà interna multilinea del <xref:System.Web.UI.WebControls.XmlDataSource> oggetto. Una proprietà interna è compatibile con i dati del foglio di stile XSL, poiché consente di formattare il foglio di stile in alcun modo e ignorare i problemi di spaziatura interna di caratteri, ad esempio padding di virgolette singole.  
  
 Se entrambi i <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> sono impostate, il <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà ha la precedenza e i dati di file di foglio di stile XSL (XSL) viene utilizzati anziché gli elementi del foglio di stile specificati nel <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà. Se un'espressione XPath viene impostata utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà, viene applicato dopo la trasformazione dei dati XML.  
  
 Se si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà, il <xref:System.Web.UI.IDataSource.DataSourceChanged> evento viene generato. Se è abilitata la memorizzazione nella cache e si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, la cache viene invalidata.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.XmlDataSource> classe utilizza deprecate <xref:System.Xml.Xsl.XslTransform> classe per eseguire trasformazioni XSL. Se si desidera utilizzare le funzionalità del foglio di stile che sono stati introdotti dopo il <xref:System.Xml.Xsl.XslTransform> classe è stata deprecata, applicare manualmente le trasformazioni utilizzando la <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare i dati XML trasformati. Il foglio di stile che esegue la trasformazione è definito inline per la <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà del controllo origine dati.  
  
  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È in corso il caricamento del documento.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fornisce un elenco di argomenti XSLT utilizzati con il foglio di stile definito dalla proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> o <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> per eseguire una trasformazione sui dati XML.</summary>
        <value>Oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> che contiene i parametri e gli oggetti XSLT da applicare ai dati XML quando viene caricato dal controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> proprietà quando il <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> evento viene generato per verificare i parametri XSLT sono disponibili nel momento in cui la trasformazione XSLT viene applicata ai dati XML.  
  
 Se il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> è impostata, le voci della cache non vengono invalidate automaticamente quando si modificano i parametri nell'elenco di argomenti di trasformazioni. In tal caso, è necessario scrivere codice per invalidare la cache impostando la <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML trasformati. La trasformazione XML viene eseguita utilizzando il foglio di stile indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà. Inoltre, il foglio di stile utilizza gli argomenti di trasformazione che vengono passati al controllo origine dati in un <xref:System.Xml.Xsl.XsltArgumentList> oggetto in fase di esecuzione. L'esempio di codice viene illustrato come passare il <xref:System.Xml.Xsl.XsltArgumentList> al controllo origine dati mediante la gestione di <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> evento con un gestore dell'evento personalizzato.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La trasformazione dei dati XML viene eseguita con il seguente foglio di stile.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica il nome di un file XSL (Extensible Stylesheet Language), con estensione XSL, che definisce una trasformazione XSLT da eseguire sui dati XML gestiti dal controllo <see cref="T:System.Web.UI.WebControls.XmlDataSource" />.</summary>
        <value>Percorso fisico assoluto o relativo del file del foglio di stile XSL che definisce una trasformazione XML da eseguire sui dati contenuti nelle proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> o <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se entrambi i <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> sono impostate, il <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà ha la precedenza e i dati di file di foglio di stile XSL (XSL) viene utilizzati anziché gli elementi del foglio di stile specificati nel <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà. Se un'espressione XPath viene impostata utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà, viene applicato dopo la trasformazione dei dati XML.  
  
 Se si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà, il <xref:System.Web.UI.IDataSource.DataSourceChanged> evento viene generato. Se è abilitata la memorizzazione nella cache e si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, la cache viene invalidata.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.XmlDataSource> classe utilizza deprecate <xref:System.Xml.Xsl.XslTransform> classe per eseguire trasformazioni XSL. Se si desidera utilizzare le funzionalità del foglio di stile che sono stati introdotti dopo il <xref:System.Xml.Xsl.XslTransform> classe è stata deprecata, applicare manualmente le trasformazioni utilizzando la <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo e un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML in un Web form trasformati. La trasformazione viene eseguita utilizzando il foglio di stile indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà. È possibile specificare gli argomenti della trasformazione per foglio di stile usando un <xref:System.Xml.Xsl.XsltArgumentList>. Per altre informazioni, vedere la proprietà <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Il foglio di stile XSL che esegue la trasformazione XML presenta la struttura seguente:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È in corso il caricamento del documento.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima che il foglio di stile definito dalla proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> o identificato dalla proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> venga applicato ai dati XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> evento per impostare il <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> proprietà con un <xref:System.Xml.Xsl.XsltArgumentList> oggetto prima di <xref:System.Web.UI.WebControls.XmlDataSource> controllo esegue una trasformazione XML.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML trasformati. La trasformazione XML viene eseguita utilizzando il foglio di stile indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà. Inoltre, il foglio di stile utilizza gli argomenti di trasformazione che vengono passati al controllo origine dati in un <xref:System.Xml.Xsl.XsltArgumentList> in fase di esecuzione. L'esempio di codice viene illustrato come passare il <xref:System.Xml.Xsl.XsltArgumentList> oggetto per il controllo origine dati mediante la gestione di <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> evento con un gestore dell'evento personalizzato.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La trasformazione dei dati XML viene eseguita con il foglio di stile seguente:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica un'espressione XPath da applicare ai dati XML contenuti dalla proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> o dal file XML indicato dalla proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />.</summary>
        <value>Stringa che rappresenta un'espressione XPath che può essere utilizzata per filtrare i dati contenuti dalla proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> o dal file XML indicato dalla proprietà <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulle espressioni di associazione di dati XPath, vedere [Binding di un controllo tabulare al controllo XmlDataSource](http://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare i dati XML che sono stati filtrati utilizzando un'espressione XPath. In questo esempio, la sintassi XPath viene utilizzata per filtrare i dati XML quando la <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà del controllo origine dati è impostata e associa gli elementi di <xref:System.Web.UI.WebControls.Repeater> modello di controllo per i dati XML.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">È in corso il caricamento del documento.</exception>
      </Docs>
    </Member>
  </Members>
</Type>