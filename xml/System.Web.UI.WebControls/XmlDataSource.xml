<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="469e55d3a0574f997a8a334cced5357e542bcf9f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36378806" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an XML data source to data-bound controls.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#introduction)  
  
-   [Origini dei dati XML](#source_of_xml_data)  
  
-   [L'aggiornamento dei dati XML](#updating_xml_data)  
  
-   [Specifica una trasformazione XSL](#specifying_an_xsl_transformation)  
  
-   [Il filtro utilizzando un'espressione XPath](#filtering_using_an_xpath_expression)  
  
-   [Memorizzazione nella cache](#caching)  
  
-   [Funzionalità aggiuntive](#additional_features)  
  
-   [Oggetto della vista dati](#data_view_object)  
  
-   [Sintassi dichiarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo è un controllo origine dati che presenta i dati XML per i controlli associati a dati. Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo può essere utilizzato da tutti i controlli associati a dati per visualizzare i dati gerarchici e tabulari. Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo viene generalmente utilizzato per visualizzare i dati XML gerarchici in scenari di sola lettura. Poiché il <xref:System.Web.UI.WebControls.XmlDataSource> il controllo si estende il <xref:System.Web.UI.HierarchicalDataSourceControl> (classe), funziona con dati gerarchici. Il <xref:System.Web.UI.WebControls.XmlDataSource> implementa anche di controllare il <xref:System.Web.UI.IDataSource> interfaccia e funziona con tabulare, o lo stile di elenco, i dati.  
  
> [!NOTE]
>  Per motivi di sicurezza, nessuno del <xref:System.Web.UI.WebControls.XmlDataSource> le proprietà del controllo vengono archiviate nello stato di visualizzazione. Poiché si tratta tecnicamente possibile decodificare il contenuto dello stato di visualizzazione sul client, l'archiviazione di informazioni riservate riguardanti la struttura di data o il relativo contenuto potrebbe esporre l'utente a una minaccia di diffusione di informazioni. Si noti che se è necessario archiviare informazioni quali <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà nello stato di visualizzazione, è possibile abilitare la crittografia proteggere il contenuto impostando <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> sul `@ Page` direttiva.  
  
 Pagina usare gli sviluppatori di <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati XML utilizzando i controlli associati a dati.  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>Origini dei dati XML  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> in genere carica i dati XML da un file XML, specificato mediante il <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà. Dati XML possono essere archiviati anche direttamente dal controllo origine dati in forma di stringa utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà. Se si desidera trasformare i dati XML prima che venga visualizzato dal controllo associato a dati, è possibile fornire un foglio di stile del foglio di stile XSL (Extensible Language) per la trasformazione. Come con i dati XML, in genere è necessario caricare il foglio di stile da un file, indicata dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà, ma è anche possibile archiviarlo in forma di stringa direttamente utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà.  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>L'aggiornamento dei dati XML  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo è in genere utilizzato negli scenari di dati di sola lettura in cui un controllo associato a dati sono riportati i dati XML. Tuttavia, è inoltre possibile utilizzare il <xref:System.Web.UI.WebControls.XmlDataSource> per modificare i dati XML. Per modificare i dati XML, chiamare il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo per recuperare un <xref:System.Xml.XmlDataDocument> oggetto che è una rappresentazione in memoria dei dati XML. È possibile utilizzare il modello a oggetti esposto dal <xref:System.Xml.XmlDataDocument> e <xref:System.Xml.XmlNode> oggetti contiene o utilizzare un'espressione di filtro XPath per manipolare i dati nel documento. Dopo aver effettuato le modifiche alla rappresentazione in memoria dei dati XML, è possibile salvarlo sul disco chiamando il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo.  
  
 Esistono alcune restrizioni per le funzionalità di modifica del <xref:System.Web.UI.WebControls.XmlDataSource> controllo:  
  
-   I dati XML devono essere caricati da un file XML indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà, non da XML inline specificato la <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà.  
  
-   Può essere specificata alcuna trasformazione XSLT nel <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> o <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà.  
  
-   Il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> non gestiscono simultanee le operazioni di salvataggio da parte delle richieste diversi. Se più di un utente sta modificando un file XML tramite il <xref:System.Web.UI.WebControls.XmlDataSource>, non è possibile garantire che tutti gli utenti operano con gli stessi dati. È inoltre possibile per un <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> esito negativo a causa di questi stessi problemi di concorrenza dell'operazione.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>Specifica una trasformazione XSL  
 Un'operazione comune eseguita con dati XML è la trasformazione, da un set di dati XML in un altro. Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo supporta le trasformazioni XML con il <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> che specificano un foglio di stile XSL da applicare ai dati XML prima di essere passato a un controllo associato a dati, e il <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> proprietà, che consente di specificare argomenti del foglio di stile XSLT dinamici utilizzabile da un foglio di stile XSL durante la trasformazione. Se si specifica un'espressione di filtro utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà, questa viene applicata dopo la trasformazione viene eseguita.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.XmlDataSource> classe utilizza deprecate <xref:System.Xml.Xsl.XslTransform> classe per eseguire trasformazioni XSL. Se si desidera utilizzare le funzionalità del foglio di stile che sono stati introdotti dopo il <xref:System.Xml.Xsl.XslTransform> classe è stata deprecata, applicare le trasformazioni manualmente utilizzando il <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>Il filtro utilizzando un'espressione XPath  
 Per impostazione predefinita, il <xref:System.Web.UI.WebControls.XmlDataSource> controllo carica tutti i dati XML nel file XML identificato dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà o trovato inline nella <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà, ma è possibile filtrare i dati utilizzando un'espressione XPath. Il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà supporta un filtro XPath sintassi che viene applicato dopo il caricamento e trasformare dati XML.  
  
<a name="caching"></a>   
## <a name="caching"></a>Memorizzazione nella cache  
 Per motivi di prestazioni, la memorizzazione nella cache è abilitata per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo per impostazione predefinita. Apertura e la lettura di un file XML nel server ogni volta che una pagina richiesta può ridurre le prestazioni dell'applicazione. La memorizzazione nella cache consente di ridurre il carico di elaborazione nel server a scapito della memoria sul server Web. Nella maggior parte dei casi si tratta di un buon compromesso. Il <xref:System.Web.UI.WebControls.XmlDataSource> automaticamente memorizza nella cache dei dati quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true`e il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> proprietà è impostata per il numero di secondi durante i quali la cache memorizza i dati prima che la cache viene invalidata. È possibile utilizzare il <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> per ottimizzare ulteriormente il comportamento di memorizzazione nella cache del controllo origine dati.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>Funzionalità aggiuntive  
 Nella tabella seguente elenca altre funzionalità che sono supportate dal <xref:System.Web.UI.WebControls.XmlDataSource> controllo.  
  
|Funzionalità|Descrizione|  
|----------------|-----------------|  
|Ordinamento|Non supportato per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo.|  
|Filtro|Il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà può essere utilizzata per filtrare i dati XML utilizzando un'espressione XPath appropriata.|  
|Paging|Non supportato per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo.|  
|Updating|Supportato modificando il <xref:System.Xml.XmlDataDocument> direttamente e chiamando quindi il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo.|  
|Eliminazione|Supportato modificando il <xref:System.Xml.XmlDataDocument> direttamente e chiamando quindi il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo.|  
|Inserimento|Supportato modificando il <xref:System.Xml.XmlDataDocument> direttamente e chiamando quindi il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> metodo.|  
|Memorizzazione nella cache|Abilitato per impostazione predefinita, con la <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> impostata su 0 (infinito) e il <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> impostata su <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>.|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>Oggetto della vista dati  
 Poiché il <xref:System.Web.UI.WebControls.XmlDataSource> controllo supporta i controlli associati a dati che visualizzano i dati gerarchici, nonché i controlli che visualizzano dati tabulari, il controllo origine dati supporta più tipi di oggetti vista origine dati nei relativi dati XML sottostanti. Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo recupera un singolo denominato <xref:System.Web.UI.WebControls.XmlDataSourceView> oggetto quando utilizzato con un controllo associato a dati che visualizza dati tabulari. Il <xref:System.Web.UI.IDataSource.GetViewNames%2A> metodo identifica questa unica visualizzazione denominata. Se usato con un controllo associato a dati che visualizza i dati gerarchici, il <xref:System.Web.UI.WebControls.XmlDataSource> controllo recupera un <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> per qualsiasi percorso gerarchico univoco passato per il <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> (metodo).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 In questa sezione contiene due esempi di codice. Nel primo esempio di codice viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML dal file XML di esempio. Nel secondo esempio viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare i dati XML.  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML. Il <xref:System.Web.UI.WebControls.XmlDataSource> carica i dati XML dal file XML identificato dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare i dati XML. Il <xref:System.Web.UI.WebControls.Repeater> controllo utilizza un'espressione di associazione di dati XPath per associare i dati degli elementi nei dati XML documento che la <xref:System.Web.UI.WebControls.XmlDataSource> rappresenta. Per ulteriori informazioni `XPath` e `XPathSelect` sintassi di data binding, vedere il <xref:System.Web.UI.XPathBinder> classe.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the length of time, in seconds, that the data source control caches data it has retrieved.</summary>
        <value>Il numero di secondi durante i quali il <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> controllo memorizza nella cache i risultati di un'operazione di recupero di dati. Il valore predefinito è 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo memorizza automaticamente i dati quando si applica quanto segue:  
  
-   La proprietà <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true`.  
  
-   Il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> proprietà è impostata su un valore maggiore di 0, che indica il numero di secondi durante i quali la cache memorizza i dati prima che la cache viene invalidata.  
  
 Qualsiasi modifica di <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà o il contenuto del file che contiene i dati XML provoca l'invalidamento della cache.  
  
 Per impostazione predefinita, il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostata su 0, che indica una cache indefinita, e l'origine dati verrà memorizzati nella cache dei dati fino a quando non viene modificato il file XML da cui dipende.  
  
 Il comportamento della cache non sia disciplinato da una combinazione della durata e il <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> impostazione. Se <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> è impostata su <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, la <xref:System.Web.UI.WebControls.XmlDataSource> controllo memorizza nella cache i dati nella prima operazione di recupero di dati, li mantiene in memoria per la quantità di tempo specificato da <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>e invalida il tempo trascorso. La cache viene quindi aggiornata durante l'operazione successiva. Se <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> è impostata su <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, il controllo origine dati memorizza i dati nella prima operazione di recupero di dati, ma reimposta l'intervallo di tempo che vengono mantenuti nella cache per ogni operazione successiva. La cache scadrà solo se non esiste alcuna attività per un periodo di tempo uguale al <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> dall'ultimo recupero dei dati.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come abilitare la memorizzazione nella cache quando si utilizza il <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati contenuti in un file XML. La memorizzazione nella cache è abilitata quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostato sul numero di secondi durante i quali viene memorizzato nella cache i dati dal controllo origine dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the cache expiration policy that is combined with the cache duration to describe the caching behavior of the cache that the data source control uses.</summary>
        <value>Uno dei valori di <see cref="T:System.Web.UI.DataSourceCacheExpiry" />. Impostazione dei criteri di scadenza della cache predefinita è <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento della cache non sia disciplinato da una combinazione del <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> impostazioni. Se il <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> è impostata su <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>, la <xref:System.Web.UI.WebControls.XmlDataSource> memorizza nella cache i dati nella prima operazione di recupero di dati e li mantiene in memoria per la quantità di tempo specificato da <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>e invalida il tempo trascorso. La cache viene quindi aggiornata durante l'operazione successiva. Se il <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> è impostata su <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, il controllo origine dati memorizza i dati nella prima operazione di recupero di dati, ma reimposta l'intervallo di tempo che vengono mantenuti nella cache per ogni operazione successiva. La cache scadrà solo se non vi è alcuna attività per un periodo di tempo uguale al <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> dall'ultimo recupero dei dati.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come abilitare la memorizzazione nella cache quando si utilizza il <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati contenuti in un file XML. La memorizzazione nella cache è abilitata quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostato sul numero di secondi durante i quali viene memorizzato nella cache i dati dal controllo origine dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value of the cache key for the data source control from view state, or adds the cache key to view state.</summary>
        <value>Il valore di chiave della cache o una stringa vuota se la chiave di cache non è in stato di visualizzazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> proprietà consente di creare manualmente una chiave di cache per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo. Ciò è necessario solo se si assegna un oggetto che contiene i dati XML o XSLT nel controllo anziché specificare un file che contiene i dati. Quando si assegnano i dati al controllo, i dati non viene utilizzati per generare la chiave di cache. Al contrario, è necessario generare una chiave univoca della cache manualmente se si prevede di aggiornare l'oggetto dati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a user-defined key dependency that is linked to all data cache objects created by the data source control. All cache objects explicitly expire when the key expires.</summary>
        <value>Creare una chiave che identifica tutti gli oggetti della cache per il <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo supporta la memorizzazione nella cache di dati. Mentre viene memorizzato nella cache dei dati, il <xref:System.Web.UI.WebControls.XmlDataSource> recupera i dati dalla cache piuttosto che dal file di dati sottostante. Alla scadenza della cache, recupera i dati dal file sottostante e nuovamente memorizza nella cache i dati.  
  
 È possibile impostare il <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> proprietà per creare una dipendenza tra tutte le voci di cache creata di <xref:System.Web.UI.WebControls.XmlDataSource> controllo e la chiave. È a livello di codice può invalidare tutte le voci della cache in qualsiasi momento per la scadenza della chiave.  
  
 A causa delle proprietà utilizzate per creare il <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>, è possibile che più <xref:System.Web.UI.WebControls.XmlDataSource> controlli possono utilizzare la stessa cache negli scenari in cui vengono caricati gli stessi dati allo stesso file XML e file di trasformazione e avere lo stesso <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> e<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>impostato.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a block of XML data that the data source control binds to.</summary>
        <value>Una stringa di dati XML inline che il <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> associato al controllo. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Negli scenari dichiarativi, il <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà viene specificata come una proprietà interna su più righe del <xref:System.Web.UI.WebControls.XmlDataSource> oggetto. Una proprietà interna è compatibile con i dati XML, perché consente di formattare i dati XML in alcun modo e ignorare i problemi di riempimento caratteri, ad esempio le virgolette di riempimento.  
  
 Se entrambi i <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> sono impostate, la <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà ha la precedenza e i dati nel file XML vengono utilizzati invece i dati XML specificati nel <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà.  
  
 Se si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà, il <xref:System.Web.UI.IDataSource.DataSourceChanged> evento viene generato. Se la memorizzazione nella cache è abilitata e si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>, la cache viene invalidata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati XML inline contenuti le <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà con un <xref:System.Web.UI.WebControls.TreeView> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the file name of an XML file that the data source binds to.</summary>
        <value>Il percorso fisico assoluto o relativo del file XML che contiene i dati che il <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> controllo. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se entrambi i <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> sono impostate, la <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà ha la precedenza e i dati nel file XML vengono utilizzati invece i dati XML specificati nel <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà.  
  
 Se si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà, il <xref:System.Web.UI.IDataSource.DataSourceChanged> evento viene generato. Se la memorizzazione nella cache è abilitata e si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>, la cache viene invalidata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati XML contenuti in un file con un <xref:System.Web.UI.WebControls.TreeView> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control has data caching enabled.</summary>
        <value>
          <see langword="true" /> Se la memorizzazione nella cache di dati è abilitata per il controllo origine dati; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.XmlDataSource> controllo memorizza automaticamente i dati quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true`. Per impostazione predefinita, il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostata su 0, che indica una cache indefinita, e l'origine dati verrà memorizzati nella cache dei dati fino a quando non viene modificato il file XML da cui dipende. Se si imposta la <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> proprietà su un valore maggiore di 0, la cache memorizza i dati per questo numero di secondi prima del recupero di un nuovo set.  
  
 Se il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e il <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> è impostata, le voci della cache non vengono invalidate automaticamente quando si modificano i parametri nell'elenco di argomenti trasformazioni. In tal caso, è necessario scrivere codice per invalidare la cache impostando la <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come abilitare la memorizzazione nella cache quando si utilizza il <xref:System.Web.UI.WebControls.XmlDataSource> controllo per visualizzare i dati contenuti in un file XML. La memorizzazione nella cache è abilitata quando il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e il <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> è impostato sul numero di secondi durante i quali viene memorizzato nella cache i dati dal controllo origine dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">An XPath expression that identifies a node from which the current hierarchical view is built.</param>
        <summary>Gets the data source view object for the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control. The <paramref name="viewPath" /> parameter can be an XPath expression.</summary>
        <returns>Returns an <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> object that represents a single view of the data starting with the data node identified by <paramref name="viewPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile chiamare il <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> metodo per recuperare un <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> oggetto associato di <xref:System.Web.UI.WebControls.XmlDataSource> controllo. Se si specifica `viewPath` valore, il <xref:System.Web.UI.WebControls.XmlDataSource> il controllo viene restituito un oggetto vista origine dati che rappresenta la visualizzazione nel nodo identificato da `viewPath`, insieme a tutti i relativi nodi figlio. Se si imposta `viewPath` al <xref:System.String.Empty?displayProperty=nameWithType>, la <xref:System.Web.UI.WebControls.XmlDataSource> controllare controlli il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà per determinare il nodo radice da cui compilare la vista origine dati. Se il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> è impostata, il <xref:System.Web.UI.WebControls.XmlDataSource> controllo viene utilizzato per restituire una vista origine dati nello stesso modo, tramite la `viewPath` viene utilizzata l'espressione. Se il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> non è impostata, il <xref:System.Web.UI.WebControls.XmlDataSource> controllo restituisce una visualizzazione di tutti i nodi di dati nei dati XML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Loads the XML data into memory, either directly from the underlying data storage or from the cache, and returns it in the form of an <see cref="T:System.Xml.XmlDataDocument" /> object.</summary>
        <returns>An <see cref="T:System.Xml.XmlDataDocument" /> object that represents the XML specified in the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property or in the file identified by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property, with any transformations and <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> queries applied.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo per l'accesso diretto a una rappresentazione in memoria dei dati XML sottostanti.  
  
 È possibile modificare l'oggetto restituito <xref:System.Xml.XmlDataDocument> e quindi chiamare <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> per mantenere le modifiche apportate al file XML specificato per il <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà. Diversi requisiti devono essere soddisfatti prima di <xref:System.Xml.XmlDataDocument> oggetto può essere salvato correttamente. Per altre informazioni, vedere il metodo <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>.  
  
   
  
## Examples  
 In questa sezione contiene due esempi di codice. Nel primo esempio viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare e modificare i dati XML contenuti in un file XML. Nel secondo esempio viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare e modificare i dati XML contenuti in un file XML.  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare e modificare i dati XML contenuti in un file XML. I dati vengono modificati in memoria usando il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo ogni volta che si seleziona un <xref:System.Web.UI.WebControls.TreeView> nodo e viene quindi salvato nel file XML. Infine <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> viene chiamato sul <xref:System.Web.UI.WebControls.TreeView> controllo per aggiornare i dati che vengono visualizzati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare e modificare i dati XML contenuti in un file XML. Come nell'esempio precedente, i dati vengono modificati in memoria usando il <xref:System.Xml.XmlDataDocument> recuperati tramite il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo. Infine <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> viene chiamato sul <xref:System.Web.UI.WebControls.TreeView> controllo per aggiornare i dati che vengono visualizzati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Il file XML negli esempi di codice presenta i seguenti dati:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A URL is specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property; however, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control does not have the correct permissions for the Web resource.</exception>
        <exception cref="T:System.NotSupportedException">A URL is specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property; however, it is not an HTTP-based URL.  \- or -  A design-time relative path was not mapped correctly by the designer before using the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.  \- or -  Both caching and client impersonation are enabled. The <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control does not support caching when client impersonation is enabled.</exception>
        <exception cref="T:System.Web.HttpException">Access is denied to the path specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> event before the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control performs an XSLT transformation on its XML data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 Il metodo <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML trasformati. La trasformazione XML viene eseguita mediante il foglio di stile indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà. Inoltre, il foglio di stile utilizza gli argomenti di trasformazione che vengono passati al controllo origine dati in un <xref:System.Xml.Xsl.XsltArgumentList> oggetto in fase di esecuzione. L'esempio di codice viene illustrato come passare il <xref:System.Xml.Xsl.XsltArgumentList> oggetto per il controllo origine dati mediante la gestione di <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> set di eventi con un gestore dell'evento personalizzato, identificato dal nome del metodo per il <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> (metodo).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La trasformazione XML viene eseguita mediante il foglio di stile seguente.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> in una classe derivata, assicurarsi di chiamare il <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> metodo della classe di base in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the XML data currently held in memory by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control to disk if the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property is set.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mentre il <xref:System.Web.UI.WebControls.XmlDataSource> controllo viene in genere utilizzato negli scenari di associazione di dati di sola lettura, è possibile usare il <xref:System.Web.UI.WebControls.XmlDataSource> per modificare i dati XML nel file di dati XML sottostante. In questi scenari, i dati XML vengono caricati da un file XML per il <xref:System.Web.UI.WebControls.XmlDataSource> controllo. È modificare il <xref:System.Xml.XmlDataDocument> in memoria usando il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo e quindi salvare il file di dati XML chiamando il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> (metodo). Questo scenario XML modificabile è possibile quando vengono soddisfatte le condizioni seguenti:  
  
-   I dati XML viene caricati da un file XML indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> proprietà, non dai dati XML inline specificati nella <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> proprietà.  
  
-   Viene specificata alcuna trasformazione XSLT nel <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> o <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà.  
  
 Il <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> non gestiscono simultanee le operazioni di salvataggio da parte delle richieste diversi. Se più di un utente sta modificando un file XML tramite il <xref:System.Web.UI.WebControls.XmlDataSource> di controllo, non è possibile garantire che tutti gli utenti operano con gli stessi dati. È inoltre possibile per un <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> esito negativo a causa di questi stessi problemi di concorrenza dell'operazione.  
  
   
  
## Examples  
 In questa sezione contiene due esempi di codice. Nel primo esempio di codice viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare e modificare i dati XML contenuti in un file XML. Nel secondo esempio di codice viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare e modificare i dati XML contenuti in un file XML.  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare e modificare i dati XML contenuti in un file XML. I dati vengono modificati in memoria usando il <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo ogni volta che si seleziona un <xref:System.Web.UI.WebControls.TreeView> nodo e viene quindi salvato nel file XML. Infine <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> viene chiamato sul <xref:System.Web.UI.WebControls.TreeView> controllo per aggiornare i dati che vengono visualizzati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare e modificare i dati XML contenuti in un file XML. Come nell'esempio precedente, i dati vengono modificati in memoria usando il <xref:System.Xml.XmlDataDocument> oggetto recuperato dal <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> metodo. Infine <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> viene chiamato sul <xref:System.Web.UI.WebControls.TreeView> controllo per aggiornare i dati che vengono visualizzati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 Il file XML negli esempi di codice presenta i seguenti dati:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XML data was loaded using the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property instead of the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property.  \- or -  A URL is specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property; however, the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control does not have the correct permissions for the Web resource.</exception>
        <exception cref="T:System.NotSupportedException">A URL is specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property; however, it is not an HTTP-based URL.  \- or -  A design-time relative path was not mapped correctly by the designer before using the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.</exception>
        <exception cref="T:System.Web.HttpException">Access is denied to the path specified for the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property.</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
        <value>
          <see langword="true" /> Se la raccolta è una raccolta di <see cref="T:System.Collections.IList" /> oggetti; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. E può essere utilizzato solo quando il <xref:System.Web.UI.WebControls.XmlDataSource> cast dell'istanza per il <xref:System.ComponentModel.IListSource> interfaccia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
        <returns>An object implementing <see cref="T:System.Collections.IList" /> that can be bound to a data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. E può essere utilizzato solo quando il <xref:System.Web.UI.WebControls.XmlDataSource> cast dell'istanza per il <xref:System.ComponentModel.IListSource> interfaccia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">The name of the view to retrieve. If <see cref="F:System.String.Empty" /> is specified, the default view for the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control is retrieved.</param>
        <summary>Gets the named data source view associated with the data source control.</summary>
        <returns>Returns the named <see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> object associated with the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see <see cref="M:System.Web.UI.IDataSource.GetViewNames" />.</summary>
        <returns>An object implementing <see cref="T:System.Collections.ICollection" /> containing names representing the list of view objects associated with the <see cref="T:System.Web.UI.IDataSource" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita di un membro di interfaccia. E può essere utilizzato solo quando il <xref:System.Web.UI.WebControls.XmlDataSource> cast dell'istanza per il <xref:System.Web.UI.IDataSource> interfaccia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a block of Extensible Stylesheet Language (XSL) data that defines an XSLT transformation to be performed on the XML data managed by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.</summary>
        <value>Una stringa di inline XSL che definisce una trasformazione XML da eseguire sui dati contenuti nel <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> o <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> proprietà. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Negli scenari dichiarativi, il <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà viene specificata come una proprietà interna su più righe del <xref:System.Web.UI.WebControls.XmlDataSource> oggetto. Una proprietà interna è compatibile con dati del foglio di stile XSL, perché consente di formattare il foglio di stile in alcun modo e ignorare i problemi di riempimento caratteri, ad esempio le virgolette di riempimento.  
  
 Se entrambi i <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> sono impostate, il <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà ha la precedenza e i dati nel file di foglio di stile XSL (XSL) vengono utilizzati invece gli elementi del foglio di stile specificati nel <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà. Se un'espressione XPath viene impostata utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà, questa viene applicata dopo i dati XML vengono trasformati.  
  
 Se si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà, il <xref:System.Web.UI.IDataSource.DataSourceChanged> evento viene generato. Se la memorizzazione nella cache è abilitata e si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, la cache viene invalidata.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.XmlDataSource> classe utilizza deprecate <xref:System.Xml.Xsl.XslTransform> classe per eseguire trasformazioni XSL. Se si desidera utilizzare le funzionalità del foglio di stile che sono stati introdotti dopo il <xref:System.Xml.Xsl.XslTransform> classe è stata deprecata, applicare le trasformazioni manualmente utilizzando il <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare i dati XML trasformati. Il foglio di stile che esegue la trasformazione viene definita in linea per il <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà del controllo origine dati.  
  
  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a list of XSLT arguments that are used with the style sheet defined by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> or <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> properties to perform a transformation on the XML data.</summary>
        <value>Un' <see cref="T:System.Xml.Xsl.XsltArgumentList" /> oggetto che contiene i parametri XSLT e gli oggetti da applicare ai dati XML quando viene caricata dal <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> controllo. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> proprietà quando il <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> evento viene generato per verificare i parametri XSLT sono disponibili nel momento in cui la trasformazione XSLT viene applicata ai dati XML.  
  
 Se il <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> è impostata su `true` e il <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> è impostata, le voci della cache non vengono invalidate automaticamente quando si modificano i parametri nell'elenco di argomenti trasformazioni. In tal caso, è necessario scrivere codice per invalidare la cache impostando la <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML trasformati. La trasformazione XML viene eseguita mediante il foglio di stile indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà. Inoltre, il foglio di stile utilizza gli argomenti di trasformazione che vengono passati al controllo origine dati in un <xref:System.Xml.Xsl.XsltArgumentList> oggetto in fase di esecuzione. L'esempio di codice viene illustrato come passare il <xref:System.Xml.Xsl.XsltArgumentList> al controllo origine dati mediante la gestione di <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> evento con un gestore dell'evento personalizzato.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La trasformazione dei dati XML viene eseguita con il seguente foglio di stile.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the file name of an Extensible Stylesheet Language (XSL) file (.xsl) that defines an XSLT transformation to be performed on the XML data managed by the <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> control.</summary>
        <value>Il percorso fisico assoluto o relativo del file del foglio di stile XSL che definisce una trasformazione XML da eseguire sui dati contenuti nel <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> o <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> proprietà. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se entrambi i <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> e <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> sono impostate, il <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà ha la precedenza e i dati nel file di foglio di stile XSL (XSL) vengono utilizzati invece gli elementi del foglio di stile specificati nel <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà. Se un'espressione XPath viene impostata utilizzando il <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà, questa viene applicata dopo i dati XML vengono trasformati.  
  
 Se si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> proprietà, il <xref:System.Web.UI.IDataSource.DataSourceChanged> evento viene generato. Se la memorizzazione nella cache è abilitata e si modifica il valore di <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, la cache viene invalidata.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.XmlDataSource> classe utilizza deprecate <xref:System.Xml.Xsl.XslTransform> classe per eseguire trasformazioni XSL. Se si desidera utilizzare le funzionalità del foglio di stile che sono stati introdotti dopo il <xref:System.Xml.Xsl.XslTransform> classe è stata deprecata, applicare le trasformazioni manualmente utilizzando il <xref:System.Xml.Xsl.XslCompiledTransform> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo e un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML in un form Web trasformati. La trasformazione viene eseguita mediante il foglio di stile indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà. È possibile specificare gli argomenti della trasformazione per foglio di stile usando un <xref:System.Xml.Xsl.XsltArgumentList>. Per altre informazioni, vedere la proprietà <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 Il foglio di stile XSL che esegue la trasformazione XML presenta la struttura seguente:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs before the style sheet that is defined by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> property or identified by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> property is applied to XML data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> evento per impostare il <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> proprietà con un <xref:System.Xml.Xsl.XsltArgumentList> object prima il <xref:System.Web.UI.WebControls.XmlDataSource> controllo esegue una trasformazione XML.  
  
 Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllare con un <xref:System.Web.UI.WebControls.TreeView> controllo per visualizzare i dati XML trasformati. La trasformazione XML viene eseguita mediante il foglio di stile indicato dal <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> proprietà. Inoltre, il foglio di stile utilizza gli argomenti di trasformazione che vengono passati al controllo origine dati in un <xref:System.Xml.Xsl.XsltArgumentList> in fase di esecuzione. L'esempio di codice viene illustrato come passare il <xref:System.Xml.Xsl.XsltArgumentList> oggetto per il controllo origine dati mediante la gestione di <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> evento con un gestore dell'evento personalizzato.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 La trasformazione dei dati XML viene eseguita con il foglio di stile seguente:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies an XPath expression to be applied to the XML data contained by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> property or by the XML file indicated by the <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> property.</summary>
        <value>Stringa che rappresenta un'espressione XPath che può essere utilizzata per filtrare i dati contenuti il <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> proprietà o nel file XML indicato dal <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> proprietà. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulle espressioni di associazione di dati XPath, vedere [associazione di un controllo tabulare al controllo XmlDataSource](http://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Web.UI.WebControls.XmlDataSource> controllo con una basata su modelli <xref:System.Web.UI.WebControls.Repeater> controllo per visualizzare i dati XML che sono stati filtrati usando un'espressione XPath. In questo esempio, la sintassi XPath consente di filtrare i dati XML quando la <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> proprietà del controllo origine dati viene impostata e associa gli elementi del <xref:System.Web.UI.WebControls.Repeater> modello di controllo ai dati XML.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 Il file XML nell'esempio di codice presenta i seguenti dati:  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The document is loading.</exception>
      </Docs>
    </Member>
  </Members>
</Type>