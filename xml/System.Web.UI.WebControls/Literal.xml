<Type Name="Literal" FullName="System.Web.UI.WebControls.Literal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7103ea665380f176d6e51bd5f4c131b4afc7022" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30598825" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Literal : System.Web.UI.Control, System.Web.UI.ITextControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Literal extends System.Web.UI.Control implements class System.Web.UI.ITextControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Literal" />
  <TypeSignature Language="VB.NET" Value="Public Class Literal&#xA;Inherits Control&#xA;Implements ITextControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Literal : System::Web::UI::Control, System::Web::UI::ITextControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.ITextControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LiteralDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.LiteralControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Riserva una posizione nella pagina Web per la visualizzazione di testo statico.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#introduction)  
  
-   [Sintassi dichiarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Utilizzare il <xref:System.Web.UI.WebControls.Literal?displayProperty=nameWithType> controllo per riservare una posizione per visualizzare il testo della pagina Web. Il <xref:System.Web.UI.WebControls.Literal> è simile al controllo il <xref:System.Web.UI.WebControls.Label> controllo, ad eccezione di <xref:System.Web.UI.WebControls.Literal> controllo non consente di applicare uno stile al testo visualizzato. È possibile controllare a livello di codice il testo visualizzato nel controllo impostando la <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà.  
  
> [!CAUTION]
>  Per visualizzare l'input dell'utente che può includere uno script client dannoso, è possibile utilizzare questo controllo. Verificare tutte le informazioni inviate da un client per uno script eseguibile, istruzioni SQL o altro codice prima di visualizzarlo nell'applicazione. ASP.NET fornisce una funzionalità di convalida richiesta di input per bloccare script e HTML nell'input dell'utente. Controlli server di convalida vengono inoltre forniti per valutare l'input dell'utente.  
  
 Per ulteriori informazioni sulla sicurezza, vedere [protezione dei controlli Standard](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [procedura: proteggere dagli attacchi tramite Script in un'applicazione Web da applicare la codifica HTML alle stringhe](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), e [ Convalida dell'Input utente in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:Literal  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    Mode="Transform|PassThrough|Encode"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Text="string"  
    Visible="True|False"  
/>  
```  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Literal> controllo per visualizzare testo statico.  
  
> [!NOTE]
>  Nell'esempio seguente viene utilizzato il modello di codice a file singolo e potrebbe non funzionare correttamente se viene copiato direttamente in un file code-behind. Questo esempio di codice deve essere copiato in un file di testo vuoto con estensione aspx. Per ulteriori informazioni sul modello di codice Web Form, vedere [modello di codice ASP.NET Web Forms pagina](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Literal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Literal/CS/literalcs.aspx#1)]
 [!code-aspx-vb[Literal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal/VB/literalvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.Label" />
    <altmember cref="P:System.Web.UI.WebControls.Literal.Text" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Literal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Literal();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.AddParsedSubObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddParsedSubObject (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddParsedSubObject(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto <see cref="T:System.Object" /> che rappresenta l'elemento sottoposto ad analisi.</param>
        <summary>Notifica al controllo <see cref="T:System.Web.UI.WebControls.Literal" /> che un elemento XML or HTML è stato analizzato e aggiunge l'elemento all'oggetto <see cref="T:System.Web.UI.ControlCollection" /> del controllo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come eseguire l'override di <xref:System.Web.UI.WebControls.Literal.AddParsedSubObject%2A> metodo in un server personalizzato controllare in modo che venga sempre impostata il <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà dell'oggetto analizzato `Text` proprietà, se l'oggetto analizzato è una <xref:System.Web.UI.WebControls.Literal>e per un oggetto vuoto `string` in caso contrario.  
  
 [!code-aspx-csharp[CustomLiteralAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/CS/custom_literal_addparsedsubobjectcs.aspx#1)]
 [!code-aspx-vb[CustomLiteralAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/VB/custom_literal_addparsedsubobjectvb.aspx#1)]  
  
 [!code-csharp[CustomLiteralAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/CS/custom_literal_addparsedsubobject.cs#2)]
 [!code-vb[CustomLiteralAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/VB/custom_literal_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="obj" /> non è di tipo <see cref="T:System.Web.UI.LiteralControl" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un oggetto <see cref="T:System.Web.UI.EmptyControlCollection" /> per l'istanza corrente del controllo <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <returns>Oggetto <see cref="T:System.Web.UI.ControlCollection" /> che contiene i controlli server figlio del controllo server corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come eseguire l'override di <xref:System.Web.UI.WebControls.Literal.CreateControlCollection%2A> metodo in un server personalizzato controllare in modo che restituisca sempre un'istanza del <xref:System.Web.UI.EmptyControlCollection> classe per il <xref:System.Web.UI.WebControls.Literal> oggetto.  
  
 [!code-aspx-csharp[CustomLiteralCreateControlCollection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/CS/custom_literal_createcontrolcollectioncs.aspx#1)]
 [!code-aspx-vb[CustomLiteralCreateControlCollection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/VB/custom_literal_createcontrolcollectionvb.aspx#1)]  
  
 [!code-csharp[CustomLiteralCreateControlCollection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/CS/custom_literal_createcontrolcollection.cs#2)]
 [!code-vb[CustomLiteralCreateControlCollection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/VB/custom_literal_createcontrolcollection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Imposta lo stato attivo per l'input su un controllo. Il metodo <see cref="M:System.Web.UI.WebControls.Literal.Focus" /> del controllo base non è supportato in un controllo <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Literal> controllare esegue l'override di <xref:System.Web.UI.Control.Focus%2A> metodo della classe di base. Il <xref:System.Web.UI.WebControls.Literal.Focus%2A> metodo di un <xref:System.Web.UI.WebControls.Literal> controllo genera sempre un'eccezione per indicare che il <xref:System.Web.UI.WebControls.Literal.Focus%2A> metodo non è supportato in un <xref:System.Web.UI.WebControls.Literal> controllo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">È stato chiamato il metodo <see cref="M:System.Web.UI.WebControls.Literal.Focus" /> per un controllo <see cref="T:System.Web.UI.WebControls.Literal" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LiteralMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.LiteralMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Literal.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As LiteralMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LiteralMode Mode { System::Web::UI::WebControls::LiteralMode get(); void set(System::Web::UI::WebControls::LiteralMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LiteralMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore di enumerazione che specifica come deve essere eseguito il rendering del contenuto del controllo <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <value>Uno dei valori dell'enumerazione <see cref="T:System.Web.UI.WebControls.LiteralMode" />. Il valore predefinito è <see langword="Transform" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.Literal.Mode%2A> proprietà per specificare come il contenuto di un <xref:System.Web.UI.WebControls.Literal> controllo deve essere eseguito il rendering. Questa proprietà viene impostata utilizzando uno del <xref:System.Web.UI.WebControls.LiteralMode> valori di enumerazione. Nella tabella seguente sono elencati i valori possibili.  
  
|Valore|Descrizione|  
|-----------|-----------------|  
|`PassThrough`|Il contenuto del controllo non viene modificato.|  
|`Encode`|Il contenuto del controllo viene convertito in una stringa codificata in formato HTML.|  
|`Transform`|Gli elementi del linguaggio di markup non supportati vengono rimossi dal contenuto del controllo. Se il <xref:System.Web.UI.WebControls.Literal> controllo viene eseguito in un browser che supporta l'HTML o XHTML, il contenuto del controllo non viene modificato.|  
  
 Se si specifica `PassThrough`, l'intero contenuto del <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà vengono passati nel dispositivo o browser senza apportare alcuna modifica. Ad esempio, se il <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà di un <xref:System.Web.UI.WebControls.Literal> controllo contiene un `<hr>` tag, questo verrà inviato a tutti i dispositivi e browser se è supportato.  
  
 Se si specifica `Encode`, il contenuto per il <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà vengono convertiti in una stringa codificata in formato HTML prima del rendering. Ad esempio, se il <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà di un <xref:System.Web.UI.WebControls.Literal> controllo contiene un `<hr>` tag, viene convertito in `&lt;Hr&gt;` e inviato al dispositivo o browser.  
  
 Se si specifica `Transform`, il comportamento di rendering di <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà dipende dal tipo di markup sottoposto a rendering. Quando il <xref:System.Web.UI.WebControls.Literal> controllo viene eseguito il rendering per un dispositivo o browser che supporta l'HTML o XHTML, specificando <xref:System.Web.UI.WebControls.LiteralMode.Transform> produce lo stesso comportamento specificando <xref:System.Web.UI.WebControls.LiteralMode.PassThrough>. Tutti i tag e gli elementi per il <xref:System.Web.UI.WebControls.Literal.Text%2A> viene eseguito il rendering di proprietà per il browser richiedente.  
  
 Quando il <xref:System.Web.UI.WebControls.Literal> controllo viene eseguito il rendering per un linguaggio di markup diversi da HTML o XHTML, ad esempio WML o cHTML, è possibile utilizzare il <xref:System.Web.UI.WebControls.LiteralMode.Transform> valore per la rimozione degli elementi di markup non supportato. In questo caso, gli elementi del linguaggio di markup del <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà che non sono supportati nel linguaggio di markup di destinazione non viene eseguito per il controllo. Ad esempio, se il <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà di un <xref:System.Web.UI.WebControls.Literal> controllo contiene un `<hr>` tag, il tag viene rimossa prima che il contenuto venga inviato a una periferica WML. Se è presente contenuto di un tag non supportato, viene rimosso solo il tag e il contenuto viene inviato al dispositivo o browser. Ad esempio, se il <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà include il contenuto `<XYZ>Test</XYZ>`, `<XYZ>` e `</XYZ>` tag vengono rimossi e il testo "Test" viene inviato al dispositivo o browser.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come impostare un <xref:System.Web.UI.WebControls.Literal> del controllo <xref:System.Web.UI.WebControls.Literal.Mode%2A> proprietà. Il <xref:System.Web.UI.WebControls.Literal.Mode%2A> è inizialmente impostata su `Encode` nella sintassi dichiarativa per il controllo. Dopo il caricamento della pagina, l'utente può fare clic su un pulsante per impostare il <xref:System.Web.UI.WebControls.Literal.Mode%2A> proprietà `PassThrough`. In questo modo, il contenuto del <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà per il rendering in modo diverso.  
  
> [!NOTE]
>  Nell'esempio seguente viene utilizzato il modello di codice a file singolo e potrebbe non funzionare correttamente se viene copiato direttamente in un file code-behind. Questo esempio di codice deve essere copiato in un file di testo vuoto con estensione aspx. Per ulteriori informazioni sul modello di codice Web Form, vedere [modello di codice ASP.NET Web Forms pagina](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-vb[Literal.Mode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal.Mode/VB/literal.modevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il tipo specificato non è uno dei valori dell'enumerazione <see cref="T:System.Web.UI.WebControls.LiteralMode" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.LiteralMode" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che riceve il contenuto del controllo server.</param>
        <summary>Invia il contenuto del controllo server a un oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato che scrive il contenuto di cui eseguire il rendering nel client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come eseguire l'override di <xref:System.Web.UI.WebControls.Literal.Render%2A> metodo in un server personalizzato controllare in modo che viene sempre visualizzato un testo specifico prima di <xref:System.Web.UI.WebControls.Literal>.  
  
 [!code-aspx-csharp[CustomLiteralRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralRender/CS/custom_literal_rendercs.aspx#1)]
 [!code-aspx-vb[CustomLiteralRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralRender/VB/custom_literal_rendervb.aspx#1)]  
[!code-csharp[CustomLiteralRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralRender/CS/custom_literal_render.cs#2)]
[!code-vb[CustomLiteralRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralRender/VB/custom_literal_render.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Literal.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.ITextControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la didascalia visualizzata nel controllo <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <value>Didascalia visualizzata nel controllo <see cref="T:System.Web.UI.WebControls.Literal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà per specificare o per determinare la didascalia visualizzata nel <xref:System.Web.UI.WebControls.Literal> controllo. Ciò consente di modificare a livello di codice la didascalia in fase di esecuzione.  
  
 La didascalia viene decodificata in HTML a seconda di come si assegna un valore per questa proprietà. Se si assegna un valore tramite un attributo del <xref:System.Web.UI.WebControls.Literal> , il valore è decodificata prima che venga visualizzato in formato HTML. Ad esempio, `<asp:Literal id="DisplayLiteral" Text="A&nbsp;B"/>` viene eseguito il rendering come "B" nel browser. Tuttavia, se si imposta questa proprietà a livello di codice o inserendo il testo tra i tag di apertura e chiusura del controllo, la didascalia non HTML decodificato. Ad esempio, `<asp:Literal id="DisplayLiteral"> A&nbsp;B </asp:Literal>` viene visualizzato come "A&nbsp;B".  
  
> [!CAUTION]
>  Per visualizzare l'input dell'utente che può includere uno script client dannoso, è possibile utilizzare questo controllo. Verificare tutte le informazioni inviate da un client per uno script eseguibile, istruzioni SQL o altro codice prima di visualizzarlo nell'applicazione. ASP.NET fornisce una funzionalità di convalida richiesta di input per bloccare script e HTML nell'input dell'utente. Controlli server di convalida vengono inoltre forniti per valutare l'input dell'utente. Per ulteriori informazioni, vedere [sintassi dei controlli di convalida Server](http://msdn.microsoft.com/library/96d2c59e-693c-4079-9b53-b3ff0d9e9133).  
  
 Il valore di questa proprietà, se impostato, può essere salvato automaticamente in un file di risorse utilizzando uno strumento di progettazione. Per ulteriori informazioni, vedere <xref:System.ComponentModel.LocalizableAttribute> e [globalizzazione e localizzazione](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Literal.Text%2A> proprietà da modificare a livello di codice la didascalia visualizzata nel <xref:System.Web.UI.WebControls.Literal> controllo.  
  
> [!NOTE]
>  Nell'esempio seguente viene utilizzato il modello di codice a file singolo e potrebbe non funzionare correttamente se viene copiato direttamente in un file code-behind. Questo esempio di codice deve essere copiato in un file di testo vuoto con estensione aspx. Per ulteriori informazioni sul modello di codice Web Form, vedere [modello di codice ASP.NET Web Forms pagina](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Literal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Literal/CS/literalcs.aspx#1)]
 [!code-aspx-vb[Literal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal/VB/literalvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>