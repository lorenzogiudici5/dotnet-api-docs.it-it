<Type Name="FileUpload" FullName="System.Web.UI.WebControls.FileUpload">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5f8053b8b6855feb117a691385f00b2fd96dde6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37593883" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileUpload : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileUpload extends System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FileUpload" />
  <TypeSignature Language="VB.NET" Value="Public Class FileUpload&#xA;Inherits WebControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileUpload : System::Web::UI::WebControls::WebControl" />
  <TypeSignature Language="F#" Value="type FileUpload = class&#xA;    inherit WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("FileBytes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Visualizza un controllo casella di testo e un pulsante Sfoglia che consentono agli utenti di selezionare un file da caricare sul server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#introduction)  
  
-   [Salvataggio dei file caricati](#saving_uploaded_files)  
  
-   [Considerazioni sulla sicurezza](#security_considerations)  
  
-   [Limiti di memoria](#memory_limitations)  
  
-   [Utilizzo del controllo FileUpload dal controllo UpdatePanel](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  
  
-   [Sintassi dichiarativa](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Il <xref:System.Web.UI.WebControls.FileUpload> classe visualizza un controllo casella di testo e un pulsante Sfoglia che consentono agli utenti di selezionare un file nel client e caricarlo nel server Web. L'utente specifica il file da caricare immettendo il percorso completo del file nel computer locale (ad esempio, **C:\MyFiles\TestFile.txt**) nella casella di testo del controllo. In alternativa, l'utente può selezionare il file facendo clic la **esplorare** pulsante e quindi individuandolo nel **Scegli File** nella finestra di dialogo.  
  
 Usare la <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> proprietà da ottenere il nome di un file su un client da caricare usando la <xref:System.Web.UI.WebControls.FileUpload> controllo. Il nome del file restituito da questa proprietà non include il percorso del file nel client.  
  
 Il <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property get un <xref:System.IO.Stream> oggetto che punta a un file da caricare. Utilizzare questa proprietà per accedere al contenuto del file come byte. Ad esempio, è possibile usare la <xref:System.IO.Stream> oggetto restituito dal <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> proprietà utilizzata per leggere il contenuto del file come byte e archiviarle in una matrice di byte. In alternativa, è possibile usare il <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> proprietà da recuperare tutti i byte nel file.  
  
 Il <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> proprietà ottiene sottostante <xref:System.Web.HttpPostedFile> oggetto per il file da caricare. È possibile usare questa proprietà per accedere alle proprietà aggiuntive del file. Il <xref:System.Web.HttpPostedFile.ContentLength%2A> proprietà ottiene la lunghezza del file. Il <xref:System.Web.HttpPostedFile.ContentType%2A> proprietà ottiene il tipo di contenuto MIME del file. Inoltre, è possibile usare la <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> proprietà a cui accedere il <xref:System.Web.HttpPostedFile.FileName%2A> proprietà, il <xref:System.Web.HttpPostedFile.InputStream%2A> proprietà e il <xref:System.Web.HttpPostedFile.SaveAs%2A> (metodo). Tuttavia, la stessa funzionalità viene fornita dal <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> proprietà, il <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> proprietà e il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (metodo).  
  
<a name="saving_uploaded_files"></a>   
## <a name="saving-uploaded-files"></a>Salvataggio dei file caricati  
 Il <xref:System.Web.UI.WebControls.FileUpload> controllo Salva automaticamente un file al server dopo che l'utente seleziona il file da caricare. È necessario fornire in modo esplicito un controllo o un meccanismo per consentire all'utente di inviare il file specificato. Ad esempio, è possibile fornire un pulsante che l'utente fa clic per caricare il file. Il codice scritto per salvare il file specificato deve chiamare il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodo, che salva il contenuto di un file in un percorso specificato nel server. In genere, il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato in un metodo di gestione degli eventi per un evento che genera un postback al server. Ad esempio, se si specifica un pulsante per inviare un file, è possibile includere il codice per salvare il file all'interno del metodo di gestione degli eventi per l'evento click.  
  
 Prima di chiamare il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodo salva il file al server, usare il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> proprietà per verificare che il <xref:System.Web.UI.WebControls.FileUpload> controllo contiene un file. Se il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> restituisce `true`, chiamare il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (metodo). Se il valore restituito `false`, visualizzare un messaggio all'utente che indica che il controllo non contenga un file. Non controlla il <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> proprietà per determinare se un file da caricare esiste perché, per impostazione predefinita, questa proprietà contiene 0 byte. Di conseguenza, anche quando la <xref:System.Web.UI.WebControls.FileUpload> è vuoto, al controllo il <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> proprietà restituisce un valore diverso da null.  
  
<a name="security_considerations"></a>   
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Quando si chiama il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodo, è necessario specificare il percorso completo della directory in cui salvare il file caricato. Se non si specifica esplicitamente un percorso nel codice dell'applicazione, viene generata un'eccezione quando un utente tenta di caricare un file. Questo comportamento consente di proteggere i file nel server per impedire agli utenti la possibilità di scrivere in percorsi arbitrari nella struttura di directory dell'applicazione, nonché di impedire l'accesso a directory radice sensibile.  
  
 Il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodo scrive il file caricato nella directory specificata. Pertanto, l'applicazione ASP.NET deve avere accesso in scrittura alla directory nel server. Esistono due modi che l'applicazione può ottenere l'accesso in scrittura. È possibile concedere esplicitamente l'accesso in scrittura all'account con cui è in esecuzione l'applicazione, nella directory in cui verranno salvati i file caricati. In alternativa, è possibile aumentare il livello di attendibilità viene concessa all'applicazione ASP.NET. Per ottenere l'accesso in scrittura alla directory in esecuzione per l'applicazione, l'applicazione deve essere concesso il <xref:System.Web.AspNetHostingPermission> oggetto con il livello di attendibilità impostato il <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> valore. Aumentando il livello di attendibilità aumenta l'accesso dell'applicazione alle risorse sul server. Si noti che questo non è un approccio sicuro, poiché un utente malintenzionato che assume il controllo dell'applicazione sarà anche possibile eseguire con questo livello di attendibilità superiore. È consigliabile eseguire un'applicazione ASP.NET nel contesto di un utente con i privilegi minimi necessari per l'esecuzione dell'applicazione. Per altre informazioni sulla sicurezza in applicazioni ASP.NET, vedere [base procedure consigliate per le applicazioni Web](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) e [livelli di Trust di ASP.NET e i file dei criteri](http://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
<a name="memory_limitations"></a>   
## <a name="memory-limitations"></a>Limiti di memoria  
 Un modo per proteggersi contro un attacco denial of service attacchi consiste nel limitare le dimensioni dei file che possono essere caricati usando il <xref:System.Web.UI.WebControls.FileUpload> controllo. È consigliabile impostare un limite di dimensione appropriata per i tipi di file che si prevedono di essere caricato. Il limite di dimensione predefinito è 4096 kilobyte (KB) o 4 megabyte (MB). È possibile consentire file più grandi per essere caricati impostando la `maxRequestLength` attributo dell'elemento. Per aumentare la dimensione file massima consentita per l'intera applicazione, impostare il `maxRequestLength` attributo nel file Web. config. Per aumentare la dimensione file massima consentita per una pagina specifica, impostare il `maxRequestLength` dell'attributo all'interno di `location` in Web. config. Per un esempio, vedere [percorso di elemento (Schema delle impostazioni ASP.NET)](http://msdn.microsoft.com/library/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5).  
  
 Durante il caricamento di file di grandi dimensioni, un utente potrebbe essere anche visualizzato il messaggio di errore seguente:  
  
 `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  
  
 Se viene visualizzato questo messaggio di errore, aumentare il valore della `memoryLimit` attributo dell'elemento Web. config di file per l'applicazione. Il `memoryLimit` attributo specifica la quantità massima di memoria che può usare un processo di lavoro. Se il processo di lavoro supera il `memoryLimit` quantità, viene creato un nuovo processo per sostituirla e tutte le richieste correnti vengono riassegnate al nuovo processo.  
  
 Per controllare se il file da caricare è temporaneamente archiviati in memoria o nel server durante l'elaborazione della richiesta, imposta il `requestLengthDiskThreshold` attributo dell'elemento. Questo attributo consente di gestire le dimensioni del buffer di flusso di input. Il valore predefinito è 256 byte. Il valore specificato non deve superare il valore specificato per il `maxRequestLength` attributo.  
  
<a name="using_the_FileUpload_Control_with_the_UpdatePanel_control"></a>   
## <a name="using-the-fileupload-control-with-the-updatepanel-control"></a>Utilizzo del controllo FileUpload dal controllo UpdatePanel  
 Il <xref:System.Web.UI.WebControls.FileUpload> controllo è progettato per essere usato solo negli scenari di postback e non negli scenari di postback asincroni durante il rendering parziale della pagina. Quando si usa un' <xref:System.Web.UI.WebControls.FileUpload> controllo all'interno di un' <xref:System.Web.UI.UpdatePanel> (controllo), il file deve essere caricato usando un controllo che è un <xref:System.Web.UI.PostBackTrigger> oggetto per il pannello. <xref:System.Web.UI.UpdatePanel> controlli vengono usati per aggiornare le aree selezionate di una pagina anziché aggiornare l'intera pagina con un postback. Per altre informazioni, vedere [Cenni preliminari sul controllo UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) e [Cenni preliminari sul Rendering parziale della pagina](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:FileUpload  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Un progetto di sito Web di Visual Studio con il codice sorgente è disponibile a complemento di questo argomento: [scaricare](http://go.microsoft.com/fwlink/?LinkId=191897).  
  
 In questa sezione contiene gli esempi seguenti quattro:  
  
-   Nel primo esempio viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo per salvare i file in un percorso specificato nel codice.  
  
-   Nel secondo esempio viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo per salvare i file in una directory specificata nel file system per l'applicazione.  
  
-   Nel terzo esempio viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo per salvare i file in un percorso specificato e limita le dimensioni del file che può essere caricati.  
  
-   Il quarto esempio viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo che consente di salvare i file in un percorso specificato e consente solo i file con le estensioni di nome file con estensione xls o doc da caricare.  
  
> [!CAUTION]
>  Questi esempi illustrano la sintassi di base per il <xref:System.Web.UI.WebControls.FileUpload> controllo, ma non presentano tutte le necessarie controllo degli errori che devono essere completati prima di salvare il file. Per un esempio più esaustivo, vedere <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo per salvare i file in un percorso specificato nel codice. Il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato per salvare il file nel percorso specificato nel server.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo per salvare i file in una directory specificata nel file system per l'applicazione. Il <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=nameWithType> proprietà viene utilizzata per ottenere il percorso di sistema di file fisico della directory radice per l'applicazione server attualmente in esecuzione. Il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato per salvare il file nel percorso specificato nel server.  
  
 [!code-aspx-csharp[FileUploadClass2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass2/cs/fileuploadclass2cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass2/VB/fileuploadclass2vb.aspx#1)]  
  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo per salvare i file in un percorso specificato nel codice. Il controllo Limita le dimensioni del file che può essere caricati fino a 5 MB. Il <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> proprietà viene utilizzata per accedere a sottostante <xref:System.Web.HttpPostedFile.ContentLength%2A> proprietà e restituire la dimensione del file. Se la dimensione del file da caricare è minore di 2 MB, il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato per salvare il file nel percorso specificato nel server. Oltre a controllare per l'impostazione delle dimensioni massime del file nel codice dell'applicazione, è possibile impostare il `maxRequestLength` attributo dell'elemento da una dimensione massima consentita nel file di configurazione per l'applicazione.  
  
 [!code-aspx-csharp[FileUploadClass3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass3/cs/fileuploadclass3cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass3/VB/fileuploadclass3vb.aspx#1)]  
  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo per salvare i file in un percorso specificato nel codice. In questo esempio consente solo i file con le estensioni di nome file con estensione xls o doc da caricare. Il <xref:System.IO.Path.GetExtension%2A?displayProperty=nameWithType> metodo viene chiamato per restituire l'estensione del file da caricare. Se il file ha un'estensione di nome file con estensione xls o doc, il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato per salvare il file nel percorso specificato nel server.  
  
 [!code-aspx-csharp[FileUploadClass4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass4/cs/fileuploadclass4cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass4/VB/fileuploadclass4vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileUpload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileUpload();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.WebControls.FileUpload.%23ctor%2A> costruttore per inizializzare una nuova istanza del <xref:System.Web.UI.WebControls.FileUpload> classe. Il <xref:System.Web.UI.WebControls.FileUpload> controllo Salva automaticamente un file al server dopo che l'utente seleziona il file da caricare. È necessario fornire in modo esplicito un controllo o un meccanismo per consentire all'utente di inviare il file specificato. Ad esempio, è possibile fornire un pulsante che l'utente fa clic per caricare il file.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come inizializzare una nuova istanza di <xref:System.Web.UI.WebControls.FileUpload> classe. Si noti che questo esempio viene illustrata la sintassi del costruttore, ma non aggiunge funzionalità al controllo dopo averlo creato.  
  
 In questo esempio fa parte di un esempio più esaustivo disponibile per il <xref:System.Web.UI.WebControls.FileUpload> classe.  
  
 [!code-aspx-vb[FileUploadCstr#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadCstr/VB/fileuploadcstrvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che rappresenta il flusso di output per il rendering del contenuto HTML nel client.</param>
        <summary>Aggiunge gli attributi e gli stili HTML di un controllo <see cref="T:System.Web.UI.WebControls.FileUpload" /> per eseguire il rendering dell'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> metodo viene utilizzato principalmente dagli sviluppatori di controlli per inserire gli attributi appropriati e gli stili per il <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> flusso di output per un <xref:System.Web.UI.WebControls.FileUpload> controllo. Il <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> override dei metodi di <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public virtual bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica se più file possono essere selezionati per il caricamento.</summary>
        <value>
          <see langword="true" /> se è possibile selezionare più file. In caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileBytes">
      <MemberSignature Language="C#" Value="public byte[] FileBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] FileBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileBytes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ FileBytes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileBytes : byte[]" Usage="System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una matrice di byte in un file che viene specificato usando un controllo <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Matrice di <see cref="T:System.Byte" /> che include il contenuto del file specificato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.FileUpload> controllo non legge automaticamente i file dal client. È necessario fornire in modo esplicito un controllo o un meccanismo per consentire all'utente di inviare il file specificato. Ad esempio, è possibile fornire un pulsante che l'utente può fare clic per caricare il file. Il codice scritto per salvare il file specificato è stato possibile chiamare il <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> proprietà, che restituisce il contenuto del file.  
  
 Prima di chiamare il <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> proprietà, è consigliabile usare il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> proprietà per verificare che il <xref:System.Web.UI.WebControls.FileUpload> controllo contiene un file da caricare. Se il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> restituisce `true`, chiamare il <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> proprietà. Se il valore restituito `false`, visualizzare un messaggio all'utente che indica che il controllo non contenga un file. Se non si specifica il codice di gestione degli errori per verificare l'esistenza di un file, il tentativo di salvare un file inesistente genera un <xref:System.Web.HttpException> eccezione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo. Quando l'utente sceglie il **caricare il file** pulsante, il contenuto del file vengono visualizzati come byte in una casella di testo nella pagina. Questo esempio viene usato il <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> proprietà per caricare l'intero file.  
  
 [!code-aspx-csharp[FileUploadFileBytes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadFileBytes/CS/FileUploadFileBytesCS.aspx#1)]
 [!code-aspx-vb[FileUploadFileBytes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadFileBytes/VB/FileUploadFileBytesVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Impossibile leggere il file completo.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
    <Member MemberName="FileContent">
      <MemberSignature Language="C#" Value="public System.IO.Stream FileContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream FileContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileContent As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ FileContent { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileContent : System.IO.Stream" Usage="System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.IO.Stream" /> che punta a un file da caricare usando il controllo <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Oggetto <see cref="T:System.IO.Stream" /> che punta a un file da caricare usando la classe <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> property get una <xref:System.IO.Stream> oggetto che punta a un file da caricare usando la <xref:System.Web.UI.WebControls.FileUpload> controllo. Usare il <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> proprietà per accedere al contenuto del file. Ad esempio, è possibile usare il <xref:System.IO.Stream> oggetto restituito da questa proprietà per leggere il contenuto del file come byte e averle archiviate in una matrice di byte.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo. Il <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> proprietà viene utilizzata per leggere il contenuto del file in una matrice di byte. Quando l'utente sceglie il **caricare il file** pulsante, il contenuto del file vengono visualizzati come byte in una casella di testo nella pagina.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome di un file su un client da caricare usando il controllo <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Stringa che specifica il nome di un file su un client da caricare usando la classe <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ottiene il nome di un file su un client da caricare usando il controllo <xref:System.Web.UI.WebControls.FileUpload>. Il nome del file che il <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> restituita non include il percorso del file nel client.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo per salvare i file in un percorso specificato nel codice. Il <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> proprietà viene utilizzata per ottenere il nome del file da caricare. Il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato per salvare il file nel percorso specificato nel server, usando lo stesso nome file ha sul client. Si noti che questo esempio viene illustrata la sintassi di base per questo controllo, ma non illustra tutte le necessarie controllo degli errori che deve essere eseguita prima di salvare il file. Per un esempio più esaustivo, vedere <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFile">
      <MemberSignature Language="C#" Value="public bool HasFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFile { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFile : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il controllo <see cref="T:System.Web.UI.WebControls.FileUpload" /> contiene un file.</summary>
        <value>
          <see langword="true" /> se la classe <see cref="T:System.Web.UI.WebControls.FileUpload" /> contiene un file; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> proprietà ottiene un valore che indica se il <xref:System.Web.UI.WebControls.FileUpload> controllo contiene un file da caricare. Usare questa proprietà per verificare l'esistenza di un file da caricare prima di eseguire operazioni sul file. Ad esempio, prima di chiamare il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> per salvare il file su disco, usare il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> proprietà per verificare che il file esista. Se <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> restituisce `true`, chiamare il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (metodo). Se il valore restituito `false`, visualizzare un messaggio all'utente che indica che il controllo non contenga un file.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo che esegue il controllo degli errori. Prima di salvare il file, il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> metodo viene chiamato per verificare che il controllo contiene un file da caricare. Inoltre, il <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> viene chiamato per verificare se un file con lo stesso nome è già presente nel percorso. In caso affermativo, il nome del file da caricare è preceduto da un carattere di sottolineatura prima il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato il metodo. Ciò impedisce che il file esistente viene sovrascritto.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFiles">
      <MemberSignature Language="C#" Value="public bool HasFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFiles : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se sono stati caricati dei file.</summary>
        <value>
          <see langword="true" /> se sono stati caricati dei file; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce inoltre `false` se viene caricato un file vuoto (pari a zero byte).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="fileUpload.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.PreRender" /> per il controllo <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.FileUpload.OnPreRender%2A> metodo invia una notifica di <xref:System.Web.UI.WebControls.FileUpload> controllo eseguire alcun passaggio di pre-rendering necessari prima di salvare lo stato di visualizzazione e il rendering del contenuto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFile As HttpPostedFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpPostedFile ^ PostedFile { System::Web::HttpPostedFile ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFile : System.Web.HttpPostedFile" Usage="System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Web.HttpPostedFile" /> sottostante per un file che viene caricato usando il controllo <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Oggetto <see cref="T:System.Web.HttpPostedFile" /> per un file caricato usando <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> proprietà ottiene sottostante <xref:System.Web.HttpPostedFile> oggetto per un file che viene caricato usando il <xref:System.Web.UI.WebControls.FileUpload> controllo. Utilizzare questa proprietà per accedere alle proprietà aggiuntive del file caricato.  
  
 È possibile usare il <xref:System.Web.HttpPostedFile.ContentLength%2A> proprietà da ottenere la lunghezza del file. È possibile usare il <xref:System.Web.HttpPostedFile.ContentType%2A> tipo del file di contenuto di proprietà da ottenere MIME. Inoltre, è possibile usare la <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> proprietà a cui accedere il <xref:System.Web.HttpPostedFile.FileName%2A> proprietà, il <xref:System.Web.HttpPostedFile.InputStream%2A> proprietà e il <xref:System.Web.HttpPostedFile.SaveAs%2A> (metodo). Tuttavia, la stessa funzionalità viene fornita dal <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> proprietà, il <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> proprietà e il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo. Quando l'utente sceglie il **caricare il file** pulsante, il contenuto del file vengono visualizzati come byte in una casella di testo nella pagina. Questo esempio Usa la <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> proprietà a cui accedere il <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=nameWithType> proprietà. Il <xref:System.Web.HttpPostedFile.ContentLength%2A> proprietà viene utilizzata per determinare la lunghezza del file prima di copiare il contenuto del file in una matrice di byte.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpPostedFile" />
      </Docs>
    </Member>
    <Member MemberName="PostedFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt; PostedFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.HttpPostedFile&gt; PostedFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFiles As IList(Of HttpPostedFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ PostedFiles { System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFiles : System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;" Usage="System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta dei file caricati.</summary>
        <value>Raccolta dei file caricati.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che riceve il contenuto del controllo <see cref="T:System.Web.UI.WebControls.FileUpload" />.</param>
        <summary>Invia il contenuto del controllo <see cref="T:System.Web.UI.WebControls.FileUpload" /> all'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato che scrive il contenuto di cui eseguire il rendering sul client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.FileUpload.Render%2A> metodo invia il <xref:System.Web.UI.WebControls.FileUpload> contenuto nell'oggetto specificato del controllo <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> oggetto, che scrive il contenuto per il rendering sul client.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string -&gt; unit" Usage="fileUpload.SaveAs filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Stringa che specifica il percorso completo alla posizione del server in cui salvare il file caricato.</param>
        <summary>Salva il contenuto di un file caricato in un percorso specificato sul server Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodo salva il contenuto di un file caricato in un percorso specificato nel server Web.  
  
 Il <xref:System.Web.UI.WebControls.FileUpload> controllo Salva automaticamente un file al server dopo che l'utente seleziona il file da caricare. È necessario fornire in modo esplicito un controllo o un meccanismo per consentire all'utente di inviare il file specificato. Ad esempio, è possibile fornire un pulsante che l'utente fa clic per caricare il file. Il codice scritto per salvare il file specificato deve chiamare il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodo, che salva il contenuto di un file in un percorso specificato nel server. In genere, il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato in un metodo di gestione degli eventi per un evento che genera un postback al server. Ad esempio, se si specifica un pulsante per inviare un file, il codice per salvare il file nel server è stato quindi incluso all'interno del metodo di gestione degli eventi per l'evento click.  
  
 Quando si chiama il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodo, è necessario specificare il percorso completo della directory nel server in cui salvare il file caricato. Se un percorso non specifica in modo esplicito nel codice dell'applicazione, un <xref:System.Web.HttpException> eccezione viene generata quando un utente tenta di caricare un file. Questo comportamento consente di proteggere i file nel server, non consentendo agli utenti di specificare un percorso in cui salvare i file che sono stati caricati.  
  
 Prima di chiamare il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> metodo, è consigliabile usare il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> proprietà per verificare che il <xref:System.Web.UI.WebControls.FileUpload> controllo contiene un file da caricare. Se il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> restituisce `true`, chiamare il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (metodo). Se il valore restituito `false`, visualizzare un messaggio all'utente che indica che il controllo non contenga un file. Se non si specifica il codice di gestione degli errori per verificare l'esistenza di un file, il tentativo di salvare un file inesistente genera un <xref:System.Web.HttpException> eccezione.  
  
 Per una chiamata al <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> per funzionare, l'applicazione ASP.NET deve avere accesso in scrittura alla directory nel server. Esistono due modi che l'applicazione può ottenere l'accesso in scrittura. È possibile concedere esplicitamente l'accesso in scrittura all'account con cui è in esecuzione l'applicazione, nella directory in cui verranno salvati i file caricati. In alternativa, è possibile aumentare il livello di attendibilità viene concessa all'applicazione ASP.NET. Per ottenere l'accesso in scrittura alla directory in esecuzione per l'applicazione, l'applicazione deve essere concesso il <xref:System.Web.AspNetHostingPermission> oggetto con il livello di attendibilità impostato il <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> valore. Aumentando il livello di attendibilità aumenta l'accesso dell'applicazione alle risorse sul server. Si noti che questo non è un approccio sicuro, poiché un utente malintenzionato che assume il controllo dell'applicazione sarà anche possibile eseguire con questo livello di attendibilità superiore. È consigliabile eseguire un'applicazione ASP.NET nel contesto di un utente che dispone dei privilegi minimi necessari per l'esecuzione dell'applicazione. Per altre informazioni sulla sicurezza in applicazioni ASP.NET, vedere [base procedure consigliate per le applicazioni Web](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) e [livelli di Trust di ASP.NET e i file dei criteri](http://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Web.UI.WebControls.FileUpload> controllo che esegue il controllo degli errori. Prima di salvata il file, il <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> metodo viene chiamato per verificare l'esistenza di un file da caricare. Inoltre, il <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> metodo viene chiamato per verificare l'esistenza di un file che ha già lo stesso nome nel percorso. In caso affermativo, il nome del file da caricare è preceduto da un numero che precede il <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> viene chiamato il metodo. Ciò impedisce che il file esistente viene sovrascritto.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="filename" /> non è un percorso completo.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
  </Members>
</Type>