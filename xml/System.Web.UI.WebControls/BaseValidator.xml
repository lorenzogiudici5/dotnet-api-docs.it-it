<Type Name="BaseValidator" FullName="System.Web.UI.WebControls.BaseValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6819f582da64eec67c49fb38717408297f71ce4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600505" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class BaseValidator : System.Web.UI.WebControls.Label, System.Web.UI.IValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseValidator extends System.Web.UI.WebControls.Label implements class System.Web.UI.IValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BaseValidator&#xA;Inherits Label&#xA;Implements IValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class BaseValidator abstract : System::Web::UI::WebControls::Label, System::Web::UI::IValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Label</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IValidator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ErrorMessage")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Funge da classe base astratta per i controlli di convalida.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.WebControls.BaseValidator> classe fornisce l'implementazione di base per tutti i controlli di convalida. I controlli di convalida vengono utilizzati per convalidare l'input dell'utente in un controllo di input associato. Quando l'utente immette un valore che si verifica un errore di convalida, il controllo di convalida viene visualizzato un messaggio di errore. Poiché un controllo di convalida è separato dal controllo di input, è possibile posizionare il messaggio di errore in un punto qualsiasi nella pagina relativa al controllo di input. ASP.NET fornisce diversi controlli di convalida che eseguono tipi specifici di convalida. Nella tabella seguente vengono descritti i controlli.  
  
|Controllo di convalida|Descrizione|  
|------------------------|-----------------|  
|<xref:System.Web.UI.WebControls.CompareValidator>|Convalida di un valore rispetto al valore immesso in un altro controllo di input, con un valore costante o rispetto a un tipo di dati appropriato impostando il <xref:System.Web.UI.WebControls.CompareValidator.Operator%2A?displayProperty=nameWithType> proprietà <xref:System.Web.UI.WebControls.ValidationCompareOperator.DataTypeCheck?displayProperty=nameWithType>.|  
|<xref:System.Web.UI.WebControls.CustomValidator>|Convalida un valore tramite una routine di convalida personalizzato fornito dall'utente.|  
|<xref:System.Web.UI.WebControls.RangeValidator>|Verifica se un valore compreso in un intervallo di valori.|  
|<xref:System.Web.UI.WebControls.RegularExpressionValidator>|Convalida un valore utilizzando un'espressione regolare.|  
|<xref:System.Web.UI.WebControls.RequiredFieldValidator>|Convalida che è stato immesso un valore in un campo obbligatorio.|  
  
 I controlli di convalida convalidano sempre il controllo di input associato nel server. I controlli di convalida sono anche un'implementazione completa sul lato client che consente ai browser abilitato uno script (ad esempio Microsoft Internet Explorer versione 4.0 e versioni successive) per eseguire la convalida sul client. La convalida lato client migliora il processo di convalida controllando l'input dell'utente prima che venga inviato al server. In questo modo gli errori rilevato sul client prima che il form viene inviato, evitando il round trip delle informazioni necessarie per la convalida sul lato server.  
  
 Più controlli di convalida è utilizzabile con un singolo controllo di input per la convalida dei criteri diversi. Ad esempio, è possibile applicare più controlli di convalida su un <xref:System.Web.UI.WebControls.TextBox> controllo. È possibile utilizzare un <xref:System.Web.UI.WebControls.RangeValidator> controllo per assicurarsi che il valore immesso nel <xref:System.Web.UI.WebControls.TextBox> controllo si trova all'interno di un intervallo di set e un <xref:System.Web.UI.WebControls.RequiredFieldValidator> controllo per assicurarsi che l'utente immette un valore.  
  
 ASP.NET fornisce numerosi controlli che hanno la possibilità di eseguire il postback al server. Quando uno di questi controlli è relativo `CausesValidation` proprietà impostata su `true`, la convalida viene eseguita quando il controllo esegue il postback al server. I controlli seguenti hanno la possibilità di eseguire il postback al server:  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
> [!NOTE]
>  Alcuni di questi controlli postback al server solo quando il `AutoPostBack` è impostata su `true`.  
  
 Ciascuno di questi controlli è un `ValidationGroup` proprietà che, se impostato, vengono convalidati solo i controlli di convalida all'interno del gruppo specificato quando il controllo genera un messaggio al server. Per raggruppare i controlli di convalida, impostare il <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> proprietà di ciascun controllo di convalida per lo stesso valore.  
  
 Per associare un controllo di input a un controllo di convalida, usare il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà. Per specificare il testo da visualizzare in un controllo di convalida quando la convalida non riesce, usare il <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> proprietà. È inoltre possibile visualizzare un riepilogo di tutti i controlli che non superano la convalida nella pagina utilizzando un <xref:System.Web.UI.WebControls.ValidationSummary> controllo. Per specificare il testo da visualizzare un <xref:System.Web.UI.WebControls.ValidationSummary> controllo, utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà.  
  
> [!NOTE]
>  Se si imposta la <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà senza impostare il <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> proprietà, il valore della <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà viene anche visualizzata nel controllo di convalida.  
  
 Quando si utilizzano i controlli di convalida, controllare sempre i risultati della convalida sul lato server prima di eseguire qualsiasi elaborazione. Dopo un postback, ma prima che vengano chiamati i metodi di evento, la pagina chiama i controlli di convalida e aggrega i risultati nella <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> proprietà. (È anche possibile chiamare i controlli di convalida in modo esplicito utilizzando il `Validate` metodo.) Nel codice, è necessario verificare che il <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> restituisce proprietà `true` prima dell'elaborazione dell'input. Anche se i browser abilitati script potrebbero impedire un postback sul client se un controllo di convalida ha esito negativo, è sempre opportuno verificare <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> nel codice server prima di elaborare dati convalidati.  
  
 È possibile eseguire manualmente la convalida. Per convalidare tutti i controlli di convalida della pagina, utilizzare il <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metodo. Singoli controlli di convalida possono essere convalidati utilizzando il <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodo del controllo.  
  
> [!NOTE]
>  Se si utilizza il <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> proprietà in un `Page_Load` (metodo), è necessario prima chiamare esplicitamente il <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metodo. Poiché la convalida viene eseguita dopo il <xref:System.Web.UI.Control.Load?displayProperty=nameWithType> evento per la pagina, ma prima del gestore eventi per il `Click` o `Command` eventi, il <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> proprietà non viene aggiornata finché non il <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metodo viene chiamato. In alternativa, è possibile inserire il codice nel gestore eventi per il `Click` o `Command` invece dell'evento di `Page_Load` metodo.  
  
 Non tutti i controlli server Web supportano i controlli di convalida. I controlli standard che possono essere convalidati con un controllo di convalida sono:  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>  
  
> [!NOTE]
>  Per un controllo di input da convalidare il <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType> attributo deve essere applicato al controllo.  
  
> [!NOTE]
>  Se si utilizzano i controlli di convalida che derivano da <xref:System.Web.UI.WebControls.BaseValidator> all'interno di un <xref:System.Web.UI.UpdatePanel> di controllo, assicurarsi che il controllo di convalida e il controllo è associato siano nello stesso riquadro. Per ulteriori informazioni sull'utilizzo di <xref:System.Web.UI.UpdatePanel> di controllo per gli aggiornamenti parziali della pagina, vedere [Panoramica per il Rendering parziale della pagina](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Quando la convalida non riesce, è possibile impostare lo stato attivo sul controllo di input associato impostando il <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> proprietà `true`.  
  
 Per un elenco di valori di proprietà iniziali per un'istanza di <xref:System.Web.UI.WebControls.BaseValidator>, vedere il <xref:System.Web.UI.WebControls.BaseValidator.%23ctor%2A> costruttore.  
  
## <a name="accessibility"></a>Accessibilità  
 Per informazioni su come configurare il controllo in modo che generi codice conforme agli standard di accessibilità, vedere [accessibilità in Visual Studio e ASP.NET](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) e [controlli ASP.NET e l'accessibilità](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come utilizzare più controlli di convalida per verificare che l'utente immette un valore valido in un <xref:System.Web.UI.WebControls.TextBox> controllo.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Quando si eredita dal <see cref="T:System.Web.UI.WebControls.BaseValidator" /> (classe), è necessario eseguire l'override del membro: <see cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
    <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RegularExpressionValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
    <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BaseValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.BaseValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non viene chiamato direttamente. I controlli di convalida che ereditano da questa classe è possono chiamare questo costruttore dai propri costruttori per inizializzare le proprietà di base.  
  
 La tabella seguente illustra i valori di proprietà iniziali per un'istanza di <xref:System.Web.UI.WebControls.BaseValidator>.  
  
|Proprietà|Valore iniziale|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A>|<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>|  
|<xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A>|`false`|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CompareValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RangeValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RequiredFieldValidator.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che rappresenta il flusso di output per il rendering del contenuto HTML nel client.</param>
        <summary>Aggiunge gli stili e gli attributi HTML dei quali è necessario eseguire il rendering del controllo nell'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender%2A> metodo viene utilizzato per eseguire il rendering di attributi del controllo nel tag HTML per il controllo. Questo metodo viene in genere sottoposto a override dagli sviluppatori di controlli nelle classi derivate per inserire gli attributi appropriati e gli stili per il <xref:System.Web.UI.HtmlTextWriter> flusso di output per un controllo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> (metodo), verificare di chiamare il metodo corrispondente nella classe base. In caso contrario, non vengono visualizzati gli attributi contenuti nella classe base.</para>
        </block>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="AssociatedControlID">
      <MemberSignature Language="C#" Value="public override string AssociatedControlID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssociatedControlID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AssociatedControlID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssociatedControlID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Questa proprietà non è supportata.</summary>
        <value>Questa proprietà non è supportata e genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà non è supportata. Questa proprietà è supportata solo in base <xref:System.Web.UI.WebControls.Label> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Tentativo di impostazione di questa proprietà.</exception>
        <altmember cref="P:System.Web.UI.WebControls.Label.AssociatedControlID" />
      </Docs>
    </Member>
    <Member MemberName="CheckControlValidationProperty">
      <MemberSignature Language="C#" Value="protected void CheckControlValidationProperty (string name, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckControlValidationProperty(string name, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckControlValidationProperty (name As String, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckControlValidationProperty(System::String ^ name, System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Controllo da verificare.</param>
        <param name="propertyName">Se durante l'utilizzo del metodo viene lanciata un'eccezione, viene fornito testo aggiuntivo per descriverne l'origine.</param>
        <summary>Verifica se il controllo specificato è presente nella pagina e contiene proprietà di convalida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty%2A> è un metodo di supporto utilizzato principalmente dal <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> metodo per verificare se il controllo specificato nella pagina e contiene le proprietà di convalida. Questo metodo non restituisce un valore per segnalare il risultato. Al contrario, genera un'eccezione quando la verifica ha esito negativo.  
  
> [!NOTE]
>  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Il controllo specificato non è stato individuato.  
  
 \- oppure -  
  
 Al controllo specificato non è associato un attributo <see cref="T:System.Web.UI.ValidationPropertyAttribute" />; di conseguenza, non può essere convalidato tramite un controllo di convalida.</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected virtual bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ControlPropertiesValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se il controllo specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> è un controllo valido.</summary>
        <returns>
          <see langword="true" /> se il controllo specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> è un controllo valido; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> è un metodo di supporto utilizzato principalmente dal <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> proprietà per determinare se il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà contiene un controllo input valido. Per un controllo di input valido, il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà deve essere impostata su un valore e tale valore deve essere un controllo nella pagina che supporta la convalida.  
  
> [!NOTE]
>  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Per la proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> non è specificato alcun valore.  
  
 \- oppure -  
  
 Il controllo di input specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> non viene rilevato sulla pagina.  
  
 \- oppure -  
  
 Al controllo di input specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> non è associato un attributo <see cref="T:System.Web.UI.ValidationPropertyAttribute" />; di conseguenza, non può essere convalidato tramite un controllo di convalida.</exception>
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      </Docs>
    </Member>
    <Member MemberName="ControlToValidate">
      <MemberSignature Language="C#" Value="public string ControlToValidate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlToValidate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlToValidate As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ControlToValidate { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.ValidatedControlConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.IDReferenceProperty</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il controllo di input da convalidare.</summary>
        <value>Il controllo di input da convalidare. Il valore predefinito è <see cref="F:System.String.Empty" />, a indicare che questa proprietà non è impostata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà per specificare il controllo di input da convalidare. Questa proprietà deve essere impostata sull'ID di un controllo di input per tutti i controlli di convalida, ad eccezione di <xref:System.Web.UI.WebControls.CustomValidator> controllo, che può essere vuoto. Se non si specifica un controllo input valido, verrà generata un'eccezione quando viene eseguito il rendering della pagina. L'ID deve fare riferimento a un controllo all'interno del contenitore stesso come il controllo di convalida. Deve essere nella stessa pagina o nel controllo utente, o deve essere nello stesso modello di un controllo basato su modelli.  
  
 I controlli standard che possono essere convalidati sono:  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>  
  
> [!NOTE]
>  Per un controllo di input da convalidare il <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType> attributo deve essere applicato al controllo.  
  
 Tutti i controlli di convalida, tranne il <xref:System.Web.UI.WebControls.RequiredFieldValidator> di controllo, superano la convalida se il controllo di input specificato per il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà non contiene testo. Se si utilizza un <xref:System.Web.UI.WebControls.CustomValidator> controllo lato client e lato server funzioni di convalida non vengono chiamate.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per ulteriori informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà per specificare il controllo di input da convalidare.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
      </Docs>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected virtual bool DetermineRenderUplevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DetermineRenderUplevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DetermineRenderUplevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool DetermineRenderUplevel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se il controllo di convalida può eseguire la convalida sul lato client.</summary>
        <returns>
          <see langword="true" /> se il controllo di convalida può eseguire la convalida sul lato client; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel%2A> metodo è una funzione helper che viene utilizzata principalmente dal <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> proprietà per determinare se il browser del client supporta lo script client. Per questa proprietà restituire `true`, devono essere soddisfatte le condizioni seguenti:  
  
-   Il browser ha abilitato lo script client.  
  
-   Il <xref:System.Web.HttpBrowserCapabilitiesBase.W3CDomVersion%2A> proprietà del <xref:System.Web.HttpBrowserCapabilitiesBase> oggetto archiviato nel <xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType> proprietà è 1 o versione successiva.  
  
-   Il <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> proprietà del <xref:System.Web.HttpBrowserCapabilitiesBase> oggetto archiviato nel <xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType> è 1.2 o successiva.  
  
    > [!NOTE]
    >  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidatorDisplay Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ValidatorDisplay Display" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As ValidatorDisplay" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ValidatorDisplay Display { System::Web::UI::WebControls::ValidatorDisplay get(); void set(System::Web::UI::WebControls::ValidatorDisplay value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidatorDisplay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il comportamento di visualizzazione del messaggio di errore in un controllo di convalida.</summary>
        <value>Uno dei valori di <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" />. Il valore predefinito è <see langword="Static" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> proprietà per specificare il comportamento di visualizzazione del messaggio di errore nel controllo di convalida. Nella tabella seguente sono elencati i diversi valori che possono essere utilizzati.  
  
|Comportamento di visualizzazione|Descrizione|  
|----------------------|-----------------|  
|`None`|Il messaggio di convalida non è mai visualizzato inline.|  
|`Static`|Allocazione di spazio per il messaggio di convalida in layout di pagina.|  
|`Dynamic`|Spazio per il messaggio di convalida in modo dinamico viene aggiunto alla pagina, se la convalida non riesce.|  
  
> [!NOTE]
>  Il comportamento di visualizzazione dipende se viene eseguita la convalida lato client. Se la convalida lato client non è attiva (perché il browser non lo supporta o perché è stata disabilitata tramite il <xref:System.Web.UI.Page.ClientTarget%2A?displayProperty=nameWithType> direttiva page o <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> proprietà), `ValidatorDisplay.Static` e `ValidatorDisplay.Dynamic` si comportano allo stesso modo: accetta il messaggio di errore backup solo se lo spazio viene visualizzato. La possibilità di allocare dinamicamente spazio per il messaggio quando non viene visualizzata (`ValidatorDisplay.Dynamic`) funziona solo con la convalida lato client.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per ulteriori informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> proprietà per specificare che lo spazio per il messaggio di convalida viene aggiunto alla pagina Web in modo dinamico durante la convalida non riesce.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore specificato non è uno dei valori di <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.ValidatorDisplay" />
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableClientScript { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la convalida sul client è abilitata.</summary>
        <value>
          <see langword="true" /> se la convalida sul client è abilitata; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> proprietà per specificare se la convalida lato client è abilitata.  
  
 I controlli di convalida sempre eseguono la convalida sul server. Hanno inoltre un'implementazione completa sul lato client che consente ai browser supportati DHTML (ad esempio Microsoft Internet Explorer 4.0 e versioni successive) per eseguire la convalida sul client. La convalida lato client migliora il processo di convalida controllando l'input dell'utente prima che venga inviato al server. In questo modo gli errori rilevato sul client prima che il form viene inviato, evitando il round trip delle informazioni necessarie per la convalida sul lato server.  
  
 Per impostazione predefinita, questo valore è impostato su `true`, che consente la convalida lato client se il browser lo consente. È possibile disabilitare la convalida lato client in modo da controlli. Ciò risulta utile se l'aggiornamento dinamico sul client crea problemi con il layout della pagina, oppure se si desidera eseguire codice del server prima di convalida.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per ulteriori informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> proprietà disabilitare la convalida lato client in modo che i numeri casuali possono essere generati sul server.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public override bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo di convalida è abilitato.</summary>
        <value>
          <see langword="true" /> se il controllo di convalida è abilitato; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> proprietà per specificare se il controllo di convalida è abilitato. È possibile disabilitare il controllo di convalida impostando questa proprietà su `false`.  
  
 Impostazione di <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> o <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> proprietà `false` impedirà l'esecuzione della convalida. In questo modo il <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> proprietà in modo che restituisca sempre `true`.  
  
 Il <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> è leggermente diversa dalla proprietà di <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> proprietà. Se il <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> per un controllo di convalida è impostata su `true`, ma la <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> è impostata su `false`, il controllo di convalida viene comunque eseguito il rendering per la convalida lato client, ma in uno stato disabilitato. Quindi è possibile abilitare nuovamente il controllo di convalida sul client mediante script DHTML.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> proprietà per abilitare o disabilitare i controlli di convalida nella pagina Web mediante il codice lato server.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator.Enabled Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.Enabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/VB/sourcevb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> proprietà per abilitare o disabilitare i controlli di convalida della pagina Web mediante il codice sul lato client.  
  
<!-- TODO: review snippet reference  [!CODE [Classic BaseValidator.Enabled Example2#1](Classic BaseValidator.Enabled Example2#1)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.ErrorMessage</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il testo del messaggio di errore visualizzato in un controllo <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> quando la convalida non riesce.</summary>
        <value>Messaggio di errore visualizzato in un controllo <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> quando la convalida non riesce. Il valore predefinito è una stringa vuota (""), a indicare che questa proprietà non è impostata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si utilizza un <xref:System.Web.UI.WebControls.ValidationSummary> controllo, utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà per specificare il testo da visualizzare nel <xref:System.Web.UI.WebControls.ValidationSummary> controllare quando la convalida ha esito negativo per il controllo di convalida corrente. Per specificare il testo da visualizzare nel controllo di convalida se stesso, usare il <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> proprietà.  
  
> [!NOTE]
>  Se si imposta la <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà senza impostare il <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> proprietà, il valore della <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà viene anche visualizzata nel controllo di convalida.  
  
 Il valore di questa proprietà, se impostato, può essere salvato automaticamente in un file di risorse utilizzando uno strumento di progettazione. Per ulteriori informazioni, vedere <xref:System.ComponentModel.LocalizableAttribute> e [globalizzazione e localizzazione ASP.NET](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà per specificare messaggi diversi per il <xref:System.Web.UI.WebControls.ValidationSummary> controllo e <xref:System.Web.UI.WebControls.RequiredFieldValidator> e <xref:System.Web.UI.WebControls.CompareValidator> controlli.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected abstract bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool EvaluateIsValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando è sottoposto a override in una classe derivata, questo metodo contiene il codice per determinare se il valore nel controllo di input è valido.</summary>
        <returns>
          <see langword="true" /> se il valore nel controllo di input è valido; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid%2A> metodo per determinare se il valore nel controllo di input specificato per il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà è valida.  
  
> [!NOTE]
>  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È necessario implementare questo metodo in una classe derivata per determinare se il valore nel controllo di input è valido.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Red")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il colore del messaggio visualizzato quando la convalida non riesce.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Color" /> che rappresenta il colore del messaggio visualizzato quando la convalida non riesce. Il valore predefinito è <see cref="P:System.Drawing.Color.Red" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> proprietà per specificare un colore del testo personalizzato per il messaggio visualizzato nel controllo di convalida quando la convalida non riesce.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> proprietà per visualizzare il messaggio di convalida in blu.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="GetControlRenderID">
      <MemberSignature Language="C#" Value="protected string GetControlRenderID (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlRenderID(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlRenderID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlRenderID (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlRenderID(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome del controllo da cui ottenere l'ID client.</param>
        <summary>Ottiene l'ID client del controllo specificato.</summary>
        <returns>ID client del controllo specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.GetControlRenderID%2A> metodo per ottenere l'ID client del controllo specificato. Per ulteriori informazioni, vedere <xref:System.Web.UI.Control.ClientID%2A>.  
  
> [!NOTE]
>  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="GetControlValidationValue">
      <MemberSignature Language="C#" Value="protected string GetControlValidationValue (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlValidationValue(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlValidationValue (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlValidationValue(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome del controllo di input da cui ottenere il valore.</param>
        <summary>Ottiene il valore associato al controllo di input specificato.</summary>
        <returns>Valore associato al controllo di input specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue%2A> metodo per ottenere il valore associato al controllo di input specificato, indipendentemente dal tipo di controllo. Ad esempio, è possibile utilizzare questo metodo per ottenere il valore di un <xref:System.Web.UI.WebControls.TextBox> controllo, nonché il valore dell'elemento selezionato da un <xref:System.Web.UI.WebControls.ListBox> controllo. Se il controllo specificato non viene trovato, `null` viene restituito.  
  
> [!NOTE]
>  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetValidationProperty">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.PropertyDescriptor GetValidationProperty (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.PropertyDescriptor GetValidationProperty(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValidationProperty (component As Object) As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::PropertyDescriptor ^ GetValidationProperty(System::Object ^ component);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">Oggetto <see cref="T:System.Object" /> che rappresenta il controllo di cui ottenere la proprietà di convalida.</param>
        <summary>Determina la proprietà di convalida di un controllo (se presente).</summary>
        <returns>Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che contiene la proprietà di convalida del controllo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.BaseValidator.GetValidationProperty%2A> metodo è una funzione helper che ottiene la proprietà di convalida del controllo di input specificato.  
  
> [!NOTE]
>  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="IsUnobtrusive">
      <MemberSignature Language="C#" Value="protected bool IsUnobtrusive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnobtrusive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsUnobtrusive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsUnobtrusive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il controllo genera JavaScript discreto.</summary>
        <value>
          <see langword="true" /> se il controllo genera JavaScript non intrusivo; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce `false` se il <xref:System.Web.UI.Page.UnobtrusiveValidationMode%2A> valore della proprietà è <xref:System.Web.UI.UnobtrusiveValidationMode.None>; in caso contrario, questa proprietà restituisce `true` .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.IsValid</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo di input associato supera la convalida.</summary>
        <value>
          <see langword="true" /> se il controllo di input associato supera la convalida; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> proprietà per determinare se il controllo di input supera la convalida.  
  
> [!CAUTION]
>  Poiché il valore predefinito di questa proprietà è `true`, verrà restituito `true` se questa proprietà richiesta prima della convalida. Ad esempio, questa situazione può verificarsi se si tenta di utilizzare questa proprietà nel <xref:System.Web.UI.Control.Load?displayProperty=nameWithType> evento di una pagina.  
  
 Il <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> proprietà viene valutata solo quando il <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodo viene chiamato. È possibile chiamare il <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodo per ogni convalida controllare nella pagina singolarmente o chiamare tutti gli elementi in una sola volta utilizzando il <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metodo. Controlli pulsante con i relativi `CausesValidation` proprietà impostata su `true` chiamerà anche il <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> metodo.  
  
> [!NOTE]
>  È possibile modificare il valore di questa proprietà manualmente dopo la convalida ha avuto luogo. Ciò consente di eseguire l'override del risultato della convalida, se necessario.  
  
 Il <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> per la pagina è impostata su `true` solo se il <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> per ogni controllo di convalida della pagina è inoltre impostata su `true`.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per ulteriori informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> proprietà per determinare se il controllo di input supera la convalida.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[BaseValidatorIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorIsValid/CS/basevalidatorisvalidcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorIsValid/VB/basevalidatorisvalidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="E:System.Web.UI.Control.Load" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.Init" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo che questo metodo chiama il controllo di base <xref:System.Web.UI.Control.OnInit%2A> metodo, imposta il <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> proprietà <xref:System.Drawing.Color.Red%2A> se vengono soddisfatte le condizioni seguenti:  
  
-   Il <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> proprietà non è già impostata.  
  
-   Il <xref:System.Web.UI.Control.RenderingCompatibility%2A> proprietà indica una versione ASP.NET precedente alla `4.0`. Per impostazione predefinita, i controlli di convalida in ASP.NET 4 e versioni successive vengono visualizzati gli errori in rosso. Per informazioni su come controllare l'aspetto visivo dei controlli di convalida, vedere [convalida dell'Input utente in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
 Questo metodo registra anche il controllo di convalida della pagina.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> in una classe derivata, verificare di chiamare il metodo <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> della classe di base in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.PreRender" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è stato sostituito per controllare il browser client e configurare il controllo di convalida per la compatibilità prima del rendering.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Web.UI.WebControls.BaseValidator.OnPreRender%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> in una classe derivata, verificare di chiamare il metodo <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> della classe di base in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
        <altmember cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.Unload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è stato sostituito per annullare la registrazione di controllo di convalida della pagina.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Web.UI.WebControls.BaseValidator.OnUnload%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> in una classe derivata, verificare di chiamare il metodo <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> della classe di base in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.Unload" />
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PropertiesValid">
      <MemberSignature Language="C#" Value="protected bool PropertiesValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertiesValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PropertiesValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool PropertiesValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il controllo specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> è un controllo valido.</summary>
        <value>
          <see langword="true" /> se il controllo specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> è un controllo valido; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> proprietà per determinare se il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà contiene un controllo input valido. Per un controllo di input valido, il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà deve essere impostata su un controllo nella pagina.  
  
> [!NOTE]
>  Questa proprietà viene usata principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Nella proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> non è specificato alcun valore.  
  
 \- oppure -  
  
 Il controllo di input specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> non viene rilevato sulla pagina.</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorCommonScript">
      <MemberSignature Language="C#" Value="protected void RegisterValidatorCommonScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RegisterValidatorCommonScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RegisterValidatorCommonScript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RegisterValidatorCommonScript();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Registra il codice sulla pagina per la convalida sul client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript%2A> metodo per registrare il codice della pagina per eseguire la convalida lato client.  
  
> [!NOTE]
>  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Chiamare questo metodo nel <see cref="E:System.Web.UI.Control.PreRender" /> gestore dell'evento della classe derivata per registrare il codice che esegue la convalida lato client.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorDeclaration">
      <MemberSignature Language="C#" Value="protected virtual void RegisterValidatorDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterValidatorDeclaration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RegisterValidatorDeclaration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RegisterValidatorDeclaration();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Registra una dichiarazione di matrice ECMAScript mediante il nome della matrice<see langword="Page_Validators" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration%2A> metodo per registrare una dichiarazione di matrice ECMAScript mediante il nome della matrice `Page_Validators`.  
  
> [!NOTE]
>  Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che contiene il flusso di output per il rendering nel client.</param>
        <summary>Visualizza il controllo sul client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.BaseValidator.Render%2A> metodo viene utilizzato per generare il markup HTML per un controllo di convalida.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderUplevel">
      <MemberSignature Language="C#" Value="protected bool RenderUplevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderUplevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RenderUplevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool RenderUplevel { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il browser del client supporta il rendering di "livello superiore".</summary>
        <value>
          <see langword="true" /> se il browser supporta il rendering di "livello superiore"; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> proprietà per determinare se il browser del client supporta il rendering "livello superiore". Per un browser supportare il rendering "livello superiore", deve supportare Servizio autenticazione Internet (DOM, Document Object Model) di Microsoft Internet Explorer versione 4 o versione successiva e versione di ECMAScript 1.2 o successiva.  
  
> [!NOTE]
>  Questa proprietà viene usata principalmente dagli sviluppatori di controlli.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="SetFocusOnError">
      <MemberSignature Language="C#" Value="public bool SetFocusOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SetFocusOnError" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property SetFocusOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SetFocusOnError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se lo stato attivo è impostato sul controllo specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> quando la convalida ha esito negativo.</summary>
        <value>
          <see langword="true" /> per impostare lo stato attivo sul controllo specificato dalla proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> quando la convalida ha esito negativo; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> proprietà per specificare se lo stato attivo viene impostato automaticamente sul controllo specificato per il <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà quando il controllo di convalida ha esito negativo. Ciò consente all'utente di aggiornare rapidamente il controllo appropriato.  
  
 Se l'esito negativo di più controlli di convalida e questa proprietà è impostata su `true`, il controllo specificato nella <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> proprietà per il primo controllo di convalida riceve lo stato attivo.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per ulteriori informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il testo visualizzato nel controllo di convalida quando la convalida ha esito negativo.</summary>
        <value>Testo visualizzato nel controllo di convalida quando la convalida ha esito negativo. Il valore predefinito è una stringa vuota (""), a indicare che questa proprietà non è impostata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> proprietà per specificare il testo da visualizzare in un controllo di convalida quando la convalida non riesce. È inoltre possibile visualizzare un riepilogo di tutti i controlli che non superano la convalida nella pagina utilizzando un <xref:System.Web.UI.WebControls.ValidationSummary> controllo. Per specificare il testo da visualizzare un <xref:System.Web.UI.WebControls.ValidationSummary> controllo, utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà.  
  
> [!NOTE]
>  Se si imposta la <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà senza impostare il <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> proprietà, il valore della <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> proprietà viene anche visualizzata nel controllo di convalida.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Validate();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IValidator.Validate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue la convalida sul controllo di input associato e aggiorna la proprietà <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodo per eseguire la convalida del controllo di input associato. Questo metodo consente di eseguire la convalida a livello di codice nel controllo di input. Il <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> proprietà viene aggiornata automaticamente con i risultati della convalida.  
  
   
  
## Examples  
 Per un esempio del <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodo utilizzato in una classe derivata, vedere il <xref:System.Web.UI.WebControls.CompareValidator> Cenni preliminari sulla classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del gruppo di convalida a cui appartiene questo controllo di convalida.</summary>
        <value>Il nome del gruppo di convalida a cui appartiene il controllo di convalida. Il valore predefinito è una stringa vuota (""), a indicare che questa proprietà non è impostata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET fornisce numerosi controlli che hanno la possibilità di eseguire il postback al server. Quando uno di questi controlli è relativo `CausesValidation` proprietà impostata su `true`, la convalida viene eseguita quando il controllo esegue il postback al server. I controlli seguenti hanno la possibilità di eseguire il postback al server:  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
> [!NOTE]
>  Alcuni di questi controlli postback al server solo quando il `AutoPostBack` è impostata su `true`.  
  
 Ciascuno di questi controlli è un `ValidationGroup` proprietà che, se impostato, vengono convalidati solo i controlli di convalida all'interno del gruppo specificato quando il controllo genera un messaggio al server. Utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> proprietà da assegnare a un controllo di convalida a un gruppo di convalida. Il <xref:System.Web.UI.Page> anche classe espone un <xref:System.Web.UI.Page.GetValidators%2A> (metodo) e un <xref:System.Web.UI.Page.Validate%2A> metodo che accetta un <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> parametro di input.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per ulteriori informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> proprietà da assegnare a un controllo di convalida a un gruppo.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[BaseValidatorValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorValidationGroup/CS/BaseValidatorValidationGroupcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorValidationGroup/VB/BaseValidatorValidationGroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.ValidationGroup" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="M:System.Web.UI.Page.GetValidators(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>