<Type Name="Button" FullName="System.Web.UI.WebControls.Button">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ef2c126cb86226bdd46949310ea402b45e4488d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37742976" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Button : System.Web.UI.WebControls.WebControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Button extends System.Web.UI.WebControls.WebControl implements class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Button" />
  <TypeSignature Language="VB.NET" Value="Public Class Button&#xA;Inherits WebControl&#xA;Implements IButtonControl, IPostBackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class Button : System::Web::UI::WebControls::WebControl, System::Web::UI::IPostBackEventHandler, System::Web::UI::WebControls::IButtonControl" />
  <TypeSignature Language="F#" Value="type Button = class&#xA;    inherit WebControl&#xA;    interface IButtonControl&#xA;    interface IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:Button runat="server" Text="Button"&gt;&lt;/{0}:Button&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Visualizza un controllo pulsante di comando nella pagina Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#Introduction)  
  
-   [Comportamento di Postback pulsante e gli eventi del Server](#ButtonPostbackBehaviorandServerEvents)  
  
-   [Pulsante di gestione di eventi in uno Script Client](#HandlingButtonEventsinClientScript)  
  
-   [Controlli pulsante e convalida](#ButtonControlsAndValidation)  
  
-   [Pulsanti nei controlli dati](#ButtonsInDataControls)  
  
-   [Associazione di dati ai controlli](#BindingDataToTheControls)  
  
-   [Utilizzare i pulsanti con i controlli UpdatePanel](#UsingButtonsWithUpdatePanelControls)  
  
-   [Sintassi dichiarativa](#DeclarativeSyntax)  
  
<a name="Introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Usare il <xref:System.Web.UI.WebControls.Button> controllo per creare un pulsante di comando della pagina Web che consente agli utenti di registrare una pagina al server. Il controllo genera un evento nel codice del server che è possibile gestire in modo che risponda il postback. Può anche generare un evento in uno script client che è possibile gestire prima che la pagina viene inserita o che può eseguire e quindi annullare l'invio della pagina.  
  
> [!NOTE]
>  ASP.NET include diversi tipi di pulsanti, ognuno dei quali viene visualizzata in modo diverso nelle pagine Web. Sono le <xref:System.Web.UI.WebControls.Button> controllo, che esegue il rendering come pulsante push; la <xref:System.Web.UI.WebControls.LinkButton> controllo, che esegue il rendering come collegamenti; e il <xref:System.Web.UI.WebControls.ImageButton> controllo, che esegue il rendering come immagine; e il <xref:System.Web.UI.WebControls.ImageMap> controllo, che consente di creare un grafico con le aree sensibili che consente agli utenti. Per impostazione predefinita, tutti i controlli pulsante inviano quando si fa clic. È anche possibile usare la <xref:System.Web.UI.HtmlControls.HtmlButton> e <xref:System.Web.UI.HtmlControls.HtmlInputButton> controlli per creare pulsanti nella pagina che sono programmabili nel codice server. Per informazioni dettagliate sulle differenze tra i controlli server HTML e Web, vedere [Cenni preliminari sui controlli Server Web ASP.NET](http://msdn.microsoft.com/library/0d4854a3-6e79-4b7b-a27f-ac57cd9c2a84).  
  
 Per impostazione predefinita, un <xref:System.Web.UI.WebControls.Button> controllo è un pulsante di invio. Un pulsante di invio non ha un nome di comando (specificato da di <xref:System.Web.UI.WebControls.Button.CommandName%2A> proprietà) associato con il pulsante e semplicemente i post il postback della pagina Web al server. È possibile fornire un gestore eventi per il <xref:System.Web.UI.WebControls.Button.Click> eventi a livello di programmazione le azioni eseguite quando si fa clic sul pulsante Invia.  
  
 Un pulsante di comando è un nome di comando associato al pulsante, ad esempio `Sort`, impostando il <xref:System.Web.UI.WebControls.Button.CommandName%2A> proprietà. In questo modo è possibile creare più <xref:System.Web.UI.WebControls.Button> controlli in una pagina Web di pagina e a livello di programmazione stabilire quali <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. È anche possibile usare la <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> proprietà con un pulsante di comando per fornire informazioni aggiuntive sul comando da eseguire, ad esempio `Ascending`. È possibile fornire un gestore eventi per il <xref:System.Web.UI.WebControls.Button.Command> eventi a livello di programmazione le azioni eseguite quando si fa clic sul pulsante di comando.  
  
<a name="ButtonPostbackBehaviorandServerEvents"></a>   
## <a name="button-postback-behavior-and-server-events"></a>Comportamento di Postback pulsante e gli eventi del Server  
 Quando un utente fa clic su qualsiasi pulsante di controllo server Web, la pagina viene inviata al server. In questo modo la pagina Web da elaborare e tutti gli eventi in sospeso da generare nel codice basato su server. Quando ha completato tutte le pagina e controllare l'elaborazione, la pagina esegue il rendering stesso browser nuovamente.  
  
 I pulsanti possono generare le proprie <xref:System.Web.UI.WebControls.Button.Click> eventi o <xref:System.Web.UI.WebControls.Button.Command> evento, che è possibile gestire tramite il codice basato su server. Questo comportamento è diverso da quello degli eventi nelle pagine HTML tradizionali o in applicazioni Web basate su client, in cui un pulsante `onclick` evento viene gestito mediante JavaScript che viene eseguito nel client. Per altre informazioni, vedere [modello di eventi controllo di ASP.NET Web Forms Server](http://msdn.microsoft.com/library/6304bff7-1b0e-4641-8acb-6d3b0badc4a3).  
  
 Quando l'utente sceglie un pulsante, la pagina viene inviata al server. Per impostazione predefinita, la pagina viene eseguito il postback stesso,  
  
 È possibile configurare i pulsanti per postback della pagina corrente in un'altra pagina. Ciò può essere utile per la creazione di moduli con più pagine. Per informazioni dettagliate, vedere [fra pagine di registrazione in Web Form ASP.NET](http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
<a name="HandlingButtonEventsinClientScript"></a>   
## <a name="handling-button-events-in-client-script"></a>Pulsante di gestione di eventi in uno Script Client  
 Controlli pulsante possono generare eventi del server sia gli eventi client. Eventi del server si verificano dopo il postback e vengono gestiti nel codice lato server che si scrive per la pagina. Gli eventi client vengono gestiti in script client, in genere ECMAScript (JavaScript) e vengono generati prima dell'invio della pagina. Quando si aggiungono eventi lato client per i controlli pulsante ASP.NET, è possibile eseguire attività quali la visualizzazione di finestre di dialogo di conferma prima dell'invio della pagina e potenzialmente Annulla l'invio. Per informazioni dettagliate, vedere [dello Script Client in ASP.NET Web Pages](http://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa) e [procedura: rispondere agli eventi del controllo Server Web pulsante in Script Client](http://msdn.microsoft.com/library/1ab97f0b-1c38-4897-85b0-ac915f6a182b).  
  
 È anche possibile la <xref:System.Web.UI.WebControls.Button> controllo è anche possibile utilizzare lo script client per eseguire il postback (anziché semplicemente eseguendo un'operazione HTTP POST). Ciò può essere utile se si desidera modificare a livello di codice il postback, ad esempio collegarlo ad altri elementi nella pagina. È possibile impostare il <xref:System.Web.UI.WebControls.Button> del controllo <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> proprietà `true` per fare in modo di <xref:System.Web.UI.WebControls.Button> postback basato su controllo da usare per lo script client.  
  
<a name="ButtonControlsAndValidation"></a>   
## <a name="button-controls-and-validation"></a>Controlli pulsante e convalida  
 Se una pagina contiene controlli di convalida ASP.NET, per impostazione predefinita, fare clic su un controllo pulsante causa il controllo di convalida a eseguire il controllo. Se la convalida lato client è abilitata per un controllo di convalida, la pagina non viene inviata se un controllo di convalida ha esito negativo.  
  
 Nella tabella seguente vengono descritte le proprietà supportate da pulsanti che consentono di controllare il processo di convalida in modo più preciso.  
  
|Proprietà|Descrizione|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.Button.CausesValidation%2A>|Specifica se anche facendo clic sul pulsante esegue un controllo di convalida. Impostare questa proprietà su `false` per evitare che un controllo di convalida.|  
|<xref:System.Web.UI.WebControls.Button.ValidationGroup%2A>|Consente di specificare quali validator nella pagina vengono chiamati quando si fa clic sul pulsante. Se non è stato stabilito alcun gruppo di convalida, un clic del pulsante chiama tutte le convalide che si trovano nella pagina.|  
  
 Per altre informazioni, vedere [Convalida dell'input utente nelle pagine Web ASP.NET](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="ButtonsInDataControls"></a>   
## <a name="buttons-in-data-controls"></a>Pulsanti nei controlli dati  
 I controlli server Web pulsante vengono spesso utilizzati nei controlli dati, ad esempio nel <xref:System.Web.UI.WebControls.DataList>, <xref:System.Web.UI.WebControls.GridView>, e <xref:System.Web.UI.WebControls.Repeater> controlli elenco. In questi casi, in genere non risponde direttamente al pulsante evento click. Al contrario, un pulsante in un controllo dati genera un evento specifico per il controllo dei dati. Ad esempio, nel <xref:System.Web.UI.WebControls.DataList> (controllo), un pulsante può generare il <xref:System.Web.UI.WebControls.DataList> del controllo <xref:System.Web.UI.WebControls.DataList.ItemCommand> evento anziché generare il <xref:System.Web.UI.WebControls.Button> del controllo <xref:System.Web.UI.WebControls.Button.Click> evento.  
  
 Poiché i controlli con associazione a dati elenco possono contenere molti pulsanti, è possibile impostare il pulsante <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> proprietà per specificare un valore da passare come parte dell'evento. È quindi possibile testare per questo argomento visualizzare il pulsante selezionato.  
  
<a name="BindingDataToTheControls"></a>   
## <a name="binding-data-to-the-controls"></a>Associazione di dati ai controlli  
 È possibile associare i controlli server Web pulsante a un'origine dati per controllare le impostazioni delle proprietà in modo dinamico. Ad esempio, è possibile impostare un pulsante <xref:System.Web.UI.WebControls.Button.Text%2A> proprietà tramite associazione dati.  
  
<a name="UsingButtonsWithUpdatePanelControls"></a>   
## <a name="using-buttons-with-updatepanel-controls"></a>Utilizzare i pulsanti con i controlli UpdatePanel  
 Per il rendering parziale della pagina rende possibile l'aggiornamento di parti di una pagina senza un postback. <xref:System.Web.UI.UpdatePanel> i controlli consentono di contrassegnare le parti della pagina che fanno parte di rendering parziale della pagina. Per impostazione predefinita, il comportamento dei controlli all'interno di un' <xref:System.Web.UI.UpdatePanel> controllare, tra cui <xref:System.Web.UI.WebControls.Button> controlla, consiste nell'eseguire un postback asincrono anziché un postback. Solo il contenuto di questa operazione Aggiorna il <xref:System.Web.UI.UpdatePanel> controllo da cui ha origine il postback.  
  
 Oltre allo scenario di un <xref:System.Web.UI.WebControls.Button> controllo compreso in un <xref:System.Web.UI.UpdatePanel> (controllo), è possibile usare <xref:System.Web.UI.WebControls.Button> controlla con <xref:System.Web.UI.UpdatePanel> controlli negli scenari seguenti:  
  
-   La definizione di un <xref:System.Web.UI.WebControls.Button> controllo che non è compreso un <xref:System.Web.UI.UpdatePanel> controllano come un <xref:System.Web.UI.AsyncPostBackTrigger> controllo per tale pannello. Quando si fa clic sul pulsante, esegue un postback asincrono e aggiorna il contenuto del pannello.  
  
-   La definizione di un <xref:System.Web.UI.WebControls.Button> controllo compreso in un <xref:System.Web.UI.UpdatePanel> controllano come una <xref:System.Web.UI.PostBackTrigger> per il pannello. Quando si fa clic sul pulsante, viene eseguito un postback, anche se è all'interno di un <xref:System.Web.UI.UpdatePanel> controllo.  
  
 Per altre informazioni sulla pagina parziale per il rendering e l'utilizzo <xref:System.Web.UI.UpdatePanel> controlli, vedere [Cenni preliminari sul controllo UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) e [Cenni preliminari sul Rendering parziale della pagina](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:Button  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CausesValidation="True|False"  
    CommandArgument="string"  
    CommandName="string"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnClick="Click event handler"  
    OnClientClick="string"  
    OnCommand="Command event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    PostBackUrl="uri"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Text="string"  
    ToolTip="string"  
    UseSubmitBehavior="True|False"  
    ValidationGroup="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare un invio <xref:System.Web.UI.WebControls.Button> controllo che esegue il postback della pagina Web contenuto al server.  
  
 [!code-aspx-csharp[Classic Button Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Button Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic Button Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Button Example/VB/sourcevb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come creare un comando <xref:System.Web.UI.WebControls.Button> controllo che consente di ordinare un elenco.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Button();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo costruttore per creare e inizializzare una nuova istanza di <xref:System.Web.UI.WebControls.Button> classe.  
  
   
  
## Examples  
 Il codice seguente viene illustrato come creare e inizializzare una nuova istanza di <xref:System.Web.UI.WebControls.Button> classe.  
  
 [!code-aspx-csharp[ButtonCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCtor/CS/buttonctorcs.aspx#1)]
 [!code-aspx-vb[ButtonCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCtor/VB/buttonctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="button.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> contenente il flusso di output per il rendering sul client.</param>
        <summary>Aggiunge gli attributi del controllo <see cref="T:System.Web.UI.WebControls.Button" /> al flusso di output per il rendering sul client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.WebControls.Button.AddAttributesToRender%2A> metodo in un controllo server personalizzato, in modo che il <xref:System.Web.UI.WebControls.Button> testo venga sempre visualizzato in rosso.  
  
 [!code-aspx-csharp[CustomButtonAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomButtonAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorendervb.aspx#1)]  
[!code-csharp[CustomButtonAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorender.cs#2)]
[!code-vb[CustomButtonAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CausesValidation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CausesValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CausesValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CausesValidation : bool with get, set" Usage="System.Web.UI.WebControls.Button.CausesValidation" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CausesValidation</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se viene eseguita la convalida quando si fa clic sul controllo <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <value>
          <see langword="true" /> se viene eseguita la convalida quando si fa clic sul controllo <see cref="T:System.Web.UI.WebControls.Button" />; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, viene eseguita la convalida della pagina quando un <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. Convalida della pagina determina se i controlli di input associato a un controllo di convalida nella pagina che tutti esito positivo le regole di convalida specificate dal controllo di convalida.  
  
 È possibile specificare o determinare se il client sia il server viene eseguita la convalida quando un <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo usando il <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> proprietà. Per evitare che venga eseguita la convalida, impostare il <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> proprietà `false`.  
  
> [!NOTE]
>  È consigliabile impostare il <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> proprietà `false` quando si utilizza il <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà per eseguire il postback di una pagina diversa. È necessario controllare convalida in modo esplicito durante la registrazione a una pagina diversa. Per un esempio, vedere la sezione Osservazioni del <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà.  
  
 Questa proprietà viene in genere impostata su `false` per un `reset` o `clear` pulsante per evitare che la convalida viene eseguita quando si fa clic sul pulsante.  
  
 Quando il valore dei <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> è impostata su `true`, è inoltre possibile utilizzare il <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> proprietà per specificare il nome del gruppo di convalida per il quale il <xref:System.Web.UI.WebControls.Button> controllo causa la convalida.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per altre informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET supporta temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> proprietà per impedire la convalida della pagina. Si noti che il <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> metodo attiva ogni controllo di convalida in modo indipendente.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[ButtonControlCausesValidation#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonControlCausesValidation/CS/buttoncausesvalidationcs.aspx#1)]
 [!code-aspx-vb[ButtonControlCausesValidation#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonControlCausesValidation/VB/buttoncausesvalidationvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.Button.ValidationGroup" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IButtonControl.Click</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando si fa clic sul controllo <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Button.Click> evento viene generato quando il <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. Questo evento viene comunemente utilizzato quando non è associato alcun nome di comando di <xref:System.Web.UI.WebControls.Button> controllo (ad esempio, con un pulsante di invio).  
  
 Per ulteriori informazioni sulla gestione degli eventi, consultare [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come specificare e scrivere il codice di un gestore eventi per il <xref:System.Web.UI.WebControls.Button.Click> eventi per visualizzare un messaggio sul Web pagina quando la <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.CommandEventHandler Command;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.CommandEventHandler Command" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Command" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Command As CommandEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Web::UI::WebControls::CommandEventHandler ^ Command;" />
      <MemberSignature Language="F#" Value="member this.Command : System.Web.UI.WebControls.CommandEventHandler " Usage="member this.Command : System.Web.UI.WebControls.CommandEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.WebControls.IButtonControl.Command</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.CommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando si fa clic sul controllo <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Button.Command> evento viene generato quando il <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. Questo evento viene comunemente utilizzato quando un nome di comando, ad esempio `Sort`, è associato il <xref:System.Web.UI.WebControls.Button> controllo. In questo modo è possibile creare più <xref:System.Web.UI.WebControls.Button> controlli in una pagina Web di pagina e a livello di programmazione stabilire quali <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.Button.Command> evento viene generato tramite la gerarchia dei controlli nel formato di `BubbleEvent`.  
  
 Per altre informazioni sulla gestione degli eventi, vedere [NIB: utilizzo di eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come specificare e scrivere il codice di un gestore eventi per il <xref:System.Web.UI.WebControls.Button.Command> eventi per ordinare un elenco quando il <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. In questo esempio specifica il gestore eventi in modo dichiarativo, tramite il <xref:System.Web.UI.WebControls.Button.OnClick%2A> proprietà del <xref:System.Web.UI.WebControls.Button> controllo.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come specificare il gestore dell'evento e aggiungerlo a livello di codice all'evento nel `Page_Load` (metodo).  
  
 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public string CommandArgument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandArgument" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandArgument As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandArgument { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandArgument : string with get, set" Usage="System.Web.UI.WebControls.Button.CommandArgument" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CommandArgument</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un parametro facoltativo passato all'evento <see cref="E:System.Web.UI.WebControls.Button.Command" /> insieme alla proprietà <see cref="P:System.Web.UI.WebControls.Button.CommandName" /> associata.</summary>
        <value>Un parametro facoltativo passato all'evento <see cref="E:System.Web.UI.WebControls.Button.Command" /> insieme alla proprietà <see cref="P:System.Web.UI.WebControls.Button.CommandName" /> associata. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> proprietà per specificare un parametro che integra il <xref:System.Web.UI.WebControls.Button.CommandName%2A> proprietà.  
  
> [!NOTE]
>  Sebbene sia possibile impostare il <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> proprietà autonomamente, in genere è utilizzata solo quando il <xref:System.Web.UI.WebControls.Button.CommandName%2A> proprietà è impostata.  
  
 Il <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> proprietà integra il <xref:System.Web.UI.WebControls.Button.CommandName%2A> proprietà in quanto consente di fornire informazioni aggiuntive sul comando da eseguire. Ad esempio, se si imposta la <xref:System.Web.UI.WebControls.Button.CommandName%2A> proprietà `Sort` e il <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> proprietà `Ascending`, si specifica un comando per ordinare in ordine crescente.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per altre informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET supporta temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> proprietà per creare un <xref:System.Web.UI.WebControls.Button> controllo che consente di ordinare un elenco in ordine crescente.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandName" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CommandName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandName : string with get, set" Usage="System.Web.UI.WebControls.Button.CommandName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.CommandName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome di comando associato al controllo <see cref="T:System.Web.UI.WebControls.Button" /> passato all'evento <see cref="E:System.Web.UI.WebControls.Button.Command" />.</summary>
        <value>Il nome di comando del controllo <see cref="T:System.Web.UI.WebControls.Button" />. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si dispone di più <xref:System.Web.UI.WebControls.Button> controlli in una pagina Web, usare il <xref:System.Web.UI.WebControls.Button.CommandName%2A> per specificare o per determinare il nome del comando proprietà associate a ogni <xref:System.Web.UI.WebControls.Button> controllo. È possibile impostare il <xref:System.Web.UI.WebControls.Button.CommandName%2A> proprietà con qualsiasi stringa che identifica il comando da eseguire. È quindi possibile determinare a livello di codice il nome del comando il <xref:System.Web.UI.WebControls.Button> controllare ed eseguire le azioni appropriate.  
  
 Altre informazioni sul comando, ad esempio `Ascending`, può essere specificato usando il <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> proprietà.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per altre informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET supporta temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Button.CommandName%2A> proprietà per creare un <xref:System.Web.UI.WebControls.Button> controllo che consente di ordinare un elenco.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackOptions">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.PostBackOptions GetPostBackOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.PostBackOptions GetPostBackOptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.GetPostBackOptions" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetPostBackOptions () As PostBackOptions" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::PostBackOptions ^ GetPostBackOptions();" />
      <MemberSignature Language="F#" Value="abstract member GetPostBackOptions : unit -&gt; System.Web.UI.PostBackOptions&#xA;override this.GetPostBackOptions : unit -&gt; System.Web.UI.PostBackOptions" Usage="button.GetPostBackOptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un oggetto <see cref="T:System.Web.UI.PostBackOptions" /> che rappresenta il comportamento di postback del controllo <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <returns>Oggetto <see cref="T:System.Web.UI.PostBackOptions" /> che rappresenta il comportamento di postback del controllo <see cref="T:System.Web.UI.WebControls.Button" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Button.GetPostBackOptions%2A> metodo crea un' <xref:System.Web.UI.PostBackOptions> che rappresenta il <xref:System.Web.UI.WebControls.Button> comportamento di postback del controllo. Il <xref:System.Web.UI.PostBackOptions> oggetto quindi viene in genere passato al <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%29?displayProperty=nameWithType> metodo, che viene usato per ottenere un riferimento a una funzione di script sul lato client che, quando richiamata, induce il server eseguire il postback della pagina.  
  
 Questo metodo viene utilizzato principalmente dagli sviluppatori di controlli per estendere il <xref:System.Web.UI.WebControls.Button> classe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È possibile eseguire l'override di <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> metodo nella classe derivata per modificare le opzioni di postback per il controllo button o per chiamare lo script sul lato client quando si fa clic sul pulsante. Assicurarsi di chiamare la classe di base <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> metodo in modo che siano impostate le opzioni standard di postback.</para>
        </block>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="button.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.WebControls.Button.Click" /> del controllo <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Button.Click> evento viene generato quando il <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. Questo evento viene comunemente utilizzato quando non è associato alcun nome di comando di <xref:System.Web.UI.WebControls.Button> controllo (ad esempio, con un pulsante di invio).  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Web.UI.WebControls.Button.OnClick%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come specificare e scrivere un gestore eventi per il codice di <xref:System.Web.UI.WebControls.Button.Click> evento per visualizzare un semplice messaggio sulla pagina Web.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> in una classe derivata, accertarsi di chiamare la classe di base <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnClientClick">
      <MemberSignature Language="C#" Value="public virtual string OnClientClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnClientClick" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.OnClientClick" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property OnClientClick As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OnClientClick { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OnClientClick : string with get, set" Usage="System.Web.UI.WebControls.Button.OnClientClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta lo script del lato client che viene eseguito quando viene generato l'evento <see cref="T:System.Web.UI.WebControls.Button" /> di un controllo <see cref="E:System.Web.UI.WebControls.Button.Click" />.</summary>
        <value>Lo script del lato client che viene eseguito quando viene generato l'evento <see cref="T:System.Web.UI.WebControls.Button" /> di un controllo <see cref="E:System.Web.UI.WebControls.Button.Click" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> proprietà per specificare uno script del lato client aggiuntivo che viene eseguito quando un <xref:System.Web.UI.WebControls.Button> del controllo <xref:System.Web.UI.WebControls.Button.Click> viene generato l'evento. Lo script specificato per questa proprietà viene eseguito il rendering nel <xref:System.Web.UI.WebControls.Button> del controllo `OnClick` attributo oltre al controllo predefiniti dello script lato client.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per altre informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET supporta temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Un progetto di sito Web di Visual Studio con il codice sorgente è disponibile a complemento di questo argomento: [scaricare](http://go.microsoft.com/fwlink/?LinkId=192871).  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> proprietà per specificare uno script del lato client aggiuntivo che viene eseguito quando un <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo.  
  
 [!code-aspx-csharp[Button.OnClientClick#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.OnClientClick/cs/button.onclientclickcs.aspx#1)]
 [!code-aspx-vb[Button.OnClientClick#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.OnClientClick/vb/button.onclientclickvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCommand (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommand(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCommand (e As CommandEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCommand(System::Web::UI::WebControls::CommandEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCommand : System.Web.UI.WebControls.CommandEventArgs -&gt; unit&#xA;override this.OnCommand : System.Web.UI.WebControls.CommandEventArgs -&gt; unit" Usage="button.OnCommand e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.WebControls.Button.Command" /> del controllo <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Button.Command> evento viene generato quando il <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. Questo evento viene comunemente utilizzato quando un nome di comando, ad esempio `Sort`, è associato il <xref:System.Web.UI.WebControls.Button> controllo. In questo modo è possibile creare più <xref:System.Web.UI.WebControls.Button> controlli in una pagina Web di pagina e a livello di programmazione stabilire quali <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.WebControls.Button.Command> evento viene generato tramite la gerarchia dei controlli nel formato di `BubbleEvent`.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Web.UI.WebControls.Button.OnCommand%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come specificare e scrivere il codice di un gestore eventi per il <xref:System.Web.UI.WebControls.Button.Command> eventi per ordinare un elenco quando il <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. In questo esempio specifica il gestore eventi in modo dichiarativo, tramite il <xref:System.Web.UI.WebControls.Button.OnClick%2A> proprietà del <xref:System.Web.UI.WebControls.Button> controllo.  
  
 [!code-aspx-csharp[ButtonCommandNameArgument#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-aspx-vb[ButtonCommandNameArgument#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come specificare il gestore dell'evento e aggiungerlo a livello di codice all'evento nel `Page_Load` (metodo).  
  
 [!code-aspx-csharp[ButtonCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-aspx-vb[ButtonCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> in una classe derivata, accertarsi di chiamare la classe di base <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="button.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento.</param>
        <summary>Determina se è stato fatto clic sul pulsante prima del rendering nel client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Button.OnPreRender%2A> metodo viene utilizzato principalmente dagli sviluppatori quando si deriva una classe personalizzata dal <xref:System.Web.UI.WebControls.Button> controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostBackUrl">
      <MemberSignature Language="C#" Value="public virtual string PostBackUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.PostBackUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property PostBackUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ PostBackUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PostBackUrl : string with get, set" Usage="System.Web.UI.WebControls.Button.PostBackUrl" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.PostBackUrl</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty("*.aspx")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'URL della pagina a cui effettuare l'invio dalla pagina corrente quando si fa clic sul controllo <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <value>L'URL della pagina Web a cui effettuare l'invio dalla pagina corrente quando si fa clic sul controllo <see cref="T:System.Web.UI.WebControls.Button" />. Il valore predefinito è una stringa vuota (""), che determina il postback della pagina a se stessa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà consente di eseguire un cross-page con post il <xref:System.Web.UI.WebControls.Button> controllo.  
  
> [!NOTE]
>  Usare questa proprietà solo percorsi specificati correttamente. Ad esempio, i percorsi relativi (/test/default.aspx), percorsi assoluti (https://localhost/WebApp/default.aspx) e virtuali (~ \Test\default.aspx) funzioni correttamente. Formato non corretto percorsi, ad esempio "/ /test/default.aspx" o "\Test\default.aspx" non funzionano. Visualizzare [percorsi di progetto Web ASP.NET](http://msdn.microsoft.com/library/2447f50c-b849-483c-8093-85ed53e7a5bd) per una discussione sulla creazione di percorsi corretti.  
  
 Impostare il <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà all'URL della pagina Web per post quando i <xref:System.Web.UI.WebControls.Button> si fa clic sul controllo. Ad esempio, specificando `Page2.aspx` fa sì che la pagina che contiene il <xref:System.Web.UI.WebControls.Button> controllo per inviare al `Page2.aspx`. Se non si specifica un valore per il <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà, il postback della pagina stessa.  
  
> [!IMPORTANT]
>  Quando si esegue un postback fra pagine con i controlli con convalida lato server, è necessario controllare che la pagina <xref:System.Web.UI.Page.IsValid%2A> è di proprietà `true` prima dell'elaborazione del postback. Nel caso di un postback fra pagine, è la pagina per controllare il <xref:System.Web.UI.Page.PreviousPage%2A>. Il codice Visual Basic seguente illustra questa procedura:  
  
```  
Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load  
        If Page.PreviousPage.IsValid Then  
            ' Handle the post back  
        Else  
            Response.Write("Invalid")  
        End If  
End Sub  
```  
  
 Per altre informazioni sulle tecniche di inoltro fra pagine, vedere [fra pagine di registrazione in Web Form ASP.NET](http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per altre informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET supporta temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà per eseguire un postback fra pagine. Quando l'utente fa clic il <xref:System.Web.UI.WebControls.Button> (controllo), la pagina inserisce il valore immesso nella casella di testo alla pagina di destinazione specificata da di <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà. Per eseguire questo esempio, è necessario creare anche un file per la pagina di destinazione nella stessa directory in questo esempio di codice. Nell'esempio seguente viene fornito il codice per la pagina di destinazione.  
  
 [!code-aspx-csharp[Button.PostBackUrlProperty#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlProperty/CS/button.postbackurlpropertycs.aspx#1)]
 [!code-aspx-vb[Button.PostBackUrlProperty#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlProperty/VB/button.postbackurlpropertyvb.aspx#1)]  
  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.Page.PreviousPage%2A?displayProperty=nameWithType> proprietà per accedere a un valore che è stato registrato da un'altra pagina usando il <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà. Questa pagina Ottiene la stringa che è stato eseguito il postback della pagina precedente e lo visualizza all'utente. Se si prova a eseguire questo esempio di codice direttamente, si verificherà un errore perché il valore della `text` campo sarà `null`. In alternativa, usare questo codice per creare una pagina di destinazione e inserire il file nella stessa directory del codice per l'esempio precedente. Il nome del file deve corrispondere al valore specificato per il <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> proprietà nell'esempio precedente. Quando si esegue il codice per l'esempio precedente, questa pagina verrà eseguita automaticamente quando si verifica il post tra pagine.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Button.PostBackUrlPage2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlPage2/CS/button.postbackurlpage2cs.aspx#1)]
 [!code-aspx-vb[Button.PostBackUrlPage2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlPage2/VB/button.postbackurlpage2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.PreviousPage" />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaisePostBackEvent : string -&gt; unit&#xA;override this.RaisePostBackEvent : string -&gt; unit" Usage="button.RaisePostBackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Argomento per l'evento.</param>
        <summary>Genera eventi per il controllo <see cref="T:System.Web.UI.WebControls.Button" /> durante il postback al server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene usato internamente dal <xref:System.Web.UI.WebControls.Button> controllo, quando è selezionato, per generare un <xref:System.Web.UI.WebControls.Button.Click> evento e, se definito, un <xref:System.Web.UI.WebControls.Button.Command> evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected internal override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderContents (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderContents(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.RenderContents : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="button.RenderContents writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che rappresenta il flusso di output di cui eseguire il rendering del contenuto HTML nel client.</param>
        <summary>Esegue il rendering del contenuto del controllo nel writer specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.WebControls.Button.RenderContents%2A> metodo in un server personalizzato di controllo in modo che venga sempre visualizzato il testo che segue una classe personalizzata <xref:System.Web.UI.WebControls.Button> controllo server.  
  
 [!code-aspx-csharp[CustomButtonRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontentscs.aspx#1)]
 [!code-aspx-vb[CustomButtonRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontentsvb.aspx#1)]  
[!code-csharp[CustomButtonRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontents.cs#2)]
[!code-vb[CustomButtonRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontents.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Argomento per l'evento.</param>
        <summary>Genera eventi per il controllo <see cref="T:System.Web.UI.WebControls.Button" /> durante il postback al server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene usato internamente dal <xref:System.Web.UI.WebControls.Button> controllo, quando è selezionato, per generare un <xref:System.Web.UI.WebControls.Button.Click> evento e, se definito, un <xref:System.Web.UI.WebControls.Button.Command> evento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eseguire l'override di <xref:System.Web.UI.WebControls.Button.System%23Web%23UI%23IPostBackEventHandler%23RaisePostBackEvent%2A> metodo in modo che generi sempre il <xref:System.Web.UI.WebControls.Button.OnClick%2A> evento in una classe personalizzata <xref:System.Web.UI.WebControls.Button> controllo.  
  
 [!code-csharp[CustomButtonRaisePostBackEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/CS/custombuttonraisepostbackevent.cs#2)]
 [!code-vb[CustomButtonRaisePostBackEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/VB/custombuttonraisepostbackevent.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.Button.Text" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la didascalia di testo visualizzata nel controllo <see cref="T:System.Web.UI.WebControls.Button" />.</summary>
        <value>La didascalia di testo visualizzata nel controllo <see cref="T:System.Web.UI.WebControls.Button" />. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.WebControls.Button.Text%2A> proprietà per specificare o determinare la didascalia da visualizzare nella <xref:System.Web.UI.WebControls.Button> controllo.  
  
 Il valore di questa proprietà, se è impostata, può essere salvato automaticamente in un file di risorse usando uno strumento di progettazione. Per altre informazioni, vedere <xref:System.ComponentModel.LocalizableAttribute> e [globalizzazione e localizzazione](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Button.Text%2A> proprietà per specificare la didascalia visualizzata nel <xref:System.Web.UI.WebControls.Button> controllo.  
  
 [!code-aspx-csharp[ButtonClickText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-aspx-vb[ButtonClickText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="UseSubmitBehavior">
      <MemberSignature Language="C#" Value="public virtual bool UseSubmitBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSubmitBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UseSubmitBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool UseSubmitBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSubmitBehavior : bool with get, set" Usage="System.Web.UI.WebControls.Button.UseSubmitBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo <see cref="T:System.Web.UI.WebControls.Button" /> utilizza il meccanismo di invio del browser client o il meccanismo di postback di ASP.NET.</summary>
        <value>
          <see langword="true" /> se il controllo utilizza il meccanismo di invio del browser client, altrimenti <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> proprietà per specificare se un <xref:System.Web.UI.WebControls.Button> controllo Usa il client browser meccanismo di invio o il meccanismo di postback ASP.NET. Per impostazione predefinita il valore di questa proprietà è `true`, provocando la <xref:System.Web.UI.WebControls.Button> meccanismo di invio di controllo da usare per il browser. Se si specifica `false`, framework della pagina ASP.NET aggiunge uno script lato client per la pagina per inviare il form al server.  
  
 Quando la <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> proprietà è `false`, gli sviluppatori di controlli è possono usare il <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> per restituire il client di postback evento per il <xref:System.Web.UI.WebControls.Button>. La stringa restituita dal <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> metodo contiene il testo della chiamata di funzione lato client e possono essere inserito in un gestore eventi lato client.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per altre informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET supporta temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> proprietà per specificare il meccanismo di invio che un <xref:System.Web.UI.WebControls.Button> controllo utilizza in occasione del postback al server. Il <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> è impostata su `false`, causando il pulsante da usare ASP.NET meccanismo di postback. Se si visualizza il codice sorgente per la pagina sottoposta a rendering utilizzando comando Visualizza l'origine del browser, noterai che lo script lato client è stato aggiunto dal framework della pagina ASP.NET per inviare il form al server.  
  
 [!code-aspx-csharp[Button.UseSubmitBehavior#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.UseSubmitBehavior/CS/button.usesubmitbehaviorcs.aspx#1)]
 [!code-aspx-vb[Button.UseSubmitBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.UseSubmitBehavior/VB/button.usesubmitbehaviorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.UI.WebControls.Button.ValidationGroup" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.IButtonControl.ValidationGroup</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il gruppo di controlli per il quale il controllo <see cref="T:System.Web.UI.WebControls.Button" /> causa la convalida in occasione del postback al server.</summary>
        <value>Gruppo di controlli per il quale il controllo <see cref="T:System.Web.UI.WebControls.Button" /> causa la convalida in occasione del postback al server. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gruppi di convalida consentono di assegnare i controlli di convalida in una pagina a una categoria specifica. Ogni gruppo di convalida può essere convalidato indipendentemente da altri gruppi di convalida della pagina. Usare la <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> proprietà per specificare il nome del gruppo di convalida per il quale il <xref:System.Web.UI.WebControls.Button> controllo causa la convalida in occasione del postback al server.  
  
 Questa proprietà ha effetto solo quando il valore della <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> è impostata su `true`. Quando si specifica un valore per il <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> proprietà, solo i controlli di convalida che fanno parte del gruppo specificato sono convalidati quando la <xref:System.Web.UI.WebControls.Button> controllo esegue il postback al server. Se non si specifica un valore per questa proprietà e il <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> è impostata su `true`, tutti i controlli di convalida della pagina che non sono assegnati a un gruppo di convalida vengono convalidati quando il controllo esegue il postback al server.  
  
 Questa proprietà non può essere impostata da temi oppure temi di fogli di stile. Per altre informazioni, vedere <xref:System.Web.UI.ThemeableAttribute> e [ASP.NET supporta temi e interfacce](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> proprietà per specificare i controlli per la convalida quando un <xref:System.Web.UI.WebControls.Button> controllo esegue il postback al server. La pagina contiene tre caselle di testo per acquisire i dati da parte dell'utente e tre <xref:System.Web.UI.WebControls.RequiredFieldValidator> controlli per garantire che l'utente non lasciare una casella di testo vuoto. Il <xref:System.Web.UI.WebControls.RequiredFieldValidator> controlla innanzitutto due caselle di testo da cui il `PersonalInfoGroup` gruppo di convalida e il <xref:System.Web.UI.WebControls.RequiredFieldValidator> controllare per la terza casella di testo è nel `LocationInfoGroup` gruppo di convalida. Quando `Button1` viene selezionata, solo i controlli nel gruppo di convalida `PersonalInfoGroup` vengono convalidati. Quando `Button2` viene selezionata, solo il controllo nel gruppo di convalida `LocationInfoGroup` viene convalidato.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[Button.ValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.ValidationGroup/CS/button.validationgroupcs.aspx#1)]
 [!code-aspx-vb[Button.ValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.ValidationGroup/VB/button.validationgroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CausesValidation" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>