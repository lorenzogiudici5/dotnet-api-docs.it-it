<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb47995a42e8b5a63458997b016e35704034a00a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600615" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Consente l'uso di LINQ (Language Integrated Query) in una pagina Web ASP.NET tramite il testo di markup per recuperare e modificare i dati in un oggetto dati.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#introduction)  
  
-   [Ordine delle operazioni](#order_of_operations)  
  
-   [Ordinamento di dati](#ordering_data)  
  
-   [Raggruppamento dei dati](#grouping_data)  
  
-   [Modifiche dei dati](#data_modifications)  
  
-   [Valutazione dei valori in fase di esecuzione](#evaluating_value_at_run_time)  
  
-   [Utilizzo di Stored procedure](#working_with_stored_procedures)  
  
-   [Sintassi dichiarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Language-Integrated Query (LINQ) è una sintassi di query che definisce un set di operatori di query che consentono di esprimere in modo dichiarativo in qualsiasi operazioni di attraversamento, filtro e proiezione. Linguaggio di programmazione basato su NET. L'oggetto dati può essere una raccolta di dati in memoria o un oggetto che rappresenta i dati da un database. È possibile recuperare o modificare i dati senza dover scrivere comandi SQL per ogni operazione.  
  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo consente di utilizzare LINQ in una pagina Web ASP.NET impostando le proprietà nel testo di markup. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo Usa LINQ to SQL per generare automaticamente i comandi di dati. Per ulteriori informazioni su LINQ to SQL, vedere [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Quando si recuperano dati da una raccolta di dati in memoria, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà alla classe che contiene la raccolta di dati. Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà alla proprietà o campo che restituisce la raccolta dei dati. Ad esempio, potrebbe essere una classe denominata `Person` che contiene una proprietà denominata `FavoriteCities` che restituisce una matrice di valori stringa. In questo caso, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà `Person` e impostare il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà `FavoriteCities`.  
  
 Quando si esegue la query un database, è necessario prima creare classi di entità che rappresentano il database e le relative tabelle. È possibile utilizzare il [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] o l'utilità SqlMetal.exe per generare queste classi. Impostare quindi la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà alla classe che rappresenta il database e impostare il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà per la proprietà che rappresenta la tabella di database.  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>Ordine delle operazioni  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo Applica le operazioni di dati nell'ordine seguente:  
  
1.  In (specifica per restituire i record di dati).  
  
2.  Order By (ordinamento).  
  
3.  Group By (record di aggregazione di dati che condividono valori).  
  
4.  Ordinare i gruppi per (ordinare raggruppati i dati).  
  
5.  Selezionare (specificare quali campi o proprietà da restituire).  
  
6.  Auto-sort (Ordina i record di dati da una proprietà che l'utente ha selezionato).  
  
7.  Pagina automatica (recuperare un subset di record di dati che sono stati selezionati dall'utente).  
  
 È possibile aggiungere condizioni per il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà da filtrare i record di dati restituiti da una query. Se il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> non è impostata, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo recupera tutti i record dall'oggetto dati.  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>Ordinamento di dati  
 Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà per specificare i nomi di proprietà di ordinamento dei dati restituiti.  
  
> [!NOTE]
>  Quando si utilizza il <xref:System.Web.UI.WebControls.LinqDataSource> controllare con [!INCLUDE[ss2k](~/includes/ss2k-md.md)] o [!INCLUDE[ssEW](~/includes/ssew-md.md)] e <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> è impostata su `true`, è necessario fornire un valore nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà. Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> proprietà `true`. Se si assegna un valore per il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà, è necessario includere anche tutte le colonne di identità nell'elenco di proprietà che viene restituito nella query.  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>Raggruppamento dei dati  
 Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà per specificare quali proprietà vengono utilizzate per consolidare i record di dati che hanno gli stessi valori. Quando si raggruppano i dati, è possibile includere `Key` e `It`, che vengono create dinamicamente le proprietà, nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. Il `Key` proprietà fa riferimento ai valori le proprietà utilizzati per raggruppare i dati. Ad esempio, se vengono raggruppati in base a una proprietà denominata `Category`, `Key` proprietà conterrà tutti i valori univoci di `Category` proprietà. Il `It` proprietà fa riferimento a una raccolta di singoli record in un raggruppamento di dati. È possibile scorrere il `It` proprietà per recuperare i singoli record che sono stati consolidati nell'operazione di raggruppamento. Ad esempio, se vengono raggruppati in base a una proprietà denominata `Category`, `It` proprietà contiene tutti i singoli record che condividono un valore comune nella `Category` proprietà.  
  
 Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> proprietà per specificare le proprietà da utilizzare per ordinare i dati raggruppati. Quando si raggruppano i dati, il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà specifica la modalità di ordinamento singoli record all'interno dei dati raggruppati.  
  
 Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo recupera i valori per tutte le proprietà da un oggetto dati. Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà per specificare le proprietà per restituire se si desidera utilizzare un subset delle proprietà disponibili. L'operazione di selezione viene applicata dopo Where, Order By e Group By operazioni. Pertanto, se si crea un nome alias nella clausola Select, l'alias non è disponibile in altre clausole.  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>Modifiche dei dati  
 È possibile specificare se le modifiche dei dati vengono abilitate usando il <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, e <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> proprietà. L'interfaccia utente per la modifica dei dati da un <xref:System.Web.UI.WebControls.LinqDataSource> il controllo viene in genere fornito tramite un controllo con associazione a dati, ad esempio un <xref:System.Web.UI.WebControls.DetailsView> controllo. Oltre all'impostazione <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, o <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> a `true`, le condizioni seguenti sono necessari per consentire le modifiche dei dati automatico:  
  
-   Il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà non può essere assegnato un valore.  
  
-   Il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà non può essere assegnato un valore.  
  
-   La classe di cui è assegnata il <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà deve derivare da <xref:System.Data.Linq.DataContext>.  
  
-   La proprietà che è stata assegnata le <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà deve derivare da <xref:System.Data.Linq.Table%601>.  
  
 È possibile limitare le proprietà visualizzate in un controllo con associazione a dati in due modi. È possibile impostare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà a un subset di proprietà oppure è possibile definire i campi per un controllo con associazione a dati aggiungendo <xref:System.Web.UI.WebControls.DataControlField> controlli. Tuttavia, se si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà, significa che non è possibile abilitare l'aggiornamento automatico, insert e le operazioni di eliminazione. Se si desidera abilitare le modifiche dei dati automatico mentre si lavora con un subset delle proprietà disponibili, non impostare la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. In alternativa, recuperare tutte le proprietà dall'oggetto dati e gestire quelli visualizzati usando il controllo con associazione a dati. Quando si utilizza il <xref:System.Web.UI.WebControls.DetailsView> controllo o <xref:System.Web.UI.WebControls.GridView> (controllo), è necessario impostare anche la <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> o <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> proprietà `false`. Ciò impedisce che il controllo associato a dati inclusi automaticamente i pulsanti per la modifica e l'eliminazione dei dati. Tutti i valori non vengono visualizzati nel controllo con associazione a dati vengono archiviati nello stato di visualizzazione. Vengono passati invariati all'origine dati quando viene eseguito l'aggiornamento dei dati.  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>Valutazione dei valori in fase di esecuzione  
 Se è necessario valutare i valori in fase di esecuzione per l'ordinamento, filtro, o i valori di raggruppamento, è possibile aggiungere parametri per il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, o <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> raccolte.  
  
 Se si desidera specificare i valori predefiniti, è possibile aggiungere parametri per il <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> insieme.  
  
 Se si desidera esaminare o modificare i valori prima dell'esecuzione dell'operazione di dati, è possibile gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventi. È anche possibile gestire questi eventi per annullare l'operazione di dati o per esaminare gli errori di convalida che si è verificato quando si impostano le proprietà nella classe di dati in base all'input utente.  
  
 Per esaminare i valori dopo il completamento l'operazione di dati, gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, o <xref:System.Web.UI.WebControls.LinqDataSource.Updated> eventi.  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>Utilizzo di Stored procedure  
 Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource> controllo da recuperare dati da una stored procedure mediante la creazione di un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento. Nell'evento gestore, si chiama il metodo nella classe del contesto dati che rappresenta la stored procedure e impostare il risultato di <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> oggetto. Se si desidera abilitare l'aggiornamento automatico, insert e le operazioni di eliminazione per i dati, il tipo restituito dal metodo deve corrispondere al tipo specificato nella <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà. Per ulteriori informazioni sulla creazione di metodi di contesto dati, vedere [procedura: creare DataContext metodi con mappati a stored procedure e funzioni (O/R Designer)](http://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo che recupera dati da una classe di entità denominata `Products`. La classe di entità poteva essere generata utilizzando la [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] o l'utilità SqlMetal.exe. Il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà è impostata per restituire solo i record che hanno un valore nel `Price` proprietà superiore a 50. Oggetto <xref:System.Web.UI.WebControls.GridView> è associato al <xref:System.Web.UI.WebControls.LinqDataSource> controllo per visualizzare i dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo che consente agli utenti di aggiornare, eliminare e inserire i record nell'origine dati. Oggetto <xref:System.Web.UI.WebControls.DetailsView> è associato al <xref:System.Web.UI.WebControls.LinqDataSource> controllo e consente agli utenti di visualizzare e modificare i dati. Si noti che i comandi SQL non sono necessarie per selezionare, aggiornare, eliminare o inserire i record.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> basato su eventi che imposta l'oggetto dati a un valore nella pagina Web.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo configurato per raggruppare in base a due colonne. Il `Key` proprietà fa riferimento a un oggetto che ha due proprietà, `ProductCategory` e `Color`. L'oggetto rappresentato dal `It` viene rinominato (alias) per `Products`. Rinominato `Products` oggetto contiene una raccolta di singoli record in un raggruppamento. Ogni istanza conterrà tutte le colonne di `Products` tabella.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 Nell'esempio seguente vengono illustrati due <xref:System.Web.UI.WebControls.ListView> controlli che visualizzano i dati di <xref:System.Web.UI.WebControls.LinqDataSource> controllo nell'esempio precedente. Un <xref:System.Web.UI.WebControls.ListView> controllo consente di visualizzare i dati raggruppati e l'altro <xref:System.Web.UI.WebControls.ListView> controllo Visualizza i singoli nomi di prodotti che appartengono a tale gruppo. Il controllo associato a dati nidificato <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> è impostata su `Products`, che corrisponde all'alias di `It` oggetto.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> crea dinamicamente una clausola Order By in base ai valori della raccolta <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />.</summary>
        <value>
          <see langword="true" /> Se il <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> controllo crea la clausola Order By; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si imposta il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> proprietà `true`, <xref:System.Web.UI.WebControls.LinqDataSource> controllo crea dinamicamente una clausola Order By è in base ai valori nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo Ordina i dati dal primo parametro, quindi ordina inoltre i dati per ogni parametro aggiuntivo. I parametri che contengono `null` o un valore vuoto non sono inclusi nella clausola Order By.  
  
 Non si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà quando il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> è impostato su `true`, perché il parser crea dinamicamente una clausola Order By. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo genera un'eccezione se il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> è impostato su `true` e <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà vengono assegnati valori.  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllare con il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> impostato su `true`. Cui è incluso un parametro di <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme che consente di ordinare i dati in base alla proprietà name che un utente seleziona da un <xref:System.Web.UI.WebControls.DropDownList> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> crea dinamicamente una clausola Where in base ai valori definiti nell'insieme <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</summary>
        <value>
          <see langword="true" /> se il controllo <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> crea la clausola Where; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> proprietà `true`, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo crea dinamicamente Where clausola dai parametri di <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme. Ogni parametro che viene aggiunto per il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> la raccolta deve contenere il <xref:System.Web.UI.WebControls.Parameter.Name%2A> proprietà è impostata su un valore che corrisponde a una proprietà nell'oggetto dati che viene eseguita la query. Generato automaticamente in clausola controllerà se il valore specificato nel <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme è uguale al valore della proprietà corrispondente nell'oggetto dati. Se si specifica più di un parametro, i parametri sono collegati con una logica `AND` operazione. I parametri che contengono `null` o un valore vuoto non sono inclusi in Where clausola.  
  
 Generato automaticamente <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> clausola può verificare solo per verificarne l'uguaglianza e può collegare i parametri solo con il `AND` operazione. Non impostare il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> proprietà `true` se è necessario aggiungere una condizione che non verifica l'uguaglianza o se è necessario correlare i parametri con il `OR` operazione. È possibile eseguire queste attività mediante l'impostazione di <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> proprietà `false` e aggiungendo dei segnaposto nel <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà per ogni parametro il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme. Nel <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà, anteporre il nome di ogni segnaposto con il simbolo @.  
  
 Non si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà quando il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> proprietà `true`, poiché il parser crea dinamicamente Where clausola. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo genera un'eccezione se il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> proprietà `true` e <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà vengono assegnati valori.  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllare con il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> impostato su `true`. Oggetto <xref:System.Web.UI.WebControls.GridView> è associato al <xref:System.Web.UI.WebControls.LinqDataSource> controllo per visualizzare i dati restituiti dalla query. Oggetto <xref:System.Web.UI.WebControls.DropDownList> viene incluso controllo popolata con tre valori. Cui è incluso un parametro di <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme con il nome impostato su `Category,` che corrisponde a una delle proprietà dell'oggetto dati. Il relativo <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> proprietà è impostata sull'ID del <xref:System.Web.UI.WebControls.DropDownList> controllo. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo crea automaticamente il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà per filtrare i record in base al valore selezionato dall'utente dal <xref:System.Web.UI.WebControls.DropDownList> controllo. La query restituisce i record il cui `Category` proprietà corrisponde al valore selezionato dall'utente di <xref:System.Web.UI.WebControls.DropDownList> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> supporta la navigazione tra le sezioni dei dati in fase di esecuzione.</summary>
        <value>
          <see langword="true" /> se l'utente può spostarsi tra le pagine dei dati; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> proprietà `true` per abilitare il paging nel <xref:System.Web.UI.WebControls.LinqDataSource> controllo. Per consentire all'utente di spostarsi tra i dati, connettere un controllo con associazione a dati che fornisce l'interfaccia per il paging di <xref:System.Web.UI.WebControls.LinqDataSource> controllo. Quando il <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> è impostata su `true`, <xref:System.Web.UI.WebControls.LinqDataSource> controllo recupera solo numero sufficiente di record per una pagina nel controllo associato a dati. Usa il <xref:System.Linq.Enumerable.Skip%2A> e <xref:System.Linq.Enumerable.Take%2A> metodi per recuperare i record per la pagina corrente.  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllare con il <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> proprietà impostata su `true` e un <xref:System.Web.UI.WebControls.GridView> controllo a cui è associato il <xref:System.Web.UI.WebControls.LinqDataSource> controllo. Il <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> proprietà del <xref:System.Web.UI.WebControls.GridView> NFS è impostata su `true` per fornire l'interfaccia che consente agli utenti di spostarsi tra i dati pagine.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il controllo <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> supporta l'ordinamento dei dati in fase di esecuzione.</summary>
        <value>
          <see langword="true" /> se l'utente può ordinare i dati; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo supporta due approcci per l'ordinamento dei dati. È possibile utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> proprietà per abilitare l'ordinamento in fase di esecuzione o è possibile impostare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà per definire l'ordinamento in fase di progettazione.  
  
 Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> proprietà `true` per abilitare l'ordinamento un <xref:System.Web.UI.WebControls.LinqDataSource> controllo basato sull'espressione di ordinamento di un controllo con associazione a dati. Il controllo con associazione a dati fornisce l'interfaccia per consentire all'utente di selezionare in fase di esecuzione, la proprietà da utilizzare per l'ordinamento.  
  
 È possibile impostare a livello di codice l'ordine in cui vengono restituiti i dati impostando la <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà per le proprietà utilizzate per l'ordinamento. Quando il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> è impostata su una proprietà e <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> proprietà `true`, l'espressione di ordinamento dal controllo con associazione a dati viene applicata dopo l'espressione nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà. Pertanto, questo determina l'ordinamento finale dei dati.  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllare con il <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> proprietà impostata su `true` e un <xref:System.Web.UI.WebControls.GridView> controllo a cui è associato il <xref:System.Web.UI.WebControls.LinqDataSource> controllo. Il <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> proprietà del <xref:System.Web.UI.WebControls.GridView> NFS è impostata su `true` per fornire l'interfaccia che consente agli utenti di ordinare i dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica dopo la creazione di un'istanza dell'oggetto di tipo contesto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> evento per esaminare l'oggetto di tipo di contesto o le eccezioni generate durante la creazione dell'oggetto. Recuperare l'oggetto del tipo di contesto dal <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto associato a questo evento. Recuperare l'eccezione generata durante l'operazione di dati dal <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà.  
  
 L'oggetto di tipo di contesto viene creato durante select, update, insert e le operazioni di eliminazione e viene riutilizzato in tutta la richiesta.  
  
 È presente una sola volta quando non viene generato l'evento. È quando è impostata a livello di codice il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> proprietà a un oggetto durante il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento. Una condizione aggiuntiva è che i valori originali non è necessario archiviare lo stato di visualizzazione o l'oggetto di <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> implementa proprietà di <xref:System.Data.Linq.ITable> interfaccia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima della creazione di un'istanza dell'oggetto di tipo contesto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo crea un'istanza del tipo specificato nella <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo chiama il costruttore predefinito dell'oggetto di contesto dati per creare un'istanza dell'oggetto. È possibile che è necessario utilizzare un costruttore non predefinito o se è necessario creare un oggetto diverso da quello specificato nella <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà. In tal caso, è necessario gestire il <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> evento e creare manualmente l'oggetto di contesto dati.  
  
 L'oggetto di tipo di contesto viene creato durante select, update, insert e le operazioni di eliminazione.  
  
 È presente una sola volta quando non viene generato l'evento. Questo è quando si imposta a livello di codice il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> proprietà a un oggetto in un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento. Una condizione aggiuntiva è che i valori originali non è necessario archiviare lo stato di visualizzazione o l'oggetto di <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> implementa proprietà di <xref:System.Data.Linq.ITable> interfaccia.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare l'oggetto di contesto dati utilizzando un costruttore non predefinito durante il <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> evento. Il codice assegna l'oggetto per il <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> proprietà.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima dell'eliminazione dell'oggetto di tipo contesto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> evento per eliminare manualmente l'oggetto, o per eseguire la pulitura specifica per l'oggetto prima che l'oggetto viene eliminato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del tipo che contiene la proprietà il cui valore include i dati che si desidera recuperare.</summary>
        <value>Nome della classe da cui recuperare dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si utilizza il <xref:System.Web.UI.WebControls.LinqDataSource> per recuperare dati da una raccolta di dati in memoria o da un database di controllo, è necessario specificare due proprietà. Il primo è una classe del contesto dati che rappresenta l'origine dati. La seconda è una proprietà nella classe del contesto dati che contiene i dati. Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> impostata sul nome della classe del contesto dati e il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà nella raccolta di dati che contiene i dati.  
  
 Ad esempio, quando si recuperano dati da un database, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà sul nome della classe che rappresenta il database. Impostare inoltre la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà per la proprietà che rappresenta la tabella nel database. Per generare classi da un database, utilizzare il [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] o l'utilità SqlMetal.exe per generare automaticamente tali classi.  
  
 Quando si recuperano dati da una raccolta di dati in memoria, ad esempio una matrice, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà sul nome della classe che contiene la proprietà della matrice. Impostare quindi la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà per la proprietà che ottiene la matrice.  
  
 Per abilitare l'aggiornamento automatico, inserire o eliminare le operazioni tramite la <xref:System.Web.UI.WebControls.LinqDataSource> di controllo, la classe assegnata al <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà deve derivare da <xref:System.Data.Linq.DataContext>. Inoltre, la proprietà assegnate al <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà deve derivare da <xref:System.Data.Linq.Table%601>. Se si non necessario per abilitare l'aggiornamento automatico, inserire o eliminare le operazioni, è possibile assegnare il nome di qualsiasi tipo di classe per la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà.  
  
 Per informazioni su come selezionare i dati da un'istanza di una classe, vedere il <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà a una classe che contiene una matrice di stringhe. Viene inoltre illustrato come impostare la proprietà su una classe (generati dal [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) che rappresenta un database.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 La classe denominata `ExampleDataContext` che rappresenta la tabella di database non viene visualizzata in questo esempio. Per eseguire questo esempio, è necessario creare questa classe aggiungendo una classe LINQ To SQL denominata Example. dbml e trascinando una tabella denominata Movie sul [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Una classe denominata `ExampleDataContext` con una proprietà denominata `Movies` viene generato.  
  
 Nell'esempio seguente viene illustrata la classe denominata `MovieLibrary` cui fa riferimento il <xref:System.Web.UI.WebControls.LinqDataSource> controllo.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una vista che può essere sottoposta a query.</summary>
        <returns>Vista che può essere sottoposta a query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> associata a questo controllo.</summary>
        <returns>Oggetto che funge da interfaccia per i controlli con associazione a dati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per fornire una visualizzazione personalizzata, è possibile eseguire l'override di questo metodo in una classe derivata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Valori delle chiavi delle righe per i record da eliminare.</param>
        <param name="oldValues">Valori delle righe valutati per rilevare conflitti di dati.</param>
        <summary>Esegue un'operazione di eliminazione.</summary>
        <returns>Numero di record interessati dall'operazione di eliminazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non è necessario chiamare il <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> metodo dal codice. Quando si utilizza un <xref:System.Web.UI.WebControls.LinqDataSource> con un controllo con associazione a dati, il controllo associato a dati chiama automaticamente il <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> metodo quando l'utente esegue un'operazione per eliminare un record. Chiamare in modo esplicito il <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> metodo quando si desidera creare un processo personalizzato per l'eliminazione dei dati. Ad esempio, è possibile chiamare il <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> metodo quando si desidera eliminare un record in base a un evento all'esterno del controllo con associazione a dati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al termine di un'operazione di eliminazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> evento per rilevare eventuali eccezioni dell'operazione di eliminazione oppure per esaminare i parametri di output al termine dell'operazione. È possibile recuperare i parametri di output dal <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto passato ai gestori di eventi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Questa proprietà non viene utilizzata dalla classe <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Raccolta di parametri.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima di un'operazione di eliminazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> evento per convalidare l'oggetto da eliminare, esaminare gli errori di convalida di dati della classe di dati, per modificare un valore prima dell'operazione di eliminazione o annullare l'operazione di eliminazione. Il <xref:System.Web.UI.WebControls.LinqDataSource> il controllo passa un <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> oggetto ai gestori eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> evento. Il <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> oggetto contiene i dati che verranno eliminati e consentono di annullare l'operazione di eliminazione. Se la classe dei dati genera un <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> eccezione, il <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> oggetto contiene tale eccezione nella <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> proprietà.  
  
 Se viene generata un'eccezione in un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> evento, è necessario gestire l'eccezione nel gestore eventi. L'eccezione non verrà passata al gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> evento (tramite il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto). Il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà contiene solo le eccezioni che vengono generate dopo il <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> evento. Il codice Annulla l'operazione di eliminazione in base a una proprietà di <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> proprietà e un valore dalla pagina Web. Nell'esempio, quando il `OnSale` è impostata su `true`, è necessario selezionare un <xref:System.Web.UI.WebControls.CheckBox> controllo per confermare che un record deve essere eliminato.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i record di dati possono essere eliminati tramite il controllo <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> se le operazioni di eliminazione automatica sono abilitate; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> proprietà `true` quando si desidera consentire agli utenti di eliminare un record di dati tramite il <xref:System.Web.UI.WebControls.LinqDataSource> controllo. Quando <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> è `true`, <xref:System.Web.UI.WebControls.LinqDataSource> controllo Usa LINQ to SQL per creare automaticamente il comando per eliminare i dati. È necessario includere un'interfaccia che consente agli utenti di selezionare un record da eliminare, ad esempio un <xref:System.Web.UI.WebControls.DetailsView> controllo.  
  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo non supporta le operazioni di eliminazione automatica quando il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà è impostata. In tal caso, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo genera un'eccezione se si tenta un'operazione di eliminazione.  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo che ha <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> impostato su `true`. Oggetto <xref:System.Web.UI.WebControls.DetailsView> controllo Visualizza i dati e crea un pulsante che consente agli utenti di eliminare un record di dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i record di dati possono essere inseriti tramite il controllo <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> se le operazioni di inserimento automatico sono abilitate; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> proprietà `true` quando si desidera consentire agli utenti di inserire un nuovo record di dati tramite il <xref:System.Web.UI.WebControls.LinqDataSource> controllo. Quando <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> è `true`, <xref:System.Web.UI.WebControls.LinqDataSource> controllo Usa LINQ to SQL per creare automaticamente il comando per inserire i dati. È necessario includere un'interfaccia che consente agli utenti di inserire un nuovo record, ad esempio un <xref:System.Web.UI.WebControls.DetailsView> controllo.  
  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo non supporta le operazioni di inserimento automatico quando il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà è impostata. In tal caso, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo genera un'eccezione se si tenta un'operazione di inserimento.  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo che ha <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> impostato su `true`. Oggetto <xref:System.Web.UI.WebControls.DetailsView> controllo Visualizza i dati e un pulsante che consente il controllo per inserire la modalità in cui gli utenti possono creare e salvare un nuovo record.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore che indica se vengono rilevate le modifiche all'oggetto contesto dati.</summary>
        <value>
          <see langword="true" /> se le modifiche all'oggetto contesto dati vengono rilevate; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> proprietà viene utilizzata solo quando si selezionano dati da un oggetto di contesto dati LINQ To SQL.  
  
 Quando interagisce con i dati di sola lettura, imposta il <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> proprietà `false` migliora le prestazioni poiché i dati non è stato memorizzato nella cache per determinare se è stato modificato. Tuttavia, anche Disabilita esecuzione posticipata delle query. Questa proprietà deve essere impostata su `true` se si desidera utilizzare l'esecuzione posticipata delle query.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i record di dati possono essere aggiornati tramite il controllo <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> se le operazioni di aggiornamento automatico sono abilitate; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> proprietà `true` quando si desidera consentire agli utenti di aggiornare un record di dati utilizzando il <xref:System.Web.UI.WebControls.LinqDataSource> controllo. Quando <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> è `true`, <xref:System.Web.UI.WebControls.LinqDataSource> controllo Usa LINQ to SQL per creare automaticamente il comando per aggiornare i dati. È necessario includere un'interfaccia che consente agli utenti di aggiornare un record, ad esempio un <xref:System.Web.UI.WebControls.DetailsView> controllo.  
  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo non supporta le operazioni di aggiornamento automatico quando il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà è impostata. In tal caso, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo genera un'eccezione se si tenta un'operazione di aggiornamento.  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo che ha <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> impostato su `true`. Oggetto <xref:System.Web.UI.WebControls.DetailsView> controllo Visualizza i dati e crea un pulsante che consente agli utenti di aggiornare un record di dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica quali proprietà vengono utilizzate per raggruppare i dati recuperati.</summary>
        <value>Stringa che viene utilizzata per creare la clausola Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà per specificare quali proprietà vengono utilizzate per consolidare i record di dati che hanno gli stessi valori. Ad esempio, se si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà `Name`, tutti i record nella query che hanno lo stesso `Name` valore della proprietà vengono restituiti come un singolo record consolidato.  
  
 È possibile assegnare più di una proprietà per il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà includendo tutte le proprietà di `new` funzione e separandole con una virgola. Ad esempio, per raggruppare le proprietà `Name` e quindi `Category`, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà `new(Name, Category)`.  
  
 I valori di proprietà che vengono utilizzati per il raggruppamento vengono restituiti tramite una proprietà generata denominata `Key`. Includere il `Key` proprietà la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà per recuperare i valori raggruppati. È possibile impostare il `Key` proprietà a un alias utilizzando il `As` (parola chiave), ma non è necessario utilizzare un alias. Ad esempio, è possibile impostare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà a una proprietà denominata `Category`. È possibile recuperare i valori consolidati dal `Category` proprietà impostando il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà `new(Key As ProductCategory)`.  
  
 È possibile accedere ai singoli record in un raggruppamento includendo il `It` proprietà la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. Il `It` proprietà contiene una raccolta di record che condividono un valore nella proprietà raggruppata. È possibile scorrere il `It` proprietà per recuperare i singoli record.  
  
 Il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà viene spesso usata con metodi di aggregazione. È possibile utilizzare i metodi di aggregazione seguenti:  
  
-   `Count()`  
  
-   `Average(` *Colonna* `)`  
  
-   `Sum(` *Colonna* `)`  
  
-   `Max(` *Colonna* `)`  
  
-   `Min(` *Colonna* `)`  
  
-   `Where(` *Condizione* `)`  
  
-   `Any()`  
  
-   `All(` *Condizione* `)`  
  
 Per ulteriori informazioni, vedere [NIB: Panoramica del controllo Server Web LinqDataSource](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) e [procedura: raggruppare e aggregare i dati utilizzando il controllo LinqDataSource](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo che raggruppa i dati restituiti da una proprietà denominata `Category`. Restituisce i valori condivisi e calcola il prezzo medio dei record raggruppati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo configurato per raggruppare in base a due colonne. Il `Key` proprietà fa riferimento a un oggetto che ha due proprietà, `ProductCategory` e `Color`. L'oggetto rappresentato dal `It` viene rinominato `Products`. Rinominato `Products` oggetto contiene una raccolta di singoli record in un raggruppamento, e ogni istanza contiene tutte le colonne dalla tabella Products.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 Nell'esempio seguente vengono illustrati due <xref:System.Web.UI.WebControls.ListView> controlli per la visualizzazione dei dati di <xref:System.Web.UI.WebControls.LinqDataSource> controllo nell'esempio precedente. Un <xref:System.Web.UI.WebControls.ListView> controllo consente di visualizzare i dati raggruppati e l'altro <xref:System.Web.UI.WebControls.ListView> controllo Visualizza i singoli nomi di prodotti che appartengono a tale gruppo. Il controllo associato a dati nidificato <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> è impostata su `Products`, che corrisponde all'alias di `It` oggetto.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme di parametri usati per creare la clausola Group By.</summary>
        <value>I parametri utilizzati per creare la clausola Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo utilizza i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> insieme per creare la clausola Group By in fase di esecuzione. In genere non si utilizzerà il <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> insieme per raggruppare i dati. In alternativa, è possibile utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà. Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> insieme solo quando un valore nella clausola Group By deve essere impostata in fase di esecuzione e tale valore non è un nome di proprietà. Ad esempio, utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> insieme per raggruppare i dati a seconda che il `LastName` proprietà nei record di dati è uguale a un valore fornito dall'utente.  
  
 Se si desidera raggruppare i dati da una proprietà e tale proprietà non deve essere impostata in fase di esecuzione, è possibile definire le proprietà di raggruppamento nella <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà. Ad esempio, per restituire i valori da una tabella di database raggruppato `LastName`, impostare <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> su "LastName" senza parametri. Se si desidera raggruppare i dati in modo dinamico da una proprietà, creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento e personalizzare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà in base alle esigenze.  
  
 È possibile assegnare il nome di una proprietà come valore per un parametro nel <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> insieme. Aggiungere parametri per il <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> raccolta quando si desidera aggiungere una condizione per il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà che deve essere impostata in fase di esecuzione.  
  
 Per impostare i valori <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> insieme, assegnare un nome a ogni parametro e quindi aggiungere un segnaposto nel <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà per ogni parametro denominato. Nella clausola Group By, anteporre ogni nome di parametro con il simbolo @.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">Valori delle righe da inserire nell'origine dati.</param>
        <summary>Esegue un'operazione di inserimento.</summary>
        <returns>Il numero di righe interessate dall'operazione di inserimento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non è necessario chiamare il <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> metodo dal codice. Il controllo associato a dati chiama automaticamente il <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> metodo quando l'utente esegue un'operazione per inserire un nuovo record. Chiamare in modo esplicito il <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> metodo quando si desidera creare un processo personalizzato per l'inserimento di dati.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come inserire un nuovo record nell'origine dati a livello di codice quando l'utente sceglie un pulsante. Il codice passa un <xref:System.Collections.Specialized.ListDictionary> oggetto che contiene l'impostazione predefinita i valori per il <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> metodo.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 Nell'esempio seguente viene illustrato il markup per l'esempio precedente.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al termine di un'operazione di inserimento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> evento per rilevare eventuali eccezioni dall'operazione di inserimento o per esaminare i valori al termine dell'operazione di inserimento. È possibile recuperare i nuovi valori tramite la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto passato ai gestori di eventi. Ad esempio, è possibile utilizzare il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto per recuperare la proprietà identity generata da un database per un nuovo record di dati.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> evento che controlla le eccezioni e recupera la proprietà identity per il nuovo record.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima di un'operazione di inserimento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> evento per convalidare l'oggetto da inserire, esaminare gli errori di convalida di dati della classe di dati, per modificare un valore prima dell'operazione di inserimento o di annullare l'operazione di inserimento. Il <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> oggetto passate ai gestori eventi per questo evento contiene il nuovo oggetto da inserire nell'origine dati.  
  
 Se si verifica un errore di convalida durante l'operazione di inserimento di <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> oggetto contiene le eccezioni generate dalla classe di dati di convalida. Se un valore da inserire non corrisponde al tipo della proprietà nella classe di dati o se non ha superato il controllo di convalida personalizzato, si verifica un errore di convalida. In un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> evento, è possibile recuperare le eccezioni di convalida e intraprendere l'azione appropriata.  
  
 Se viene generata un'eccezione in un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> evento, è necessario gestire l'eccezione nel gestore eventi. L'eccezione non verrà passata al gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> evento (tramite il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto). Il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà contiene solo le eccezioni che vengono generate dopo il <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> che modifica i dati prima che l'operazione di inserimento. L'oggetto di <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> proprietà viene eseguito il cast a un tipo denominato `Product`. Il `DateModified` proprietà del `Product` oggetto viene impostato per la data e ora correnti.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> evento che recupera le eccezioni di convalida.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 L'esempio precedente recupera le eccezioni di convalida. Potrebbe essere generata un'eccezione se un valore non corrisponde al tipo della proprietà. Inoltre, potrebbe essere generata da un controllo personalizzato come quello nell'esempio seguente. Il `OnAgeChanging` metodo controlla che il numero per il `Age` proprietà non è negativo.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme di parametri utilizzati durante un'operazione di inserimento.</summary>
        <value>Parametri utilizzati durante un'operazione di inserimento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere vengono passati i valori necessari per un'operazione di inserimento per il <xref:System.Web.UI.WebControls.LinqDataSource> controllo dal controllo con associazione a dati. Specificare i parametri di inserimento quando si desidera specificare un valore predefinito di valore o definiscono se convertire i valori vuoti in `null`. Non è necessario specificare un parametro per ogni valore che verrà inserito solo per i valori che devono essere gestiti quando l'utente non fornisce un valore.  
  
 I valori forniti nella <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> raccolta vengono utilizzati solo per i campi definiti nell'origine dati ma che non sono associati nel controllo dei dati. Ad esempio, si consideri una tabella di database con colonne denominate nome, indirizzo e PostalCode, ma un <xref:System.Web.UI.WebControls.ListView> associato alla tabella è associato solo per i campi nome e l'indirizzo. I valori di <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> raccolta verrà utilizzata solo per il campo PostalCode. Non verranno usati per il campo nome e l'indirizzo. Questo vale anche se viene immesso alcun valore per tali campi. Se i campi di controllo con associazione a dati genera automaticamente per tutti i campi nei dati di non origine, valori dal <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> raccolta verrà utilizzata.  
  
   
  
## Examples  
 Nell'esempio seguente un <xref:System.Web.UI.WebControls.LinqDataSource> controllo con un parametro che specifichi un valore predefinito nel <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> insieme. Se l'utente non fornisce un valore per il `Category` proprietà, il valore predefinito fornito dal parametro viene salvato nel database.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento.</param>
        <summary>Inizializza l'oggetto <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.Unload" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica quali campi vengono utilizzati per ordinare i dati recuperati.</summary>
        <value>Stringa che viene utilizzata per creare la clausola Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà per specificare le proprietà da utilizzare per l'ordinamento dei dati restituiti. La proprietà per l'ordinamento dei dati deve essere presente nell'origine dati originale, ma non deve essere incluso nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. È possibile aggiungere uno spazio e `Ascending`, `ASC`, `Descending`, o `DESC` a una proprietà nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> stringa per specificare la modalità in cui vengono restituiti i dati ordinati.  
  
 È possibile specificare più di una proprietà nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà separandole con una virgola. Ad esempio, all'ordine da proprietà denominate `LastName` e `FirstName`, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà su "LastName, FirstName".  
  
> [!NOTE]
>  Quando si utilizza il <xref:System.Web.UI.WebControls.LinqDataSource> controllare con [!INCLUDE[ss2k](~/includes/ss2k-md.md)] o [!INCLUDE[ssEW](~/includes/ssew-md.md)] e <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> è impostata su `true`, è necessario fornire un valore nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà. Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> proprietà `true`. Se si assegna un valore per il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà, è necessario includere anche tutte le colonne di identità nell'elenco di proprietà che viene restituito nella query.  
  
 Se il <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> è impostata su `true`, un controllo con associazione a dati è possibile passare un'espressione di ordinamento per il <xref:System.Web.UI.WebControls.LinqDataSource> controllo in fase di esecuzione. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo verrà applicate dal controllo con associazione a dati, l'espressione di ordinamento dopo l'applicazione di <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà. Di conseguenza, i dati vengono restituiti dal controllo con associazione a dati in base all'espressione di ordinamento.  
  
   
  
## Examples  
 Nell'esempio seguente restituisce i dati in ordine alfabetico inverso in base ai valori di `Category` proprietà.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme di parametri usati per creare la clausola Order By.</summary>
        <value>I parametri che vengono utilizzati per creare la clausola Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo utilizza i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme per creare la clausola Order By in fase di esecuzione. In genere si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> proprietà `true` quando si aggiungono parametri per il <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme. Quando il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> è impostata su `true`, ogni parametro il <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> raccolta viene aggiunto alla clausola Order By nella sequenza che vengono specificate nella <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme. Quando il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> proprietà `true`, i parametri non devono essere denominati, perché vengono applicate in sequenza e non sono associati a un segnaposto.  
  
 Se non è necessario impostare un valore in fase di esecuzione nella clausola Order By, non è necessario utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme. È possibile definire i campi da utilizzare per ordinare i dati di <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà. Ad esempio, per restituire i valori da una tabella di database ordinati `LastName`, impostare <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> su "LastName" senza parametri.  
  
 È possibile impostare i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme e corrispondere ai parametri ai segnaposto della <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> proprietà, ma questo approccio ha un'applicazione limitata. Quando si utilizza questo approccio, i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme non può rappresentare un nome di colonna. È possibile impostare un parametro a un valore e quindi confrontare tale valore per i valori di una proprietà. Ad esempio, è possibile ordinare i dati in base che i valori in una proprietà è minore del valore in fase di esecuzione rappresentato dal parametro.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un controllo <xref:System.Web.UI.WebControls.LinqDataSource> con la proprietà <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> impostata su `true`. Cui è incluso un parametro di <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> insieme che consente di ordinare i dati in base alla proprietà name che un utente seleziona da un <xref:System.Web.UI.WebControls.DropDownList> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta i campi utilizzati per ordinare i dati raggruppati.</summary>
        <value>Stringa che viene utilizzata per creare la clausola Order Groups By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> proprietà per specificare la modalità di ordinamento di gruppi di dati. Ad esempio, è possibile raggruppare la `CategoryID` proprietà e ordinamento di gruppo per la media di ogni ID di categoria di `Price` proprietà.  
  
 È possibile impostare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> proprietà solo dopo aver raggruppato i dati. Se si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> proprietà senza impostare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> proprietà, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo genera un'eccezione.  
  
 La proprietà che viene utilizzata per ordinare i dati deve essere una proprietà che viene utilizzata per raggruppare i dati o il risultato di una funzione di aggregazione sui dati raggruppati. Per specificare la modalità di ordinamento dei dati, è possibile aggiungere uno spazio e la stringa "Ascending", "ASC", "Descending" o "DESC" su un nome di proprietà nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> stringa.  
  
 È possibile specificare più di una proprietà nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> proprietà. Con una virgola per separare ogni proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come raggruppare i dati utilizzando due proprietà e come ordinare i dati raggruppati utilizzando uno di tali proprietà. I dati da una tabella denominata `Products` vengono raggruppati utilizzando le proprietà denominate `CategoryID` e `Discontinued`. I dati raggruppati vengono ordinati i `CategoryID` proprietà.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 Nell'esempio seguente viene illustrato come raggruppare i dati utilizzando una proprietà e la modalità di ordinamento in base ai risultati di una funzione di aggregazione. I dati di `Products` tabella verrà raggruppata utilizzando la `CategoryID` proprietà. Eseguire l'ordinamento in base alla media del `UnitPrice` proprietà all'interno di ogni gruppo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme di parametri usati per creare la clausola Order Groups By.</summary>
        <value>I parametri utilizzati per creare la clausola Order Groups By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo utilizza i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> insieme per creare la clausola Order Groups By in fase di esecuzione.  
  
 Aggiungere i valori per il <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> raccolta solo quando è necessario impostare i valori in fase di esecuzione nella clausola Order Groups By. È possibile definire i campi che vengono utilizzati per ordinare i dati tramite il <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> proprietà.  
  
 È possibile impostare i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> insieme e corrispondere ai parametri ai segnaposto della <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> proprietà. Tuttavia, quando si utilizza questo approccio, i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> insieme non può rappresentare un nome di colonna, essi devono corrispondere i valori. È possibile impostare un parametro a un valore e quindi confrontare tale valore a una proprietà. Ad esempio, è possibile ordinare i dati in base che i valori in una proprietà è minore del valore in fase di esecuzione rappresentato dal parametro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta le proprietà e i valori calcolati inclusi nei dati recuperati.</summary>
        <value>Stringa utilizzata per creare la clausola Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo recupera tutte le proprietà (colonne di dati) dall'oggetto dati. Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà per recuperare un subset delle proprietà dall'oggetto o calcolare nuovi valori quando vengono recuperati i dati.  
  
 Specificare le proprietà da recuperare, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà per i nomi delle proprietà che si desidera includere nei dati restituiti.  
  
 Se si recupera un subset delle proprietà dell'oggetto dati, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo crea dinamicamente una classe che contiene solo le proprietà specificate nella <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. Viene creata anche una classe in modo dinamico se si calcolano le proprietà che non sono proprietà dell'oggetto dati. In questi casi, l'oggetto restituito dalla query non è un'istanza della classe specificata nella <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà. In alternativa, è necessario utilizzare il `new` metodo il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà per indicare che una nuova classe viene restituita dalla query. Ad esempio, per restituire solo il `FirstName` e `LastName` proprietà da un oggetto che contiene più di queste proprietà, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà `new(FirstName, LastName)`. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo creerà dinamicamente la nuova classe specificata nella `new` metodo.  
  
 È possibile utilizzare il `As` (parola chiave) per assegnare un alias a un valore selezionato. Se si assegna un alias, è necessario includere le proprietà con alias di `new` metodo. Qualsiasi controllo associato a dati che associa i risultati di <xref:System.Web.UI.WebControls.LinqDataSource> controllo deve fare riferimento alla proprietà l'alias. Ad esempio, se si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, il controllo con associazione a dati può accedere a due proprietà, `SalesRegion` e `RevenueThousands`.  
  
 Utilizzare il `new` funzionare nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà in base alle condizioni elencate nella tabella seguente.  
  
|Seleziona|Utilizzo di new|Esempio|  
|------------|----------------|-------------|  
|Singola proprietà.|`new` non è necessaria.|`Select="Category"`|  
|Più proprietà.|`new` necessario.|`Select="new(Cateogry, Name)"`|  
|Una o più proprietà che dispone di un alias.|`new` necessario.|`Select="new(Category As CategoryGroup)"`|  
  
 Se si desidera abilitare le modifiche dei dati automatico, ma non si desidera visualizzare tutte le proprietà dall'oggetto dati, non impostare la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. Gestire invece la visualizzazione tramite il controllo con associazione a dati. Quando si utilizza il <xref:System.Web.UI.WebControls.DetailsView> controllo o <xref:System.Web.UI.WebControls.GridView> (controllo), è necessario impostare anche la <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> o <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> proprietà `false`. Tutti i valori non vengono visualizzati nel controllo con associazione a dati vengono archiviati nello stato di visualizzazione. Vengono passati invariati all'origine dati quando viene eseguito l'aggiornamento dei dati.  
  
 Quando si raggruppano i dati nella query, è possibile includere i metodi di aggregazione nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. È possibile utilizzare i metodi di aggregazione seguenti:  
  
-   `Count()`  
  
-   `Average(` *Colonna* `)`  
  
-   `Sum(` *Colonna* `)`  
  
-   `Max(` *Colonna* `)`  
  
-   `Min(` *Colonna* `)`  
  
-   `Where(` *Condizione* `)`  
  
-   `Any()`  
  
-   `All(` *Condizione* `)`  
  
 Per ulteriori informazioni, vedere [NIB: Panoramica del controllo Server Web LinqDataSource](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) e [procedura: raggruppare e aggregare i dati utilizzando il controllo LinqDataSource](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
 Quando si raggruppano i dati, è possibile includere `Key` e `It`, che vengono create dinamicamente le proprietà, nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. Il `Key` proprietà fa riferimento ai valori le proprietà utilizzati per raggruppare i dati. Ad esempio, se vengono raggruppati in base a una proprietà denominata `Category`, `Key` proprietà conterrà ogni valore univoco di `Category` proprietà. Il `It` proprietà fa riferimento a una raccolta di singoli record in un raggruppamento di dati. È possibile scorrere il `It` proprietà per recuperare i singoli record che sono stati consolidati nell'operazione di raggruppamento. Ad esempio, se vengono raggruppati in base a una proprietà denominata `Category`, `It` proprietà contiene tutti i singoli record che condividono un valore comune nella `Category` proprietà.  
  
 Se si include il `It` parola chiave nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà quando si raggruppano i dati, è necessario assegnare un alias per il `It` (parola chiave). Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo genererà un'eccezione se `It` non dispone di un alias. È possibile assegnare un alias per il `Key` (parola chiave), ma questo non è necessario.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà a un subset di proprietà nell'oggetto dati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 Nell'esempio seguente viene illustrato come recuperare i valori in una proprietà che è stato utilizzato per raggruppare i dati e per recuperare la media dei record raggruppati. Il `Key` (parola chiave) contiene la proprietà che è stata utilizzata per raggruppare i dati. In questo esempio, `Key` conterrà i valori condivisi dal `ProductCategory` proprietà.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al termine di un'operazione di recupero dati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Selected> evento per rilevare eventuali eccezioni dall'operazione di recupero dei dati o per esaminare l'oggetto dati al termine dell'operazione. L'oggetto è disponibile il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto passato ai gestori di eventi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima di un'operazione di recupero dati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento per eseguire le attività seguenti:  
  
-   Modificare i parametri per il recupero dei dati.  
  
-   Generare la query a livello di codice.  
  
-   Modificare i valori per l'ordinamento o paging.  
  
-   Eseguire un ordinamento personalizzato o paging.  
  
-   Annullare l'operazione di recupero dei dati.  
  
 Il <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> oggetto passato ai gestori eventi per questo evento contiene i parametri per l'operazione di recupero dei dati. È possibile modificare i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> gestore dell'evento prima dell'esecuzione della query oppure è possibile creare un nuovo set di risultati e assegnarlo al <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> proprietà.  
  
 La possibilità di implementare personalizzate di ordinamento o paging nei gestori per questo evento potrebbe essere limitato dal controllo a cui è associato il <xref:System.Web.UI.WebControls.LinqDataSource>. Ad esempio, quando l'intestazione di colonna di un <xref:System.Web.UI.WebControls.GridView> si fa clic sul controllo, il controllo esegue l'ordinamento automatico che potrebbe eseguire l'override di qualsiasi ordine stabilito nel gestore eventi.  
  
 Se viene generata un'eccezione in un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento, è necessario gestire l'eccezione nel gestore eventi. L'eccezione non verrà passata al gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selected> evento (tramite il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto). Il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà contiene solo le eccezioni che vengono generate dopo il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento. Il gestore crea una query che recupera i valori da una matrice di valori stringa nella pagina Web.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 Nell'esempio seguente viene illustrato come assegnare il <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> proprietà dell'oggetto restituito da un metodo che rappresenta una stored procedure.  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme di parametri utilizzati durante un'operazione di recupero dati.</summary>
        <value>Parametri utilizzati per creare la clausola Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo utilizza i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> insieme per creare la clausola Select in fase di esecuzione. Aggiungere parametri per il <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> raccolta quando si desidera utilizzare valori di runtime nella clausola Select. Ad esempio, è possibile aggiungere un parametro per il <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> insieme per rappresentare una proprietà nel profilo dell'utente. È quindi possibile utilizzare tale proprietà e un valore dall'origine dati per calcolare un nuovo valore.  
  
 Se non è necessario impostare un valore in fase di esecuzione nella clausola Select, non è necessario utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> insieme. È possibile definire le proprietà da recuperare nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà. Ad esempio, per restituire il `FirstName` e `LastName` valori da una tabella di database, impostare <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> su "FirstName, LastName" senza parametri.  
  
 Per impostare valori di <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> raccolta, aggiungere un segnaposto nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà per il parametro denominato. Nella clausola Select, anteporre ogni nome di parametro con il simbolo @.  
  
 Non è possibile utilizzare un parametro nel <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> insieme per rappresentare un nome di proprietà. Per impostare dinamicamente il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà sul nome di una proprietà, creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> evento e personalizzare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> proprietà in base alle esigenze.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare un valore fornito dall'utente per calcolare un valore nei dati restituiti. L'utente può immettere un valore nella casella di testo che rappresenta il numero di giorni di produzione. Tale valore viene diviso per un valore da un database che rappresenta il numero di giorni per la creazione di un prodotto. Il valore restituito indica il numero di prodotti può essere creato durante il numero di giorni specificato. L'input dell'utente è incluso nel comando di selezione tramite il <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> insieme.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i dati dell'origine dati devono essere archiviati in stato di visualizzazione per assicurarsi che non vengano modificati da un altro processo prima che siano aggiornati o eliminati.</summary>
        <value>
          <see langword="true" /> se i valori verranno archiviati in stato di visualizzazione; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, quando l'aggiornamento ed eliminazione sono state abilitate, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo Archivia i valori originali per tutti i record nello stato di visualizzazione. Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo Archivia i valori per tutte le chiavi primarie e tutte le proprietà non è contrassegnato con `UpdateCheck.Never` nel `Column` attributo. Impostare il `UpdateCheck` proprietà del `Column` attributo la [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].  
  
 Prima di LINQ to SQL aggiorna o Elimina i dati, controlla i valori nello stato di visualizzazione con i valori correnti dell'origine dati. Se i valori non corrispondono, ha modificato il record di origine dati. In tal caso, LINQ to SQL genera un'eccezione e non proseguire con l'aggiornamento oppure l'operazione di eliminazione. Per ulteriori informazioni su LINQ to SQL, vedere [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Archiviare i valori originali nella visualizzazione stato può causare le dimensioni della pagina divenire inutilmente grande e può esporre dati sensibili da un utente malintenzionato. È possibile disabilitare la memorizzazione di valori nello stato di visualizzazione impostando il <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> proprietà `false`. In questo caso, è necessario fornire in altro modo per assicurarsi che i dati non sono stato modificato. Se si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> proprietà `false`, i valori originali non vengono mantenuti nello stato di visualizzazione per il controllo con associazione a dati. In tal caso, LINQ to SQL non è possibile verificare l'integrità dei dati. LINQ to SQL genererà un'eccezione che indica un conflitto di dati, anche se i dati nell'origine dati non sono realmente cambiati.  
  
 Se l'origine dati sottostante contiene un campo timestamp viene aggiornato automaticamente durante un aggiornamento, è possibile archiviare solo tale valore nello stato di visualizzazione. In tal caso, impostare la proprietà timestamp nella classe di entità `IsVersion=true` e tutte le proprietà vengono impostate su `UpdateCheck.Never`. Poiché un campo timestamp viene aggiornato automaticamente dal database ogni volta che i dati in tale record, LINQ to SQL determina da questo valore se i dati sono stati modificati. Ciò consente di ridurre le dimensioni dello stato di visualizzazione ed non sono esposto contiene dati sensibili. LINQ to SQL il controllo della coerenza dei dati confrontando il valore di timestamp nella visualizzazione stato con il valore di timestamp nel database. Per ulteriori informazioni, vedere [procedura dettagliata: utilizzo di un Timestamp con il controllo LinqDataSource per controllare l'integrità dei dati](http://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Web.DynamicData.IDynamicDataSource.ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Tipo associato alla classe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Web.UI.WebControls.LinqDataSource> a un'interfaccia <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System.Web.DynamicData.IDynamicDataSource.EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Nome dell'entità.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Web.UI.WebControls.LinqDataSource> a un'interfaccia <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome della proprietà o del campo nella classe del contesto dati che rappresenta una raccolta dati.</summary>
        <value>Stringa contenente il nome di una proprietà che contiene la raccolta dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà sul nome della proprietà o campo che rappresenta i dati che si desidera recuperare. Quando ci si connette a una tabella di database, il nome della proprietà è in genere lo stesso nome della tabella. Quando ci si connette a una raccolta di dati in memoria, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà sul nome della proprietà o campo che restituisce la raccolta dei dati.  
  
 È possibile assegnare una proprietà che restituisce qualsiasi tipo per il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà per le operazioni di recupero. Se non implementa l'oggetto rappresentato dalla proprietà <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource> controllo eseguirà automaticamente il wrapping dell'oggetto in un'istanza di un <xref:System.Collections.IEnumerable> oggetto.  
  
 Per abilitare l'aggiornamento automatico, inserimento o eliminazione, la classe che viene assegnato al <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> proprietà deve derivare da <xref:System.Data.Linq.DataContext> e la proprietà di cui è assegnata il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> proprietà deve derivare da <xref:System.Data.Linq.Table%601>.  
  
 Per informazioni su come selezionare i dati da un'istanza di una classe, vedere il <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente vengono illustrati due <xref:System.Web.UI.WebControls.LinqDataSource> controlli. In uno <xref:System.Web.UI.WebControls.LinqDataSource> (controllo), il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> è impostata su una proprietà in una classe. Questa proprietà restituisce una matrice di stringhe. Negli altri <xref:System.Web.UI.WebControls.LinqDataSource> (controllo), il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> è impostata su una proprietà che rappresenta una tabella di database.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 La classe denominata `ExampleDataContext` che rappresenta la tabella di database non viene visualizzata in questo esempio. Per eseguire questo esempio, è necessario creare questa classe aggiungendo un LINQ alla classe SQL denominata Example. dbml e trascinando una tabella denominata Movie sul [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Una classe denominata `ExampleDataContext` con una proprietà denominata `Movies` viene generato.  
  
 Nell'esempio seguente viene illustrata la classe denominata `MovieLibrary` cui fa riferimento il <xref:System.Web.UI.WebControls.LinqDataSource> controllo.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Valori delle chiavi delle righe per i record da aggiornare.</param>
        <param name="values">Valori delle righe da aggiornare nell'origine dati.</param>
        <param name="oldValues">Valori delle righe valutati per rilevare conflitti di dati.</param>
        <summary>Esegue un'operazione di aggiornamento.</summary>
        <returns>Numero di record interessati dall'operazione di aggiornamento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non è necessario chiamare il <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> metodo dal codice. Il controllo associato a dati chiama automaticamente il <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> metodo quando l'utente esegue un'operazione per aggiornare un record. Chiamare in modo esplicito il <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> metodo quando si desidera creare un processo personalizzato per l'aggiornamento dati.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come aggiornare a livello di codice un record nell'origine dati quando l'utente sceglie un pulsante. Il codice passa un <xref:System.Collections.Specialized.ListDictionary> oggetto che contiene il valore della chiave, un <xref:System.Collections.Specialized.ListDictionary> oggetto che contiene i valori originali, e un <xref:System.Collections.Specialized.ListDictionary> oggetto che contiene i nuovi valori di <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> metodo.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 Nell'esempio seguente viene illustrato il markup per l'esempio precedente.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al termine di un'operazione di aggiornamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Updated> evento per rilevare eventuali eccezioni dall'operazione di aggiornamento o per esaminare i valori dei parametri di output al termine dell'operazione di aggiornamento. I parametri di output sono disponibili le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto passato ai gestori di eventi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Questo insieme non viene utilizzato dalla classe <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Raccolta di parametri.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica prima di un'operazione di aggiornamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento per convalidare l'oggetto da aggiornare, esaminare gli errori di convalida di dati della classe di dati, per modificare un valore prima dell'operazione di aggiornamento o per annullare l'operazione di aggiornamento. Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> oggetto che viene passato ai gestori di eventi contiene sia l'oggetto originale e l'oggetto aggiornato.  
  
 Se si verifica un errore di convalida durante l'operazione di aggiornamento, il <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> oggetto contiene le eccezioni generate dalla classe di dati di convalida. Se un valore da aggiornare non corrisponde al tipo della proprietà nella classe di dati o se non ha superato il controllo di convalida personalizzato, si verifica un errore di convalida. In un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento, è possibile recuperare le eccezioni di convalida e intraprendere l'azione appropriata.  
  
 Se viene generata un'eccezione in un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento, è necessario gestire l'eccezione nel gestore eventi. L'eccezione non verrà passata al gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updated> evento (tramite il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> oggetto). Il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> proprietà contiene solo le eccezioni che vengono generate dopo il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento. Il codice vengono confrontate le proprietà di <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà e <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà per verificare se è stato modificato un valore. Se il valore è stato modificato, il valore di <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> è impostata su `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento che recupera le eccezioni di convalida.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 L'esempio precedente recupera le eccezioni di convalida. Potrebbe essere generata un'eccezione se un valore non corrisponde al tipo della proprietà. Inoltre, potrebbe essere generata da un controllo personalizzato come quello nell'esempio seguente. Il `OnAgeChanging` metodo controlla che il numero per il `Age` proprietà non è negativo.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica quali condizioni devono verificarsi affinché un record venga incluso nei dati recuperati.</summary>
        <value>Stringa utilizzata per creare la clausola Where.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà per specificare le condizioni per il record deve essere restituito da una query. La sintassi per la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà corrisponde alla sintassi di una clausola Where LINQ in c#.  
  
 Si specifica un'espressione che restituisce un valore booleano, e se l'espressione restituisce `true` per una determinata riga, la riga è incluso nel set di risultati. Le espressioni sono composte da nomi di colonna, gli operatori di confronto e valori da confrontare, come illustrato nell'esempio seguente:  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 Per specificare più espressioni collegate da logica `AND` o `OR` operatori, utilizzare `&&` come un operatore logico AND e `||` come un operatore logico OR, come illustrato nell'esempio seguente:  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 Se si desidera testare una proprietà in base a un valore letterale stringa, il valore di stringa letterale deve essere racchiuso tra virgolette doppie. A questo scopo, nel markup, racchiudere il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> il valore della clausola tra virgolette, come illustrato nell'esempio seguente:  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 Per testare rispetto a un valore letterale stringa nel codice, è possibile utilizzare caratteri di escape appropriati per la lingua in uso per inserire le virgolette doppie, come illustrato nell'esempio seguente:  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 Se si desidera verificare se una stringa è maggiore o minore di un'altra stringa, è necessario utilizzare i metodi di <xref:System.String> classe anziché `<` o `>` operatori tra il nome della colonna e il valore di stringa. Nell'esempio seguente viene illustrato come selezionare le righe con valori di categoria che sono minori di, minore o uguale a, maggiore di o maggiore di o uguale a "Sports":  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 È inoltre possibile utilizzare altri metodi del <xref:System.String> classe, ad esempio <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, e <xref:System.String.Contains%2A>. Per ulteriori informazioni su come confrontare le stringhe, vedere [confronto di stringhe](~/docs/standard/base-types/comparing.md). Per ulteriori informazioni sulla posizione sintassi della clausola, vedere [operatori c#](http://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) e [dove clausola](~/docs/csharp/language-reference/keywords/where-clause.md).  
  
 Oltre a filtrare in base ai valori statici che è definito quando si crea la pagina Web, è possibile filtrare in base a valori dinamici che vengono valutati in fase di esecuzione. In tal caso, si include un parametro denominato il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà che funge da segnaposto per il valore. Aggiungere quindi un parametro con il nome corrispondente per il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme.  
  
 In alternativa, è possibile impostare il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> proprietà `true` e definire i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme. Quando il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> proprietà `true`, non è necessario includere i parametri denominati nel <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà. Al contrario, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo genera automaticamente Where clausola dai parametri di <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> proprietà.  
  
 Per ulteriori informazioni su come filtrare i dati, vedere [procedura dettagliata: selezione e filtro di Subset di dati con i controlli LinqDataSource e GridView](http://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come filtrare i dati restituiti da una query in base a una condizione statica.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 Nell'esempio seguente viene illustrato come filtrare i dati in base a un valore che viene fornito dall'utente in fase di esecuzione. In questo esempio un <xref:System.Web.UI.WebControls.DropDownList> controllo e un <xref:System.Web.UI.WebControls.GridView> controllo vengono visualizzati nella pagina. Quando l'utente seleziona uno dei valori nel <xref:System.Web.UI.WebControls.DropDownList> (controllo), il <xref:System.Web.UI.WebControls.LinqDataSource> controllo Seleziona dal `Products` tabella solo le righe contenenti `UserPrice` valori è uguale al valore selezionato. Il <xref:System.Web.UI.WebControls.GridView> controllo Visualizza quindi i dati filtrati.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'insieme di parametri utilizzato per creare la clausola Where.</summary>
        <value>Insieme dei parametri utilizzati per creare la clausola Where nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.LinqDataSource> controllo utilizza i parametri di <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> raccolta crea la clausola in fase di esecuzione. Aggiungere parametri per il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> raccolta quando si desidera impostare a livello di codice uno o più delle condizioni nella clausola. Ad esempio, si potrebbe eseguire la ricerca di una tabella di database per i record con un cognome è uguale al valore di un <xref:System.Web.UI.WebControls.TextBox> controllo. In tal caso, aggiungere un parametro per il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> raccolta per il valore della casella di testo.  
  
 Se non è necessario impostare un valore in fase di esecuzione nella clausola, non è necessario utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme. È possibile definire i campi da recuperare nel <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà. Ad esempio, per restituire i valori di una tabella di database in cui `LastName` uguale a "Adams" nel markup, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà `'LastName = "Adams"'` senza parametri.  
  
 Per impostare i valori <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme, assegnare un nome a ogni parametro e quindi aggiungere un segnaposto nel <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> proprietà per tale parametro. In Where-clausola, anteporre il nome di ogni parametro con il simbolo @.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> insieme per creare dinamicamente Where clausola. Il <xref:System.Web.UI.WebControls.LinqDataSource> tutti i record con un valore nel controllo viene restituito il `Price` colonna che è maggiore del valore selezionato dall'utente in un <xref:System.Web.UI.WebControls.DropDownList> controllo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>