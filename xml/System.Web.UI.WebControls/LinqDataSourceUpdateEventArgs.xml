<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5a1b8bd0b4efda23c6f0ffd2b416b4ead20d2a15" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51862882" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceUpdateEventArgs = class&#xA;    inherit CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce dati per l'evento <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> oggetto viene passato a un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento. È possibile usare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> oggetto per esaminare i dati prima che venga eseguita l'operazione di aggiornamento nell'origine dati. È quindi possibile convalidare i dati, esaminare le eccezioni di convalida generate dalla classe di dati o modificare un valore prima dell'aggiornamento. È anche possibile annullare l'operazione di aggiornamento.  
  
 Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> oggetto contiene i dati che è stato originariamente recuperati dall'origine dati. Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> oggetto contiene i dati che verranno salvati nell'origine dati durante l'operazione di aggiornamento.  
  
 Se l'oggetto che rappresenta l'origine dati genera un'eccezione di convalida prima di aggiornare i dati, il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> proprietà contiene un'istanza di <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> classe. È possibile recuperare tutte le eccezioni di convalida tramite il <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> proprietà. Se viene generata alcuna eccezione di convalida, il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> contiene proprietà `null`. Se si gestiscono le eccezioni di convalida e si desidera che l'eccezione venga generata nuovamente, impostare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> proprietà `true`.  
  
 Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo Archivia i valori originali dall'origine dati nella visualizzazione di stato nella pagina Web, ad eccezione di quelle la cui proprietà <xref:System.Data.Linq.Mapping.ColumnAttribute> attributo è contrassegnato come `UpdateCheck.Never`. LINQ to SQL controlla automaticamente l'integrità dei dati prima di aggiornare i dati. Ciò avviene, confrontando i valori correnti dell'origine dati con i valori originali archiviati nello stato di visualizzazione. LINQ to SQL genera un'eccezione se sono stati modificati i valori nell'origine dati. È possibile eseguire la convalida dei dati aggiuntiva tramite la creazione di un gestore per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento. Nell'esempio viene illustrato come confrontare le proprietà dal <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà e i <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà per determinare se il valore nel `Category` proprietà è stata modificata. In questo caso, il `CategoryChanged` proprietà dell'oggetto nel <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> è impostata su `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento. Vengono visualizzati gli eventuali messaggi di eccezione di convalida utilizzando un <xref:System.Web.UI.WebControls.Label> controllo.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : System.Web.UI.WebControls.LinqDataSourceValidationException -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception">L'eccezione che si è verificata durante la convalida dei dati da aggiornare.</param>
        <summary>Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> con l'eccezione specificata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : obj * obj -&gt; System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs (originalObject, newObject)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject">Oggetto del tipo specificato nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> che contiene i valori iniziali recuperati dall'origine dati.</param>
        <param name="newObject">Oggetto del tipo specificato nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> che contiene i valori che verranno salvati nell'origine dati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : System.Web.UI.WebControls.LinqDataSourceValidationException" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'eccezione generata durante la convalida dei dati prima dell'operazione di aggiornamento.</summary>
        <value>L’eccezione, se si verifica un errore; in caso contrario, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se viene generata un'eccezione di convalida prima di eseguita l'operazione di aggiornamento, l'eccezione viene archiviato nel <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> proprietà. In un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento, è possibile recuperare l'eccezione tramite la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento. Vengono visualizzati gli eventuali messaggi di eccezione di convalida utilizzando un <xref:System.Web.UI.WebControls.Label> controllo.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'eccezione è stata gestita e non deve essere nuovamente generata.</summary>
        <value>
          <see langword="true" /> se l'eccezione è stata gestita; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventi per esaminare le eccezioni di convalida che si è verificato prima dell'operazione di aggiornamento. Se si gestisce l'eccezione e si desidera che venga generata nuovamente, impostare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> proprietà `true`. Se non si impostano i <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> proprietà `true`, l'eccezione verrà propagata al gestore eventi successivo nello stack di chiamate.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento. Vengono visualizzati gli eventuali messaggi di eccezione di convalida utilizzando un <xref:System.Web.UI.WebControls.Label> controllo.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto che contiene i valori che verranno salvati nell'origine dati.</summary>
        <value>Oggetto del tipo specificato nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> che contiene i dati da salvare.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventi e come recuperare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà da convalidare i dati. È anche possibile modificare i dati o annullare l'operazione di aggiornamento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento. Nell'esempio viene illustrato come confrontare le proprietà dal <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà e i <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà per determinare se il valore nel `Category` proprietà è stata modificata. In questo caso, il `CategoryChanged` proprietà dell'oggetto nel <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> è impostata su `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalObject : obj" Usage="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto che contiene i valori originariamente recuperati dall'origine dati.</summary>
        <value>Oggetto del tipo specificato nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> che contiene i dati recuperati dall'origine dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà per controllare i valori originali con i valori correnti dell'origine dati e per annullare l'operazione di aggiornamento o eseguire altre azioni.  
  
 Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà contiene i valori per solo le proprietà che vengono mantenute nella visualizzazione di stato nella pagina Web. Una proprietà viene mantenuta in queste circostanze:  
  
-   Quando viene visualizzato in un controllo con associazione a dati.  
  
-   Quando la <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> proprietà del <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attributo è impostato su `Always` o `WhenChanged`.  
  
 Se il <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> è impostata su `Never` e il valore non viene visualizzato in un controllo con associazione a dati, il valore non viene archiviato nella pagina Web. In tal caso, non può essere assegnato per il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento. Nell'esempio viene illustrato come confrontare le proprietà dal <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà e i <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà per determinare se il valore nel `Category` proprietà è stata modificata. In questo caso, il `CategoryChanged` proprietà dell'oggetto nel <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> è impostata su `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>