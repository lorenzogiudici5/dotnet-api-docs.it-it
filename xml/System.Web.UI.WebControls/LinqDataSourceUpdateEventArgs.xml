<Type Name="LinqDataSourceUpdateEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs">
  <TypeSignature Language="C#" Value="public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceUpdateEventArgs extends System.ComponentModel.CancelEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceUpdateEventArgs&#xA;Inherits CancelEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceUpdateEventArgs : System::ComponentModel::CancelEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.CancelEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="bd333-101">Fornisce dati per l'evento <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" />.</span><span class="sxs-lookup"><span data-stu-id="bd333-101">Provides data for the <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updating" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd333-102">Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> oggetto viene passato a un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.</span><span class="sxs-lookup"><span data-stu-id="bd333-102">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object is passed to any event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="bd333-103">È possibile utilizzare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> oggetto per esaminare i dati prima che venga eseguita l'operazione di aggiornamento nell'origine dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-103">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> object to examine the data before the update operation is executed in the data source.</span></span> <span data-ttu-id="bd333-104">È quindi possibile convalidare i dati, esaminare le eccezioni di convalida generate dalla classe di dati o modificare un valore prima dell'aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="bd333-104">You can then validate the data, examine validation exceptions thrown by the data class, or change a value before the update.</span></span> <span data-ttu-id="bd333-105">È anche possibile annullare l'operazione di aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="bd333-105">You can also cancel the update operation.</span></span>  
  
 <span data-ttu-id="bd333-106">Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> oggetto contiene i dati che sono stati recuperati dall'origine dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-106">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> object contains the data that was originally retrieved from the data source.</span></span> <span data-ttu-id="bd333-107">Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> oggetto contiene i dati che verranno salvati nell'origine dati durante l'operazione di aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="bd333-107">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> object contains the data that will be saved in the data source during the update operation.</span></span>  
  
 <span data-ttu-id="bd333-108">Se l'oggetto che rappresenta l'origine dati genera un'eccezione di convalida prima di aggiornare i dati, il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> proprietà contiene un'istanza di <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> classe.</span><span class="sxs-lookup"><span data-stu-id="bd333-108">If the object that represents the data source throws a validation exception before updating the data, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains an instance of the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> class.</span></span> <span data-ttu-id="bd333-109">È possibile recuperare tutte le eccezioni di convalida tramite il <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="bd333-109">You can retrieve all the validation exceptions through the <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> property.</span></span> <span data-ttu-id="bd333-110">Se non viene generata alcuna eccezione di convalida, il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> contiene proprietà `null`.</span><span class="sxs-lookup"><span data-stu-id="bd333-110">If no validation exception is thrown, the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property contains `null`.</span></span> <span data-ttu-id="bd333-111">Se si gestiscono le eccezioni di convalida e non si desidera che l'eccezione venga generata nuovamente, impostare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="bd333-111">If you handle the validation exceptions and do not want the exception to be re-thrown, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="bd333-112">Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource> controllo Archivia i valori originali dell'origine dati nella visualizzazione stato della pagina Web, ad eccezione di quelli il cui <xref:System.Data.Linq.Mapping.ColumnAttribute> attributo è contrassegnato come `UpdateCheck.Never`.</span><span class="sxs-lookup"><span data-stu-id="bd333-112">By default, the <xref:System.Web.UI.WebControls.LinqDataSource> control stores the original values from the data source in view state on the Web page, except those whose <xref:System.Data.Linq.Mapping.ColumnAttribute> attribute is marked as `UpdateCheck.Never`.</span></span> <span data-ttu-id="bd333-113">LINQ to SQL controlla automaticamente l'integrità dei dati prima di aggiornare i dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-113">LINQ to SQL automatically checks the integrity of the data before updating the data.</span></span> <span data-ttu-id="bd333-114">Questa operazione, confrontando i valori correnti dell'origine dati con i valori originali memorizzati in stato di visualizzazione.</span><span class="sxs-lookup"><span data-stu-id="bd333-114">It does this by comparing the current values in the data source with the original values stored in view state.</span></span> <span data-ttu-id="bd333-115">LINQ to SQL genera un'eccezione se sono stati modificati i valori nell'origine dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-115">LINQ to SQL raises an exception if the values in the data source have changed.</span></span> <span data-ttu-id="bd333-116">È possibile eseguire la convalida dei dati aggiuntivi tramite la creazione di un gestore per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.</span><span class="sxs-lookup"><span data-stu-id="bd333-116">You can perform additional data validation by creating a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd333-117">Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.</span><span class="sxs-lookup"><span data-stu-id="bd333-117">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="bd333-118">Nell'esempio viene illustrato come confrontare le proprietà dal <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà e <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà per determinare se il valore di `Category` proprietà è stata modificata.</span><span class="sxs-lookup"><span data-stu-id="bd333-118">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="bd333-119">In questo caso, il `CategoryChanged` proprietà dell'oggetto nel <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> è impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="bd333-119">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 <span data-ttu-id="bd333-120">Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.</span><span class="sxs-lookup"><span data-stu-id="bd333-120">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="bd333-121">Vengono visualizzati gli eventuali messaggi di eccezione di convalida utilizzando un <xref:System.Web.UI.WebControls.Label> controllo.</span><span class="sxs-lookup"><span data-stu-id="bd333-121">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bd333-122">Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</span><span class="sxs-lookup"><span data-stu-id="bd333-122">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.LinqDataSourceValidationException exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As LinqDataSourceValidationException)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Web::UI::WebControls::LinqDataSourceValidationException ^ exception);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Web.UI.WebControls.LinqDataSourceValidationException" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="bd333-123">L'eccezione che si è verificata durante la convalida dei dati da aggiornare.</span><span class="sxs-lookup"><span data-stu-id="bd333-123">The exception that occurred when validating the data to update.</span></span></param>
        <summary><span data-ttu-id="bd333-124">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> con l'eccezione specificata.</span><span class="sxs-lookup"><span data-stu-id="bd333-124">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class with the specified exception.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object originalObject, object newObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (originalObject As Object, newObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceUpdateEventArgs(System::Object ^ originalObject, System::Object ^ newObject);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="originalObject" Type="System.Object" />
        <Parameter Name="newObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="originalObject"><span data-ttu-id="bd333-125">Oggetto del tipo specificato nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> che contiene i valori iniziali recuperati dall'origine dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-125">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the initial values that were retrieved from the data source.</span></span></param>
        <param name="newObject"><span data-ttu-id="bd333-126">Oggetto del tipo specificato nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> che contiene i valori che verranno salvati nell'origine dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-126">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the values that will be saved in the data source.</span></span></param>
        <summary><span data-ttu-id="bd333-127">Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" />.</span><span class="sxs-lookup"><span data-stu-id="bd333-127">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.LinqDataSourceValidationException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As LinqDataSourceValidationException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LinqDataSourceValidationException ^ Exception { System::Web::UI::WebControls::LinqDataSourceValidationException ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceValidationException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd333-128">Ottiene l'eccezione generata durante la convalida dei dati prima dell'operazione di aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="bd333-128">Gets the exception that was thrown while the data was being validated before the update operation.</span></span></summary>
        <value><span data-ttu-id="bd333-129">L’eccezione, se si verifica un errore; in caso contrario, <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="bd333-129">The exception, if an error occurred; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd333-130">Se prima di eseguita l'operazione di aggiornamento, viene generata un'eccezione di convalida, l'eccezione viene archiviata nella <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="bd333-130">If a validation exception is raised before the update operation is performed, the exception is stored in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span> <span data-ttu-id="bd333-131">In un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento, è possibile recuperare l'eccezione tramite la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="bd333-131">In an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event, you can retrieve the exception through the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd333-132">Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.</span><span class="sxs-lookup"><span data-stu-id="bd333-132">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="bd333-133">Vengono visualizzati gli eventuali messaggi di eccezione di convalida utilizzando un <xref:System.Web.UI.WebControls.Label> controllo.</span><span class="sxs-lookup"><span data-stu-id="bd333-133">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd333-134">Ottiene o imposta un valore che indica se l'eccezione è stata gestita e non deve essere nuovamente generata.</span><span class="sxs-lookup"><span data-stu-id="bd333-134">Gets or sets a value that indicates whether the exception was handled and that it should not be thrown again.</span></span></summary>
        <value>
          <span data-ttu-id="bd333-135"><see langword="true" /> se l'eccezione è stata gestita; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="bd333-135"><see langword="true" /> if the exception was handled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd333-136">È possibile creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento per esaminare le eccezioni di convalida che si è verificato prima dell'operazione di aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="bd333-136">You can create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event to examine validation exceptions that occurred before the update operation.</span></span> <span data-ttu-id="bd333-137">Se si gestisce l'eccezione e non si desidera che venga generata nuovamente, impostare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="bd333-137">If you handle the exception and do not want it to be thrown again, set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`.</span></span> <span data-ttu-id="bd333-138">Se non si imposta la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> proprietà `true`, l'eccezione verrà propagata al gestore dell'evento successivo nello stack di chiamate.</span><span class="sxs-lookup"><span data-stu-id="bd333-138">If you do not set the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A> property to `true`, the exception will be propagated to the next event handler in the call stack.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd333-139">Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.</span><span class="sxs-lookup"><span data-stu-id="bd333-139">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="bd333-140">Vengono visualizzati gli eventuali messaggi di eccezione di convalida utilizzando un <xref:System.Web.UI.WebControls.Label> controllo.</span><span class="sxs-lookup"><span data-stu-id="bd333-140">It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.</span></span>  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewObject">
      <MemberSignature Language="C#" Value="public object NewObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd333-141">Ottiene l'oggetto che contiene i valori che verranno salvati nell'origine dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-141">Gets the object that contains the values that will be saved in the data source.</span></span></summary>
        <value><span data-ttu-id="bd333-142">Oggetto del tipo specificato nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> che contiene i dati da salvare.</span><span class="sxs-lookup"><span data-stu-id="bd333-142">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data to save.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd333-143">Creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento e recuperare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà per convalidare i dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-143">Create an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event and retrieve the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to validate the data.</span></span> <span data-ttu-id="bd333-144">È inoltre possibile modificare i dati o annullare l'operazione di aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="bd333-144">You can also change the data or cancel the update operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd333-145">Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.</span><span class="sxs-lookup"><span data-stu-id="bd333-145">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="bd333-146">Nell'esempio viene illustrato come confrontare le proprietà dal <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà e <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà per determinare se il valore di `Category` proprietà è stata modificata.</span><span class="sxs-lookup"><span data-stu-id="bd333-146">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="bd333-147">In questo caso, il `CategoryChanged` proprietà dell'oggetto nel <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> è impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="bd333-147">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalObject">
      <MemberSignature Language="C#" Value="public object OriginalObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd333-148">Ottiene l'oggetto che contiene i valori originariamente recuperati dall'origine dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-148">Gets the object that contains the values that were originally retrieved from the data source.</span></span></summary>
        <value><span data-ttu-id="bd333-149">Oggetto del tipo specificato nella proprietà <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> che contiene i dati recuperati dall'origine dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-149">An object of the type specified in the <see cref="P:System.Web.UI.WebControls.LinqDataSource.TableName" /> property that contains the data that was retrieved from the data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd333-150">È possibile utilizzare il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà per controllare i valori originali con i valori correnti dell'origine dati e per annullare l'operazione di aggiornamento o eseguire altre azioni.</span><span class="sxs-lookup"><span data-stu-id="bd333-150">You can use the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property to check the original values against the current values in the data source and to cancel the update operation or take other action.</span></span>  
  
 <span data-ttu-id="bd333-151">Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà contiene i valori per lo stato solo le proprietà che vengono mantenute nella visualizzazione della pagina Web.</span><span class="sxs-lookup"><span data-stu-id="bd333-151">The <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property contains values for only the properties that are persisted in view state in the Web page.</span></span> <span data-ttu-id="bd333-152">Una proprietà è persistente in queste circostanze:</span><span class="sxs-lookup"><span data-stu-id="bd333-152">A property is persisted under these circumstances:</span></span>  
  
-   <span data-ttu-id="bd333-153">Quando viene visualizzato in un controllo con associazione a dati.</span><span class="sxs-lookup"><span data-stu-id="bd333-153">When it is displayed in a data-bound control.</span></span>  
  
-   <span data-ttu-id="bd333-154">Quando il <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> proprietà del <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attributo è impostato su `Always` o `WhenChanged`.</span><span class="sxs-lookup"><span data-stu-id="bd333-154">When the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=nameWithType> property of the <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=nameWithType> attribute is set to `Always` or `WhenChanged`.</span></span>  
  
 <span data-ttu-id="bd333-155">Se il <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> è impostata su `Never` e il valore non viene visualizzato in un controllo con associazione a dati, il valore non viene archiviato nella pagina Web.</span><span class="sxs-lookup"><span data-stu-id="bd333-155">If the <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> property is set to `Never` and the value is not displayed in a data-bound control, the value is not stored in the Web page.</span></span> <span data-ttu-id="bd333-156">In tal caso, non può essere assegnato per il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="bd333-156">In that case, it cannot be assigned to the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd333-157">Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updating> evento.</span><span class="sxs-lookup"><span data-stu-id="bd333-157">The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event.</span></span> <span data-ttu-id="bd333-158">Nell'esempio viene illustrato come confrontare le proprietà dal <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> proprietà e <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> proprietà per determinare se il valore di `Category` proprietà è stata modificata.</span><span class="sxs-lookup"><span data-stu-id="bd333-158">The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed.</span></span> <span data-ttu-id="bd333-159">In questo caso, il `CategoryChanged` proprietà dell'oggetto nel <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> è impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="bd333-159">If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.</span></span>  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>